{"files":[{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","app.rs"],"content":"use clap::{crate_version, App, AppSettings, Arg};\n\npub fn build_app() -> App<'static, 'static> {\n    let mut app = App::new(\"fd\")\n        .version(crate_version!())\n        .usage(\"fd [FLAGS/OPTIONS] [<pattern>] [<path>...]\")\n        .setting(AppSettings::ColoredHelp)\n        .setting(AppSettings::DeriveDisplayOrder)\n        .after_help(\n            \"Note: `fd -h` prints a short and concise overview while `fd --help` gives all \\\n                 details.\",\n        )\n        .arg(\n            Arg::with_name(\"hidden\")\n                .long(\"hidden\")\n                .short(\"H\")\n                .overrides_with(\"hidden\")\n                .help(\"Search hidden files and directories\")\n                .long_help(\n                    \"Include hidden directories and files in the search results (default: \\\n                         hidden files and directories are skipped). Files and directories are \\\n                         considered to be hidden if their name starts with a `.` sign (dot).\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"no-ignore\")\n                .long(\"no-ignore\")\n                .short(\"I\")\n                .overrides_with(\"no-ignore\")\n                .help(\"Do not respect .(git|fd)ignore files\")\n                .long_help(\n                    \"Show search results from files and directories that would otherwise be \\\n                         ignored by '.gitignore', '.ignore', '.fdignore', or the global ignore file.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"no-ignore-vcs\")\n                .long(\"no-ignore-vcs\")\n                .overrides_with(\"no-ignore-vcs\")\n                .hidden_short_help(true)\n                .long_help(\n                    \"Show search results from files and directories that would otherwise be \\\n                         ignored by '.gitignore' files.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"no-global-ignore-file\")\n                .long(\"no-global-ignore-file\")\n                .hidden(true)\n                .long_help(\"Do not respect the global ignore file.\"),\n        )\n        .arg(\n            Arg::with_name(\"rg-alias-hidden-ignore\")\n                .short(\"u\")\n                .long(\"unrestricted\")\n                .multiple(true)\n                .hidden_short_help(true)\n                .long_help(\n                    \"Alias for '--no-ignore'. Can be repeated. '-uu' is an alias for \\\n                         '--no-ignore --hidden'.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"case-sensitive\")\n                .long(\"case-sensitive\")\n                .short(\"s\")\n                .overrides_with_all(&[\"ignore-case\", \"case-sensitive\"])\n                .help(\"Case-sensitive search (default: smart case)\")\n                .long_help(\n                    \"Perform a case-sensitive search. By default, fd uses case-insensitive \\\n                         searches, unless the pattern contains an uppercase character (smart \\\n                         case).\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"ignore-case\")\n                .long(\"ignore-case\")\n                .short(\"i\")\n                .overrides_with_all(&[\"case-sensitive\", \"ignore-case\"])\n                .help(\"Case-insensitive search (default: smart case)\")\n                .long_help(\n                    \"Perform a case-insensitive search. By default, fd uses case-insensitive \\\n                         searches, unless the pattern contains an uppercase character (smart \\\n                         case).\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"glob\")\n                .long(\"glob\")\n                .short(\"g\")\n                .conflicts_with(\"fixed-strings\")\n                .overrides_with(\"glob\")\n                .help(\"Glob-based search (default: regular expression)\")\n                .long_help(\"Perform a glob-based search instead of a regular expression search.\"),\n        )\n        .arg(\n            Arg::with_name(\"regex\")\n                .long(\"regex\")\n                .overrides_with_all(&[\"glob\", \"regex\"])\n                .hidden_short_help(true)\n                .long_help(\n                    \"Perform a regular-expression based search (default). This can be used to \\\n                         override --glob.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"fixed-strings\")\n                .long(\"fixed-strings\")\n                .short(\"F\")\n                .alias(\"literal\")\n                .overrides_with(\"fixed-strings\")\n                .hidden_short_help(true)\n                .long_help(\n                    \"Treat the pattern as a literal string instead of a regular expression.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"absolute-path\")\n                .long(\"absolute-path\")\n                .short(\"a\")\n                .overrides_with(\"absolute-path\")\n                .help(\"Show absolute instead of relative paths\")\n                .long_help(\n                    \"Shows the full path starting from the root as opposed to relative paths.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"list-details\")\n                .long(\"list-details\")\n                .short(\"l\")\n                .conflicts_with(\"absolute-path\")\n                .help(\"Use a long listing format with file metadata\")\n                .long_help(\n                    \"Use a detailed listing format like 'ls -l'. This is basically an alias \\\n                         for '--exec-batch ls -l' with some additional 'ls' options. This can be \\\n                         used to see more metadata, to show symlink targets and to achieve a \\\n                         deterministic sort order.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"follow\")\n                .long(\"follow\")\n                .short(\"L\")\n                .alias(\"dereference\")\n                .overrides_with(\"follow\")\n                .help(\"Follow symbolic links\")\n                .long_help(\n                    \"By default, fd does not descend into symlinked directories. Using this \\\n                         flag, symbolic links are also traversed.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"full-path\")\n                .long(\"full-path\")\n                .short(\"p\")\n                .overrides_with(\"full-path\")\n                .help(\"Search full path (default: file-/dirname only)\")\n                .long_help(\n                    \"By default, the search pattern is only matched against the filename (or \\\n                         directory name). Using this flag, the pattern is matched against the \\\n                         full path.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"null_separator\")\n                .long(\"print0\")\n                .short(\"0\")\n                .overrides_with(\"print0\")\n                .conflicts_with(\"list-details\")\n                .help(\"Separate results by the null character\")\n                .long_help(\n                    \"Separate search results by the null character (instead of newlines). \\\n                         Useful for piping results to 'xargs'.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"max-depth\")\n                .long(\"max-depth\")\n                .short(\"d\")\n                .takes_value(true)\n                .value_name(\"depth\")\n                .help(\"Set maximum search depth (default: none)\")\n                .long_help(\n                    \"Limit the directory traversal to a given depth. By default, there is no \\\n                         limit on the search depth.\",\n                ),\n        )\n        // support --maxdepth as well, for compatibility with rg\n        .arg(\n            Arg::with_name(\"rg-depth\")\n                .long(\"maxdepth\")\n                .hidden(true)\n                .takes_value(true)\n        )\n        .arg(\n            Arg::with_name(\"min-depth\")\n                .long(\"min-depth\")\n                .takes_value(true)\n                .value_name(\"depth\")\n                .hidden_short_help(true)\n                .long_help(\n                    \"Only show search results starting at the given depth. \\\n                     See also: '--max-depth' and '--exact-depth'\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"exact-depth\")\n                .long(\"exact-depth\")\n                .takes_value(true)\n                .value_name(\"depth\")\n                .hidden_short_help(true)\n                .conflicts_with_all(&[\"max-depth\", \"min-depth\"])\n                .long_help(\n                    \"Only show search results at the exact given depth. This is an alias for \\\n                     '--min-depth <depth> --max-depth <depth>'.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"file-type\")\n                .long(\"type\")\n                .short(\"t\")\n                .multiple(true)\n                .number_of_values(1)\n                .takes_value(true)\n                .value_name(\"filetype\")\n                .possible_values(&[\n                    \"f\",\n                    \"file\",\n                    \"d\",\n                    \"directory\",\n                    \"l\",\n                    \"symlink\",\n                    \"x\",\n                    \"executable\",\n                    \"e\",\n                    \"empty\",\n                    \"s\",\n                    \"socket\",\n                    \"p\",\n                    \"pipe\",\n                ])\n                .hide_possible_values(true)\n                .help(\n                    \"Filter by type: file (f), directory (d), symlink (l),\\nexecutable (x), \\\n                         empty (e), socket (s), pipe (p)\",\n                )\n                .long_help(\n                    \"Filter the search by type (multiple allowable filetypes can be specified):\\n  \\\n                       'f' or 'file':         regular files\\n  \\\n                       'd' or 'directory':    directories\\n  \\\n                       'l' or 'symlink':      symbolic links\\n  \\\n                       'x' or 'executable':   executables\\n  \\\n                       'e' or 'empty':        empty files or directories\\n  \\\n                       's' or 'socket':       socket\\n  \\\n                       'p' or 'pipe':         named pipe (FIFO)\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"extension\")\n                .long(\"extension\")\n                .short(\"e\")\n                .multiple(true)\n                .number_of_values(1)\n                .takes_value(true)\n                .value_name(\"ext\")\n                .help(\"Filter by file extension\")\n                .long_help(\n                    \"(Additionally) filter search results by their file extension. Multiple \\\n                         allowable file extensions can be specified.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"exec\")\n                .long(\"exec\")\n                .short(\"x\")\n                .min_values(1)\n                .allow_hyphen_values(true)\n                .value_terminator(\";\")\n                .value_name(\"cmd\")\n                .conflicts_with(\"list-details\")\n                .help(\"Execute a command for each search result\")\n                .long_help(\n                    \"Execute a command for each search result.\\n\\\n                     All arguments following --exec are taken to be arguments to the command until the \\\n                     argument ';' is encountered.\\n\\\n                     Each occurrence of the following placeholders is substituted by a path derived from the \\\n                     current search result before the command is executed:\\n  \\\n                       '{}':   path\\n  \\\n                       '{/}':  basename\\n  \\\n                       '{//}': parent directory\\n  \\\n                       '{.}':  path without file extension\\n  \\\n                       '{/.}': basename without file extension\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"exec-batch\")\n                .long(\"exec-batch\")\n                .short(\"X\")\n                .min_values(1)\n                .allow_hyphen_values(true)\n                .value_terminator(\";\")\n                .value_name(\"cmd\")\n                .conflicts_with_all(&[\"exec\", \"list-details\"])\n                .help(\"Execute a command with all search results at once\")\n                .long_help(\n                    \"Execute a command with all search results at once.\\n\\\n                     All arguments following --exec-batch are taken to be arguments to the command until the \\\n                     argument ';' is encountered.\\n\\\n                     A single occurrence of the following placeholders is authorized and substituted by the paths derived from the \\\n                     search results before the command is executed:\\n  \\\n                       '{}':   path\\n  \\\n                       '{/}':  basename\\n  \\\n                       '{//}': parent directory\\n  \\\n                       '{.}':  path without file extension\\n  \\\n                       '{/.}': basename without file extension\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"exclude\")\n                .long(\"exclude\")\n                .short(\"E\")\n                .takes_value(true)\n                .value_name(\"pattern\")\n                .number_of_values(1)\n                .multiple(true)\n                .help(\"Exclude entries that match the given glob pattern\")\n                .long_help(\n                    \"Exclude files/directories that match the given glob pattern. This \\\n                         overrides any other ignore logic. Multiple exclude patterns can be \\\n                         specified.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"ignore-file\")\n                .long(\"ignore-file\")\n                .takes_value(true)\n                .value_name(\"path\")\n                .number_of_values(1)\n                .multiple(true)\n                .hidden_short_help(true)\n                .long_help(\n                    \"Add a custom ignore-file in '.gitignore' format. These files have a low \\\n                         precedence.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"color\")\n                .long(\"color\")\n                .short(\"c\")\n                .takes_value(true)\n                .value_name(\"when\")\n                .possible_values(&[\"never\", \"auto\", \"always\"])\n                .hide_possible_values(true)\n                .help(\"When to use colors: never, *auto*, always\")\n                .long_help(\n                    \"Declare when to use color for the pattern match output:\\n  \\\n                       'auto':      show colors if the output goes to an interactive console (default)\\n  \\\n                       'never':     do not use colorized output\\n  \\\n                       'always':    always use colorized output\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"threads\")\n                .long(\"threads\")\n                .short(\"j\")\n                .takes_value(true)\n                .value_name(\"num\")\n                .hidden_short_help(true)\n                .long_help(\n                    \"Set number of threads to use for searching & executing (default: number \\\n                         of available CPU cores)\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"size\")\n                .long(\"size\")\n                .short(\"S\")\n                .takes_value(true)\n                .number_of_values(1)\n                .allow_hyphen_values(true)\n                .multiple(true)\n                .help(\"Limit results based on the size of files.\")\n                .long_help(\n                    \"Limit results based on the size of files using the format <+-><NUM><UNIT>.\\n   \\\n                        '+': file size must be greater than or equal to this\\n   \\\n                        '-': file size must be less than or equal to this\\n   \\\n                        'NUM':  The numeric size (e.g. 500)\\n   \\\n                        'UNIT': The units for NUM. They are not case-sensitive.\\n\\\n                     Allowed unit values:\\n    \\\n                         'b':  bytes\\n    \\\n                         'k':  kilobytes (base ten, 10^3 = 1000 bytes)\\n    \\\n                         'm':  megabytes\\n    \\\n                         'g':  gigabytes\\n    \\\n                         't':  terabytes\\n    \\\n                         'ki': kibibytes (base two, 2^10 = 1024 bytes)\\n    \\\n                         'mi': mebibytes\\n    \\\n                         'gi': gibibytes\\n    \\\n                         'ti': tebibytes\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"max-buffer-time\")\n                .long(\"max-buffer-time\")\n                .takes_value(true)\n                .hidden(true)\n                .long_help(\n                    \"Amount of time in milliseconds to buffer, before streaming the search \\\n                         results to the console.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"changed-within\")\n                .long(\"changed-within\")\n                .alias(\"change-newer-than\")\n                .takes_value(true)\n                .value_name(\"date|dur\")\n                .number_of_values(1)\n                .help(\"Filter by file modification time (newer than)\")\n                .long_help(\n                    \"Filter results based on the file modification time. The argument can be provided \\\n                     as a specific point in time (YYYY-MM-DD HH:MM:SS) or as a duration (10h, 1d, 35min). \\\n                     '--change-newer-than' can be used as an alias.\\n\\\n                     Examples:\\n    \\\n                         --changed-within 2weeks\\n    \\\n                         --change-newer-than '2018-10-27 10:00:00'\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"changed-before\")\n                .long(\"changed-before\")\n                .alias(\"change-older-than\")\n                .takes_value(true)\n                .value_name(\"date|dur\")\n                .number_of_values(1)\n                .help(\"Filter by file modification time (older than)\")\n                .long_help(\n                    \"Filter results based on the file modification time. The argument can be provided \\\n                     as a specific point in time (YYYY-MM-DD HH:MM:SS) or as a duration (10h, 1d, 35min). \\\n                     '--change-older-than' can be used as an alias.\\n\\\n                     Examples:\\n    \\\n                         --changed-before '2018-10-27 10:00:00'\\n    \\\n                         --change-older-than 2weeks\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"max-results\")\n                .long(\"max-results\")\n                .takes_value(true)\n                .value_name(\"count\")\n                // We currently do not support --max-results in combination with\n                // program execution because the results that come up in a --max-results\n                // search are non-deterministic. Users might think that they can run the\n                // same search with `--exec rm` attached and get a reliable removal of\n                // the files they saw in the previous search.\n                .conflicts_with_all(&[\"exec\", \"exec-batch\", \"list-details\"])\n                .hidden_short_help(true)\n                .long_help(\"Limit the number of search results to 'count' and quit immediately.\"),\n        )\n        .arg(\n            Arg::with_name(\"max-one-result\")\n                .short(\"1\")\n                .hidden_short_help(true)\n                .overrides_with(\"max-results\")\n                .conflicts_with_all(&[\"exec\", \"exec-batch\", \"list-details\"])\n                .long_help(\"Limit the search to a single result and quit immediately. \\\n                                This is an alias for '--max-results=1'.\")\n        )\n        .arg(\n            Arg::with_name(\"show-errors\")\n                .long(\"show-errors\")\n                .hidden_short_help(true)\n                .overrides_with(\"show-errors\")\n                .long_help(\n                    \"Enable the display of filesystem errors for situations such as \\\n                         insufficient permissions or dead symlinks.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"base-directory\")\n                .long(\"base-directory\")\n                .takes_value(true)\n                .value_name(\"path\")\n                .number_of_values(1)\n                .hidden_short_help(true)\n                .long_help(\n                    \"Change the current working directory of fd to the provided path. The \\\n                         means that search results will be shown with respect to the given base \\\n                         path. Note that relative paths which are passed to fd via the positional \\\n                         <path> argument or the '--search-path' option will also be resolved \\\n                         relative to this directory.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"pattern\").help(\n                \"the search pattern - a regular expression unless '--glob' is used (optional)\",\n            ),\n        )\n        .arg(\n            Arg::with_name(\"path-separator\")\n                .takes_value(true)\n                .value_name(\"separator\")\n                .long(\"path-separator\")\n                .hidden_short_help(true)\n                .long_help(\n                    \"Set the path separator to use when printing file paths. The default is \\\n                         the OS-specific separator ('/' on Unix, '\\\\' on Windows).\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"path\")\n                .multiple(true)\n                .help(\"the root directory for the filesystem search (optional)\")\n                .long_help(\n                    \"The directory where the filesystem search is rooted (optional). If \\\n                         omitted, search the current working directory.\",\n                ),\n        )\n        .arg(\n            Arg::with_name(\"search-path\")\n                .long(\"search-path\")\n                .takes_value(true)\n                .conflicts_with(\"path\")\n                .multiple(true)\n                .hidden_short_help(true)\n                .number_of_values(1)\n                .long_help(\n                    \"Provide paths to search as an alternative to the positional <path> \\\n                         argument. Changes the usage to `fd [FLAGS/OPTIONS] --search-path <path> \\\n                         --search-path <path2> [<pattern>]`\",\n                ),\n        );\n\n    if cfg!(unix) {\n        app = app.arg(\n            Arg::with_name(\"owner\")\n                .long(\"owner\")\n                .short(\"o\")\n                .takes_value(true)\n                .value_name(\"user:group\")\n                .help(\"Filter by owning user and/or group\")\n                .long_help(\n                    \"Filter files by their user and/or group. \\\n                     Format: [(user|uid)][:(group|gid)]. Either side is optional. \\\n                     Precede either side with a '!' to exclude files instead.\\n\\\n                     Examples:\\n    \\\n                         --owner john\\n    \\\n                         --owner :students\\n    \\\n                         --owner '!john:students'\",\n                ),\n        );\n    }\n\n    // Make `--one-file-system` available only on Unix and Windows platforms, as per the\n    // restrictions on the corresponding option in the `ignore` crate.\n    // Provide aliases `mount` and `xdev` for people coming from `find`.\n    if cfg!(any(unix, windows)) {\n        app = app.arg(\n            Arg::with_name(\"one-file-system\")\n                .long(\"one-file-system\")\n                .aliases(&[\"mount\", \"xdev\"])\n                .hidden_short_help(true)\n                .long_help(\n                    \"By default, fd will traverse the file system tree as far as other options \\\n                     dictate. With this flag, fd ensures that it does not descend into a \\\n                     different file system than the one it started in. Comparable to the -mount \\\n                     or -xdev filters of find(1).\",\n                ),\n        );\n    }\n\n    app\n}\n","traces":[{"line":3,"address":[4223760,4224148],"length":1,"stats":{"Line":0},"fn_name":"build_app"},{"line":14,"address":[4224333],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[4224610],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[4224887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[4225122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[4225318],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[4225581,4225693],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[4225686],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[4225970,4225858],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[4225963],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[4226135],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[4226528,4226451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[4226521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[4226686],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[4226991],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[4227268],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[4227545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[4227857],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[4228134],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[4228450],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[4228759],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[4228948],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[4229215,4229395],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[4229388],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[4229768,4229521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[4229761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":259,"address":[4229965],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[4230338],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[4230757,4231011],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[4231004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":319,"address":[4231176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":334,"address":[4231549],"length":1,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[4231880,4232063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":352,"address":[4232056],"length":1,"stats":{"Line":0},"fn_name":null},{"line":363,"address":[4232260],"length":1,"stats":{"Line":0},"fn_name":null},{"line":375,"address":[4232562],"length":1,"stats":{"Line":0},"fn_name":null},{"line":402,"address":[4232928],"length":1,"stats":{"Line":0},"fn_name":null},{"line":412,"address":[4233156],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[4233497],"length":1,"stats":{"Line":0},"fn_name":null},{"line":446,"address":[4233986,4233838],"length":1,"stats":{"Line":0},"fn_name":null},{"line":455,"address":[4233979],"length":1,"stats":{"Line":0},"fn_name":null},{"line":460,"address":[4234144,4234288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":464,"address":[4234281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":469,"address":[4234414],"length":1,"stats":{"Line":0},"fn_name":null},{"line":479,"address":[4234649],"length":1,"stats":{"Line":0},"fn_name":null},{"line":494,"address":[4234948],"length":1,"stats":{"Line":0},"fn_name":null},{"line":499,"address":[4235073],"length":1,"stats":{"Line":0},"fn_name":null},{"line":510,"address":[4235340],"length":1,"stats":{"Line":0},"fn_name":null},{"line":519,"address":[4235533],"length":1,"stats":{"Line":0},"fn_name":null},{"line":534,"address":[4236216,4236144,4235850],"length":1,"stats":{"Line":0},"fn_name":null},{"line":535,"address":[4235885],"length":1,"stats":{"Line":0},"fn_name":null},{"line":557,"address":[4236505,4236453,4236231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":558,"address":[4236350,4236269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":560,"address":[4236343],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":54},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","error.rs"],"content":"pub fn print_error(msg: impl Into<String>) {\n    eprintln!(\"[fd error]: {}\", msg.into());\n}\n","traces":[{"line":1,"address":[4570800,4570869],"length":1,"stats":{"Line":0},"fn_name":"print_error<alloc::string::String>"},{"line":2,"address":[4570807,4570889],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exec","command.rs"],"content":"use std::io;\nuse std::io::Write;\nuse std::process::Command;\nuse std::sync::Mutex;\n\nuse crate::error::print_error;\nuse crate::exit_codes::ExitCode;\n\n/// Executes a command.\npub fn execute_command(mut cmd: Command, out_perm: &Mutex<()>) -> ExitCode {\n    // Spawn the supplied command.\n    let output = cmd.output();\n\n    // Then wait for the command to exit, if it was spawned.\n    match output {\n        Ok(output) => {\n            // While this lock is active, this thread will be the only thread allowed\n            // to write its outputs.\n            let _lock = out_perm.lock().unwrap();\n\n            let stdout = io::stdout();\n            let stderr = io::stderr();\n\n            let _ = stdout.lock().write_all(&output.stdout);\n            let _ = stderr.lock().write_all(&output.stderr);\n\n            if output.status.code() == Some(0) {\n                ExitCode::Success\n            } else {\n                ExitCode::GeneralError\n            }\n        }\n        Err(ref why) if why.kind() == io::ErrorKind::NotFound => {\n            print_error(format!(\"Command not found: {:?}\", cmd));\n            ExitCode::GeneralError\n        }\n        Err(why) => {\n            print_error(format!(\"Problem while executing command: {}\", why));\n            ExitCode::GeneralError\n        }\n    }\n}\n","traces":[{"line":10,"address":[4795360,4795432],"length":1,"stats":{"Line":0},"fn_name":"execute_command"},{"line":12,"address":[4795375,4795447],"length":1,"stats":{"Line":0},"fn_name":null},{"line":15,"address":[4796888,4796261,4795490,4796694],"length":1,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[4795455,4795492],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[4795556,4795667],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[4795689],"length":1,"stats":{"Line":0},"fn_name":null},{"line":22,"address":[4795724,4795767],"length":1,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[4795775,4795826],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[4795954],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[4796198,4796105],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[4796200],"length":1,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[4796190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[4796254,4796266,4795644],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[4796368,4796548],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[4796686],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[4796442],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[4796704,4796466,4796787],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[4796861],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":18},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exec","input.rs"],"content":"use std::ffi::{OsStr, OsString};\nuse std::path::{Path, PathBuf};\n\nuse crate::filesystem::strip_current_dir;\n\n/// Removes the parent component of the path\npub fn basename(path: &Path) -> &OsStr {\n    path.file_name().unwrap_or_else(|| path.as_os_str())\n}\n\n/// Removes the extension from the path\npub fn remove_extension(path: &Path) -> OsString {\n    let dirname = dirname(path);\n    let stem = path.file_stem().unwrap_or_else(|| path.as_os_str());\n\n    let path = PathBuf::from(dirname).join(stem);\n\n    strip_current_dir(&path).to_owned().into_os_string()\n}\n\n/// Removes the basename from the path.\npub fn dirname(path: &Path) -> OsString {\n    path.parent()\n        .map(|p| {\n            if p == OsStr::new(\"\") {\n                OsString::from(\".\")\n            } else {\n                p.as_os_str().to_owned()\n            }\n        })\n        .unwrap_or_else(|| path.as_os_str().to_owned())\n}\n\n#[cfg(test)]\nmod path_tests {\n    use super::*;\n    use std::path::MAIN_SEPARATOR;\n\n    fn correct(input: &str) -> String {\n        input.replace('/', &MAIN_SEPARATOR.to_string())\n    }\n\n    macro_rules! func_tests {\n        ($($name:ident: $func:ident for $input:expr => $output:expr)+) => {\n            $(\n                #[test]\n                fn $name() {\n                    let input_path = PathBuf::from(&correct($input));\n                    let output_string = OsString::from(correct($output));\n                    assert_eq!($func(&input_path), output_string);\n                }\n            )+\n        }\n    }\n\n    func_tests! {\n        remove_ext_simple:  remove_extension  for  \"foo.txt\"      =>  \"foo\"\n        remove_ext_dir:     remove_extension  for  \"dir/foo.txt\"  =>  \"dir/foo\"\n        hidden:             remove_extension  for  \".foo\"         =>  \".foo\"\n        remove_ext_utf8:    remove_extension  for  \"💖.txt\"       =>  \"💖\"\n        remove_ext_empty:   remove_extension  for  \"\"             =>  \"\"\n\n        basename_simple:  basename  for  \"foo.txt\"      =>  \"foo.txt\"\n        basename_dir:     basename  for  \"dir/foo.txt\"  =>  \"foo.txt\"\n        basename_empty:   basename  for  \"\"             =>  \"\"\n        basename_utf8_0:  basename  for  \"💖/foo.txt\"   =>  \"foo.txt\"\n        basename_utf8_1:  basename  for  \"dir/💖.txt\"   =>  \"💖.txt\"\n\n        dirname_simple:  dirname  for  \"foo.txt\"      =>  \".\"\n        dirname_dir:     dirname  for  \"dir/foo.txt\"  =>  \"dir\"\n        dirname_utf8_0:  dirname  for  \"💖/foo.txt\"   =>  \"💖\"\n        dirname_utf8_1:  dirname  for  \"dir/💖.txt\"   =>  \"dir\"\n    }\n\n    #[test]\n    #[cfg(windows)]\n    fn dirname_root() {\n        assert_eq!(dirname(&PathBuf::from(\"C:\")), OsString::from(\"C:\"));\n        assert_eq!(dirname(&PathBuf::from(\"\\\\\")), OsString::from(\"\\\\\"));\n    }\n\n    #[test]\n    #[cfg(not(windows))]\n    fn dirname_root() {\n        assert_eq!(dirname(&PathBuf::from(\"/\")), OsString::from(\"/\"));\n    }\n}\n","traces":[{"line":7,"address":[4603856],"length":1,"stats":{"Line":1},"fn_name":"basename"},{"line":8,"address":[4481113,4481104],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":12,"address":[4603952,4604026],"length":1,"stats":{"Line":2},"fn_name":"remove_extension"},{"line":13,"address":[4603972],"length":1,"stats":{"Line":2},"fn_name":null},{"line":14,"address":[4604041],"length":1,"stats":{"Line":4},"fn_name":null},{"line":16,"address":[4604156],"length":1,"stats":{"Line":2},"fn_name":null},{"line":18,"address":[4604358],"length":1,"stats":{"Line":2},"fn_name":null},{"line":22,"address":[4604592],"length":1,"stats":{"Line":1},"fn_name":"dirname"},{"line":23,"address":[4604609,4604678],"length":1,"stats":{"Line":2},"fn_name":null},{"line":24,"address":[4481200],"length":1,"stats":{"Line":1},"fn_name":"{{closure}}"},{"line":25,"address":[4481217,4481368],"length":1,"stats":{"Line":2},"fn_name":null},{"line":26,"address":[4481331],"length":1,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[4481291,4481362],"length":1,"stats":{"Line":2},"fn_name":null},{"line":31,"address":[4481392,4481404],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":39,"address":[4388448,4388510],"length":1,"stats":{"Line":1},"fn_name":"correct"},{"line":40,"address":[4388527,4388465],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[4298885,4298624,4298816,4298912,4298560,4298725,4298528,4298533,4298592,4298693,4298656,4298688,4298565,4298597,4298757,4298789,4298784,4298848,4298853,4298880,4298629,4298917,4298944,4298752,4298949,4298661,4298720,4298821],"length":1,"stats":{"Line":42},"fn_name":"{{closure}}"},{"line":48,"address":[4389454,4392769,4397438,4393502,4395838,4398254,4389505,4393553,4395889,4396622,4395054,4397489,4391086,4396673,4390270,4388689,4391137,4388638,4391949,4395105,4391899,4394283,4394333,4398305,4390321,4392718,4399070,4399121],"length":1,"stats":{"Line":28},"fn_name":null},{"line":49,"address":[4395160,4397544,4399176,4389560,4388744,4392004,4393608,4390376,4394388,4392824,4391192,4395944,4396728,4398360],"length":1,"stats":{"Line":14},"fn_name":null},{"line":50,"address":[4397603,4388803,4389619,4389688,4394655,4393876,4392951,4398488,4399304,4399235,4388872,4392131,4390504,4395219,4393735,4396071,4394514,4394446,4395428,4396856,4390435,4391251,4393667,4393092,4396212,4392883,4396787,4391320,4395287,4396003,4397672,4392062,4398419],"length":1,"stats":{"Line":28},"fn_name":null},{"line":84,"address":[4298981,4298976],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":85,"address":[4399886,4399933],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":22,"coverable":22},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exec","job.rs"],"content":"use std::path::PathBuf;\nuse std::sync::mpsc::Receiver;\nuse std::sync::{Arc, Mutex};\n\nuse crate::error::print_error;\nuse crate::exit_codes::{merge_exitcodes, ExitCode};\nuse crate::walk::WorkerResult;\n\nuse super::CommandTemplate;\n\n/// An event loop that listens for inputs from the `rx` receiver. Each received input will\n/// generate a command with the supplied command template. The generated command will then\n/// be executed, and this process will continue until the receiver's sender has closed.\npub fn job(\n    rx: Arc<Mutex<Receiver<WorkerResult>>>,\n    cmd: Arc<CommandTemplate>,\n    out_perm: Arc<Mutex<()>>,\n    show_filesystem_errors: bool,\n) -> ExitCode {\n    let mut results: Vec<ExitCode> = Vec::new();\n    loop {\n        // Create a lock on the shared receiver for this thread.\n        let lock = rx.lock().unwrap();\n\n        // Obtain the next result from the receiver, else if the channel\n        // has closed, exit from the loop\n        let value: PathBuf = match lock.recv() {\n            Ok(WorkerResult::Entry(val)) => val,\n            Ok(WorkerResult::Error(err)) => {\n                if show_filesystem_errors {\n                    print_error(err.to_string());\n                }\n                continue;\n            }\n            Err(_) => break,\n        };\n\n        // Drop the lock so that other threads can read from the receiver.\n        drop(lock);\n        // Generate a command, execute it and store its exit code.\n        results.push(cmd.generate_and_execute(&value, Arc::clone(&out_perm)))\n    }\n    // Returns error in case of any error.\n    merge_exitcodes(&results)\n}\n\npub fn batch(\n    rx: Receiver<WorkerResult>,\n    cmd: &CommandTemplate,\n    show_filesystem_errors: bool,\n) -> ExitCode {\n    let paths = rx.iter().filter_map(|value| match value {\n        WorkerResult::Entry(val) => Some(val),\n        WorkerResult::Error(err) => {\n            if show_filesystem_errors {\n                print_error(err.to_string());\n            }\n            None\n        }\n    });\n    cmd.generate_and_execute_batch(paths)\n}\n","traces":[{"line":14,"address":[4503344,4503410],"length":1,"stats":{"Line":0},"fn_name":"job"},{"line":20,"address":[4503383],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[4504316,4503425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[4503474,4503514],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[4503592,4503670],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[4503694,4503624],"length":1,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[4503880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[4503923,4503992],"length":1,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[4503931],"length":1,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[4504068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[4503973,4503994],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[4504452],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[4504159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[4504112,4504331],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[4504688,4504736],"length":1,"stats":{"Line":0},"fn_name":"batch"},{"line":52,"address":[4504724,4504753,4504802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[4571333,4571250],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4571284],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[4571316,4571438,4571492],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[4571440],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4571499],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4504822],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":22},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exec","mod.rs"],"content":"mod command;\nmod input;\nmod job;\nmod token;\n\nuse std::ffi::OsString;\nuse std::path::{Path, PathBuf};\nuse std::process::{Command, Stdio};\nuse std::sync::{Arc, Mutex};\n\nuse anyhow::{anyhow, Result};\nuse lazy_static::lazy_static;\nuse regex::Regex;\n\nuse crate::exit_codes::ExitCode;\nuse crate::filesystem::strip_current_dir;\n\nuse self::command::execute_command;\nuse self::input::{basename, dirname, remove_extension};\npub use self::job::{batch, job};\nuse self::token::Token;\n\n/// Execution mode of the command\n#[derive(Debug, Clone, Copy, PartialEq)]\npub enum ExecutionMode {\n    /// Command is executed for each search result\n    OneByOne,\n    /// Command is run for a batch of results at once\n    Batch,\n}\n\n/// Represents a template that is utilized to generate command strings.\n///\n/// The template is meant to be coupled with an input in order to generate a command. The\n/// `generate_and_execute()` method will be used to generate a command and execute it.\n#[derive(Debug, Clone, PartialEq)]\npub struct CommandTemplate {\n    args: Vec<ArgumentTemplate>,\n    mode: ExecutionMode,\n}\n\nimpl CommandTemplate {\n    pub fn new<I, S>(input: I) -> CommandTemplate\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {\n        Self::build(input, ExecutionMode::OneByOne)\n    }\n\n    pub fn new_batch<I, S>(input: I) -> Result<CommandTemplate>\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {\n        let cmd = Self::build(input, ExecutionMode::Batch);\n        if cmd.number_of_tokens() > 1 {\n            return Err(anyhow!(\"Only one placeholder allowed for batch commands\"));\n        }\n        if cmd.args[0].has_tokens() {\n            return Err(anyhow!(\n                \"First argument of exec-batch is expected to be a fixed executable\"\n            ));\n        }\n        Ok(cmd)\n    }\n\n    fn build<I, S>(input: I, mode: ExecutionMode) -> CommandTemplate\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {\n        lazy_static! {\n            static ref PLACEHOLDER_PATTERN: Regex = Regex::new(r\"\\{(/?\\.?|//)\\}\").unwrap();\n        }\n\n        let mut args = Vec::new();\n        let mut has_placeholder = false;\n\n        for arg in input {\n            let arg = arg.as_ref();\n\n            let mut tokens = Vec::new();\n            let mut start = 0;\n\n            for placeholder in PLACEHOLDER_PATTERN.find_iter(arg) {\n                // Leading text before the placeholder.\n                if placeholder.start() > start {\n                    tokens.push(Token::Text(arg[start..placeholder.start()].to_owned()));\n                }\n\n                start = placeholder.end();\n\n                match placeholder.as_str() {\n                    \"{}\" => tokens.push(Token::Placeholder),\n                    \"{.}\" => tokens.push(Token::NoExt),\n                    \"{/}\" => tokens.push(Token::Basename),\n                    \"{//}\" => tokens.push(Token::Parent),\n                    \"{/.}\" => tokens.push(Token::BasenameNoExt),\n                    _ => unreachable!(\"Unhandled placeholder\"),\n                }\n\n                has_placeholder = true;\n            }\n\n            // Without a placeholder, the argument is just fixed text.\n            if tokens.is_empty() {\n                args.push(ArgumentTemplate::Text(arg.to_owned()));\n                continue;\n            }\n\n            if start < arg.len() {\n                // Trailing text after last placeholder.\n                tokens.push(Token::Text(arg[start..].to_owned()));\n            }\n\n            args.push(ArgumentTemplate::Tokens(tokens));\n        }\n\n        // If a placeholder token was not supplied, append one at the end of the command.\n        if !has_placeholder {\n            args.push(ArgumentTemplate::Tokens(vec![Token::Placeholder]));\n        }\n\n        CommandTemplate { args, mode }\n    }\n\n    fn number_of_tokens(&self) -> usize {\n        self.args.iter().filter(|arg| arg.has_tokens()).count()\n    }\n\n    /// Generates and executes a command.\n    ///\n    /// Using the internal `args` field, and a supplied `input` variable, a `Command` will be\n    /// build. Once all arguments have been processed, the command is executed.\n    pub fn generate_and_execute(&self, input: &Path, out_perm: Arc<Mutex<()>>) -> ExitCode {\n        let input = strip_current_dir(input);\n\n        let mut cmd = Command::new(self.args[0].generate(&input));\n        for arg in &self.args[1..] {\n            cmd.arg(arg.generate(&input));\n        }\n\n        execute_command(cmd, &out_perm)\n    }\n\n    pub fn in_batch_mode(&self) -> bool {\n        self.mode == ExecutionMode::Batch\n    }\n\n    pub fn generate_and_execute_batch<I>(&self, paths: I) -> ExitCode\n    where\n        I: Iterator<Item = PathBuf>,\n    {\n        let mut cmd = Command::new(self.args[0].generate(\"\"));\n        cmd.stdin(Stdio::inherit());\n        cmd.stdout(Stdio::inherit());\n        cmd.stderr(Stdio::inherit());\n\n        let mut paths: Vec<_> = paths.collect();\n        let mut has_path = false;\n\n        for arg in &self.args[1..] {\n            if arg.has_tokens() {\n                paths.sort();\n\n                // A single `Tokens` is expected\n                // So we can directly consume the iterator once and for all\n                for path in &mut paths {\n                    cmd.arg(arg.generate(strip_current_dir(path)));\n                    has_path = true;\n                }\n            } else {\n                cmd.arg(arg.generate(\"\"));\n            }\n        }\n\n        if has_path {\n            execute_command(cmd, &Mutex::new(()))\n        } else {\n            ExitCode::Success\n        }\n    }\n}\n\n/// Represents a template for a single command argument.\n///\n/// The argument is either a collection of `Token`s including at least one placeholder variant, or\n/// a fixed text.\n#[derive(Clone, Debug, PartialEq)]\nenum ArgumentTemplate {\n    Tokens(Vec<Token>),\n    Text(String),\n}\n\nimpl ArgumentTemplate {\n    pub fn has_tokens(&self) -> bool {\n        match self {\n            ArgumentTemplate::Tokens(_) => true,\n            _ => false,\n        }\n    }\n\n    pub fn generate(&self, path: impl AsRef<Path>) -> OsString {\n        use self::Token::*;\n\n        match *self {\n            ArgumentTemplate::Tokens(ref tokens) => {\n                let mut s = OsString::new();\n                for token in tokens {\n                    match *token {\n                        Basename => s.push(basename(path.as_ref())),\n                        BasenameNoExt => {\n                            s.push(remove_extension(&PathBuf::from(basename(path.as_ref()))))\n                        }\n                        NoExt => s.push(remove_extension(path.as_ref())),\n                        Parent => s.push(dirname(path.as_ref())),\n                        Placeholder => s.push(path.as_ref()),\n                        Text(ref string) => s.push(string),\n                    }\n                }\n                s\n            }\n            ArgumentTemplate::Text(ref text) => OsString::from(text),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn tokens_with_placeholder() {\n        assert_eq!(\n            CommandTemplate::new(&[&\"echo\", &\"${SHELL}:\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Text(\"${SHELL}:\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::Placeholder]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_with_no_extension() {\n        assert_eq!(\n            CommandTemplate::new(&[\"echo\", \"{.}\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::NoExt]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_with_basename() {\n        assert_eq!(\n            CommandTemplate::new(&[\"echo\", \"{/}\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::Basename]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_with_parent() {\n        assert_eq!(\n            CommandTemplate::new(&[\"echo\", \"{//}\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::Parent]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_with_basename_no_extension() {\n        assert_eq!(\n            CommandTemplate::new(&[\"echo\", \"{/.}\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::BasenameNoExt]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_multiple() {\n        assert_eq!(\n            CommandTemplate::new(&[\"cp\", \"{}\", \"{/.}.ext\"]),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"cp\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::Placeholder]),\n                    ArgumentTemplate::Tokens(vec![\n                        Token::BasenameNoExt,\n                        Token::Text(\".ext\".into())\n                    ]),\n                ],\n                mode: ExecutionMode::OneByOne,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_single_batch() {\n        assert_eq!(\n            CommandTemplate::new_batch(&[\"echo\", \"{.}\"]).unwrap(),\n            CommandTemplate {\n                args: vec![\n                    ArgumentTemplate::Text(\"echo\".into()),\n                    ArgumentTemplate::Tokens(vec![Token::NoExt]),\n                ],\n                mode: ExecutionMode::Batch,\n            }\n        );\n    }\n\n    #[test]\n    fn tokens_multiple_batch() {\n        assert!(CommandTemplate::new_batch(&[\"echo\", \"{.}\", \"{}\"]).is_err());\n    }\n}\n","traces":[{"line":43,"address":[4348016,4347952,4347856,4347904],"length":1,"stats":{"Line":4},"fn_name":"new<&[&str; 2],&&str>"},{"line":48,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":51,"address":[4348960,4349312,4348512,4348064,4348135,4348560,4348912,4349360],"length":1,"stats":{"Line":2},"fn_name":"new_batch<clap::args::arg_matches::Values,&str>"},{"line":56,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":68,"address":[4349712,4352544,4358208,4355487,4352655,4358319,4349823,4361040,4361143,4355376],"length":1,"stats":{"Line":3},"fn_name":"build<&alloc::vec::Vec<&str>,&&str>"},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[4665470],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":95,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":98,"address":[4353900,4351374,4359866,4359572,4356740,4362487,4357034,4351080,4362781,4354194],"length":1,"stats":{"Line":3},"fn_name":null},{"line":99,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":103,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":108,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":109,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":114,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":121,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":122,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":136,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[4364000,4364112],"length":1,"stats":{"Line":0},"fn_name":"generate_and_execute_batch<core::iter::adapters::FilterMap<std::sync::mpsc::Iter<fd::walk::WorkerResult>, closure-0>>"},{"line":155,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":198,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":199,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":200,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":204,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[4310848,4310874],"length":1,"stats":{"Line":3},"fn_name":"tokens_with_placeholder"},{"line":235,"address":[4311382,4311018],"length":1,"stats":{"Line":1},"fn_name":null},{"line":236,"address":[4310855],"length":1,"stats":{"Line":1},"fn_name":null},{"line":237,"address":[4311337],"length":1,"stats":{"Line":1},"fn_name":null},{"line":238,"address":[4311168,4310899,4311230,4311823,4311033],"length":1,"stats":{"Line":2},"fn_name":null},{"line":239,"address":[4310912],"length":1,"stats":{"Line":1},"fn_name":null},{"line":240,"address":[4310987,4311051],"length":1,"stats":{"Line":2},"fn_name":null},{"line":241,"address":[4311105,4311186],"length":1,"stats":{"Line":2},"fn_name":null},{"line":249,"address":[4311978,4311952],"length":1,"stats":{"Line":3},"fn_name":"tokens_with_no_extension"},{"line":250,"address":[4312369,4312164],"length":1,"stats":{"Line":1},"fn_name":null},{"line":251,"address":[4311959],"length":1,"stats":{"Line":1},"fn_name":null},{"line":252,"address":[4312324],"length":1,"stats":{"Line":1},"fn_name":null},{"line":253,"address":[4312807,4312241,4312003,4312179],"length":1,"stats":{"Line":2},"fn_name":null},{"line":254,"address":[4312016],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[4312197,4312101],"length":1,"stats":{"Line":2},"fn_name":null},{"line":263,"address":[4312912,4312938],"length":1,"stats":{"Line":3},"fn_name":"tokens_with_basename"},{"line":264,"address":[4313329,4313124],"length":1,"stats":{"Line":1},"fn_name":null},{"line":265,"address":[4312919],"length":1,"stats":{"Line":1},"fn_name":null},{"line":266,"address":[4313284],"length":1,"stats":{"Line":1},"fn_name":null},{"line":267,"address":[4313201,4313139,4313767,4312963],"length":1,"stats":{"Line":2},"fn_name":null},{"line":268,"address":[4312976],"length":1,"stats":{"Line":1},"fn_name":null},{"line":269,"address":[4313157,4313061],"length":1,"stats":{"Line":2},"fn_name":null},{"line":277,"address":[4313898,4313872],"length":1,"stats":{"Line":3},"fn_name":"tokens_with_parent"},{"line":278,"address":[4314084,4314289],"length":1,"stats":{"Line":1},"fn_name":null},{"line":279,"address":[4313879],"length":1,"stats":{"Line":1},"fn_name":null},{"line":280,"address":[4314244],"length":1,"stats":{"Line":1},"fn_name":null},{"line":281,"address":[4313923,4314161,4314727,4314099],"length":1,"stats":{"Line":2},"fn_name":null},{"line":282,"address":[4313936],"length":1,"stats":{"Line":1},"fn_name":null},{"line":283,"address":[4314021,4314117],"length":1,"stats":{"Line":2},"fn_name":null},{"line":291,"address":[4314858,4314832],"length":1,"stats":{"Line":3},"fn_name":"tokens_with_basename_no_extension"},{"line":292,"address":[4315044,4315249],"length":1,"stats":{"Line":1},"fn_name":null},{"line":293,"address":[4314839],"length":1,"stats":{"Line":1},"fn_name":null},{"line":294,"address":[4315204],"length":1,"stats":{"Line":1},"fn_name":null},{"line":295,"address":[4315687,4315121,4314883,4315059],"length":1,"stats":{"Line":2},"fn_name":null},{"line":296,"address":[4314896],"length":1,"stats":{"Line":1},"fn_name":null},{"line":297,"address":[4314981,4315077],"length":1,"stats":{"Line":2},"fn_name":null},{"line":305,"address":[4315792,4315818],"length":1,"stats":{"Line":3},"fn_name":"tokens_multiple"},{"line":306,"address":[4316521,4316004],"length":1,"stats":{"Line":1},"fn_name":null},{"line":307,"address":[4315799],"length":1,"stats":{"Line":1},"fn_name":null},{"line":308,"address":[4316476],"length":1,"stats":{"Line":1},"fn_name":null},{"line":309,"address":[4316019,4316369,4316147,4315843,4316962],"length":1,"stats":{"Line":2},"fn_name":null},{"line":310,"address":[4315856],"length":1,"stats":{"Line":1},"fn_name":null},{"line":311,"address":[4316037,4315941],"length":1,"stats":{"Line":2},"fn_name":null},{"line":312,"address":[4316091,4316209],"length":1,"stats":{"Line":2},"fn_name":null},{"line":313,"address":[4316104],"length":1,"stats":{"Line":1},"fn_name":null},{"line":314,"address":[4316116,4316165],"length":1,"stats":{"Line":2},"fn_name":null},{"line":323,"address":[4317133,4317104],"length":1,"stats":{"Line":3},"fn_name":"tokens_single_batch"},{"line":324,"address":[4317230,4317549],"length":1,"stats":{"Line":1},"fn_name":null},{"line":325,"address":[4317111,4317155],"length":1,"stats":{"Line":2},"fn_name":null},{"line":326,"address":[4317504],"length":1,"stats":{"Line":1},"fn_name":null},{"line":327,"address":[4317359,4317421,4317985,4317186],"length":1,"stats":{"Line":2},"fn_name":null},{"line":328,"address":[4317242,4317199],"length":1,"stats":{"Line":2},"fn_name":null},{"line":329,"address":[4317377,4317296],"length":1,"stats":{"Line":2},"fn_name":null},{"line":337,"address":[4318119,4318096],"length":1,"stats":{"Line":3},"fn_name":"tokens_multiple_batch"},{"line":338,"address":[4318136,4318100,4318196],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":95,"coverable":139},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exec","token.rs"],"content":"use std::fmt::{self, Display, Formatter};\n\n/// Designates what should be written to a buffer\n///\n/// Each `Token` contains either text, or a placeholder variant, which will be used to generate\n/// commands after all tokens for a given command template have been collected.\n#[derive(Clone, Debug, PartialEq)]\npub enum Token {\n    Placeholder,\n    Basename,\n    Parent,\n    NoExt,\n    BasenameNoExt,\n    Text(String),\n}\n\nimpl Display for Token {\n    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n        match *self {\n            Token::Placeholder => f.write_str(\"{}\")?,\n            Token::Basename => f.write_str(\"{/}\")?,\n            Token::Parent => f.write_str(\"{//}\")?,\n            Token::NoExt => f.write_str(\"{.}\")?,\n            Token::BasenameNoExt => f.write_str(\"{/.}\")?,\n            Token::Text(ref string) => f.write_str(string)?,\n        }\n        Ok(())\n    }\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":22,"address":[4344255,4344189],"length":1,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":9},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","exit_codes.rs"],"content":"#[derive(Debug, Clone, Copy, PartialEq)]\npub enum ExitCode {\n    Success,\n    GeneralError,\n    KilledBySigint,\n}\n\nimpl Into<i32> for ExitCode {\n    fn into(self) -> i32 {\n        match self {\n            ExitCode::Success => 0,\n            ExitCode::GeneralError => 1,\n            ExitCode::KilledBySigint => 130,\n        }\n    }\n}\n\nimpl ExitCode {\n    fn is_error(&self) -> bool {\n        *self != ExitCode::Success\n    }\n}\n\npub fn merge_exitcodes(results: &[ExitCode]) -> ExitCode {\n    if results.iter().any(ExitCode::is_error) {\n        return ExitCode::GeneralError;\n    }\n    ExitCode::Success\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn success_when_no_results() {\n        assert_eq!(merge_exitcodes(&[]), ExitCode::Success);\n    }\n\n    #[test]\n    fn general_error_if_at_least_one_error() {\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::GeneralError]),\n            ExitCode::GeneralError\n        );\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::KilledBySigint]),\n            ExitCode::GeneralError\n        );\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::KilledBySigint, ExitCode::Success]),\n            ExitCode::GeneralError\n        );\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::Success, ExitCode::GeneralError]),\n            ExitCode::GeneralError\n        );\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::GeneralError, ExitCode::KilledBySigint]),\n            ExitCode::GeneralError\n        );\n    }\n\n    #[test]\n    fn success_if_no_error() {\n        assert_eq!(merge_exitcodes(&[ExitCode::Success]), ExitCode::Success);\n        assert_eq!(\n            merge_exitcodes(&[ExitCode::Success, ExitCode::Success]),\n            ExitCode::Success\n        );\n    }\n}\n","traces":[{"line":9,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":10,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":11,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":12,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":13,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":24,"address":[4701008],"length":1,"stats":{"Line":1},"fn_name":"merge_exitcodes"},{"line":25,"address":[4701022],"length":1,"stats":{"Line":1},"fn_name":null},{"line":26,"address":[4701068],"length":1,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[4701061],"length":1,"stats":{"Line":2},"fn_name":null},{"line":36,"address":[4549573,4549568],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":37,"address":[4748038,4747931],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[4549600,4549605],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":42,"address":[4748496,4748354],"length":1,"stats":{"Line":1},"fn_name":null},{"line":43,"address":[4748327],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[4748831,4748973],"length":1,"stats":{"Line":1},"fn_name":null},{"line":47,"address":[4748464],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[4749308,4749450],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[4748941],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[4749927,4749785],"length":1,"stats":{"Line":1},"fn_name":null},{"line":55,"address":[4749418],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[4750226,4750332],"length":1,"stats":{"Line":1},"fn_name":null},{"line":59,"address":[4749895],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[4549637,4549632],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":66,"address":[4750800,4750631],"length":1,"stats":{"Line":1},"fn_name":null},{"line":67,"address":[4751211,4751105],"length":1,"stats":{"Line":1},"fn_name":null},{"line":68,"address":[4750768],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":23,"coverable":28},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","filesystem.rs"],"content":"use std::borrow::Cow;\nuse std::env::current_dir;\nuse std::ffi::OsStr;\nuse std::fs;\nuse std::io;\n#[cfg(any(unix, target_os = \"redox\"))]\nuse std::os::unix::fs::{FileTypeExt, PermissionsExt};\nuse std::path::{Path, PathBuf};\n\nuse crate::walk;\n\npub fn path_absolute_form(path: &Path) -> io::Result<PathBuf> {\n    if path.is_absolute() {\n        return Ok(path.to_path_buf());\n    }\n\n    let path = path.strip_prefix(\".\").unwrap_or(path);\n    current_dir().map(|path_buf| path_buf.join(path))\n}\n\npub fn absolute_path(path: &Path) -> io::Result<PathBuf> {\n    let path_buf = path_absolute_form(path)?;\n\n    #[cfg(windows)]\n    let path_buf = Path::new(\n        path_buf\n            .as_path()\n            .to_string_lossy()\n            .trim_start_matches(r\"\\\\?\\\"),\n    )\n    .to_path_buf();\n\n    Ok(path_buf)\n}\n\n// Path::is_dir() is not guaranteed to be intuitively correct for \".\" and \"..\"\n// See: https://github.com/rust-lang/rust/issues/45302\npub fn is_dir(path: &Path) -> bool {\n    path.is_dir() && (path.file_name().is_some() || path.canonicalize().is_ok())\n}\n\n#[cfg(any(unix, target_os = \"redox\"))]\npub fn is_executable(md: &fs::Metadata) -> bool {\n    md.permissions().mode() & 0o111 != 0\n}\n\n#[cfg(windows)]\npub fn is_executable(_: &fs::Metadata) -> bool {\n    false\n}\n\npub fn is_empty(entry: &walk::DirEntry) -> bool {\n    if let Some(file_type) = entry.file_type() {\n        if file_type.is_dir() {\n            if let Ok(mut entries) = fs::read_dir(entry.path()) {\n                entries.next().is_none()\n            } else {\n                false\n            }\n        } else if file_type.is_file() {\n            entry.metadata().map(|m| m.len() == 0).unwrap_or(false)\n        } else {\n            false\n        }\n    } else {\n        false\n    }\n}\n\n#[cfg(any(unix, target_os = \"redox\"))]\npub fn is_socket(ft: &fs::FileType) -> bool {\n    ft.is_socket()\n}\n\n#[cfg(windows)]\npub fn is_socket(_: &fs::FileType) -> bool {\n    false\n}\n\n#[cfg(any(unix, target_os = \"redox\"))]\npub fn is_pipe(ft: &fs::FileType) -> bool {\n    ft.is_fifo()\n}\n\n#[cfg(windows)]\npub fn is_pipe(_: &fs::FileType) -> bool {\n    false\n}\n\n#[cfg(any(unix, target_os = \"redox\"))]\npub fn osstr_to_bytes(input: &OsStr) -> Cow<[u8]> {\n    use std::os::unix::ffi::OsStrExt;\n    Cow::Borrowed(input.as_bytes())\n}\n\n#[cfg(windows)]\npub fn osstr_to_bytes(input: &OsStr) -> Cow<[u8]> {\n    let string = input.to_string_lossy();\n\n    match string {\n        Cow::Owned(string) => Cow::Owned(string.into_bytes()),\n        Cow::Borrowed(string) => Cow::Borrowed(string.as_bytes()),\n    }\n}\n\n/// Remove the `./` prefix from a path.\npub fn strip_current_dir(path: &Path) -> &Path {\n    path.strip_prefix(\".\").unwrap_or(path)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::strip_current_dir;\n    use std::path::Path;\n\n    #[test]\n    fn strip_current_dir_basic() {\n        assert_eq!(strip_current_dir(Path::new(\"./foo\")), Path::new(\"foo\"));\n        assert_eq!(strip_current_dir(Path::new(\"foo\")), Path::new(\"foo\"));\n        assert_eq!(\n            strip_current_dir(Path::new(\"./foo/bar/baz\")),\n            Path::new(\"foo/bar/baz\")\n        );\n        assert_eq!(\n            strip_current_dir(Path::new(\"foo/bar/baz\")),\n            Path::new(\"foo/bar/baz\")\n        );\n    }\n}\n","traces":[{"line":12,"address":[4371536],"length":1,"stats":{"Line":0},"fn_name":"path_absolute_form"},{"line":13,"address":[4371567],"length":1,"stats":{"Line":0},"fn_name":null},{"line":14,"address":[4371685,4371649],"length":1,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[4371625,4371745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[4371760],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[4371905,4371824],"length":1,"stats":{"Line":0},"fn_name":"absolute_path"},{"line":22,"address":[4371850,4372165,4371920,4372087],"length":1,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[4371998],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[4372303,4372208],"length":1,"stats":{"Line":0},"fn_name":"is_dir"},{"line":39,"address":[4372232,4372319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[4372464],"length":1,"stats":{"Line":0},"fn_name":"is_executable"},{"line":44,"address":[4372473],"length":1,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[4372571,4372528],"length":1,"stats":{"Line":0},"fn_name":"is_empty"},{"line":53,"address":[4372586,4372543,4372603,4372958],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4372956,4373000,4372616],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[4372666,4372723,4372876],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[4372754,4372825],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4372718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[4372896,4372954,4372977,4372885,4373002,4372791,4372641],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4372898],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4372891],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[4372598],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[4373136],"length":1,"stats":{"Line":0},"fn_name":"is_socket"},{"line":72,"address":[4373145],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[4373184],"length":1,"stats":{"Line":0},"fn_name":"is_pipe"},{"line":82,"address":[4373193],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[4373232],"length":1,"stats":{"Line":0},"fn_name":"osstr_to_bytes"},{"line":93,"address":[4373254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[4373328],"length":1,"stats":{"Line":2},"fn_name":"strip_current_dir"},{"line":108,"address":[4373359],"length":1,"stats":{"Line":2},"fn_name":null},{"line":117,"address":[4253472],"length":1,"stats":{"Line":3},"fn_name":"strip_current_dir_basic"},{"line":118,"address":[4253743,4253486],"length":1,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[4253708,4254305,4254094],"length":1,"stats":{"Line":2},"fn_name":null},{"line":120,"address":[4254867,4254714],"length":1,"stats":{"Line":1},"fn_name":null},{"line":121,"address":[4254270,4254656],"length":1,"stats":{"Line":2},"fn_name":null},{"line":122,"address":[4254677],"length":1,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[4255353,4255246],"length":1,"stats":{"Line":1},"fn_name":null},{"line":125,"address":[4255188,4254832],"length":1,"stats":{"Line":2},"fn_name":null},{"line":126,"address":[4255209],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":11,"coverable":39},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","filetypes.rs"],"content":"/// Whether or not to show\npub struct FileTypes {\n    pub files: bool,\n    pub directories: bool,\n    pub symlinks: bool,\n    pub sockets: bool,\n    pub pipes: bool,\n    pub executables_only: bool,\n    pub empty_only: bool,\n}\n\nimpl Default for FileTypes {\n    fn default() -> FileTypes {\n        FileTypes {\n            files: false,\n            directories: false,\n            symlinks: false,\n            sockets: false,\n            pipes: false,\n            executables_only: false,\n            empty_only: false,\n        }\n    }\n}\n","traces":[{"line":13,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":1},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","filter","owner.rs"],"content":"use anyhow::{anyhow, Result};\nuse std::fs;\n\n#[derive(Clone, Copy, Debug, PartialEq)]\npub struct OwnerFilter {\n    uid: Check<u32>,\n    gid: Check<u32>,\n}\n\n#[derive(Clone, Copy, Debug, PartialEq)]\nenum Check<T> {\n    Equal(T),\n    NotEq(T),\n    Ignore,\n}\n\nimpl OwnerFilter {\n    /// Parses an owner constraint\n    /// Returns an error if the string is invalid\n    /// Returns Ok(None) when string is acceptable but a noop (such as \"\" or \":\")\n    pub fn from_string(input: &str) -> Result<Option<Self>> {\n        let mut it = input.split(':');\n        let (fst, snd) = (it.next(), it.next());\n\n        if it.next().is_some() {\n            return Err(anyhow!(\n                \"more than one ':' present in owner string '{}'. See 'fd --help'.\",\n                input\n            ));\n        }\n\n        let uid = Check::parse(fst, |s| {\n            s.parse()\n                .ok()\n                .or_else(|| users::get_user_by_name(s).map(|user| user.uid()))\n                .ok_or_else(|| anyhow!(\"'{}' is not a recognized user name\", s))\n        })?;\n        let gid = Check::parse(snd, |s| {\n            s.parse()\n                .ok()\n                .or_else(|| users::get_group_by_name(s).map(|group| group.gid()))\n                .ok_or_else(|| anyhow!(\"'{}' is not a recognized group name\", s))\n        })?;\n\n        if let (Check::Ignore, Check::Ignore) = (uid, gid) {\n            Ok(None)\n        } else {\n            Ok(Some(OwnerFilter { uid, gid }))\n        }\n    }\n\n    pub fn matches(&self, md: &fs::Metadata) -> bool {\n        use std::os::unix::fs::MetadataExt;\n\n        self.uid.check(md.uid()) && self.gid.check(md.gid())\n    }\n}\n\nimpl<T: PartialEq> Check<T> {\n    fn check(&self, v: T) -> bool {\n        match self {\n            Check::Equal(x) => v == *x,\n            Check::NotEq(x) => v != *x,\n            Check::Ignore => true,\n        }\n    }\n\n    fn parse<F>(s: Option<&str>, f: F) -> Result<Self>\n    where\n        F: Fn(&str) -> Result<T>,\n    {\n        let (s, equality) = match s {\n            Some(\"\") | None => return Ok(Check::Ignore),\n            Some(s) if s.starts_with('!') => (&s[1..], false),\n            Some(s) => (s, true),\n        };\n\n        f(s).map(|x| {\n            if equality {\n                Check::Equal(x)\n            } else {\n                Check::NotEq(x)\n            }\n        })\n    }\n}\n\n#[cfg(test)]\nmod owner_parsing {\n    use super::OwnerFilter;\n\n    macro_rules! owner_tests {\n        ($($name:ident: $value:expr => $result:pat,)*) => {\n            $(\n                #[test]\n                fn $name() {\n                    let o = OwnerFilter::from_string($value);\n                    match o {\n                        $result => {},\n                        _ => panic!(\"{:?} does not match {}\", o, stringify!($result)),\n                    }\n                }\n            )*\n        };\n    }\n\n    use super::Check::*;\n    owner_tests! {\n        empty:      \"\"      => Ok(None),\n        uid_only:   \"5\"     => Ok(Some(OwnerFilter { uid: Equal(5), gid: Ignore     })),\n        uid_gid:    \"9:3\"   => Ok(Some(OwnerFilter { uid: Equal(9), gid: Equal(3)   })),\n        gid_only:   \":8\"    => Ok(Some(OwnerFilter { uid: Ignore,   gid: Equal(8)   })),\n        colon_only: \":\"     => Ok(None),\n        trailing:   \"5:\"    => Ok(Some(OwnerFilter { uid: Equal(5), gid: Ignore     })),\n\n        uid_negate: \"!5\"    => Ok(Some(OwnerFilter { uid: NotEq(5), gid: Ignore     })),\n        both_negate:\"!4:!3\" => Ok(Some(OwnerFilter { uid: NotEq(4), gid: NotEq(3)   })),\n        uid_not_gid:\"6:!8\"  => Ok(Some(OwnerFilter { uid: Equal(6), gid: NotEq(8)   })),\n\n        more_colons:\"3:5:\"  => Err(_),\n        only_colons:\"::\"    => Err(_),\n    }\n}\n","traces":[{"line":21,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":22,"address":[4460267],"length":1,"stats":{"Line":1},"fn_name":null},{"line":23,"address":[4460338],"length":1,"stats":{"Line":1},"fn_name":null},{"line":25,"address":[4460520],"length":1,"stats":{"Line":1},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":36,"address":[4280520,4280160,4280182],"length":1,"stats":{"Line":1},"fn_name":"{{closure}}"},{"line":38,"address":[4461084,4461151,4461216],"length":1,"stats":{"Line":3},"fn_name":null},{"line":39,"address":[4281106,4281071,4280998],"length":1,"stats":{"Line":3},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[4281872,4281344,4281399,4281927],"length":1,"stats":{"Line":2},"fn_name":"parse<u32,closure-0>"},{"line":72,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":79,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":96,"address":[4338880,4339794,4341136,4339760,4343424,4340274,4341600,4342544,4343024,4342578,4339296,4342098,4338910,4343058,4340240,4342064,4340738,4341170,4341634,4339330,4343458,4340704],"length":1,"stats":{"Line":33},"fn_name":"empty"},{"line":97,"address":[4342078,4343038,4343438,4341614,4342558,4340254,4341150,4339774,4338891,4339310,4340718],"length":1,"stats":{"Line":11},"fn_name":null},{"line":100,"address":[4343679,4342816,4339098,4341397,4341226,4343085,4339619,4340032,4341459,4339557,4343279,4343217,4339850,4338966,4342336,4339160,4340988,4340330,4342634,4340926,4339386,4340794,4341923,4340563,4340501,4341690,4343617,4341861,4342398,4342154,4343485,4342878,4340094],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[4338925],"length":1,"stats":{"Line":1},"fn_name":null},{"line":110,"address":[4339345,4339493],"length":1,"stats":{"Line":2},"fn_name":null},{"line":111,"address":[4339957,4339809],"length":1,"stats":{"Line":2},"fn_name":null},{"line":112,"address":[4340437,4340289],"length":1,"stats":{"Line":2},"fn_name":null},{"line":113,"address":[4340753],"length":1,"stats":{"Line":1},"fn_name":null},{"line":114,"address":[4341333,4341185],"length":1,"stats":{"Line":2},"fn_name":null},{"line":116,"address":[4341797,4341649],"length":1,"stats":{"Line":2},"fn_name":null},{"line":117,"address":[4342113,4342261],"length":1,"stats":{"Line":2},"fn_name":null},{"line":118,"address":[4342741,4342593],"length":1,"stats":{"Line":2},"fn_name":null},{"line":120,"address":[4343073],"length":1,"stats":{"Line":1},"fn_name":null},{"line":121,"address":[4343473],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":39,"coverable":50},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","filter","size.rs"],"content":"use lazy_static::lazy_static;\nuse regex::Regex;\n\nlazy_static! {\n    static ref SIZE_CAPTURES: Regex = Regex::new(r\"(?i)^([+-])(\\d+)(b|[kmgt]i?b?)$\").unwrap();\n}\n\n#[derive(Clone, Copy, Debug, PartialEq)]\npub enum SizeFilter {\n    Max(u64),\n    Min(u64),\n}\n\n// SI prefixes (powers of 10)\nconst KILO: u64 = 1000;\nconst MEGA: u64 = KILO * 1000;\nconst GIGA: u64 = MEGA * 1000;\nconst TERA: u64 = GIGA * 1000;\n\n// Binary prefixes (powers of 2)\nconst KIBI: u64 = 1024;\nconst MEBI: u64 = KIBI * 1024;\nconst GIBI: u64 = MEBI * 1024;\nconst TEBI: u64 = GIBI * 1024;\n\nimpl SizeFilter {\n    pub fn from_string(s: &str) -> Option<Self> {\n        if !SIZE_CAPTURES.is_match(s) {\n            return None;\n        }\n\n        let captures = SIZE_CAPTURES.captures(s)?;\n        let limit_kind = captures.get(1).map_or(\"+\", |m| m.as_str());\n        let quantity = captures\n            .get(2)\n            .and_then(|v| v.as_str().parse::<u64>().ok())?;\n\n        let multiplier = match &captures.get(3).map_or(\"b\", |m| m.as_str()).to_lowercase()[..] {\n            v if v.starts_with(\"ki\") => KIBI,\n            v if v.starts_with('k') => KILO,\n            v if v.starts_with(\"mi\") => MEBI,\n            v if v.starts_with('m') => MEGA,\n            v if v.starts_with(\"gi\") => GIBI,\n            v if v.starts_with('g') => GIGA,\n            v if v.starts_with(\"ti\") => TEBI,\n            v if v.starts_with('t') => TERA,\n            \"b\" => 1,\n            _ => return None,\n        };\n\n        let size = quantity * multiplier;\n        Some(match limit_kind {\n            \"+\" => SizeFilter::Min(size),\n            _ => SizeFilter::Max(size),\n        })\n    }\n\n    pub fn is_within(&self, size: u64) -> bool {\n        match *self {\n            SizeFilter::Max(limit) => size <= limit,\n            SizeFilter::Min(limit) => size >= limit,\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    macro_rules! gen_size_filter_parse_test {\n        ($($name: ident: $val: expr,)*) => {\n            $(\n                #[test]\n                fn $name() {\n                    let (txt, expected) = $val;\n                    let actual = SizeFilter::from_string(txt).unwrap();\n                    assert_eq!(actual, expected);\n                }\n            )*\n        };\n    }\n\n    // Parsing and size conversion tests data. Ensure that each type gets properly interpreted.\n    // Call with higher base values to ensure expected multiplication (only need a couple)\n    gen_size_filter_parse_test! {\n        byte_plus:                (\"+1b\",     SizeFilter::Min(1)),\n        byte_plus_multiplier:     (\"+10b\",    SizeFilter::Min(10)),\n        byte_minus:               (\"-1b\",     SizeFilter::Max(1)),\n        kilo_plus:                (\"+1k\",     SizeFilter::Min(1000)),\n        kilo_plus_suffix:         (\"+1kb\",    SizeFilter::Min(1000)),\n        kilo_minus:               (\"-1k\",     SizeFilter::Max(1000)),\n        kilo_minus_multiplier:    (\"-100k\",   SizeFilter::Max(100000)),\n        kilo_minus_suffix:        (\"-1kb\",    SizeFilter::Max(1000)),\n        kilo_plus_upper:          (\"+1K\",     SizeFilter::Min(1000)),\n        kilo_plus_suffix_upper:   (\"+1KB\",    SizeFilter::Min(1000)),\n        kilo_minus_upper:         (\"-1K\",     SizeFilter::Max(1000)),\n        kilo_minus_suffix_upper:  (\"-1Kb\",    SizeFilter::Max(1000)),\n        kibi_plus:                (\"+1ki\",    SizeFilter::Min(1024)),\n        kibi_plus_multiplier:     (\"+10ki\",   SizeFilter::Min(10240)),\n        kibi_plus_suffix:         (\"+1kib\",   SizeFilter::Min(1024)),\n        kibi_minus:               (\"-1ki\",    SizeFilter::Max(1024)),\n        kibi_minus_multiplier:    (\"-100ki\",  SizeFilter::Max(102400)),\n        kibi_minus_suffix:        (\"-1kib\",   SizeFilter::Max(1024)),\n        kibi_plus_upper:          (\"+1KI\",    SizeFilter::Min(1024)),\n        kibi_plus_suffix_upper:   (\"+1KiB\",   SizeFilter::Min(1024)),\n        kibi_minus_upper:         (\"-1Ki\",    SizeFilter::Max(1024)),\n        kibi_minus_suffix_upper:  (\"-1KIB\",   SizeFilter::Max(1024)),\n        mega_plus:                (\"+1m\",     SizeFilter::Min(1000000)),\n        mega_plus_suffix:         (\"+1mb\",    SizeFilter::Min(1000000)),\n        mega_minus:               (\"-1m\",     SizeFilter::Max(1000000)),\n        mega_minus_suffix:        (\"-1mb\",    SizeFilter::Max(1000000)),\n        mega_plus_upper:          (\"+1M\",     SizeFilter::Min(1000000)),\n        mega_plus_suffix_upper:   (\"+1MB\",    SizeFilter::Min(1000000)),\n        mega_minus_upper:         (\"-1M\",     SizeFilter::Max(1000000)),\n        mega_minus_suffix_upper:  (\"-1Mb\",    SizeFilter::Max(1000000)),\n        mebi_plus:                (\"+1mi\",    SizeFilter::Min(1048576)),\n        mebi_plus_suffix:         (\"+1mib\",   SizeFilter::Min(1048576)),\n        mebi_minus:               (\"-1mi\",    SizeFilter::Max(1048576)),\n        mebi_minus_suffix:        (\"-1mib\",   SizeFilter::Max(1048576)),\n        mebi_plus_upper:          (\"+1MI\",    SizeFilter::Min(1048576)),\n        mebi_plus_suffix_upper:   (\"+1MiB\",   SizeFilter::Min(1048576)),\n        mebi_minus_upper:         (\"-1Mi\",    SizeFilter::Max(1048576)),\n        mebi_minus_suffix_upper:  (\"-1MIB\",   SizeFilter::Max(1048576)),\n        giga_plus:                (\"+1g\",     SizeFilter::Min(1000000000)),\n        giga_plus_suffix:         (\"+1gb\",    SizeFilter::Min(1000000000)),\n        giga_minus:               (\"-1g\",     SizeFilter::Max(1000000000)),\n        giga_minus_suffix:        (\"-1gb\",    SizeFilter::Max(1000000000)),\n        giga_plus_upper:          (\"+1G\",     SizeFilter::Min(1000000000)),\n        giga_plus_suffix_upper:   (\"+1GB\",    SizeFilter::Min(1000000000)),\n        giga_minus_upper:         (\"-1G\",     SizeFilter::Max(1000000000)),\n        giga_minus_suffix_upper:  (\"-1Gb\",    SizeFilter::Max(1000000000)),\n        gibi_plus:                (\"+1gi\",    SizeFilter::Min(1073741824)),\n        gibi_plus_suffix:         (\"+1gib\",   SizeFilter::Min(1073741824)),\n        gibi_minus:               (\"-1gi\",    SizeFilter::Max(1073741824)),\n        gibi_minus_suffix:        (\"-1gib\",   SizeFilter::Max(1073741824)),\n        gibi_plus_upper:          (\"+1GI\",    SizeFilter::Min(1073741824)),\n        gibi_plus_suffix_upper:   (\"+1GiB\",   SizeFilter::Min(1073741824)),\n        gibi_minus_upper:         (\"-1Gi\",    SizeFilter::Max(1073741824)),\n        gibi_minus_suffix_upper:  (\"-1GIB\",   SizeFilter::Max(1073741824)),\n        tera_plus:                (\"+1t\",     SizeFilter::Min(1000000000000)),\n        tera_plus_suffix:         (\"+1tb\",    SizeFilter::Min(1000000000000)),\n        tera_minus:               (\"-1t\",     SizeFilter::Max(1000000000000)),\n        tera_minus_suffix:        (\"-1tb\",    SizeFilter::Max(1000000000000)),\n        tera_plus_upper:          (\"+1T\",     SizeFilter::Min(1000000000000)),\n        tera_plus_suffix_upper:   (\"+1TB\",    SizeFilter::Min(1000000000000)),\n        tera_minus_upper:         (\"-1T\",     SizeFilter::Max(1000000000000)),\n        tera_minus_suffix_upper:  (\"-1Tb\",    SizeFilter::Max(1000000000000)),\n        tebi_plus:                (\"+1ti\",    SizeFilter::Min(1099511627776)),\n        tebi_plus_suffix:         (\"+1tib\",   SizeFilter::Min(1099511627776)),\n        tebi_minus:               (\"-1ti\",    SizeFilter::Max(1099511627776)),\n        tebi_minus_suffix:        (\"-1tib\",   SizeFilter::Max(1099511627776)),\n        tebi_plus_upper:          (\"+1TI\",    SizeFilter::Min(1099511627776)),\n        tebi_plus_suffix_upper:   (\"+1TiB\",   SizeFilter::Min(1099511627776)),\n        tebi_minus_upper:         (\"-1Ti\",    SizeFilter::Max(1099511627776)),\n        tebi_minus_suffix_upper:  (\"-1TIB\",   SizeFilter::Max(1099511627776)),\n    }\n\n    /// Invalid parse testing\n    macro_rules! gen_size_filter_failure {\n        ($($name:ident: $value:expr,)*) => {\n            $(\n                #[test]\n                fn $name() {\n                    let i = SizeFilter::from_string($value);\n                    assert!(i.is_none());\n                }\n            )*\n        };\n    }\n\n    // Invalid parse data\n    gen_size_filter_failure! {\n        ensure_missing_symbol_returns_none: \"10M\",\n        ensure_missing_number_returns_none: \"+g\",\n        ensure_missing_unit_returns_none: \"+18\",\n        ensure_bad_format_returns_none_1: \"$10M\",\n        ensure_bad_format_returns_none_2: \"badval\",\n        ensure_bad_format_returns_none_3: \"9999\",\n        ensure_invalid_unit_returns_none_1: \"+50a\",\n        ensure_invalid_unit_returns_none_2: \"-10v\",\n        ensure_invalid_unit_returns_none_3: \"+1Mv\",\n        ensure_bib_format_returns_none: \"+1bib\",\n        ensure_bb_format_returns_none: \"+1bb\",\n    }\n\n    #[test]\n    fn is_within_less_than() {\n        let f = SizeFilter::from_string(\"-1k\").unwrap();\n        assert!(f.is_within(999));\n    }\n\n    #[test]\n    fn is_within_less_than_equal() {\n        let f = SizeFilter::from_string(\"-1k\").unwrap();\n        assert!(f.is_within(1000));\n    }\n\n    #[test]\n    fn is_within_greater_than() {\n        let f = SizeFilter::from_string(\"+1k\").unwrap();\n        assert!(f.is_within(1001));\n    }\n\n    #[test]\n    fn is_within_greater_than_equal() {\n        let f = SizeFilter::from_string(\"+1K\").unwrap();\n        assert!(f.is_within(1000));\n    }\n}\n","traces":[{"line":5,"address":[4668382],"length":1,"stats":{"Line":1},"fn_name":null},{"line":27,"address":[4272304,4272405],"length":1,"stats":{"Line":2},"fn_name":"from_string"},{"line":28,"address":[4272342,4272427],"length":1,"stats":{"Line":4},"fn_name":null},{"line":29,"address":[4272458],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[4272440,4272494,4272727],"length":1,"stats":{"Line":4},"fn_name":null},{"line":33,"address":[4641972,4641968],"length":1,"stats":{"Line":8},"fn_name":"{{closure}}"},{"line":34,"address":[4272923,4273086,4273147],"length":1,"stats":{"Line":4},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[4642000,4642004],"length":1,"stats":{"Line":6},"fn_name":"{{closure}}"},{"line":38,"address":[4642080,4642084],"length":1,"stats":{"Line":22},"fn_name":"{{closure}}"},{"line":39,"address":[4273354,4273490],"length":1,"stats":{"Line":4},"fn_name":null},{"line":40,"address":[4273553],"length":1,"stats":{"Line":2},"fn_name":null},{"line":41,"address":[4273664],"length":1,"stats":{"Line":2},"fn_name":null},{"line":42,"address":[4273782],"length":1,"stats":{"Line":2},"fn_name":null},{"line":43,"address":[4273893],"length":1,"stats":{"Line":2},"fn_name":null},{"line":44,"address":[4274011],"length":1,"stats":{"Line":2},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":53,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":59,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":74,"address":[4336789,4338000,4336821,4337685,4337013,4336560,4337296,4337392,4337301,4337616,4336400,4337936,4336304,4337557,4335957,4337808,4336693,4337045,4335861,4337333,4336848,4337776,4336112,4336629,4336949,4336752,4337077,4336368,4336592,4337909,4336213,4337744,4335856,4336437,4336048,4337072,4336501,4337136,4337173,4336336,4336053,4336469,4337168,4336624,4336117,4337424,4337712,4338005,4335984,4337328,4336021,4335824,4336144,4337845,4337680,4336533,4336565,4337717,4336080,4337813,4337397,4336432,4336176,4335797,4336240,4337872,4336912,4336757,4337461,4336277,4336981,4337264,4337008,4335925,4337584,4335952,4336528,4335792,4337525,4336405,4337968,4336661,4337040,4337589,4336181,4337141,4337232,4337653,4336464,4337269,4336016,4336245,4336309,4337941,4337109,4336784,4336373,4336496,4336341,4335829,4337104,4337648,4336597,4337781,4336688,4336149,4337840,4337200,4337877,4337365,4337904,4337429,4336976,4336917,4336944,4336085,4335888,4337973,4336720,4337520,4337360,4336208,4337493,4336880,4336656,4335989,4337237,4335893,4337488,4336272,4337621,4336853,4337749,4336725,4337552,4337205,4337456,4336885,4335920,4336816],"length":1,"stats":{"Line":210},"fn_name":"{{closure}}"},{"line":75,"address":[4429575,4426615,4441645,4401751,4434957,4439821,4407079,4414775,4421879,4436173,4410039,4410631,4428983,4435565,4438605,4441037,4406487,4424247,4402935,4408855,4412407,4413591,4418919,4403527,4432535,4423655,4421287,4433133,4402343,4418327,4405303,4420695,4431943,4404711,4440429,4415367,4417143,4415959,4425431,4411815,4416551,4409447,4405895,4411223,4420103,4404119,4423063,4426023,4417735,4433741,4434349,4436781,4414183,4407671,4427207,4419511,4412999,4408263,4431351,4437997,4428391,4430759,4430167,4422471,4424839,4439213,4437389,4442253,4427799,4401159],"length":1,"stats":{"Line":70},"fn_name":null},{"line":76,"address":[4402398,4414830,4421342,4433188,4430814,4416606,4405358,4402990,4435620,4413646,4429630,4438660,4416014,4420158,4407134,4433796,4439876,4407726,4441700,4422526,4401806,4424302,4434404,4408910,4412462,4401214,4418382,4436228,4420750,4430222,4404174,4428446,4404766,4413054,4411870,4421934,4437444,4409502,4436836,4418974,4426078,4440484,4410094,4417198,4419566,4410686,4403582,4423710,4411278,4417790,4406542,4415422,4426670,4435012,4438052,4414238,4431406,4439268,4423118,4425486,4427262,4441092,4432590,4424894,4429038,4405950,4442308,4427854,4431998,4408318],"length":1,"stats":{"Line":70},"fn_name":null},{"line":77,"address":[4413705,4417953,4426241,4407297,4420809,4425057,4407889,4423873,4404825,4401273,4435679,4429097,4437607,4420321,4414401,4403153,4411441,4429689,4430385,4424465,4433351,4428609,4410745,4405417,4420913,4409561,4423281,4421401,4408969,4423769,4424361,4431465,4441863,4440647,4435071,4421505,4419033,4419137,4433855,4402561,4430281,4432057,4437503,4421993,4403745,4416073,4428017,4441255,4440543,4427913,4416769,4425545,4406705,4420217,4406009,4417361,4426137,4416665,4436895,4410257,4403049,4422097,4439327,4409665,4402457,4403641,4441151,4442367,4432161,4405521,4422689,4438111,4418545,4404233,4408481,4418441,4412521,4401969,4435783,4434463,4439935,4410153,4419625,4428505,4433959,4408377,4423177,4404929,4416177,4419729,4422585,4432649,4415585,4427321,4436391,4401377,4430977,4417257,4424953,4438823,4412033,4426729,4440039,4429201,4431569,4430873,4439431,4432753,4404337,4401865,4412625,4438719,4413217,4411337,4436287,4407785,4406601,4413809,4409073,4415481,4427425,4433247,4414889,4414297,4413113,4435175,4411929,4441759,4426833,4414993,4434567,4436999,4406113,4425649,4429793,4438215,4417849,4407193,4442471,4410849],"length":1,"stats":{"Line":70},"fn_name":null},{"line":86,"address":[4401086],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[4401678],"length":1,"stats":{"Line":1},"fn_name":null},{"line":88,"address":[4402270],"length":1,"stats":{"Line":1},"fn_name":null},{"line":89,"address":[4402862],"length":1,"stats":{"Line":1},"fn_name":null},{"line":90,"address":[4403454],"length":1,"stats":{"Line":1},"fn_name":null},{"line":91,"address":[4404046],"length":1,"stats":{"Line":1},"fn_name":null},{"line":92,"address":[4404638],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[4405230],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[4405822],"length":1,"stats":{"Line":1},"fn_name":null},{"line":95,"address":[4406414],"length":1,"stats":{"Line":1},"fn_name":null},{"line":96,"address":[4407006],"length":1,"stats":{"Line":1},"fn_name":null},{"line":97,"address":[4407598],"length":1,"stats":{"Line":1},"fn_name":null},{"line":98,"address":[4408190],"length":1,"stats":{"Line":1},"fn_name":null},{"line":99,"address":[4408782],"length":1,"stats":{"Line":1},"fn_name":null},{"line":100,"address":[4409374],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[4409966],"length":1,"stats":{"Line":1},"fn_name":null},{"line":102,"address":[4410558],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[4411150],"length":1,"stats":{"Line":1},"fn_name":null},{"line":104,"address":[4411742],"length":1,"stats":{"Line":1},"fn_name":null},{"line":105,"address":[4412334],"length":1,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[4412926],"length":1,"stats":{"Line":1},"fn_name":null},{"line":107,"address":[4413518],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[4414110],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[4414702],"length":1,"stats":{"Line":1},"fn_name":null},{"line":110,"address":[4415294],"length":1,"stats":{"Line":1},"fn_name":null},{"line":111,"address":[4415886],"length":1,"stats":{"Line":1},"fn_name":null},{"line":112,"address":[4416478],"length":1,"stats":{"Line":1},"fn_name":null},{"line":113,"address":[4417070],"length":1,"stats":{"Line":1},"fn_name":null},{"line":114,"address":[4417662],"length":1,"stats":{"Line":1},"fn_name":null},{"line":115,"address":[4418254],"length":1,"stats":{"Line":1},"fn_name":null},{"line":116,"address":[4418846],"length":1,"stats":{"Line":1},"fn_name":null},{"line":117,"address":[4419438],"length":1,"stats":{"Line":1},"fn_name":null},{"line":118,"address":[4420030],"length":1,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[4420622],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[4421214],"length":1,"stats":{"Line":1},"fn_name":null},{"line":121,"address":[4421806],"length":1,"stats":{"Line":1},"fn_name":null},{"line":122,"address":[4422398],"length":1,"stats":{"Line":1},"fn_name":null},{"line":123,"address":[4422990],"length":1,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[4423582],"length":1,"stats":{"Line":1},"fn_name":null},{"line":125,"address":[4424174],"length":1,"stats":{"Line":1},"fn_name":null},{"line":126,"address":[4424766],"length":1,"stats":{"Line":1},"fn_name":null},{"line":127,"address":[4425358],"length":1,"stats":{"Line":1},"fn_name":null},{"line":128,"address":[4425950],"length":1,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[4426542],"length":1,"stats":{"Line":1},"fn_name":null},{"line":130,"address":[4427134],"length":1,"stats":{"Line":1},"fn_name":null},{"line":131,"address":[4427726],"length":1,"stats":{"Line":1},"fn_name":null},{"line":132,"address":[4428318],"length":1,"stats":{"Line":1},"fn_name":null},{"line":133,"address":[4428910],"length":1,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[4429502],"length":1,"stats":{"Line":1},"fn_name":null},{"line":135,"address":[4430094],"length":1,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[4430686],"length":1,"stats":{"Line":1},"fn_name":null},{"line":137,"address":[4431278],"length":1,"stats":{"Line":1},"fn_name":null},{"line":138,"address":[4431870],"length":1,"stats":{"Line":1},"fn_name":null},{"line":139,"address":[4432462],"length":1,"stats":{"Line":1},"fn_name":null},{"line":140,"address":[4433054],"length":1,"stats":{"Line":1},"fn_name":null},{"line":141,"address":[4433662],"length":1,"stats":{"Line":1},"fn_name":null},{"line":142,"address":[4434270],"length":1,"stats":{"Line":1},"fn_name":null},{"line":143,"address":[4434878],"length":1,"stats":{"Line":1},"fn_name":null},{"line":144,"address":[4435486],"length":1,"stats":{"Line":1},"fn_name":null},{"line":145,"address":[4436094],"length":1,"stats":{"Line":1},"fn_name":null},{"line":146,"address":[4436702],"length":1,"stats":{"Line":1},"fn_name":null},{"line":147,"address":[4437310],"length":1,"stats":{"Line":1},"fn_name":null},{"line":148,"address":[4437918],"length":1,"stats":{"Line":1},"fn_name":null},{"line":149,"address":[4438526],"length":1,"stats":{"Line":1},"fn_name":null},{"line":150,"address":[4439134],"length":1,"stats":{"Line":1},"fn_name":null},{"line":151,"address":[4439742],"length":1,"stats":{"Line":1},"fn_name":null},{"line":152,"address":[4440350],"length":1,"stats":{"Line":1},"fn_name":null},{"line":153,"address":[4440958],"length":1,"stats":{"Line":1},"fn_name":null},{"line":154,"address":[4441566],"length":1,"stats":{"Line":1},"fn_name":null},{"line":155,"address":[4442174],"length":1,"stats":{"Line":1},"fn_name":null},{"line":163,"address":[4338032,4338096,4338037,4338320,4338101,4338197,4338261,4338352,4338229,4338165,4338069,4338256,4338293,4338357,4338064,4338325,4338128,4338192,4338288,4338133,4338224,4338160],"length":1,"stats":{"Line":33},"fn_name":"{{closure}}"},{"line":164,"address":[4443540,4443636,4443252,4443732,4443156,4442772,4443348,4442964,4443060,4442868,4443444],"length":1,"stats":{"Line":11},"fn_name":null},{"line":165,"address":[4443183,4443596,4442895,4443087,4443116,4443471,4443212,4443375,4443788,4442954,4443567,4443722,4443242,4443279,4443818,4443759,4443050,4443530,4443500,4442799,4442991,4443020,4443404,4443434,4442924,4443692,4442828,4443626,4443663,4443338,4442858,4443308,4443146],"length":1,"stats":{"Line":11},"fn_name":null},{"line":187,"address":[4338384,4338389],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":188,"address":[4443835],"length":1,"stats":{"Line":1},"fn_name":null},{"line":189,"address":[4443954,4443890,4443924],"length":1,"stats":{"Line":1},"fn_name":null},{"line":193,"address":[4338416,4338421],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":194,"address":[4443979],"length":1,"stats":{"Line":1},"fn_name":null},{"line":195,"address":[4444034,4444068,4444098],"length":1,"stats":{"Line":1},"fn_name":null},{"line":199,"address":[4338453,4338448],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":200,"address":[4444123],"length":1,"stats":{"Line":1},"fn_name":null},{"line":201,"address":[4444242,4444178,4444212],"length":1,"stats":{"Line":1},"fn_name":null},{"line":205,"address":[4338480,4338485],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":206,"address":[4444267],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[4444386,4444356,4444322],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":115,"coverable":117},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","filter","time.rs"],"content":"use std::time::SystemTime;\n\n/// Filter based on time ranges.\n#[derive(Debug, PartialEq)]\npub enum TimeFilter {\n    Before(SystemTime),\n    After(SystemTime),\n}\n\nimpl TimeFilter {\n    fn from_str(ref_time: &SystemTime, s: &str) -> Option<SystemTime> {\n        humantime::parse_duration(s)\n            .map(|duration| *ref_time - duration)\n            .or_else(|_| humantime::parse_rfc3339_weak(s))\n            .ok()\n    }\n\n    pub fn before(ref_time: &SystemTime, s: &str) -> Option<TimeFilter> {\n        TimeFilter::from_str(ref_time, s).map(TimeFilter::Before)\n    }\n\n    pub fn after(ref_time: &SystemTime, s: &str) -> Option<TimeFilter> {\n        TimeFilter::from_str(ref_time, s).map(TimeFilter::After)\n    }\n\n    pub fn applies_to(&self, t: &SystemTime) -> bool {\n        match self {\n            TimeFilter::Before(limit) => t <= limit,\n            TimeFilter::After(limit) => t >= limit,\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::time::Duration;\n\n    #[test]\n    fn is_time_filter_applicable() {\n        let ref_time = humantime::parse_rfc3339(\"2010-10-10T10:10:10Z\").unwrap();\n        assert!(TimeFilter::after(&ref_time, \"1min\")\n            .unwrap()\n            .applies_to(&ref_time));\n        assert!(!TimeFilter::before(&ref_time, \"1min\")\n            .unwrap()\n            .applies_to(&ref_time));\n\n        let t1m_ago = ref_time - Duration::from_secs(60);\n        assert!(!TimeFilter::after(&ref_time, \"30sec\")\n            .unwrap()\n            .applies_to(&t1m_ago));\n        assert!(TimeFilter::after(&ref_time, \"2min\")\n            .unwrap()\n            .applies_to(&t1m_ago));\n\n        assert!(TimeFilter::before(&ref_time, \"30sec\")\n            .unwrap()\n            .applies_to(&t1m_ago));\n        assert!(!TimeFilter::before(&ref_time, \"2min\")\n            .unwrap()\n            .applies_to(&t1m_ago));\n\n        let t10s_before = \"2010-10-10 10:10:00\";\n        assert!(!TimeFilter::before(&ref_time, t10s_before)\n            .unwrap()\n            .applies_to(&ref_time));\n        assert!(TimeFilter::before(&ref_time, t10s_before)\n            .unwrap()\n            .applies_to(&t1m_ago));\n\n        assert!(TimeFilter::after(&ref_time, t10s_before)\n            .unwrap()\n            .applies_to(&ref_time));\n        assert!(!TimeFilter::after(&ref_time, t10s_before)\n            .unwrap()\n            .applies_to(&t1m_ago));\n    }\n}\n","traces":[{"line":11,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":12,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":13,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":14,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":18,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":22,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":23,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[4701488,4701493],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":41,"address":[4780398],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[4780563,4780451],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[4780600,4780535,4780702],"length":1,"stats":{"Line":2},"fn_name":null},{"line":49,"address":[4780658,4780732],"length":1,"stats":{"Line":2},"fn_name":null},{"line":50,"address":[4780912,4780783],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[4780884,4781043,4780949],"length":1,"stats":{"Line":2},"fn_name":null},{"line":57,"address":[4781015,4781080,4781174],"length":1,"stats":{"Line":2},"fn_name":null},{"line":60,"address":[4781146,4781211,4781327],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[4781279],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[4781457,4781364,4781299],"length":1,"stats":{"Line":2},"fn_name":null},{"line":68,"address":[4781588,4781429,4781494],"length":1,"stats":{"Line":2},"fn_name":null},{"line":72,"address":[4781625,4781716,4781560],"length":1,"stats":{"Line":2},"fn_name":null},{"line":75,"address":[4781753,4781688,4781822,4781852],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":26,"coverable":26},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","main.rs"],"content":"mod app;\nmod error;\nmod exec;\nmod exit_codes;\nmod filesystem;\nmod filetypes;\nmod filter;\nmod options;\nmod output;\nmod regex_helper;\nmod walk;\n\nuse std::env;\nuse std::path::{Path, PathBuf};\nuse std::process;\nuse std::sync::Arc;\nuse std::time;\n\nuse anyhow::{anyhow, Context, Result};\nuse atty::Stream;\nuse globset::GlobBuilder;\nuse lscolors::LsColors;\nuse regex::bytes::{RegexBuilder, RegexSetBuilder};\n\nuse crate::error::print_error;\nuse crate::exec::CommandTemplate;\nuse crate::exit_codes::ExitCode;\nuse crate::filetypes::FileTypes;\n#[cfg(unix)]\nuse crate::filter::OwnerFilter;\nuse crate::filter::{SizeFilter, TimeFilter};\nuse crate::options::Options;\nuse crate::regex_helper::pattern_has_uppercase_char;\n\n// We use jemalloc for performance reasons, see https://github.com/sharkdp/fd/pull/481\n// FIXME: re-enable jemalloc on macOS, see comment in Cargo.toml file for more infos\n#[cfg(all(not(windows), not(target_os = \"macos\"), not(target_env = \"musl\")))]\n#[global_allocator]\nstatic ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n\nfn run() -> Result<ExitCode> {\n    let matches = app::build_app().get_matches_from(env::args_os());\n\n    // Set the current working directory of the process\n    if let Some(base_directory) = matches.value_of_os(\"base-directory\") {\n        let base_directory = Path::new(base_directory);\n        if !filesystem::is_dir(base_directory) {\n            return Err(anyhow!(\n                \"The '--base-directory' path '{}' is not a directory.\",\n                base_directory.to_string_lossy()\n            ));\n        }\n        env::set_current_dir(base_directory).with_context(|| {\n            format!(\n                \"Could not set '{}' as the current working directory.\",\n                base_directory.to_string_lossy()\n            )\n        })?;\n    }\n\n    let current_directory = Path::new(\".\");\n    if !filesystem::is_dir(current_directory) {\n        return Err(anyhow!(\n            \"Could not retrieve current directory (has it been deleted?).\"\n        ));\n    }\n\n    // Get the search pattern\n    let pattern = matches\n        .value_of_os(\"pattern\")\n        .map(|p| {\n            p.to_str()\n                .ok_or_else(|| anyhow!(\"The search pattern includes invalid UTF-8 sequences.\"))\n        })\n        .transpose()?\n        .unwrap_or(\"\");\n\n    // Get one or more root directories to search.\n    let passed_arguments = matches\n        .values_of_os(\"path\")\n        .or_else(|| matches.values_of_os(\"search-path\"));\n\n    let mut search_paths = if let Some(paths) = passed_arguments {\n        let mut directories = vec![];\n        for path in paths {\n            let path_buffer = PathBuf::from(path);\n            if filesystem::is_dir(&path_buffer) {\n                directories.push(path_buffer);\n            } else {\n                print_error(format!(\n                    \"Search path '{}' is not a directory.\",\n                    path_buffer.to_string_lossy()\n                ));\n            }\n        }\n\n        directories\n    } else {\n        vec![current_directory.to_path_buf()]\n    };\n\n    // Check if we have no valid search paths.\n    if search_paths.is_empty() {\n        return Err(anyhow!(\"No valid search paths given.\"));\n    }\n\n    if matches.is_present(\"absolute-path\") {\n        search_paths = search_paths\n            .iter()\n            .map(|path_buffer| {\n                path_buffer\n                    .canonicalize()\n                    .and_then(|pb| filesystem::absolute_path(pb.as_path()))\n                    .unwrap()\n            })\n            .collect();\n    }\n\n    // Detect if the user accidentally supplied a path instead of a search pattern\n    if !matches.is_present(\"full-path\")\n        && pattern.contains(std::path::MAIN_SEPARATOR)\n        && filesystem::is_dir(Path::new(pattern))\n    {\n        return Err(anyhow!(\n            \"The search pattern '{pattern}' contains a path-separation character ('{sep}') \\\n             and will not lead to any search results.\\n\\n\\\n             If you want to search for all files inside the '{pattern}' directory, use a match-all pattern:\\n\\n  \\\n             fd . '{pattern}'\\n\\n\\\n             Instead, if you want your pattern to match the full file path, use:\\n\\n  \\\n             fd --full-path '{pattern}'\",\n            pattern = pattern,\n            sep = std::path::MAIN_SEPARATOR,\n        ));\n    }\n\n    let pattern_regex = if matches.is_present(\"glob\") && !pattern.is_empty() {\n        let glob = GlobBuilder::new(pattern).literal_separator(true).build()?;\n        glob.regex().to_owned()\n    } else if matches.is_present(\"fixed-strings\") {\n        // Treat pattern as literal string if '--fixed-strings' is used\n        regex::escape(pattern)\n    } else {\n        String::from(pattern)\n    };\n\n    // The search will be case-sensitive if the command line flag is set or\n    // if the pattern has an uppercase character (smart case).\n    let case_sensitive = !matches.is_present(\"ignore-case\")\n        && (matches.is_present(\"case-sensitive\") || pattern_has_uppercase_char(&pattern_regex));\n\n    #[cfg(windows)]\n    let ansi_colors_support =\n        ansi_term::enable_ansi_support().is_ok() || std::env::var_os(\"TERM\").is_some();\n\n    #[cfg(not(windows))]\n    let ansi_colors_support = true;\n\n    let interactive_terminal = atty::is(Stream::Stdout);\n    let colored_output = match matches.value_of(\"color\") {\n        Some(\"always\") => true,\n        Some(\"never\") => false,\n        _ => ansi_colors_support && env::var_os(\"NO_COLOR\").is_none() && interactive_terminal,\n    };\n\n    let path_separator = matches.value_of(\"path-separator\").map(|str| str.to_owned());\n\n    let ls_colors = if colored_output {\n        Some(LsColors::from_env().unwrap_or_default())\n    } else {\n        None\n    };\n\n    let command = if let Some(args) = matches.values_of(\"exec\") {\n        Some(CommandTemplate::new(args))\n    } else if let Some(args) = matches.values_of(\"exec-batch\") {\n        Some(CommandTemplate::new_batch(args)?)\n    } else if matches.is_present(\"list-details\") {\n        let color = matches.value_of(\"color\").unwrap_or(\"auto\");\n        let color_arg = [\"--color=\", color].concat();\n\n        #[allow(unused)]\n        let gnu_ls = |command_name| {\n            vec![\n                command_name,\n                \"-l\",               // long listing format\n                \"--human-readable\", // human readable file sizes\n                \"--directory\",      // list directories themselves, not their contents\n                &color_arg,\n            ]\n        };\n\n        let cmd: Vec<&str> = if cfg!(unix) {\n            if !cfg!(any(\n                target_os = \"macos\",\n                target_os = \"dragonfly\",\n                target_os = \"freebsd\",\n                target_os = \"netbsd\",\n                target_os = \"openbsd\"\n            )) {\n                // Assume ls is GNU ls\n                gnu_ls(\"ls\")\n            } else {\n                // MacOS, DragonFlyBSD, FreeBSD\n                use std::process::{Command, Stdio};\n\n                // Use GNU ls, if available (support for --color=auto, better LS_COLORS support)\n                let gnu_ls_exists = Command::new(\"gls\")\n                    .arg(\"--version\")\n                    .stdout(Stdio::null())\n                    .stderr(Stdio::null())\n                    .status()\n                    .is_ok();\n\n                if gnu_ls_exists {\n                    gnu_ls(\"gls\")\n                } else {\n                    let mut cmd = vec![\n                        \"ls\", // BSD version of ls\n                        \"-l\", // long listing format\n                        \"-h\", // '--human-readable' is not available, '-h' is\n                        \"-d\", // '--directory' is not available, but '-d' is\n                    ];\n\n                    if !cfg!(any(target_os = \"netbsd\", target_os = \"openbsd\")) && colored_output {\n                        // -G is not available in NetBSD's and OpenBSD's ls\n                        cmd.push(\"-G\");\n                    }\n\n                    cmd\n                }\n            }\n        } else if cfg!(windows) {\n            use std::process::{Command, Stdio};\n\n            // Use GNU ls, if available\n            let gnu_ls_exists = Command::new(\"ls\")\n                .arg(\"--version\")\n                .stdout(Stdio::null())\n                .stderr(Stdio::null())\n                .status()\n                .is_ok();\n\n            if gnu_ls_exists {\n                gnu_ls(\"ls\")\n            } else {\n                return Err(anyhow!(\n                    \"'fd --list-details' is not supported on Windows unless GNU 'ls' is installed.\"\n                ));\n            }\n        } else {\n            return Err(anyhow!(\n                \"'fd --list-details' is not supported on this platform.\"\n            ));\n        };\n\n        Some(CommandTemplate::new_batch(&cmd).unwrap())\n    } else {\n        None\n    };\n\n    let size_limits = if let Some(vs) = matches.values_of(\"size\") {\n        vs.map(|sf| {\n            SizeFilter::from_string(sf)\n                .ok_or_else(|| anyhow!(\"'{}' is not a valid size constraint. See 'fd --help'.\", sf))\n        })\n        .collect::<Result<Vec<_>>>()?\n    } else {\n        vec![]\n    };\n\n    let now = time::SystemTime::now();\n    let mut time_constraints: Vec<TimeFilter> = Vec::new();\n    if let Some(t) = matches.value_of(\"changed-within\") {\n        if let Some(f) = TimeFilter::after(&now, t) {\n            time_constraints.push(f);\n        } else {\n            return Err(anyhow!(\n                \"'{}' is not a valid date or duration. See 'fd --help'.\",\n                t\n            ));\n        }\n    }\n    if let Some(t) = matches.value_of(\"changed-before\") {\n        if let Some(f) = TimeFilter::before(&now, t) {\n            time_constraints.push(f);\n        } else {\n            return Err(anyhow!(\n                \"'{}' is not a valid date or duration. See 'fd --help'.\",\n                t\n            ));\n        }\n    }\n\n    #[cfg(unix)]\n    let owner_constraint = if let Some(s) = matches.value_of(\"owner\") {\n        OwnerFilter::from_string(s)?\n    } else {\n        None\n    };\n\n    let config = Options {\n        case_sensitive,\n        search_full_path: matches.is_present(\"full-path\"),\n        ignore_hidden: !(matches.is_present(\"hidden\")\n            || matches.occurrences_of(\"rg-alias-hidden-ignore\") >= 2),\n        read_fdignore: !(matches.is_present(\"no-ignore\")\n            || matches.is_present(\"rg-alias-hidden-ignore\")),\n        read_vcsignore: !(matches.is_present(\"no-ignore\")\n            || matches.is_present(\"rg-alias-hidden-ignore\")\n            || matches.is_present(\"no-ignore-vcs\")),\n        read_global_ignore: !(matches.is_present(\"no-ignore\")\n            || matches.is_present(\"rg-alias-hidden-ignore\")\n            || matches.is_present(\"no-global-ignore-file\")),\n        follow_links: matches.is_present(\"follow\"),\n        one_file_system: matches.is_present(\"one-file-system\"),\n        null_separator: matches.is_present(\"null_separator\"),\n        max_depth: matches\n            .value_of(\"max-depth\")\n            .or_else(|| matches.value_of(\"rg-depth\"))\n            .or_else(|| matches.value_of(\"exact-depth\"))\n            .and_then(|n| usize::from_str_radix(n, 10).ok()),\n        min_depth: matches\n            .value_of(\"min-depth\")\n            .or_else(|| matches.value_of(\"exact-depth\"))\n            .and_then(|n| usize::from_str_radix(n, 10).ok()),\n        threads: std::cmp::max(\n            matches\n                .value_of(\"threads\")\n                .and_then(|n| usize::from_str_radix(n, 10).ok())\n                .unwrap_or_else(num_cpus::get),\n            1,\n        ),\n        max_buffer_time: matches\n            .value_of(\"max-buffer-time\")\n            .and_then(|n| u64::from_str_radix(n, 10).ok())\n            .map(time::Duration::from_millis),\n        ls_colors,\n        interactive_terminal,\n        file_types: matches.values_of(\"file-type\").map(|values| {\n            let mut file_types = FileTypes::default();\n            for value in values {\n                match value {\n                    \"f\" | \"file\" => file_types.files = true,\n                    \"d\" | \"directory\" => file_types.directories = true,\n                    \"l\" | \"symlink\" => file_types.symlinks = true,\n                    \"x\" | \"executable\" => {\n                        file_types.executables_only = true;\n                        file_types.files = true;\n                    }\n                    \"e\" | \"empty\" => file_types.empty_only = true,\n                    \"s\" | \"socket\" => file_types.sockets = true,\n                    \"p\" | \"pipe\" => file_types.pipes = true,\n                    _ => unreachable!(),\n                }\n            }\n\n            // If only 'empty' was specified, search for both files and directories:\n            if file_types.empty_only && !(file_types.files || file_types.directories) {\n                file_types.files = true;\n                file_types.directories = true;\n            }\n\n            file_types\n        }),\n        extensions: matches\n            .values_of(\"extension\")\n            .map(|exts| {\n                let patterns = exts\n                    .map(|e| e.trim_start_matches('.'))\n                    .map(|e| format!(r\".\\.{}$\", regex::escape(e)));\n                RegexSetBuilder::new(patterns)\n                    .case_insensitive(true)\n                    .build()\n            })\n            .transpose()?,\n        command: command.map(Arc::new),\n        exclude_patterns: matches\n            .values_of(\"exclude\")\n            .map(|v| v.map(|p| String::from(\"!\") + p).collect())\n            .unwrap_or_else(|| vec![]),\n        ignore_files: matches\n            .values_of(\"ignore-file\")\n            .map(|vs| vs.map(PathBuf::from).collect())\n            .unwrap_or_else(|| vec![]),\n        size_constraints: size_limits,\n        time_constraints,\n        #[cfg(unix)]\n        owner_constraint,\n        show_filesystem_errors: matches.is_present(\"show-errors\"),\n        path_separator,\n        max_results: matches\n            .value_of(\"max-results\")\n            .and_then(|n| usize::from_str_radix(n, 10).ok())\n            .filter(|&n| n != 0)\n            .or_else(|| {\n                if matches.is_present(\"max-one-result\") {\n                    Some(1)\n                } else {\n                    None\n                }\n            }),\n    };\n\n    let re = RegexBuilder::new(&pattern_regex)\n        .case_insensitive(!config.case_sensitive)\n        .dot_matches_new_line(true)\n        .build()\n        .map_err(|e| {\n            anyhow!(\n                \"{}\\n\\nNote: You can use the '--fixed-strings' option to search for a \\\n                 literal string instead of a regular expression. Alternatively, you can \\\n                 also use the '--glob' option to match on a glob pattern.\",\n                e.to_string()\n            )\n        })?;\n\n    walk::scan(&search_paths, Arc::new(re), Arc::new(config))\n}\n\nfn main() {\n    let result = run();\n    match result {\n        Ok(exit_code) => {\n            process::exit(exit_code.into());\n        }\n        Err(err) => {\n            eprintln!(\"[fd error]: {}\", err);\n            process::exit(ExitCode::GeneralError.into());\n        }\n    }\n}\n","traces":[{"line":39,"address":[4334336,4334622,4334416,4334608,4334525,4334350,4334440,4334496],"length":1,"stats":{"Line":8},"fn_name":"__rg_alloc"},{"line":41,"address":[4318955,4318816],"length":1,"stats":{"Line":0},"fn_name":"run"},{"line":42,"address":[4318833,4318970,4332498],"length":1,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[4319036,4319160,4319930],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[4319197],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[4319262],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[4319730,4319417],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[4319339],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[4319346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[4319866,4319743,4319305],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4476352],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[4476274],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[4476281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4319932],"length":1,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[4320019],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4320108],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[4320065,4320432,4320262,4320187],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[4476624],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":72,"address":[4476646],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[4476576,4476587],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":75,"address":[4320360,4320240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[4320471,4320522],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[4320514],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[4321653,4320557,4320959,4320642],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[4320674],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[4320817,4320693,4320964,4321589],"length":1,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[4321030],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[4321262,4321087,4321576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[4321199],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[4321310],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[4321153],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[4321176,4321267],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[4320911],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[4320591,4332627,4321594],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[4321663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[4321816,4321747],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[4332746,4321709,4321828],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[4321839,4332645],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[4476880],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":111,"address":[4476902],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[4476752,4476759],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":120,"address":[4322275,4322009,4322113,4322191],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[4322152],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[4322070,4322254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[4322351],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[4322329],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[4322336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[4322778,4322288,4323499,4323584],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[4323249,4322909],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[4323473,4323211],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[4322868,4323430,4323480,4323580,4323508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[4323545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[4323514],"length":1,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[4323723,4323801,4323586],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[4323644,4323750,4323827],"length":1,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[4323685],"length":1,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[4323883,4323693],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[4324128,4323892,4324179,4324141],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[4324120,4323971,4324010],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[4324065,4324133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[4324184,4324146,4323995],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[4324327],"length":1,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[4324409,4324439],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[4324441],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[4324419],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[4324624,4325810,4324523,4324783],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[4324656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[4324792,4325192,4325808,4324857,4324586],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[4324889,4324992,4325197,4325264,4325318],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[4325330,4324987,4324816,4325352,4325806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[4325357],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[4325487],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[4325566],"length":1,"stats":{"Line":0},"fn_name":null},{"line":183,"address":[4477188,4477297,4477095],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[4477136],"length":1,"stats":{"Line":0},"fn_name":null},{"line":256,"address":[4325656,4325682,4325728],"length":1,"stats":{"Line":0},"fn_name":null},{"line":258,"address":[4325336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":261,"address":[4326152,4325893,4325812],"length":1,"stats":{"Line":0},"fn_name":null},{"line":262,"address":[4325925,4326154,4326048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[4477638,4477590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[4477350,4477628,4477328],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":266,"address":[4326026,4326156,4326221,4326234],"length":1,"stats":{"Line":0},"fn_name":null},{"line":268,"address":[4325883,4332485],"length":1,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[4326239],"length":1,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[4326306],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[4326313,4326712],"length":1,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[4326625,4326461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":275,"address":[4326657],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[4326725,4326553,4326940],"length":1,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[4326538],"length":1,"stats":{"Line":0},"fn_name":null},{"line":283,"address":[4326945,4327336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[4327085,4327249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":285,"address":[4327281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":287,"address":[4327349,4327177],"length":1,"stats":{"Line":0},"fn_name":null},{"line":288,"address":[4327162],"length":1,"stats":{"Line":0},"fn_name":null},{"line":295,"address":[4327639,4327856,4327525],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[4327790,4327743,4327684],"length":1,"stats":{"Line":0},"fn_name":null},{"line":298,"address":[4327628],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[4327865],"length":1,"stats":{"Line":0},"fn_name":null},{"line":304,"address":[4327910,4328003,4328085,4328067],"length":1,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[4328154,4328012,4328218,4328096],"length":1,"stats":{"Line":0},"fn_name":null},{"line":308,"address":[4328244,4328163,4328305,4328420,4328362],"length":1,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[4328314,4328485,4328546,4328658,4328600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[4328555],"length":1,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[4328723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[4328761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[4328858,4328799,4328921],"length":1,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[4329023,4329098],"length":1,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[4329329],"length":1,"stats":{"Line":0},"fn_name":null},{"line":333,"address":[4329361],"length":1,"stats":{"Line":0},"fn_name":null},{"line":339,"address":[4329646,4329562],"length":1,"stats":{"Line":0},"fn_name":null},{"line":365,"address":[4329866,4329722,4330060],"length":1,"stats":{"Line":0},"fn_name":null},{"line":376,"address":[4329994,4330208],"length":1,"stats":{"Line":0},"fn_name":null},{"line":377,"address":[4330216,4330300],"length":1,"stats":{"Line":0},"fn_name":null},{"line":381,"address":[4330330,4330397],"length":1,"stats":{"Line":0},"fn_name":null},{"line":389,"address":[4330523],"length":1,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[4330764,4330620,4330709,4330803],"length":1,"stats":{"Line":0},"fn_name":null},{"line":404,"address":[4331548,4331692,4331584,4331942,4331784,4331621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[4331613],"length":1,"stats":{"Line":0},"fn_name":null},{"line":408,"address":[4480758,4480704],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":409,"address":[4480781,4480854],"length":1,"stats":{"Line":0},"fn_name":null},{"line":410,"address":[4480711],"length":1,"stats":{"Line":0},"fn_name":null},{"line":413,"address":[4480718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":417,"address":[4333147,4332077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":420,"address":[4334272,4334000],"length":1,"stats":{"Line":0},"fn_name":"main"},{"line":421,"address":[4334007],"length":1,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[4334112],"length":1,"stats":{"Line":0},"fn_name":null},{"line":423,"address":[4334017,4334119],"length":1,"stats":{"Line":0},"fn_name":null},{"line":424,"address":[4334128,4334114],"length":1,"stats":{"Line":0},"fn_name":null},{"line":426,"address":[4334031],"length":1,"stats":{"Line":0},"fn_name":null},{"line":427,"address":[4334225,4334164,4334041],"length":1,"stats":{"Line":0},"fn_name":null},{"line":428,"address":[4334246],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":1,"coverable":132},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","output.rs"],"content":"use std::io::{self, StdoutLock, Write};\nuse std::path::{Path, PathBuf};\nuse std::process;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::sync::Arc;\n\nuse ansi_term;\nuse lscolors::{LsColors, Style};\n\nuse crate::exit_codes::ExitCode;\nuse crate::filesystem::strip_current_dir;\nuse crate::options::Options;\n\npub fn replace_path_separator(path: &str, new_path_separator: &str) -> String {\n    path.replace(std::path::MAIN_SEPARATOR, &new_path_separator)\n}\n\n// TODO: this function is performance critical and can probably be optimized\npub fn print_entry(\n    stdout: &mut StdoutLock,\n    entry: &PathBuf,\n    config: &Options,\n    wants_to_quit: &Arc<AtomicBool>,\n) {\n    let path = if entry.is_absolute() {\n        entry.as_path()\n    } else {\n        strip_current_dir(entry)\n    };\n\n    let r = if let Some(ref ls_colors) = config.ls_colors {\n        print_entry_colorized(stdout, path, config, ls_colors, &wants_to_quit)\n    } else {\n        print_entry_uncolorized(stdout, path, config)\n    };\n\n    if r.is_err() {\n        // Probably a broken pipe. Exit gracefully.\n        process::exit(ExitCode::GeneralError.into());\n    }\n}\n\n// TODO: this function is performance critical and can probably be optimized\nfn print_entry_colorized(\n    stdout: &mut StdoutLock,\n    path: &Path,\n    config: &Options,\n    ls_colors: &LsColors,\n    wants_to_quit: &Arc<AtomicBool>,\n) -> io::Result<()> {\n    let default_style = ansi_term::Style::default();\n\n    // Traverse the path and colorize each component\n    for (component, style) in ls_colors.style_for_path_components(path) {\n        let style = style\n            .map(Style::to_ansi_term_style)\n            .unwrap_or(default_style);\n\n        let mut path_string = component.to_string_lossy();\n        if let Some(ref separator) = config.path_separator {\n            *path_string.to_mut() = replace_path_separator(&path_string, &separator);\n        }\n        write!(stdout, \"{}\", style.paint(path_string))?;\n\n        // TODO: can we move this out of the if-statement? Why do we call it that often?\n        if wants_to_quit.load(Ordering::Relaxed) {\n            writeln!(stdout)?;\n            process::exit(ExitCode::KilledBySigint.into());\n        }\n    }\n\n    if config.null_separator {\n        write!(stdout, \"\\0\")\n    } else {\n        writeln!(stdout)\n    }\n}\n\n// TODO: this function is performance critical and can probably be optimized\nfn print_entry_uncolorized_base(\n    stdout: &mut StdoutLock,\n    path: &Path,\n    config: &Options,\n) -> io::Result<()> {\n    let separator = if config.null_separator { \"\\0\" } else { \"\\n\" };\n\n    let mut path_string = path.to_string_lossy();\n    if let Some(ref separator) = config.path_separator {\n        *path_string.to_mut() = replace_path_separator(&path_string, &separator);\n    }\n    write!(stdout, \"{}{}\", path_string, separator)\n}\n\n#[cfg(not(unix))]\nfn print_entry_uncolorized(\n    stdout: &mut StdoutLock,\n    path: &Path,\n    config: &Options,\n) -> io::Result<()> {\n    print_entry_uncolorized_base(stdout, path, config)\n}\n\n#[cfg(unix)]\nfn print_entry_uncolorized(\n    stdout: &mut StdoutLock,\n    path: &Path,\n    config: &Options,\n) -> io::Result<()> {\n    use std::os::unix::ffi::OsStrExt;\n\n    if config.interactive_terminal || config.path_separator.is_some() {\n        // Fall back to the base implementation\n        print_entry_uncolorized_base(stdout, path, config)\n    } else {\n        // Print path as raw bytes, allowing invalid UTF-8 filenames to be passed to other processes\n        let separator = if config.null_separator { b\"\\0\" } else { b\"\\n\" };\n        stdout.write_all(path.as_os_str().as_bytes())?;\n        stdout.write_all(separator)\n    }\n}\n","traces":[{"line":14,"address":[4642112],"length":1,"stats":{"Line":0},"fn_name":"replace_path_separator"},{"line":15,"address":[4642139],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[4642267,4642176],"length":1,"stats":{"Line":0},"fn_name":"print_entry"},{"line":25,"address":[4642217,4642286,4642341],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[4642314],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[4642353,4642297],"length":1,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[4642538,4642463,4642400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[4642477],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[4642420],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[4642542],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[4642615],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[4642837,4642672],"length":1,"stats":{"Line":0},"fn_name":"print_entry_colorized"},{"line":51,"address":[4642730],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4644517,4642852],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[4643187,4643264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[4643224],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[4643298],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[4643376,4644906],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4644816,4643426,4644911],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4644028,4644123,4643590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[4644144],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[4644470,4644226],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[4644480],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[4644530,4644709,4644677],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[4644599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[4644544,4644695],"length":1,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[4645230,4645120],"length":1,"stats":{"Line":0},"fn_name":"print_entry_uncolorized_base"},{"line":85,"address":[4645252,4645162],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[4645301],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[4645343,4645996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[4645906,4645514,4646001,4645393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[4645576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[4646449,4646112],"length":1,"stats":{"Line":0},"fn_name":"print_entry_uncolorized"},{"line":111,"address":[4646154,4646603,4646299],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[4646294],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[4646304,4646258],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[4646548,4646464,4646340],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[4646574],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":38},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","regex_helper.rs"],"content":"use regex_syntax::hir::Hir;\nuse regex_syntax::ParserBuilder;\n\n/// Determine if a regex pattern contains a literal uppercase character.\npub fn pattern_has_uppercase_char(pattern: &str) -> bool {\n    let mut parser = ParserBuilder::new().allow_invalid_utf8(true).build();\n\n    parser\n        .parse(pattern)\n        .map(|hir| hir_has_uppercase_char(&hir))\n        .unwrap_or(false)\n}\n\n/// Determine if a regex expression contains a literal uppercase character.\nfn hir_has_uppercase_char(hir: &Hir) -> bool {\n    use regex_syntax::hir::*;\n\n    match *hir.kind() {\n        HirKind::Literal(Literal::Unicode(c)) => c.is_uppercase(),\n        HirKind::Literal(Literal::Byte(b)) => char::from(b).is_uppercase(),\n        HirKind::Class(Class::Unicode(ref ranges)) => ranges\n            .iter()\n            .any(|r| r.start().is_uppercase() || r.end().is_uppercase()),\n        HirKind::Class(Class::Bytes(ref ranges)) => ranges\n            .iter()\n            .any(|r| char::from(r.start()).is_uppercase() || char::from(r.end()).is_uppercase()),\n        HirKind::Group(Group { ref hir, .. }) | HirKind::Repetition(Repetition { ref hir, .. }) => {\n            hir_has_uppercase_char(hir)\n        }\n        HirKind::Concat(ref hirs) | HirKind::Alternation(ref hirs) => {\n            hirs.iter().any(hir_has_uppercase_char)\n        }\n        _ => false,\n    }\n}\n\n#[test]\nfn pattern_has_uppercase_char_simple() {\n    assert!(pattern_has_uppercase_char(\"A\"));\n    assert!(pattern_has_uppercase_char(\"foo.EXE\"));\n\n    assert!(!pattern_has_uppercase_char(\"a\"));\n    assert!(!pattern_has_uppercase_char(\"foo.exe123\"));\n}\n\n#[test]\nfn pattern_has_uppercase_char_advanced() {\n    assert!(pattern_has_uppercase_char(\"foo.[a-zA-Z]\"));\n\n    assert!(!pattern_has_uppercase_char(r\"\\Acargo\"));\n    assert!(!pattern_has_uppercase_char(r\"carg\\x6F\"));\n}\n","traces":[{"line":5,"address":[4699584,4699636],"length":1,"stats":{"Line":2},"fn_name":"pattern_has_uppercase_char"},{"line":6,"address":[4699607,4699651],"length":1,"stats":{"Line":4},"fn_name":null},{"line":8,"address":[4699691,4699771],"length":1,"stats":{"Line":3},"fn_name":null},{"line":10,"address":[4798137,4798128],"length":1,"stats":{"Line":4},"fn_name":"{{closure}}"},{"line":15,"address":[4699840],"length":1,"stats":{"Line":2},"fn_name":"hir_has_uppercase_char"},{"line":18,"address":[4700031,4699920,4700138,4700264,4699855,4700078,4700246,4700307,4700325,4700198,4700375],"length":1,"stats":{"Line":9},"fn_name":null},{"line":19,"address":[4699930,4699871,4700008],"length":1,"stats":{"Line":4},"fn_name":null},{"line":20,"address":[4700041],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[4699970,4700088],"length":1,"stats":{"Line":3},"fn_name":null},{"line":23,"address":[4798224,4798238],"length":1,"stats":{"Line":4},"fn_name":"{{closure}}"},{"line":24,"address":[4700148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[4798352,4798366],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":27,"address":[4700229,4700253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[4700203],"length":1,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[4700296,4700314],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[4700268,4700327],"length":1,"stats":{"Line":2},"fn_name":null},{"line":33,"address":[4699915],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[4700400],"length":1,"stats":{"Line":3},"fn_name":"pattern_has_uppercase_char_simple"},{"line":39,"address":[4700408,4700461],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[4700442,4700495,4700527],"length":1,"stats":{"Line":2},"fn_name":null},{"line":42,"address":[4700595,4700508,4700561],"length":1,"stats":{"Line":2},"fn_name":null},{"line":43,"address":[4700629,4700639,4700669,4700576],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[4700672],"length":1,"stats":{"Line":3},"fn_name":"pattern_has_uppercase_char_advanced"},{"line":48,"address":[4700733,4700680],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[4700714,4700801,4700767],"length":1,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[4700845,4700782,4700875,4700835],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":21,"coverable":26},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","src","walk.rs"],"content":"use std::borrow::Cow;\nuse std::ffi::OsStr;\nuse std::fs::{FileType, Metadata};\nuse std::io;\nuse std::path::{Path, PathBuf};\nuse std::process;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::sync::mpsc::{channel, Receiver, Sender};\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time;\n\nuse anyhow::{anyhow, Result};\nuse ignore::overrides::OverrideBuilder;\nuse ignore::{self, WalkBuilder};\nuse regex::bytes::Regex;\n\nuse crate::error::print_error;\nuse crate::exec;\nuse crate::exit_codes::{merge_exitcodes, ExitCode};\nuse crate::filesystem;\nuse crate::options::Options;\nuse crate::output;\n\n/// The receiver thread can either be buffering results or directly streaming to the console.\nenum ReceiverMode {\n    /// Receiver is still buffering in order to sort the results, if the search finishes fast\n    /// enough.\n    Buffering,\n\n    /// Receiver is directly printing results to the output.\n    Streaming,\n}\n\n/// The Worker threads can result in a valid entry having PathBuf or an error.\npub enum WorkerResult {\n    Entry(PathBuf),\n    Error(ignore::Error),\n}\n\n/// Maximum size of the output buffer before flushing results to the console\npub const MAX_BUFFER_LENGTH: usize = 1000;\n\n/// Recursively scan the given search path for files / pathnames matching the pattern.\n///\n/// If the `--exec` argument was supplied, this will create a thread pool for executing\n/// jobs in parallel from a given command line and the discovered paths. Otherwise, each\n/// path will simply be written to standard output.\npub fn scan(path_vec: &[PathBuf], pattern: Arc<Regex>, config: Arc<Options>) -> Result<ExitCode> {\n    let mut path_iter = path_vec.iter();\n    let first_path_buf = path_iter\n        .next()\n        .expect(\"Error: Path vector can not be empty\");\n    let (tx, rx) = channel();\n\n    let mut override_builder = OverrideBuilder::new(first_path_buf.as_path());\n\n    for pattern in &config.exclude_patterns {\n        override_builder\n            .add(pattern)\n            .map_err(|e| anyhow!(\"Malformed exclude pattern: {}\", e))?;\n    }\n    let overrides = override_builder\n        .build()\n        .map_err(|_| anyhow!(\"Mismatch in exclude patterns\"))?;\n\n    let mut walker = WalkBuilder::new(first_path_buf.as_path());\n    walker\n        .hidden(config.ignore_hidden)\n        .ignore(config.read_fdignore)\n        .parents(config.read_fdignore || config.read_vcsignore)\n        .git_ignore(config.read_vcsignore)\n        .git_global(config.read_vcsignore)\n        .git_exclude(config.read_vcsignore)\n        .overrides(overrides)\n        .follow_links(config.follow_links)\n        // No need to check for supported platforms, option is unavailable on unsupported ones\n        .same_file_system(config.one_file_system)\n        .max_depth(config.max_depth);\n\n    if config.read_fdignore {\n        walker.add_custom_ignore_filename(\".fdignore\");\n    }\n\n    if config.read_global_ignore {\n        #[cfg(target_os = \"macos\")]\n        let config_dir_op = std::env::var_os(\"XDG_CONFIG_HOME\")\n            .map(PathBuf::from)\n            .filter(|p| p.is_absolute())\n            .or_else(|| dirs::home_dir().map(|d| d.join(\".config\")));\n\n        #[cfg(not(target_os = \"macos\"))]\n        let config_dir_op = dirs::config_dir();\n\n        if let Some(global_ignore_file) = config_dir_op\n            .map(|p| p.join(\"fd\").join(\"ignore\"))\n            .filter(|p| p.is_file())\n        {\n            let result = walker.add_ignore(global_ignore_file);\n            match result {\n                Some(ignore::Error::Partial(_)) => (),\n                Some(err) => {\n                    print_error(format!(\n                        \"Malformed pattern in global ignore file. {}.\",\n                        err.to_string()\n                    ));\n                }\n                None => (),\n            }\n        }\n    }\n\n    for ignore_file in &config.ignore_files {\n        let result = walker.add_ignore(ignore_file);\n        match result {\n            Some(ignore::Error::Partial(_)) => (),\n            Some(err) => {\n                print_error(format!(\n                    \"Malformed pattern in custom ignore file. {}.\",\n                    err.to_string()\n                ));\n            }\n            None => (),\n        }\n    }\n\n    for path_entry in path_iter {\n        walker.add(path_entry.as_path());\n    }\n\n    let parallel_walker = walker.threads(config.threads).build_parallel();\n\n    let wants_to_quit = Arc::new(AtomicBool::new(false));\n    if config.ls_colors.is_some() && config.command.is_none() {\n        let wq = Arc::clone(&wants_to_quit);\n        ctrlc::set_handler(move || {\n            if wq.load(Ordering::Relaxed) {\n                // Ctrl-C has been pressed twice, exit NOW\n                process::exit(ExitCode::KilledBySigint.into());\n            } else {\n                wq.store(true, Ordering::Relaxed);\n            }\n        })\n        .unwrap();\n    }\n\n    // Spawn the thread that receives all results through the channel.\n    let receiver_thread = spawn_receiver(&config, &wants_to_quit, rx);\n\n    // Spawn the sender threads.\n    spawn_senders(&config, &wants_to_quit, pattern, parallel_walker, tx);\n\n    // Wait for the receiver thread to print out all results.\n    let exit_code = receiver_thread.join().unwrap();\n\n    if wants_to_quit.load(Ordering::Relaxed) {\n        Ok(ExitCode::KilledBySigint)\n    } else {\n        Ok(exit_code)\n    }\n}\n\nfn spawn_receiver(\n    config: &Arc<Options>,\n    wants_to_quit: &Arc<AtomicBool>,\n    rx: Receiver<WorkerResult>,\n) -> thread::JoinHandle<ExitCode> {\n    let config = Arc::clone(config);\n    let wants_to_quit = Arc::clone(wants_to_quit);\n\n    let show_filesystem_errors = config.show_filesystem_errors;\n    let threads = config.threads;\n\n    thread::spawn(move || {\n        // This will be set to `Some` if the `--exec` argument was supplied.\n        if let Some(ref cmd) = config.command {\n            if cmd.in_batch_mode() {\n                exec::batch(rx, cmd, show_filesystem_errors)\n            } else {\n                let shared_rx = Arc::new(Mutex::new(rx));\n\n                let out_perm = Arc::new(Mutex::new(()));\n\n                // Each spawned job will store it's thread handle in here.\n                let mut handles = Vec::with_capacity(threads);\n                for _ in 0..threads {\n                    let rx = Arc::clone(&shared_rx);\n                    let cmd = Arc::clone(cmd);\n                    let out_perm = Arc::clone(&out_perm);\n\n                    // Spawn a job thread that will listen for and execute inputs.\n                    let handle =\n                        thread::spawn(move || exec::job(rx, cmd, out_perm, show_filesystem_errors));\n\n                    // Push the handle of the spawned thread into the vector for later joining.\n                    handles.push(handle);\n                }\n\n                // Wait for all threads to exit before exiting the program.\n                let mut results: Vec<ExitCode> = Vec::new();\n                for h in handles {\n                    results.push(h.join().unwrap());\n                }\n\n                merge_exitcodes(&results)\n            }\n        } else {\n            let start = time::Instant::now();\n\n            let mut buffer = vec![];\n\n            // Start in buffering mode\n            let mut mode = ReceiverMode::Buffering;\n\n            // Maximum time to wait before we start streaming to the console.\n            let max_buffer_time = config\n                .max_buffer_time\n                .unwrap_or_else(|| time::Duration::from_millis(100));\n\n            let stdout = io::stdout();\n            let mut stdout = stdout.lock();\n\n            let mut num_results = 0;\n\n            for worker_result in rx {\n                match worker_result {\n                    WorkerResult::Entry(value) => {\n                        match mode {\n                            ReceiverMode::Buffering => {\n                                buffer.push(value);\n\n                                // Have we reached the maximum buffer size or maximum buffering time?\n                                if buffer.len() > MAX_BUFFER_LENGTH\n                                    || time::Instant::now() - start > max_buffer_time\n                                {\n                                    // Flush the buffer\n                                    for v in &buffer {\n                                        output::print_entry(\n                                            &mut stdout,\n                                            v,\n                                            &config,\n                                            &wants_to_quit,\n                                        );\n                                    }\n                                    buffer.clear();\n\n                                    // Start streaming\n                                    mode = ReceiverMode::Streaming;\n                                }\n                            }\n                            ReceiverMode::Streaming => {\n                                output::print_entry(&mut stdout, &value, &config, &wants_to_quit);\n                            }\n                        }\n\n                        num_results += 1;\n                    }\n                    WorkerResult::Error(err) => {\n                        if show_filesystem_errors {\n                            print_error(err.to_string());\n                        }\n                    }\n                }\n\n                if let Some(max_results) = config.max_results {\n                    if num_results >= max_results {\n                        break;\n                    }\n                }\n            }\n\n            // If we have finished fast enough (faster than max_buffer_time), we haven't streamed\n            // anything to the console, yet. In this case, sort the results and print them:\n            if !buffer.is_empty() {\n                buffer.sort();\n                for value in buffer {\n                    output::print_entry(&mut stdout, &value, &config, &wants_to_quit);\n                }\n            }\n\n            ExitCode::Success\n        }\n    })\n}\n\npub enum DirEntry {\n    Normal(ignore::DirEntry),\n    BrokenSymlink(PathBuf),\n}\n\nimpl DirEntry {\n    pub fn path(&self) -> &Path {\n        match self {\n            DirEntry::Normal(e) => e.path(),\n            DirEntry::BrokenSymlink(pathbuf) => pathbuf.as_path(),\n        }\n    }\n\n    pub fn file_type(&self) -> Option<FileType> {\n        match self {\n            DirEntry::Normal(e) => e.file_type(),\n            DirEntry::BrokenSymlink(pathbuf) => {\n                pathbuf.symlink_metadata().map(|m| m.file_type()).ok()\n            }\n        }\n    }\n\n    pub fn metadata(&self) -> Option<Metadata> {\n        match self {\n            DirEntry::Normal(e) => e.metadata().ok(),\n            DirEntry::BrokenSymlink(_) => None,\n        }\n    }\n\n    pub fn depth(&self) -> Option<usize> {\n        match self {\n            DirEntry::Normal(e) => Some(e.depth()),\n            DirEntry::BrokenSymlink(_) => None,\n        }\n    }\n}\n\nfn spawn_senders(\n    config: &Arc<Options>,\n    wants_to_quit: &Arc<AtomicBool>,\n    pattern: Arc<Regex>,\n    parallel_walker: ignore::WalkParallel,\n    tx: Sender<WorkerResult>,\n) {\n    parallel_walker.run(|| {\n        let config = Arc::clone(config);\n        let pattern = Arc::clone(&pattern);\n        let tx_thread = tx.clone();\n        let wants_to_quit = Arc::clone(wants_to_quit);\n\n        Box::new(move |entry_o| {\n            if wants_to_quit.load(Ordering::Relaxed) {\n                return ignore::WalkState::Quit;\n            }\n\n            let entry = match entry_o {\n                Ok(ref e) if e.depth() == 0 => {\n                    // Skip the root directory entry.\n                    return ignore::WalkState::Continue;\n                }\n                Ok(e) => DirEntry::Normal(e),\n                Err(ignore::Error::WithPath {\n                    path,\n                    err: inner_err,\n                }) => match inner_err.as_ref() {\n                    ignore::Error::Io(io_error)\n                        if io_error.kind() == io::ErrorKind::NotFound\n                            && path\n                                .symlink_metadata()\n                                .ok()\n                                .map_or(false, |m| m.file_type().is_symlink()) =>\n                    {\n                        DirEntry::BrokenSymlink(path)\n                    }\n                    _ => {\n                        tx_thread\n                            .send(WorkerResult::Error(ignore::Error::WithPath {\n                                path,\n                                err: inner_err,\n                            }))\n                            .unwrap();\n                        return ignore::WalkState::Continue;\n                    }\n                },\n                Err(err) => {\n                    tx_thread.send(WorkerResult::Error(err)).unwrap();\n                    return ignore::WalkState::Continue;\n                }\n            };\n\n            if let Some(min_depth) = config.min_depth {\n                if entry.depth().map_or(true, |d| d < min_depth) {\n                    return ignore::WalkState::Continue;\n                }\n            }\n\n            // Check the name first, since it doesn't require metadata\n            let entry_path = entry.path();\n\n            let search_str: Cow<OsStr> = if config.search_full_path {\n                let path_abs_buf = filesystem::path_absolute_form(entry_path)\n                    .expect(\"Retrieving absolute path succeeds\");\n                Cow::Owned(path_abs_buf.as_os_str().to_os_string())\n            } else {\n                match entry_path.file_name() {\n                    Some(filename) => Cow::Borrowed(filename),\n                    None => unreachable!(\n                        \"Encountered file system entry without a file name. This should only \\\n                         happen for paths like 'foo/bar/..' or '/' which are not supposed to \\\n                         appear in a file system traversal.\"\n                    ),\n                }\n            };\n\n            if !pattern.is_match(&filesystem::osstr_to_bytes(search_str.as_ref())) {\n                return ignore::WalkState::Continue;\n            }\n\n            // Filter out unwanted extensions.\n            if let Some(ref exts_regex) = config.extensions {\n                if let Some(path_str) = entry_path.file_name() {\n                    if !exts_regex.is_match(&filesystem::osstr_to_bytes(path_str)) {\n                        return ignore::WalkState::Continue;\n                    }\n                } else {\n                    return ignore::WalkState::Continue;\n                }\n            }\n\n            // Filter out unwanted file types.\n            if let Some(ref file_types) = config.file_types {\n                if let Some(ref entry_type) = entry.file_type() {\n                    if (!file_types.files && entry_type.is_file())\n                        || (!file_types.directories && entry_type.is_dir())\n                        || (!file_types.symlinks && entry_type.is_symlink())\n                        || (!file_types.sockets && filesystem::is_socket(entry_type))\n                        || (!file_types.pipes && filesystem::is_pipe(entry_type))\n                        || (file_types.executables_only\n                            && !entry\n                                .metadata()\n                                .map(|m| filesystem::is_executable(&m))\n                                .unwrap_or(false))\n                        || (file_types.empty_only && !filesystem::is_empty(&entry))\n                        || !(entry_type.is_file()\n                            || entry_type.is_dir()\n                            || entry_type.is_symlink()\n                            || filesystem::is_socket(entry_type)\n                            || filesystem::is_pipe(entry_type))\n                    {\n                        return ignore::WalkState::Continue;\n                    }\n                } else {\n                    return ignore::WalkState::Continue;\n                }\n            }\n\n            #[cfg(unix)]\n            {\n                if let Some(ref owner_constraint) = config.owner_constraint {\n                    if let Ok(ref metadata) = entry_path.metadata() {\n                        if !owner_constraint.matches(&metadata) {\n                            return ignore::WalkState::Continue;\n                        }\n                    } else {\n                        return ignore::WalkState::Continue;\n                    }\n                }\n            }\n\n            // Filter out unwanted sizes if it is a file and we have been given size constraints.\n            if !config.size_constraints.is_empty() {\n                if entry_path.is_file() {\n                    if let Ok(metadata) = entry_path.metadata() {\n                        let file_size = metadata.len();\n                        if config\n                            .size_constraints\n                            .iter()\n                            .any(|sc| !sc.is_within(file_size))\n                        {\n                            return ignore::WalkState::Continue;\n                        }\n                    } else {\n                        return ignore::WalkState::Continue;\n                    }\n                } else {\n                    return ignore::WalkState::Continue;\n                }\n            }\n\n            // Filter out unwanted modification times\n            if !config.time_constraints.is_empty() {\n                let mut matched = false;\n                if let Ok(metadata) = entry_path.metadata() {\n                    if let Ok(modified) = metadata.modified() {\n                        matched = config\n                            .time_constraints\n                            .iter()\n                            .all(|tf| tf.applies_to(&modified));\n                    }\n                }\n                if !matched {\n                    return ignore::WalkState::Continue;\n                }\n            }\n\n            let send_result = tx_thread.send(WorkerResult::Entry(entry_path.to_owned()));\n\n            if send_result.is_err() {\n                return ignore::WalkState::Quit;\n            }\n\n            ignore::WalkState::Continue\n        })\n    });\n}\n","traces":[{"line":49,"address":[4539840,4540011],"length":1,"stats":{"Line":0},"fn_name":"scan"},{"line":50,"address":[4539882,4540034],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[4540058,4540116],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4540182],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[4540363,4540269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4540464,4540829,4540586,4540378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[4540834,4540813,4540646],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[4540620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4540836,4540902,4540791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4541049,4540556,4541104,4541371],"length":1,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[4541438,4541079,4541373],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[4541336,4541486],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[4541949,4542299,4541708,4541615,4542234,4541819,4541531,4542096,4541884,4542169],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[4541501],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[4541585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[4541650,4541751],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[4541789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[4541854],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[4541919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[4541976],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[4542139],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[4542204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[4542269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[4542387,4542326],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[4542360],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[4545313,4542397],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[4542434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[4542574,4542543,4542453],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[4444796,4444784],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":97,"address":[4445033,4445024],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":99,"address":[4542619],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[4543165,4542735],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[4542690],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[4542737],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[4542862,4542952],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[4542809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[4542816],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[4543146,4542928],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[4543416,4545363,4543215],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[4543466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[4543947,4543529],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[4543484],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[4543531],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[4543737,4543656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[4543603],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[4543610],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[4543716,4543928],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[4543960,4544066,4544149,4543370],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[4544100],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[4544054,4544159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[4544221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[4544302,4544552,4544412],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[4544462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[4445088],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":137,"address":[4445102],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[4445157],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[4445193,4445144],"length":1,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[4544554],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[4544617],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[4544808],"length":1,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[4544978,4544908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[4544988],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[4544972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[4545952,4546050],"length":1,"stats":{"Line":0},"fn_name":"spawn_receiver"},{"line":168,"address":[4546070,4545988],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[4546083],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[4546127],"length":1,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[4546166],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[4445312,4445467],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":176,"address":[4445520,4447152,4445319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[4445788,4447150,4445534],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[4445637,4449729],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[4445801,4445595],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[4445832,4445900],"length":1,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[4445916],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[4446044,4446497,4446170,4445951],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[4446204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[4446251],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[4446298],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[4446329,4445265,4445264],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":196,"address":[4446426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[4446160],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[4446665,4446502,4447017,4446687],"length":1,"stats":{"Line":0},"fn_name":null},{"line":202,"address":[4446955,4446877],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[4447030],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[4445482,4447181],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[4447205],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[4447260],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[4447284],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[4445216,4445220],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":220,"address":[4447391],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[4447426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[4447469],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[4448963,4447970,4447555,4447481,4447613,4447635],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[4448793,4448879,4448059],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[4448061,4447953],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[4448725,4448677,4448143],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[4448101],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[4448145],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[4448419,4448240,4448281,4448208],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[4448260,4448318],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[4448664,4448445,4448565],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[4448654],"length":1,"stats":{"Line":0},"fn_name":null},{"line":241,"address":[4448612],"length":1,"stats":{"Line":0},"fn_name":null},{"line":242,"address":[4448632],"length":1,"stats":{"Line":0},"fn_name":null},{"line":245,"address":[4448558],"length":1,"stats":{"Line":0},"fn_name":null},{"line":248,"address":[4448669],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[4448125,4448687],"length":1,"stats":{"Line":0},"fn_name":null},{"line":256,"address":[4448727,4450371],"length":1,"stats":{"Line":0},"fn_name":null},{"line":258,"address":[4448771,4447998,4449999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":259,"address":[4448795,4448858,4448044],"length":1,"stats":{"Line":0},"fn_name":null},{"line":260,"address":[4448797],"length":1,"stats":{"Line":0},"fn_name":null},{"line":265,"address":[4448889,4448948],"length":1,"stats":{"Line":0},"fn_name":null},{"line":266,"address":[4448938],"length":1,"stats":{"Line":0},"fn_name":null},{"line":267,"address":[4448950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[4448976,4449553],"length":1,"stats":{"Line":0},"fn_name":null},{"line":275,"address":[4449010],"length":1,"stats":{"Line":0},"fn_name":null},{"line":276,"address":[4449044,4449221,4449548],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[4449468,4449422],"length":1,"stats":{"Line":0},"fn_name":null},{"line":281,"address":[4449555],"length":1,"stats":{"Line":0},"fn_name":null},{"line":292,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":293,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":295,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":300,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":301,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":308,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":318,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":323,"address":[4547088,4547260],"length":1,"stats":{"Line":0},"fn_name":"spawn_senders"},{"line":330,"address":[4458496,4458569],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":331,"address":[4458535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[4458589],"length":1,"stats":{"Line":0},"fn_name":null},{"line":333,"address":[4458628],"length":1,"stats":{"Line":0},"fn_name":null},{"line":334,"address":[4458682],"length":1,"stats":{"Line":0},"fn_name":null},{"line":336,"address":[4458511,4458718,4450880,4451034],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":337,"address":[4450895,4451056],"length":1,"stats":{"Line":0},"fn_name":null},{"line":338,"address":[4451086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":341,"address":[4451394,4451653,4452503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":342,"address":[4451070,4451404],"length":1,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[4451473,4451658],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[4451486],"length":1,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[4451122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":348,"address":[4451663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":349,"address":[4451711],"length":1,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[4451747],"length":1,"stats":{"Line":0},"fn_name":null},{"line":351,"address":[4451770,4452034],"length":1,"stats":{"Line":0},"fn_name":null},{"line":352,"address":[4452307,4452062,4452139,4452431],"length":1,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[4452116,4452214],"length":1,"stats":{"Line":0},"fn_name":null},{"line":356,"address":[4450660,4450656],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":358,"address":[4452320],"length":1,"stats":{"Line":0},"fn_name":null},{"line":361,"address":[4451809,4452436,4452013],"length":1,"stats":{"Line":0},"fn_name":null},{"line":362,"address":[4451869],"length":1,"stats":{"Line":0},"fn_name":null},{"line":363,"address":[4451813],"length":1,"stats":{"Line":0},"fn_name":null},{"line":364,"address":[4451853],"length":1,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[4452458,4452482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":370,"address":[4451133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":371,"address":[4451221,4452505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":372,"address":[4452527],"length":1,"stats":{"Line":0},"fn_name":null},{"line":376,"address":[4452733,4452548,4452605],"length":1,"stats":{"Line":0},"fn_name":null},{"line":377,"address":[4452638,4450704,4450717],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":378,"address":[4452735,4452758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":383,"address":[4452771],"length":1,"stats":{"Line":0},"fn_name":null},{"line":385,"address":[4453424,4452850,4453212],"length":1,"stats":{"Line":0},"fn_name":null},{"line":386,"address":[4452972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[4453029,4453114],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[4453362,4453225,4452902],"length":1,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[4453364,4453249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":392,"address":[4453276,4453290,4453434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":393,"address":[4453283],"length":1,"stats":{"Line":0},"fn_name":null},{"line":400,"address":[4453642,4453547],"length":1,"stats":{"Line":0},"fn_name":null},{"line":401,"address":[4453846,4453823],"length":1,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[4453801,4454234,4453863],"length":1,"stats":{"Line":0},"fn_name":null},{"line":406,"address":[4453913,4454037],"length":1,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[4454077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":408,"address":[4454236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":411,"address":[4454024],"length":1,"stats":{"Line":0},"fn_name":null},{"line":416,"address":[4455815,4454257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":417,"address":[4454364,4454441],"length":1,"stats":{"Line":0},"fn_name":null},{"line":418,"address":[4455327,4454547,4455178,4455104,4455543,4454784,4455455,4454844,4454664,4454897,4455252,4454609,4454471,4454724,4455026],"length":1,"stats":{"Line":0},"fn_name":null},{"line":419,"address":[4454884,4454980,4455052],"length":1,"stats":{"Line":0},"fn_name":null},{"line":420,"address":[4455130,4455058,4454824],"length":1,"stats":{"Line":0},"fn_name":null},{"line":421,"address":[4454764,4455204,4455136],"length":1,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[4455278,4454704,4455210],"length":1,"stats":{"Line":0},"fn_name":null},{"line":423,"address":[4454649,4455284,4455407],"length":1,"stats":{"Line":0},"fn_name":null},{"line":424,"address":[4455320,4455354],"length":1,"stats":{"Line":0},"fn_name":null},{"line":426,"address":[4450736,4450740],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":428,"address":[4455481,4454594,4455413],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[4455534,4455601,4455717,4455659,4455556,4454518,4455489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":430,"address":[4455691],"length":1,"stats":{"Line":0},"fn_name":null},{"line":431,"address":[4455633],"length":1,"stats":{"Line":0},"fn_name":null},{"line":432,"address":[4455584],"length":1,"stats":{"Line":0},"fn_name":null},{"line":433,"address":[4455517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":435,"address":[4455817],"length":1,"stats":{"Line":0},"fn_name":null},{"line":438,"address":[4454428],"length":1,"stats":{"Line":0},"fn_name":null},{"line":444,"address":[4456121,4455838],"length":1,"stats":{"Line":0},"fn_name":null},{"line":445,"address":[4455926,4455990],"length":1,"stats":{"Line":0},"fn_name":null},{"line":446,"address":[4456006],"length":1,"stats":{"Line":0},"fn_name":null},{"line":447,"address":[4456089,4456116],"length":1,"stats":{"Line":0},"fn_name":null},{"line":450,"address":[4455980],"length":1,"stats":{"Line":0},"fn_name":null},{"line":456,"address":[4456131,4458004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":457,"address":[4456202],"length":1,"stats":{"Line":0},"fn_name":null},{"line":458,"address":[4456262,4456321],"length":1,"stats":{"Line":0},"fn_name":null},{"line":459,"address":[4456362],"length":1,"stats":{"Line":0},"fn_name":null},{"line":460,"address":[4456552,4456421],"length":1,"stats":{"Line":0},"fn_name":null},{"line":463,"address":[4456544,4450782,4450768],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":465,"address":[4456609,4458028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":468,"address":[4456308],"length":1,"stats":{"Line":0},"fn_name":null},{"line":471,"address":[4456249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":476,"address":[4456635,4457073],"length":1,"stats":{"Line":0},"fn_name":null},{"line":477,"address":[4456694],"length":1,"stats":{"Line":0},"fn_name":null},{"line":478,"address":[4456702,4457068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":479,"address":[4456791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":480,"address":[4457013,4456954,4456876],"length":1,"stats":{"Line":0},"fn_name":null},{"line":483,"address":[4450846,4450832,4457005],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":486,"address":[4458101],"length":1,"stats":{"Line":0},"fn_name":null},{"line":487,"address":[4457075],"length":1,"stats":{"Line":0},"fn_name":null},{"line":491,"address":[4457096],"length":1,"stats":{"Line":0},"fn_name":null},{"line":493,"address":[4457220],"length":1,"stats":{"Line":0},"fn_name":null},{"line":494,"address":[4457282,4457305],"length":1,"stats":{"Line":0},"fn_name":null},{"line":497,"address":[4457259],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":229},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","tests","testenv","mod.rs"],"content":"use std::env;\nuse std::fs;\nuse std::io::{self, Write};\n#[cfg(unix)]\nuse std::os::unix;\n#[cfg(windows)]\nuse std::os::windows;\nuse std::path::{Path, PathBuf};\nuse std::process;\n\nuse tempdir::TempDir;\n\n/// Environment for the integration tests.\npub struct TestEnv {\n    /// Temporary working directory.\n    temp_dir: TempDir,\n\n    /// Path to the *fd* executable.\n    fd_exe: PathBuf,\n\n    /// Normalize each line by sorting the whitespace-separated words\n    normalize_line: bool,\n}\n\n/// Create the working directory and the test files.\nfn create_working_directory(\n    directories: &[&'static str],\n    files: &[&'static str],\n) -> Result<TempDir, io::Error> {\n    let temp_dir = TempDir::new(\"fd-tests\")?;\n\n    {\n        let root = temp_dir.path();\n\n        // Pretend that this is a Git repository in order for `.gitignore` files to be respected\n        fs::create_dir_all(root.join(\".git\"))?;\n\n        for directory in directories {\n            fs::create_dir_all(root.join(directory))?;\n        }\n\n        for file in files {\n            fs::File::create(root.join(file))?;\n        }\n\n        #[cfg(unix)]\n        unix::fs::symlink(root.join(\"one/two\"), root.join(\"symlink\"))?;\n\n        // Note: creating symlinks on Windows requires the `SeCreateSymbolicLinkPrivilege` which\n        // is by default only granted for administrators.\n        #[cfg(windows)]\n        windows::fs::symlink_dir(root.join(\"one/two\"), root.join(\"symlink\"))?;\n\n        fs::File::create(root.join(\".fdignore\"))?.write_all(b\"fdignored.foo\")?;\n\n        fs::File::create(root.join(\".gitignore\"))?.write_all(b\"gitignored.foo\")?;\n    }\n\n    Ok(temp_dir)\n}\n\n/// Find the *fd* executable.\nfn find_fd_exe() -> PathBuf {\n    // Tests exe is in target/debug/deps, the *fd* exe is in target/debug\n    let root = env::current_exe()\n        .expect(\"tests executable\")\n        .parent()\n        .expect(\"tests executable directory\")\n        .parent()\n        .expect(\"fd executable directory\")\n        .to_path_buf();\n\n    let exe_name = if cfg!(windows) { \"fd.exe\" } else { \"fd\" };\n\n    root.join(exe_name)\n}\n\n/// Format an error message for when *fd* did not exit successfully.\nfn format_exit_error(args: &[&str], output: &process::Output) -> String {\n    format!(\n        \"`fd {}` did not exit successfully.\\nstdout:\\n---\\n{}---\\nstderr:\\n---\\n{}---\",\n        args.join(\" \"),\n        String::from_utf8_lossy(&output.stdout),\n        String::from_utf8_lossy(&output.stderr)\n    )\n}\n\n/// Format an error message for when the output of *fd* did not match the expected output.\nfn format_output_error(args: &[&str], expected: &str, actual: &str) -> String {\n    // Generate diff text.\n    let diff_text = diff::lines(expected, actual)\n        .into_iter()\n        .map(|diff| match diff {\n            diff::Result::Left(l) => format!(\"-{}\", l),\n            diff::Result::Both(l, _) => format!(\" {}\", l),\n            diff::Result::Right(r) => format!(\"+{}\", r),\n        })\n        .collect::<Vec<_>>()\n        .join(\"\\n\");\n\n    format!(\n        concat!(\n            \"`fd {}` did not produce the expected output.\\n\",\n            \"Showing diff between expected and actual:\\n{}\\n\"\n        ),\n        args.join(\" \"),\n        diff_text\n    )\n}\n\n/// Normalize the output for comparison.\nfn normalize_output(s: &str, trim_start: bool, normalize_line: bool) -> String {\n    // Split into lines and normalize separators.\n    let mut lines = s\n        .replace('\\0', \"NULL\\n\")\n        .lines()\n        .map(|line| {\n            let line = if trim_start { line.trim_start() } else { line };\n            let line = line.replace('/', &std::path::MAIN_SEPARATOR.to_string());\n            if normalize_line {\n                let mut words: Vec<_> = line.split_whitespace().collect();\n                words.sort();\n                return words.join(\" \");\n            }\n            line\n        })\n        .collect::<Vec<_>>();\n\n    lines.sort();\n    lines.join(\"\\n\")\n}\n\nimpl TestEnv {\n    pub fn new(directories: &[&'static str], files: &[&'static str]) -> TestEnv {\n        let temp_dir = create_working_directory(directories, files).expect(\"working directory\");\n        let fd_exe = find_fd_exe();\n\n        TestEnv {\n            temp_dir,\n            fd_exe,\n            normalize_line: false,\n        }\n    }\n\n    pub fn normalize_line(self, normalize: bool) -> TestEnv {\n        TestEnv {\n            temp_dir: self.temp_dir,\n            fd_exe: self.fd_exe,\n            normalize_line: normalize,\n        }\n    }\n\n    /// Create a broken symlink at the given path in the temp_dir.\n    pub fn create_broken_symlink<P: AsRef<Path>>(\n        &mut self,\n        link_path: P,\n    ) -> Result<PathBuf, io::Error> {\n        let root = self.test_root();\n        let broken_symlink_link = root.join(link_path);\n        {\n            let temp_target_dir = TempDir::new(\"fd-tests-broken-symlink\")?;\n            let broken_symlink_target = temp_target_dir.path().join(\"broken_symlink_target\");\n            fs::File::create(&broken_symlink_target)?;\n            #[cfg(unix)]\n            unix::fs::symlink(&broken_symlink_target, &broken_symlink_link)?;\n            #[cfg(windows)]\n            windows::fs::symlink_file(&broken_symlink_target, &broken_symlink_link)?;\n        }\n        Ok(broken_symlink_link)\n    }\n\n    /// Get the root directory for the tests.\n    pub fn test_root(&self) -> PathBuf {\n        self.temp_dir.path().to_path_buf()\n    }\n\n    /// Get the root directory of the file system.\n    pub fn system_root(&self) -> PathBuf {\n        let mut components = self.temp_dir.path().components();\n        PathBuf::from(components.next().expect(\"root directory\").as_os_str())\n    }\n\n    /// Assert that calling *fd* in the specified path under the root working directory,\n    /// and with the specified arguments produces the expected output.\n    pub fn assert_success_and_get_output<P: AsRef<Path>>(\n        &self,\n        path: P,\n        args: &[&str],\n    ) -> process::Output {\n        // Setup *fd* command.\n        let mut cmd = process::Command::new(&self.fd_exe);\n        cmd.current_dir(self.temp_dir.path().join(path));\n        cmd.arg(\"--no-global-ignore-file\").args(args);\n\n        // Run *fd*.\n        let output = cmd.output().expect(\"fd output\");\n\n        // Check for exit status.\n        if !output.status.success() {\n            panic!(format_exit_error(args, &output));\n        }\n\n        output\n    }\n\n    /// Assert that calling *fd* with the specified arguments produces the expected output.\n    pub fn assert_output(&self, args: &[&str], expected: &str) {\n        self.assert_output_subdirectory(\".\", args, expected)\n    }\n\n    /// Similar to assert_output, but able to handle non-utf8 output\n    #[cfg(all(unix, not(target_os = \"macos\")))]\n    pub fn assert_output_raw(&self, args: &[&str], expected: &[u8]) {\n        let output = self.assert_success_and_get_output(\".\", args);\n\n        assert_eq!(expected, &output.stdout[..]);\n    }\n\n    /// Assert that calling *fd* in the specified path under the root working directory,\n    /// and with the specified arguments produces the expected output.\n    pub fn assert_output_subdirectory<P: AsRef<Path>>(\n        &self,\n        path: P,\n        args: &[&str],\n        expected: &str,\n    ) {\n        let output = self.assert_success_and_get_output(path, args);\n\n        // Normalize both expected and actual output.\n        let expected = normalize_output(expected, true, self.normalize_line);\n        let actual = normalize_output(\n            &String::from_utf8_lossy(&output.stdout),\n            false,\n            self.normalize_line,\n        );\n\n        // Compare actual output to expected output.\n        if expected != actual {\n            panic!(format_output_error(args, &expected, &actual));\n        }\n    }\n\n    /// Assert that calling *fd* with the specified arguments produces the expected error,\n    /// and does not succeed.\n    pub fn assert_failure_with_error(&self, args: &[&str], expected: &str) {\n        let status = self.assert_error_subdirectory(\".\", args, expected);\n        if status.success() {\n            panic!(\"error '{}' did not occur.\", expected);\n        }\n    }\n\n    /// Assert that calling *fd* with the specified arguments produces the expected error.\n    pub fn assert_error(&self, args: &[&str], expected: &str) -> process::ExitStatus {\n        self.assert_error_subdirectory(\".\", args, expected)\n    }\n\n    /// Assert that calling *fd* in the specified path under the root working directory,\n    /// and with the specified arguments produces an error with the expected message.\n    fn assert_error_subdirectory<P: AsRef<Path>>(\n        &self,\n        path: P,\n        args: &[&str],\n        expected: &str,\n    ) -> process::ExitStatus {\n        // Setup *fd* command.\n        let mut cmd = process::Command::new(&self.fd_exe);\n        cmd.current_dir(self.temp_dir.path().join(path));\n        cmd.arg(\"--no-global-ignore-file\").args(args);\n\n        // Run *fd*.\n        let output = cmd.output().expect(\"fd output\");\n\n        // Normalize both expected and actual output.\n        let expected_error = normalize_output(expected, true, self.normalize_line);\n        let actual_err = normalize_output(\n            &String::from_utf8_lossy(&output.stderr),\n            false,\n            self.normalize_line,\n        );\n\n        // Compare actual output to expected output.\n        if !actual_err.trim_start().starts_with(&expected_error) {\n            panic!(format_output_error(args, &expected_error, &actual_err));\n        }\n\n        return output.status;\n    }\n}\n","traces":[{"line":26,"address":[4242560,4242684],"length":1,"stats":{"Line":2},"fn_name":"create_working_directory"},{"line":30,"address":[4242906,4242609,4242699,4242832],"length":1,"stats":{"Line":4},"fn_name":null},{"line":33,"address":[4242969,4242803],"length":1,"stats":{"Line":4},"fn_name":null},{"line":36,"address":[4242990,4243252],"length":1,"stats":{"Line":2},"fn_name":null},{"line":38,"address":[4243405,4243270,4243653],"length":1,"stats":{"Line":4},"fn_name":null},{"line":39,"address":[4243457],"length":1,"stats":{"Line":2},"fn_name":null},{"line":42,"address":[4243663,4244051,4243385,4243787],"length":1,"stats":{"Line":6},"fn_name":null},{"line":43,"address":[4243839],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[4243746,4244056,4245216],"length":1,"stats":{"Line":4},"fn_name":null},{"line":54,"address":[4244312,4245258],"length":1,"stats":{"Line":2},"fn_name":null},{"line":56,"address":[4244802,4245263],"length":1,"stats":{"Line":4},"fn_name":null},{"line":59,"address":[4245309],"length":1,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[4245719,4245680],"length":1,"stats":{"Line":2},"fn_name":"find_fd_exe"},{"line":65,"address":[4245748,4245865,4245690],"length":1,"stats":{"Line":6},"fn_name":null},{"line":73,"address":[4246049],"length":1,"stats":{"Line":2},"fn_name":null},{"line":75,"address":[4246081],"length":1,"stats":{"Line":2},"fn_name":null},{"line":79,"address":[4246208,4246315],"length":1,"stats":{"Line":0},"fn_name":"format_exit_error"},{"line":80,"address":[4246394,4246475],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[4246256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[4246330],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[4246418],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[4247269,4247152],"length":1,"stats":{"Line":0},"fn_name":"format_output_error"},{"line":91,"address":[4247218,4247284],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[4269168,4269347,4269584,4269824],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":94,"address":[4269186,4269364],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[4269604],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[4269255,4269834],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[4247531],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[4247470],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[4247477],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[4248044,4247952],"length":1,"stats":{"Line":1},"fn_name":"normalize_output"},{"line":114,"address":[4248151,4248067,4248004],"length":1,"stats":{"Line":3},"fn_name":null},{"line":117,"address":[4248130],"length":1,"stats":{"Line":2},"fn_name":null},{"line":118,"address":[4270018,4270074],"length":1,"stats":{"Line":2},"fn_name":null},{"line":119,"address":[4270128],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[4270301],"length":1,"stats":{"Line":1},"fn_name":null},{"line":121,"address":[4270363],"length":1,"stats":{"Line":1},"fn_name":null},{"line":122,"address":[4270436],"length":1,"stats":{"Line":1},"fn_name":null},{"line":123,"address":[4270496,4270525,4270588],"length":1,"stats":{"Line":3},"fn_name":null},{"line":125,"address":[4270310],"length":1,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[4248244],"length":1,"stats":{"Line":1},"fn_name":null},{"line":130,"address":[4248278],"length":1,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[4248483,4248416],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":135,"address":[4248458,4248512],"length":1,"stats":{"Line":3},"fn_name":null},{"line":136,"address":[4248551],"length":1,"stats":{"Line":2},"fn_name":null},{"line":145,"address":[4248752],"length":1,"stats":{"Line":1},"fn_name":"normalize_line"},{"line":147,"address":[4248768],"length":1,"stats":{"Line":1},"fn_name":null},{"line":148,"address":[4248793],"length":1,"stats":{"Line":1},"fn_name":null},{"line":154,"address":[4270656,4270741],"length":1,"stats":{"Line":1},"fn_name":"create_broken_symlink<&str>"},{"line":158,"address":[4270690],"length":1,"stats":{"Line":1},"fn_name":null},{"line":159,"address":[4270761],"length":1,"stats":{"Line":1},"fn_name":null},{"line":161,"address":[4271096,4270901,4271009,4270834],"length":1,"stats":{"Line":2},"fn_name":null},{"line":162,"address":[4271155,4270981],"length":1,"stats":{"Line":2},"fn_name":null},{"line":163,"address":[4271254,4271432,4271208],"length":1,"stats":{"Line":2},"fn_name":null},{"line":164,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[4271458],"length":1,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[4271656],"length":1,"stats":{"Line":1},"fn_name":null},{"line":173,"address":[4248896],"length":1,"stats":{"Line":1},"fn_name":"test_root"},{"line":174,"address":[4248913],"length":1,"stats":{"Line":1},"fn_name":null},{"line":178,"address":[4248976],"length":1,"stats":{"Line":1},"fn_name":"system_root"},{"line":179,"address":[4248999],"length":1,"stats":{"Line":1},"fn_name":null},{"line":180,"address":[4249044],"length":1,"stats":{"Line":1},"fn_name":null},{"line":185,"address":[4272062,4271936],"length":1,"stats":{"Line":1},"fn_name":"assert_success_and_get_output<&str>"},{"line":191,"address":[4271986],"length":1,"stats":{"Line":1},"fn_name":null},{"line":192,"address":[4272174,4272077],"length":1,"stats":{"Line":2},"fn_name":null},{"line":193,"address":[4272181],"length":1,"stats":{"Line":1},"fn_name":null},{"line":196,"address":[4272232],"length":1,"stats":{"Line":1},"fn_name":null},{"line":199,"address":[4272300],"length":1,"stats":{"Line":1},"fn_name":null},{"line":200,"address":[4272384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[4249184],"length":1,"stats":{"Line":1},"fn_name":"assert_output"},{"line":208,"address":[4249225],"length":1,"stats":{"Line":1},"fn_name":null},{"line":213,"address":[4249296,4249415],"length":1,"stats":{"Line":1},"fn_name":"assert_output_raw"},{"line":214,"address":[4249350],"length":1,"stats":{"Line":1},"fn_name":null},{"line":216,"address":[4249617,4249430,4249641],"length":1,"stats":{"Line":2},"fn_name":null},{"line":221,"address":[4272715,4272528],"length":1,"stats":{"Line":1},"fn_name":"assert_output_subdirectory<&str>"},{"line":227,"address":[4272604],"length":1,"stats":{"Line":1},"fn_name":null},{"line":230,"address":[4272738],"length":1,"stats":{"Line":1},"fn_name":null},{"line":232,"address":[4272773,4272862,4272817],"length":1,"stats":{"Line":3},"fn_name":null},{"line":234,"address":[4272899],"length":1,"stats":{"Line":1},"fn_name":null},{"line":238,"address":[4273001],"length":1,"stats":{"Line":1},"fn_name":null},{"line":239,"address":[4273052],"length":1,"stats":{"Line":0},"fn_name":null},{"line":245,"address":[4249984],"length":1,"stats":{"Line":1},"fn_name":"assert_failure_with_error"},{"line":246,"address":[4250032],"length":1,"stats":{"Line":1},"fn_name":null},{"line":247,"address":[4250099],"length":1,"stats":{"Line":1},"fn_name":null},{"line":248,"address":[4250139],"length":1,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[4250304],"length":1,"stats":{"Line":1},"fn_name":"assert_error"},{"line":254,"address":[4250345],"length":1,"stats":{"Line":1},"fn_name":null},{"line":259,"address":[4273328,4273499],"length":1,"stats":{"Line":1},"fn_name":"assert_error_subdirectory<&str>"},{"line":266,"address":[4273399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":267,"address":[4273638,4273514],"length":1,"stats":{"Line":2},"fn_name":null},{"line":268,"address":[4273645],"length":1,"stats":{"Line":1},"fn_name":null},{"line":271,"address":[4273711],"length":1,"stats":{"Line":1},"fn_name":null},{"line":274,"address":[4273788],"length":1,"stats":{"Line":1},"fn_name":null},{"line":276,"address":[4273927,4273829,4273879],"length":1,"stats":{"Line":3},"fn_name":null},{"line":278,"address":[4273964],"length":1,"stats":{"Line":1},"fn_name":null},{"line":282,"address":[4274058],"length":1,"stats":{"Line":1},"fn_name":null},{"line":283,"address":[4274186],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[4274145],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":79,"coverable":101},{"path":["/","home","drumpt","Desktop","TinyMutator","fd","tests","tests.rs"],"content":"mod testenv;\n\nuse std::fs;\nuse std::io::Write;\nuse std::path::Path;\nuse std::time::{Duration, SystemTime};\n\nuse regex::escape;\n\nuse crate::testenv::TestEnv;\n\nstatic DEFAULT_DIRS: &[&str] = &[\"one/two/three\", \"one/two/three/directory_foo\"];\n\nstatic DEFAULT_FILES: &[&str] = &[\n    \"a.foo\",\n    \"one/b.foo\",\n    \"one/two/c.foo\",\n    \"one/two/C.Foo2\",\n    \"one/two/three/d.foo\",\n    \"fdignored.foo\",\n    \"gitignored.foo\",\n    \".hidden.foo\",\n    \"e1 e2\",\n];\n\nfn get_absolute_root_path(env: &TestEnv) -> String {\n    let path = env\n        .test_root()\n        .canonicalize()\n        .expect(\"absolute path\")\n        .to_str()\n        .expect(\"string\")\n        .to_string();\n\n    #[cfg(windows)]\n    let path = path.trim_start_matches(r\"\\\\?\\\").to_string();\n\n    path\n}\n\n#[cfg(test)]\nfn get_test_env_with_abs_path(dirs: &[&'static str], files: &[&'static str]) -> (TestEnv, String) {\n    let env = TestEnv::new(dirs, files);\n    let root_path = get_absolute_root_path(&env);\n    (env, root_path)\n}\n\n#[cfg(test)]\nfn create_file_with_size<P: AsRef<Path>>(path: P, size_in_bytes: usize) {\n    let content = \"#\".repeat(size_in_bytes);\n    let mut f = fs::File::create::<P>(path).unwrap();\n    f.write_all(content.as_bytes()).unwrap();\n}\n\n/// Simple test\n#[test]\nfn test_simple() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(&[\"a.foo\"], \"a.foo\");\n    te.assert_output(&[\"b.foo\"], \"one/b.foo\");\n    te.assert_output(&[\"d.foo\"], \"one/two/three/d.foo\");\n\n    te.assert_output(\n        &[\"foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Test each pattern type with an empty pattern.\n#[test]\nfn test_empty_pattern() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n    let expected = \"a.foo\n    e1 e2\n    one\n    one/b.foo\n    one/two\n    one/two/c.foo\n    one/two/C.Foo2\n    one/two/three\n    one/two/three/d.foo\n    one/two/three/directory_foo\n    symlink\";\n\n    te.assert_output(&[\"--regex\"], expected);\n    te.assert_output(&[\"--fixed-strings\"], expected);\n    te.assert_output(&[\"--glob\"], expected);\n}\n\n/// Test multiple directory searches\n#[test]\nfn test_multi_file() {\n    let dirs = &[\"test1\", \"test2\"];\n    let files = &[\"test1/a.foo\", \"test1/b.foo\", \"test2/a.foo\"];\n    let te = TestEnv::new(dirs, files);\n    te.assert_output(\n        &[\"a.foo\", \"test1\", \"test2\"],\n        \"test1/a.foo\n        test2/a.foo\",\n    );\n\n    te.assert_output(\n        &[\"\", \"test1\", \"test2\"],\n        \"test1/a.foo\n        test2/a.foo\n        test1/b.foo\",\n    );\n\n    te.assert_output(&[\"a.foo\", \"test1\"], \"test1/a.foo\");\n\n    te.assert_output(&[\"b.foo\", \"test1\", \"test2\"], \"test1/b.foo\");\n}\n\n/// Test search over multiple directory with missing\n#[test]\nfn test_multi_file_with_missing() {\n    let dirs = &[\"real\"];\n    let files = &[\"real/a.foo\", \"real/b.foo\"];\n    let te = TestEnv::new(dirs, files);\n    te.assert_output(&[\"a.foo\", \"real\", \"fake\"], \"real/a.foo\");\n\n    te.assert_error(\n        &[\"a.foo\", \"real\", \"fake\"],\n        \"[fd error]: Search path 'fake' is not a directory.\",\n    );\n\n    te.assert_output(\n        &[\"\", \"real\", \"fake\"],\n        \"real/a.foo\n        real/b.foo\",\n    );\n\n    te.assert_output(\n        &[\"\", \"real\", \"fake1\", \"fake2\"],\n        \"real/a.foo\n        real/b.foo\",\n    );\n\n    te.assert_error(\n        &[\"\", \"real\", \"fake1\", \"fake2\"],\n        \"[fd error]: Search path 'fake1' is not a directory.\n        [fd error]: Search path 'fake2' is not a directory.\",\n    );\n\n    te.assert_failure_with_error(\n        &[\"\", \"fake1\", \"fake2\"],\n        \"[fd error]: Search path 'fake1' is not a directory.\n        [fd error]: Search path 'fake2' is not a directory.\n        [fd error]: No valid search paths given.\",\n    );\n}\n\n/// Explicit root path\n#[test]\nfn test_explicit_root_path() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"foo\", \"one\"],\n        \"one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"foo\", \"one/two/three\"],\n        \"one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output_subdirectory(\n        \"one/two\",\n        &[\"foo\", \"../../\"],\n        \"../../a.foo\n        ../../one/b.foo\n        ../../one/two/c.foo\n        ../../one/two/C.Foo2\n        ../../one/two/three/d.foo\n        ../../one/two/three/directory_foo\",\n    );\n\n    te.assert_output_subdirectory(\n        \"one/two/three\",\n        &[\"\", \"..\"],\n        \"../c.foo\n        ../C.Foo2\n        ../three\n        ../three/d.foo\n        ../three/directory_foo\",\n    );\n}\n\n/// Regex searches\n#[test]\nfn test_regex_searches() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"[a-c].foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\",\n    );\n\n    te.assert_output(\n        &[\"--case-sensitive\", \"[a-c].foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\",\n    );\n}\n\n/// Smart case\n#[test]\nfn test_smart_case() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"c.foo\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\",\n    );\n\n    te.assert_output(&[\"C.Foo\"], \"one/two/C.Foo2\");\n\n    te.assert_output(&[\"Foo\"], \"one/two/C.Foo2\");\n\n    // Only literal uppercase chars should trigger case sensitivity.\n    te.assert_output(\n        &[\"\\\\Ac\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\",\n    );\n    te.assert_output(&[\"\\\\AC\"], \"one/two/C.Foo2\");\n}\n\n/// Case sensitivity (--case-sensitive)\n#[test]\nfn test_case_sensitive() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(&[\"--case-sensitive\", \"c.foo\"], \"one/two/c.foo\");\n\n    te.assert_output(&[\"--case-sensitive\", \"C.Foo\"], \"one/two/C.Foo2\");\n\n    te.assert_output(\n        &[\"--ignore-case\", \"--case-sensitive\", \"C.Foo\"],\n        \"one/two/C.Foo2\",\n    );\n}\n\n/// Case insensitivity (--ignore-case)\n#[test]\nfn test_case_insensitive() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--ignore-case\", \"C.Foo\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\",\n    );\n\n    te.assert_output(\n        &[\"--case-sensitive\", \"--ignore-case\", \"C.Foo\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\",\n    );\n}\n\n/// Glob-based searches (--glob)\n#[test]\nfn test_glob_searches() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--glob\", \"*.foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/three/d.foo\",\n    );\n\n    te.assert_output(\n        &[\"--glob\", \"[a-c].foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\",\n    );\n\n    te.assert_output(\n        &[\"--glob\", \"[a-c].foo*\"],\n        \"a.foo\n        one/b.foo\n        one/two/C.Foo2\n        one/two/c.foo\",\n    );\n}\n\n/// Glob-based searches (--glob) in combination with full path searches (--full-path)\n#[cfg(not(windows))] // TODO: make this work on Windows\n#[test]\nfn test_full_path_glob_searches() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--glob\", \"--full-path\", \"**/one/**/*.foo\"],\n        \"one/b.foo\n        one/two/c.foo\n        one/two/three/d.foo\",\n    );\n\n    te.assert_output(\n        &[\"--glob\", \"--full-path\", \"**/one/*/*.foo\"],\n        \" one/two/c.foo\",\n    );\n\n    te.assert_output(\n        &[\"--glob\", \"--full-path\", \"**/one/*/*/*.foo\"],\n        \" one/two/three/d.foo\",\n    );\n}\n\n#[test]\nfn test_smart_case_glob_searches() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--glob\", \"c.foo*\"],\n        \"one/two/C.Foo2\n        one/two/c.foo\",\n    );\n\n    te.assert_output(&[\"--glob\", \"C.Foo*\"], \"one/two/C.Foo2\");\n}\n\n/// Glob-based searches (--glob) in combination with --case-sensitive\n#[test]\nfn test_case_sensitive_glob_searches() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(&[\"--glob\", \"--case-sensitive\", \"c.foo*\"], \"one/two/c.foo\");\n}\n\n/// Glob-based searches (--glob) in combination with --extension\n#[test]\nfn test_glob_searches_with_extension() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--glob\", \"--extension\", \"foo2\", \"[a-z].*\"],\n        \"one/two/C.Foo2\",\n    );\n}\n\n/// Make sure that --regex overrides --glob\n#[test]\nfn test_regex_overrides_glob() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(&[\"--glob\", \"--regex\", \"Foo2$\"], \"one/two/C.Foo2\");\n}\n\n/// Full path search (--full-path)\n#[test]\nfn test_full_path() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    let root = te.system_root();\n    let prefix = escape(&root.to_string_lossy());\n\n    te.assert_output(\n        &[\n            \"--full-path\",\n            &format!(\"^{prefix}.*three.*foo$\", prefix = prefix),\n        ],\n        \"one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Hidden files (--hidden)\n#[test]\nfn test_hidden() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--hidden\", \"foo\"],\n        \".hidden.foo\n        a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Hidden file attribute on Windows\n#[cfg(windows)]\n#[test]\nfn test_hidden_file_attribute() {\n    use std::os::windows::fs::OpenOptionsExt;\n\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfileattributesa\n    const FILE_ATTRIBUTE_HIDDEN: u32 = 2;\n\n    fs::OpenOptions::new()\n        .create(true)\n        .write(true)\n        .attributes(FILE_ATTRIBUTE_HIDDEN)\n        .open(te.test_root().join(\"hidden-file.txt\"))\n        .unwrap();\n\n    te.assert_output(&[\"--hidden\", \"hidden-file.txt\"], \"hidden-file.txt\");\n    te.assert_output(&[\"hidden-file.txt\"], \"\");\n}\n\n/// Ignored files (--no-ignore)\n#[test]\nfn test_no_ignore() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--no-ignore\", \"foo\"],\n        \"a.foo\n        fdignored.foo\n        gitignored.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"--hidden\", \"--no-ignore\", \"foo\"],\n        \".hidden.foo\n        a.foo\n        fdignored.foo\n        gitignored.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// .gitignore and .fdignore\n#[test]\nfn test_gitignore_and_fdignore() {\n    let files = &[\n        \"ignored-by-nothing\",\n        \"ignored-by-fdignore\",\n        \"ignored-by-gitignore\",\n        \"ignored-by-both\",\n    ];\n    let te = TestEnv::new(&[], files);\n\n    fs::File::create(te.test_root().join(\".fdignore\"))\n        .unwrap()\n        .write_all(b\"ignored-by-fdignore\\nignored-by-both\")\n        .unwrap();\n\n    fs::File::create(te.test_root().join(\".gitignore\"))\n        .unwrap()\n        .write_all(b\"ignored-by-gitignore\\nignored-by-both\")\n        .unwrap();\n\n    te.assert_output(&[\"ignored\"], \"ignored-by-nothing\");\n\n    te.assert_output(\n        &[\"--no-ignore-vcs\", \"ignored\"],\n        \"ignored-by-nothing\n        ignored-by-gitignore\",\n    );\n\n    te.assert_output(\n        &[\"--no-ignore\", \"ignored\"],\n        \"ignored-by-nothing\n        ignored-by-fdignore\n        ignored-by-gitignore\n        ignored-by-both\",\n    );\n}\n\n/// Precedence of .fdignore files\n#[test]\nfn test_custom_ignore_precedence() {\n    let dirs = &[\"inner\"];\n    let files = &[\"inner/foo\"];\n    let te = TestEnv::new(dirs, files);\n\n    // Ignore 'foo' via .gitignore\n    fs::File::create(te.test_root().join(\"inner/.gitignore\"))\n        .unwrap()\n        .write_all(b\"foo\")\n        .unwrap();\n\n    // Whitelist 'foo' via .fdignore\n    fs::File::create(te.test_root().join(\".fdignore\"))\n        .unwrap()\n        .write_all(b\"!foo\")\n        .unwrap();\n\n    te.assert_output(&[\"foo\"], \"inner/foo\");\n\n    te.assert_output(&[\"--no-ignore-vcs\", \"foo\"], \"inner/foo\");\n\n    te.assert_output(&[\"--no-ignore\", \"foo\"], \"inner/foo\");\n}\n\n/// VCS ignored files (--no-ignore-vcs)\n#[test]\nfn test_no_ignore_vcs() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--no-ignore-vcs\", \"foo\"],\n        \"a.foo\n        gitignored.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Custom ignore files (--ignore-file)\n#[test]\nfn test_custom_ignore_files() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    // Ignore 'C.Foo2' and everything in 'three'.\n    fs::File::create(te.test_root().join(\"custom.ignore\"))\n        .unwrap()\n        .write_all(b\"C.Foo2\\nthree\")\n        .unwrap();\n\n    te.assert_output(\n        &[\"--ignore-file\", \"custom.ignore\", \"foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\",\n    );\n}\n\n/// Ignored files with ripgrep aliases (-u / -uu)\n#[test]\nfn test_no_ignore_aliases() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"-u\", \"foo\"],\n        \"a.foo\n        fdignored.foo\n        gitignored.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"-uu\", \"foo\"],\n        \".hidden.foo\n        a.foo\n        fdignored.foo\n        gitignored.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Symlinks (--follow)\n#[test]\nfn test_follow() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--follow\", \"c.foo\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\n        symlink/c.foo\n        symlink/C.Foo2\",\n    );\n}\n\n// File system boundaries (--one-file-system)\n// Limited to Unix because, to the best of my knowledge, there is no easy way to test a use case\n// file systems mounted into the tree on Windows.\n// Not limiting depth causes massive delay under Darwin, see BurntSushi/ripgrep#1429\n#[test]\n#[cfg(unix)]\nfn test_file_system_boundaries() {\n    // Helper function to get the device ID for a given path\n    // Inspired by https://github.com/BurntSushi/ripgrep/blob/8892bf648cfec111e6e7ddd9f30e932b0371db68/ignore/src/walk.rs#L1693\n    fn device_num(path: impl AsRef<Path>) -> u64 {\n        use std::os::unix::fs::MetadataExt;\n\n        path.as_ref().metadata().map(|md| md.dev()).unwrap()\n    }\n\n    // Can't simulate file system boundaries\n    let te = TestEnv::new(&[], &[]);\n\n    let dev_null = Path::new(\"/dev/null\");\n\n    // /dev/null should exist in all sane Unixes. Skip if it doesn't exist for some reason.\n    // Also skip should it be on the same device as the root partition for some reason.\n    if !dev_null.is_file() || device_num(dev_null) == device_num(\"/\") {\n        return;\n    }\n\n    te.assert_output(\n        &[\"--full-path\", \"--max-depth\", \"2\", \"^/dev/null$\", \"/\"],\n        \"/dev/null\",\n    );\n    te.assert_output(\n        &[\n            \"--one-file-system\",\n            \"--full-path\",\n            \"--max-depth\",\n            \"2\",\n            \"^/dev/null$\",\n            \"/\",\n        ],\n        \"\",\n    );\n}\n\n#[test]\nfn test_follow_broken_symlink() {\n    let mut te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n    te.create_broken_symlink(\"broken_symlink\")\n        .expect(\"Failed to create broken symlink.\");\n\n    te.assert_output(\n        &[\"symlink\"],\n        \"broken_symlink\n        symlink\",\n    );\n    te.assert_output(\n        &[\"--type\", \"symlink\", \"symlink\"],\n        \"broken_symlink\n        symlink\",\n    );\n\n    te.assert_output(&[\"--type\", \"file\", \"symlink\"], \"\");\n\n    te.assert_output(\n        &[\"--follow\", \"--type\", \"symlink\", \"symlink\"],\n        \"broken_symlink\",\n    );\n    te.assert_output(&[\"--follow\", \"--type\", \"file\", \"symlink\"], \"\");\n}\n\n/// Null separator (--print0)\n#[test]\nfn test_print0() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--print0\", \"foo\"],\n        \"a.fooNULL\n        one/b.fooNULL\n        one/two/C.Foo2NULL\n        one/two/c.fooNULL\n        one/two/three/d.fooNULL\n        one/two/three/directory_fooNULL\",\n    );\n}\n\n/// Maximum depth (--max-depth)\n#[test]\nfn test_max_depth() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--max-depth\", \"3\"],\n        \"a.foo\n        e1 e2\n        one\n        one/b.foo\n        one/two\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three\n        symlink\",\n    );\n\n    te.assert_output(\n        &[\"--max-depth\", \"2\"],\n        \"a.foo\n        e1 e2\n        one\n        one/b.foo\n        one/two\n        symlink\",\n    );\n\n    te.assert_output(\n        &[\"--max-depth\", \"1\"],\n        \"a.foo\n        e1 e2\n        one\n        symlink\",\n    );\n}\n\n/// Minimum depth (--min-depth)\n#[test]\nfn test_min_depth() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--min-depth\", \"3\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\n        one/two/three\n        one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"--min-depth\", \"4\"],\n        \"one/two/three/d.foo\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Exact depth (--exact-depth)\n#[test]\nfn test_exact_depth() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--exact-depth\", \"3\"],\n        \"one/two/c.foo\n        one/two/C.Foo2\n        one/two/three\",\n    );\n}\n\n/// Absolute paths (--absolute-path)\n#[test]\nfn test_absolute_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--absolute-path\"],\n        &format!(\n            \"{abs_path}/a.foo\n            {abs_path}/e1 e2\n            {abs_path}/one\n            {abs_path}/one/b.foo\n            {abs_path}/one/two\n            {abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\n            {abs_path}/symlink\",\n            abs_path = &abs_path\n        ),\n    );\n\n    te.assert_output(\n        &[\"--absolute-path\", \"foo\"],\n        &format!(\n            \"{abs_path}/a.foo\n            {abs_path}/one/b.foo\n            {abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n/// Show absolute paths if the path argument is absolute\n#[test]\nfn test_implicit_absolute_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"foo\", &abs_path],\n        &format!(\n            \"{abs_path}/a.foo\n            {abs_path}/one/b.foo\n            {abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n/// Absolute paths should be normalized\n#[test]\nfn test_normalized_absolute_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output_subdirectory(\n        \"one\",\n        &[\"--absolute-path\", \"foo\", \"..\"],\n        &format!(\n            \"{abs_path}/a.foo\n            {abs_path}/one/b.foo\n            {abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n/// File type filter (--type)\n#[test]\nfn test_type() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--type\", \"f\"],\n        \"a.foo\n        e1 e2\n        one/b.foo\n        one/two/c.foo\n        one/two/C.Foo2\n        one/two/three/d.foo\",\n    );\n\n    te.assert_output(&[\"--type\", \"f\", \"e1\"], \"e1 e2\");\n\n    te.assert_output(\n        &[\"--type\", \"d\"],\n        \"one\n        one/two\n        one/two/three\n        one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"--type\", \"d\", \"--type\", \"l\"],\n        \"one\n        one/two\n        one/two/three\n        one/two/three/directory_foo\n        symlink\",\n    );\n\n    te.assert_output(&[\"--type\", \"l\"], \"symlink\");\n}\n\n/// Test `--type executable`\n#[cfg(unix)]\n#[test]\nfn test_type_executable() {\n    use std::os::unix::fs::OpenOptionsExt;\n\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    fs::OpenOptions::new()\n        .create(true)\n        .write(true)\n        .mode(0o777)\n        .open(te.test_root().join(\"executable-file.sh\"))\n        .unwrap();\n\n    te.assert_output(&[\"--type\", \"executable\"], \"executable-file.sh\");\n\n    te.assert_output(\n        &[\"--type\", \"executable\", \"--type\", \"directory\"],\n        \"executable-file.sh\n        one\n        one/two\n        one/two/three\n        one/two/three/directory_foo\",\n    );\n}\n\n/// Test `--type empty`\n#[test]\nfn test_type_empty() {\n    let te = TestEnv::new(&[\"dir_empty\", \"dir_nonempty\"], &[]);\n\n    create_file_with_size(te.test_root().join(\"0_bytes.foo\"), 0);\n    create_file_with_size(te.test_root().join(\"5_bytes.foo\"), 5);\n\n    create_file_with_size(te.test_root().join(\"dir_nonempty\").join(\"2_bytes.foo\"), 2);\n\n    te.assert_output(\n        &[\"--type\", \"empty\"],\n        \"0_bytes.foo\n        dir_empty\",\n    );\n\n    te.assert_output(\n        &[\"--type\", \"empty\", \"--type\", \"file\", \"--type\", \"directory\"],\n        \"0_bytes.foo\n        dir_empty\",\n    );\n\n    te.assert_output(&[\"--type\", \"empty\", \"--type\", \"file\"], \"0_bytes.foo\");\n\n    te.assert_output(&[\"--type\", \"empty\", \"--type\", \"directory\"], \"dir_empty\");\n}\n\n/// File extension (--extension)\n#[test]\nfn test_extension() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--extension\", \"foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/three/d.foo\",\n    );\n\n    te.assert_output(\n        &[\"--extension\", \".foo\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/three/d.foo\",\n    );\n\n    te.assert_output(\n        &[\"--extension\", \".foo\", \"--extension\", \"foo2\"],\n        \"a.foo\n        one/b.foo\n        one/two/c.foo\n        one/two/three/d.foo\n        one/two/C.Foo2\",\n    );\n\n    te.assert_output(&[\"--extension\", \".foo\", \"a\"], \"a.foo\");\n\n    te.assert_output(&[\"--extension\", \"foo2\"], \"one/two/C.Foo2\");\n\n    let te2 = TestEnv::new(&[], &[\"spam.bar.baz\", \"egg.bar.baz\", \"yolk.bar.baz.sig\"]);\n\n    te2.assert_output(\n        &[\"--extension\", \".bar.baz\"],\n        \"spam.bar.baz\n        egg.bar.baz\",\n    );\n\n    te2.assert_output(&[\"--extension\", \"sig\"], \"yolk.bar.baz.sig\");\n\n    te2.assert_output(&[\"--extension\", \"bar.baz.sig\"], \"yolk.bar.baz.sig\");\n\n    let te3 = TestEnv::new(&[], &[\"latin1.e\\u{301}xt\", \"smiley.☻\"]);\n\n    te3.assert_output(&[\"--extension\", \"☻\"], \"smiley.☻\");\n\n    te3.assert_output(&[\"--extension\", \".e\\u{301}xt\"], \"latin1.e\\u{301}xt\");\n\n    let te4 = TestEnv::new(&[], &[\".hidden\", \"test.hidden\"]);\n\n    te4.assert_output(&[\"--hidden\", \"--extension\", \".hidden\"], \"test.hidden\");\n}\n\n/// Symlink as search directory\n#[test]\nfn test_symlink_as_root() {\n    let mut te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n    te.create_broken_symlink(\"broken_symlink\")\n        .expect(\"Failed to create broken symlink.\");\n\n    // From: http://pubs.opengroup.org/onlinepubs/9699919799/functions/getcwd.html\n    // The getcwd() function shall place an absolute pathname of the current working directory in\n    // the array pointed to by buf, and return buf. The pathname shall contain no components that\n    // are dot or dot-dot, or are symbolic links.\n    //\n    // Key points:\n    // 1. The path of the current working directory of a Unix process cannot contain symlinks.\n    // 2. The path of the current working directory of a Windows process can contain symlinks.\n    //\n    // More:\n    // 1. On Windows, symlinks are resolved after the \"..\" component.\n    // 2. On Unix, symlinks are resolved immediately as encountered.\n\n    let parent_parent = if cfg!(windows) { \"..\" } else { \"../..\" };\n    te.assert_output_subdirectory(\n        \"symlink\",\n        &[\"\", parent_parent],\n        &format!(\n            \"{dir}/a.foo\n            {dir}/broken_symlink\n            {dir}/e1 e2\n            {dir}/one\n            {dir}/one/b.foo\n            {dir}/one/two\n            {dir}/one/two/c.foo\n            {dir}/one/two/C.Foo2\n            {dir}/one/two/three\n            {dir}/one/two/three/d.foo\n            {dir}/one/two/three/directory_foo\n            {dir}/symlink\",\n            dir = &parent_parent\n        ),\n    );\n}\n\n#[test]\nfn test_symlink_and_absolute_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output_subdirectory(\n        \"symlink\",\n        &[\"--absolute-path\"],\n        &format!(\n            \"{abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n#[test]\nfn test_symlink_as_absolute_root() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"\", &format!(\"{abs_path}/symlink\", abs_path = abs_path)],\n        &format!(\n            \"{abs_path}/symlink/c.foo\n            {abs_path}/symlink/C.Foo2\n            {abs_path}/symlink/three\n            {abs_path}/symlink/three/d.foo\n            {abs_path}/symlink/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n#[test]\nfn test_symlink_and_full_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n    let root = te.system_root();\n    let prefix = escape(&root.to_string_lossy());\n\n    te.assert_output_subdirectory(\n        \"symlink\",\n        &[\n            \"--absolute-path\",\n            \"--full-path\",\n            &format!(\"^{prefix}.*three\", prefix = prefix),\n        ],\n        &format!(\n            \"{abs_path}/one/two/three\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n#[test]\nfn test_symlink_and_full_path_abs_path() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n    let root = te.system_root();\n    let prefix = escape(&root.to_string_lossy());\n    te.assert_output(\n        &[\n            \"--full-path\",\n            &format!(\"^{prefix}.*symlink.*three\", prefix = prefix),\n            &format!(\"{abs_path}/symlink\", abs_path = abs_path),\n        ],\n        &format!(\n            \"{abs_path}/symlink/three\n            {abs_path}/symlink/three/d.foo\n            {abs_path}/symlink/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n/// Exclude patterns (--exclude)\n#[test]\nfn test_excludes() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--exclude\", \"*.foo\"],\n        \"one\n        one/two\n        one/two/C.Foo2\n        one/two/three\n        one/two/three/directory_foo\n        e1 e2\n        symlink\",\n    );\n\n    te.assert_output(\n        &[\"--exclude\", \"*.foo\", \"--exclude\", \"*.Foo2\"],\n        \"one\n        one/two\n        one/two/three\n        one/two/three/directory_foo\n        e1 e2\n        symlink\",\n    );\n\n    te.assert_output(\n        &[\"--exclude\", \"*.foo\", \"--exclude\", \"*.Foo2\", \"foo\"],\n        \"one/two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"--exclude\", \"one/two\", \"foo\"],\n        \"a.foo\n        one/b.foo\",\n    );\n\n    te.assert_output(\n        &[\"--exclude\", \"one/**/*.foo\"],\n        \"a.foo\n        e1 e2\n        one\n        one/two\n        one/two/C.Foo2\n        one/two/three\n        one/two/three/directory_foo\n        symlink\",\n    );\n}\n\n/// Shell script execution (--exec)\n#[test]\nfn test_exec() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n    // TODO Windows tests: D:file.txt \\file.txt \\\\server\\share\\file.txt ...\n    if !cfg!(windows) {\n        te.assert_output(\n            &[\"--absolute-path\", \"foo\", \"--exec\", \"echo\"],\n            &format!(\n                \"{abs_path}/a.foo\n                {abs_path}/one/b.foo\n                {abs_path}/one/two/C.Foo2\n                {abs_path}/one/two/c.foo\n                {abs_path}/one/two/three/d.foo\n                {abs_path}/one/two/three/directory_foo\",\n                abs_path = &abs_path\n            ),\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec\", \"echo\", \"{}\"],\n            \"a.foo\n            one/b.foo\n            one/two/C.Foo2\n            one/two/c.foo\n            one/two/three/d.foo\n            one/two/three/directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec\", \"echo\", \"{.}\"],\n            \"a\n            one/b\n            one/two/C\n            one/two/c\n            one/two/three/d\n            one/two/three/directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec\", \"echo\", \"{/}\"],\n            \"a.foo\n            b.foo\n            C.Foo2\n            c.foo\n            d.foo\n            directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec\", \"echo\", \"{/.}\"],\n            \"a\n            b\n            C\n            c\n            d\n            directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec\", \"echo\", \"{//}\"],\n            \".\n            one\n            one/two\n            one/two\n            one/two/three\n            one/two/three\",\n        );\n\n        te.assert_output(&[\"e1\", \"--exec\", \"printf\", \"%s.%s\\n\"], \"e1 e2.\");\n    }\n}\n\n#[test]\nfn test_exec_batch() {\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n    let te = te.normalize_line(true);\n\n    // TODO Test for windows\n    if !cfg!(windows) {\n        te.assert_output(\n            &[\"--absolute-path\", \"foo\", \"--exec-batch\", \"echo\"],\n            &format!(\n                \"{abs_path}/a.foo {abs_path}/one/b.foo {abs_path}/one/two/C.Foo2 {abs_path}/one/two/c.foo {abs_path}/one/two/three/d.foo {abs_path}/one/two/three/directory_foo\",\n                abs_path = &abs_path\n            ),\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec-batch\", \"echo\", \"{}\"],\n            \"a.foo one/b.foo one/two/C.Foo2 one/two/c.foo one/two/three/d.foo one/two/three/directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"foo\", \"--exec-batch\", \"echo\", \"{/}\"],\n            \"a.foo b.foo C.Foo2 c.foo d.foo directory_foo\",\n        );\n\n        te.assert_output(\n            &[\"no_match\", \"--exec-batch\", \"echo\", \"Matched: \", \"{/}\"],\n            \"\",\n        );\n\n        te.assert_failure_with_error(\n            &[\"foo\", \"--exec-batch\", \"echo\", \"{}\", \"{}\"],\n            \"[fd error]: Only one placeholder allowed for batch commands\",\n        );\n\n        te.assert_failure_with_error(\n            &[\"foo\", \"--exec-batch\", \"echo\", \"{/}\", \";\", \"-x\", \"echo\"],\n            \"error: The argument '--exec <cmd>' cannot be used with '--exec-batch <cmd>'\",\n        );\n\n        te.assert_failure_with_error(\n            &[\"foo\", \"--exec-batch\"],\n            \"error: The argument '--exec-batch <cmd>' requires a value but none was supplied\",\n        );\n\n        te.assert_failure_with_error(\n            &[\"foo\", \"--exec-batch\", \"echo {}\"],\n            \"[fd error]: First argument of exec-batch is expected to be a fixed executable\",\n        );\n    }\n}\n\n/// Literal search (--fixed-strings)\n#[test]\nfn test_fixed_strings() {\n    let dirs = &[\"test1\", \"test2\"];\n    let files = &[\"test1/a.foo\", \"test1/a_foo\", \"test2/Download (1).tar.gz\"];\n    let te = TestEnv::new(dirs, files);\n\n    // Regex search, dot is treated as \"any character\"\n    te.assert_output(\n        &[\"a.foo\"],\n        \"test1/a.foo\n         test1/a_foo\",\n    );\n\n    // Literal search, dot is treated as character\n    te.assert_output(&[\"--fixed-strings\", \"a.foo\"], \"test1/a.foo\");\n\n    // Regex search, parens are treated as group\n    te.assert_output(&[\"download (1)\"], \"\");\n\n    // Literal search, parens are treated as characters\n    te.assert_output(\n        &[\"--fixed-strings\", \"download (1)\"],\n        \"test2/Download (1).tar.gz\",\n    );\n\n    // Combine with --case-sensitive\n    te.assert_output(&[\"--fixed-strings\", \"--case-sensitive\", \"download (1)\"], \"\");\n}\n\n/// Filenames with invalid UTF-8 sequences\n#[cfg(target_os = \"linux\")]\n#[test]\nfn test_invalid_utf8() {\n    use std::ffi::OsStr;\n    use std::os::unix::ffi::OsStrExt;\n\n    let dirs = &[\"test1\"];\n    let files = &[];\n    let te = TestEnv::new(dirs, files);\n\n    fs::File::create(\n        te.test_root()\n            .join(OsStr::from_bytes(b\"test1/test_\\xFEinvalid.txt\")),\n    )\n    .unwrap();\n\n    te.assert_output(&[\"\", \"test1/\"], \"test1/test_�invalid.txt\");\n\n    te.assert_output(&[\"invalid\", \"test1/\"], \"test1/test_�invalid.txt\");\n\n    // Should not be found under a different extension\n    te.assert_output(&[\"-e\", \"zip\", \"\", \"test1/\"], \"\");\n}\n\n/// Filtering for file size (--size)\n#[test]\nfn test_size() {\n    let te = TestEnv::new(&[], &[]);\n\n    create_file_with_size(te.test_root().join(\"0_bytes.foo\"), 0);\n    create_file_with_size(te.test_root().join(\"11_bytes.foo\"), 11);\n    create_file_with_size(te.test_root().join(\"30_bytes.foo\"), 30);\n    create_file_with_size(te.test_root().join(\"3_kilobytes.foo\"), 3 * 1000);\n    create_file_with_size(te.test_root().join(\"4_kibibytes.foo\"), 4 * 1024);\n\n    // Zero and non-zero sized files.\n    te.assert_output(\n        &[\"\", \"--size\", \"+0B\"],\n        \"0_bytes.foo\n        11_bytes.foo\n        30_bytes.foo\n        3_kilobytes.foo\n        4_kibibytes.foo\",\n    );\n\n    // Zero sized files.\n    te.assert_output(&[\"\", \"--size\", \"-0B\"], \"0_bytes.foo\");\n\n    // Files with 2 bytes or more.\n    te.assert_output(\n        &[\"\", \"--size\", \"+2B\"],\n        \"11_bytes.foo\n        30_bytes.foo\n        3_kilobytes.foo\n        4_kibibytes.foo\",\n    );\n\n    // Files with 2 bytes or less.\n    te.assert_output(&[\"\", \"--size\", \"-2B\"], \"0_bytes.foo\");\n\n    // Files with size between 1 byte and 11 bytes.\n    te.assert_output(&[\"\", \"--size\", \"+1B\", \"--size\", \"-11B\"], \"11_bytes.foo\");\n\n    // Files with size between 1 byte and 30 bytes.\n    te.assert_output(\n        &[\"\", \"--size\", \"+1B\", \"--size\", \"-30B\"],\n        \"11_bytes.foo\n        30_bytes.foo\",\n    );\n\n    // Combine with a search pattern\n    te.assert_output(&[\"^11_\", \"--size\", \"+1B\", \"--size\", \"-30B\"], \"11_bytes.foo\");\n\n    // Files with size between 12 and 30 bytes.\n    te.assert_output(&[\"\", \"--size\", \"+12B\", \"--size\", \"-30B\"], \"30_bytes.foo\");\n\n    // Files with size between 31 and 100 bytes.\n    te.assert_output(&[\"\", \"--size\", \"+31B\", \"--size\", \"-100B\"], \"\");\n\n    // Files with size between 3 kibibytes and 5 kibibytes.\n    te.assert_output(&[\"\", \"--size\", \"+3ki\", \"--size\", \"-5ki\"], \"4_kibibytes.foo\");\n\n    // Files with size between 3 kilobytes and 5 kilobytes.\n    te.assert_output(\n        &[\"\", \"--size\", \"+3k\", \"--size\", \"-5k\"],\n        \"3_kilobytes.foo\n        4_kibibytes.foo\",\n    );\n\n    // Files with size greater than 3 kilobytes and less than 3 kibibytes.\n    te.assert_output(&[\"\", \"--size\", \"+3k\", \"--size\", \"-3ki\"], \"3_kilobytes.foo\");\n\n    // Files with size equal 4 kibibytes.\n    te.assert_output(&[\"\", \"--size\", \"+4ki\", \"--size\", \"-4ki\"], \"4_kibibytes.foo\");\n}\n\n#[cfg(test)]\nfn create_file_with_modified<P: AsRef<Path>>(path: P, duration_in_secs: u64) {\n    let st = SystemTime::now() - Duration::from_secs(duration_in_secs);\n    let ft = filetime::FileTime::from_system_time(st);\n    fs::File::create(&path).expect(\"creation failed\");\n    filetime::set_file_times(&path, ft, ft).expect(\"time modification failed\");\n}\n\n#[test]\nfn test_modified_relative() {\n    let te = TestEnv::new(&[], &[]);\n    create_file_with_modified(te.test_root().join(\"foo_0_now\"), 0);\n    create_file_with_modified(te.test_root().join(\"bar_1_min\"), 60);\n    create_file_with_modified(te.test_root().join(\"foo_10_min\"), 600);\n    create_file_with_modified(te.test_root().join(\"bar_1_h\"), 60 * 60);\n    create_file_with_modified(te.test_root().join(\"foo_2_h\"), 2 * 60 * 60);\n    create_file_with_modified(te.test_root().join(\"bar_1_day\"), 24 * 60 * 60);\n\n    te.assert_output(\n        &[\"\", \"--changed-within\", \"15min\"],\n        \"foo_0_now\n        bar_1_min\n        foo_10_min\",\n    );\n\n    te.assert_output(\n        &[\"\", \"--change-older-than\", \"15min\"],\n        \"bar_1_h\n        foo_2_h\n        bar_1_day\",\n    );\n\n    te.assert_output(\n        &[\"foo\", \"--changed-within\", \"12h\"],\n        \"foo_0_now\n        foo_10_min\n        foo_2_h\",\n    );\n}\n\n#[cfg(test)]\nfn change_file_modified<P: AsRef<Path>>(path: P, iso_date: &str) {\n    let st = humantime::parse_rfc3339(iso_date).expect(\"invalid date\");\n    let ft = filetime::FileTime::from_system_time(st);\n    filetime::set_file_times(path, ft, ft).expect(\"time modification failde\");\n}\n\n#[test]\nfn test_modified_asolute() {\n    let te = TestEnv::new(&[], &[\"15mar2018\", \"30dec2017\"]);\n    change_file_modified(te.test_root().join(\"15mar2018\"), \"2018-03-15T12:00:00Z\");\n    change_file_modified(te.test_root().join(\"30dec2017\"), \"2017-12-30T23:59:00Z\");\n\n    te.assert_output(\n        &[\"\", \"--change-newer-than\", \"2018-01-01 00:00:00\"],\n        \"15mar2018\",\n    );\n    te.assert_output(\n        &[\"\", \"--changed-before\", \"2018-01-01 00:00:00\"],\n        \"30dec2017\",\n    );\n}\n\n#[test]\nfn test_custom_path_separator() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"foo\", \"one\", \"--path-separator\", \"=\"],\n        \"one=b.foo\n        one=two=c.foo\n        one=two=C.Foo2\n        one=two=three=d.foo\n        one=two=three=directory_foo\",\n    );\n}\n\n#[test]\nfn test_base_directory() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    te.assert_output(\n        &[\"--base-directory\", \"one\"],\n        \"b.foo\n        two\n        two/c.foo\n        two/C.Foo2\n        two/three\n        two/three/d.foo\n        two/three/directory_foo\",\n    );\n\n    te.assert_output(\n        &[\"--base-directory\", \"one/two\", \"foo\"],\n        \"c.foo\n        C.Foo2\n        three/d.foo\n        three/directory_foo\",\n    );\n\n    // Explicit root path\n    te.assert_output(\n        &[\"--base-directory\", \"one\", \"foo\", \"two\"],\n        \"two/c.foo\n        two/C.Foo2\n        two/three/d.foo\n        two/three/directory_foo\",\n    );\n\n    // Ignore base directory when absolute path is used\n    let (te, abs_path) = get_test_env_with_abs_path(DEFAULT_DIRS, DEFAULT_FILES);\n    let abs_base_dir = &format!(\"{abs_path}/one/two\", abs_path = &abs_path);\n    te.assert_output(\n        &[\"--base-directory\", &abs_base_dir, \"foo\", &abs_path],\n        &format!(\n            \"{abs_path}/a.foo\n            {abs_path}/one/b.foo\n            {abs_path}/one/two/c.foo\n            {abs_path}/one/two/C.Foo2\n            {abs_path}/one/two/three/d.foo\n            {abs_path}/one/two/three/directory_foo\",\n            abs_path = &abs_path\n        ),\n    );\n}\n\n#[test]\nfn test_max_results() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    // Unrestricted\n    te.assert_output(\n        &[\"--max-results=0\", \"c.foo\"],\n        \"one/two/C.Foo2\n         one/two/c.foo\",\n    );\n\n    // Limited to two results\n    te.assert_output(\n        &[\"--max-results=2\", \"c.foo\"],\n        \"one/two/C.Foo2\n         one/two/c.foo\",\n    );\n\n    // Limited to one result. We could find either C.Foo2 or c.foo\n    let assert_just_one_result_with_option = |option| {\n        let output = te.assert_success_and_get_output(\".\", &[option, \"c.foo\"]);\n        let stdout = String::from_utf8_lossy(&output.stdout)\n            .trim()\n            .replace(&std::path::MAIN_SEPARATOR.to_string(), \"/\");\n        assert!(stdout == \"one/two/C.Foo2\" || stdout == \"one/two/c.foo\");\n    };\n    assert_just_one_result_with_option(\"--max-results=1\");\n    assert_just_one_result_with_option(\"-1\");\n}\n\n/// Filenames with non-utf8 paths are passed to the executed program unchanged\n///\n/// Note:\n/// - the test is disabled on Darwin/OSX, since it coerces file names to UTF-8,\n///   even when the requested file name is not valid UTF-8.\n/// - the test is currently disabled on Windows because I'm not sure how to create\n///   invalid UTF-8 files on Windows\n#[cfg(all(unix, not(target_os = \"macos\")))]\n#[test]\nfn test_exec_invalid_utf8() {\n    use std::ffi::OsStr;\n    use std::os::unix::ffi::OsStrExt;\n\n    let dirs = &[\"test1\"];\n    let files = &[];\n    let te = TestEnv::new(dirs, files);\n\n    fs::File::create(\n        te.test_root()\n            .join(OsStr::from_bytes(b\"test1/test_\\xFEinvalid.txt\")),\n    )\n    .unwrap();\n\n    te.assert_output_raw(\n        &[\"\", \"test1/\", \"--exec\", \"echo\", \"{}\"],\n        b\"test1/test_\\xFEinvalid.txt\\n\",\n    );\n\n    te.assert_output_raw(\n        &[\"\", \"test1/\", \"--exec\", \"echo\", \"{/}\"],\n        b\"test_\\xFEinvalid.txt\\n\",\n    );\n\n    te.assert_output_raw(&[\"\", \"test1/\", \"--exec\", \"echo\", \"{//}\"], b\"test1\\n\");\n\n    te.assert_output_raw(\n        &[\"\", \"test1/\", \"--exec\", \"echo\", \"{.}\"],\n        b\"test1/test_\\xFEinvalid\\n\",\n    );\n\n    te.assert_output_raw(\n        &[\"\", \"test1/\", \"--exec\", \"echo\", \"{/.}\"],\n        b\"test_\\xFEinvalid\\n\",\n    );\n}\n\n#[test]\nfn test_list_details() {\n    let te = TestEnv::new(DEFAULT_DIRS, DEFAULT_FILES);\n\n    // Make sure we can execute 'fd --list-details' without any errors.\n    te.assert_success_and_get_output(\".\", &[\"--list-details\"]);\n}\n","traces":[{"line":26,"address":[4301038,4300992],"length":1,"stats":{"Line":1},"fn_name":"get_absolute_root_path"},{"line":27,"address":[4301061,4301222,4301120,4301010],"length":1,"stats":{"Line":4},"fn_name":null},{"line":42,"address":[4301523,4301456],"length":1,"stats":{"Line":1},"fn_name":"get_test_env_with_abs_path"},{"line":43,"address":[4301498],"length":1,"stats":{"Line":1},"fn_name":null},{"line":44,"address":[4301548],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[4301555],"length":1,"stats":{"Line":1},"fn_name":null},{"line":49,"address":[4234816,4234914],"length":1,"stats":{"Line":1},"fn_name":"create_file_with_size<std::path::PathBuf>"},{"line":50,"address":[4234831],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[4234929,4235022],"length":1,"stats":{"Line":2},"fn_name":null},{"line":52,"address":[4235031,4235091],"length":1,"stats":{"Line":2},"fn_name":null},{"line":57,"address":[4236053,4236048],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":58,"address":[4301764],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[4301814],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[4301849],"length":1,"stats":{"Line":1},"fn_name":null},{"line":62,"address":[4301894],"length":1,"stats":{"Line":1},"fn_name":null},{"line":64,"address":[4301936],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[4301929],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[4236080,4236085],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":78,"address":[4302004],"length":1,"stats":{"Line":1},"fn_name":null},{"line":79,"address":[4302054],"length":1,"stats":{"Line":1},"fn_name":null},{"line":91,"address":[4302075],"length":1,"stats":{"Line":1},"fn_name":null},{"line":92,"address":[4302106],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[4302151],"length":1,"stats":{"Line":1},"fn_name":null},{"line":98,"address":[4236117,4236112],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":99,"address":[4302228],"length":1,"stats":{"Line":1},"fn_name":null},{"line":100,"address":[4302240],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[4302252],"length":1,"stats":{"Line":1},"fn_name":null},{"line":102,"address":[4302295],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[4302288],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[4302330],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[4302323],"length":1,"stats":{"Line":1},"fn_name":null},{"line":115,"address":[4302368],"length":1,"stats":{"Line":1},"fn_name":null},{"line":117,"address":[4302403],"length":1,"stats":{"Line":1},"fn_name":null},{"line":122,"address":[4236144,4236149],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":123,"address":[4302468],"length":1,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[4302480],"length":1,"stats":{"Line":1},"fn_name":null},{"line":125,"address":[4302492],"length":1,"stats":{"Line":1},"fn_name":null},{"line":126,"address":[4302528],"length":1,"stats":{"Line":1},"fn_name":null},{"line":128,"address":[4302570],"length":1,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[4302563],"length":1,"stats":{"Line":1},"fn_name":null},{"line":133,"address":[4302615],"length":1,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[4302608],"length":1,"stats":{"Line":1},"fn_name":null},{"line":139,"address":[4302650],"length":1,"stats":{"Line":1},"fn_name":null},{"line":140,"address":[4302643],"length":1,"stats":{"Line":1},"fn_name":null},{"line":145,"address":[4302685],"length":1,"stats":{"Line":1},"fn_name":null},{"line":146,"address":[4302678],"length":1,"stats":{"Line":1},"fn_name":null},{"line":151,"address":[4302720],"length":1,"stats":{"Line":1},"fn_name":null},{"line":152,"address":[4302713],"length":1,"stats":{"Line":1},"fn_name":null},{"line":161,"address":[4236181,4236176],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":162,"address":[4302788],"length":1,"stats":{"Line":1},"fn_name":null},{"line":164,"address":[4302847],"length":1,"stats":{"Line":1},"fn_name":null},{"line":165,"address":[4302840],"length":1,"stats":{"Line":1},"fn_name":null},{"line":173,"address":[4302884],"length":1,"stats":{"Line":1},"fn_name":null},{"line":174,"address":[4302877],"length":1,"stats":{"Line":1},"fn_name":null},{"line":179,"address":[4302933],"length":1,"stats":{"Line":1},"fn_name":null},{"line":181,"address":[4302926],"length":1,"stats":{"Line":1},"fn_name":null},{"line":190,"address":[4302987],"length":1,"stats":{"Line":1},"fn_name":null},{"line":192,"address":[4302980],"length":1,"stats":{"Line":1},"fn_name":null},{"line":203,"address":[4236213,4236208],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":204,"address":[4303076],"length":1,"stats":{"Line":1},"fn_name":null},{"line":206,"address":[4303133],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[4303126],"length":1,"stats":{"Line":1},"fn_name":null},{"line":214,"address":[4303168],"length":1,"stats":{"Line":1},"fn_name":null},{"line":215,"address":[4303161],"length":1,"stats":{"Line":1},"fn_name":null},{"line":224,"address":[4236245,4236240],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":225,"address":[4303236],"length":1,"stats":{"Line":1},"fn_name":null},{"line":227,"address":[4303293],"length":1,"stats":{"Line":1},"fn_name":null},{"line":228,"address":[4303286],"length":1,"stats":{"Line":1},"fn_name":null},{"line":233,"address":[4303321],"length":1,"stats":{"Line":1},"fn_name":null},{"line":235,"address":[4303366],"length":1,"stats":{"Line":1},"fn_name":null},{"line":238,"address":[4303408],"length":1,"stats":{"Line":1},"fn_name":null},{"line":239,"address":[4303401],"length":1,"stats":{"Line":1},"fn_name":null},{"line":243,"address":[4303436],"length":1,"stats":{"Line":1},"fn_name":null},{"line":248,"address":[4236277,4236272],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":249,"address":[4303508],"length":1,"stats":{"Line":1},"fn_name":null},{"line":251,"address":[4303558],"length":1,"stats":{"Line":1},"fn_name":null},{"line":253,"address":[4303593],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[4303645],"length":1,"stats":{"Line":1},"fn_name":null},{"line":256,"address":[4303638],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[4236304,4236309],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":264,"address":[4303716],"length":1,"stats":{"Line":1},"fn_name":null},{"line":266,"address":[4303773],"length":1,"stats":{"Line":1},"fn_name":null},{"line":267,"address":[4303766],"length":1,"stats":{"Line":1},"fn_name":null},{"line":272,"address":[4303808],"length":1,"stats":{"Line":1},"fn_name":null},{"line":273,"address":[4303801],"length":1,"stats":{"Line":1},"fn_name":null},{"line":281,"address":[4236341,4236336],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":282,"address":[4303876],"length":1,"stats":{"Line":1},"fn_name":null},{"line":284,"address":[4303933],"length":1,"stats":{"Line":1},"fn_name":null},{"line":285,"address":[4303926],"length":1,"stats":{"Line":1},"fn_name":null},{"line":292,"address":[4303968],"length":1,"stats":{"Line":1},"fn_name":null},{"line":293,"address":[4303961],"length":1,"stats":{"Line":1},"fn_name":null},{"line":299,"address":[4304013],"length":1,"stats":{"Line":1},"fn_name":null},{"line":300,"address":[4304006],"length":1,"stats":{"Line":1},"fn_name":null},{"line":311,"address":[4236373,4236368],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":312,"address":[4304084],"length":1,"stats":{"Line":1},"fn_name":null},{"line":314,"address":[4304141],"length":1,"stats":{"Line":1},"fn_name":null},{"line":315,"address":[4304134],"length":1,"stats":{"Line":1},"fn_name":null},{"line":321,"address":[4304176],"length":1,"stats":{"Line":1},"fn_name":null},{"line":322,"address":[4304169],"length":1,"stats":{"Line":1},"fn_name":null},{"line":326,"address":[4304221],"length":1,"stats":{"Line":1},"fn_name":null},{"line":327,"address":[4304214],"length":1,"stats":{"Line":1},"fn_name":null},{"line":333,"address":[4236400,4236405],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":334,"address":[4304292],"length":1,"stats":{"Line":1},"fn_name":null},{"line":336,"address":[4304349],"length":1,"stats":{"Line":1},"fn_name":null},{"line":337,"address":[4304342],"length":1,"stats":{"Line":1},"fn_name":null},{"line":342,"address":[4304377],"length":1,"stats":{"Line":1},"fn_name":null},{"line":347,"address":[4236437,4236432],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":348,"address":[4304452],"length":1,"stats":{"Line":1},"fn_name":null},{"line":350,"address":[4304502],"length":1,"stats":{"Line":1},"fn_name":null},{"line":355,"address":[4236464,4236469],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":356,"address":[4304580],"length":1,"stats":{"Line":1},"fn_name":null},{"line":358,"address":[4304637],"length":1,"stats":{"Line":1},"fn_name":null},{"line":359,"address":[4304630],"length":1,"stats":{"Line":1},"fn_name":null},{"line":366,"address":[4236496,4236501],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":367,"address":[4304708],"length":1,"stats":{"Line":1},"fn_name":null},{"line":369,"address":[4304758],"length":1,"stats":{"Line":1},"fn_name":null},{"line":374,"address":[4236533,4236528],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":375,"address":[4304839],"length":1,"stats":{"Line":1},"fn_name":null},{"line":377,"address":[4304907],"length":1,"stats":{"Line":1},"fn_name":null},{"line":378,"address":[4304951,4304996,4304922],"length":1,"stats":{"Line":3},"fn_name":null},{"line":380,"address":[4305383],"length":1,"stats":{"Line":1},"fn_name":null},{"line":381,"address":[4305331],"length":1,"stats":{"Line":1},"fn_name":null},{"line":383,"address":[4305105],"length":1,"stats":{"Line":1},"fn_name":null},{"line":392,"address":[4236565,4236560],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":393,"address":[4305620],"length":1,"stats":{"Line":1},"fn_name":null},{"line":395,"address":[4305677],"length":1,"stats":{"Line":1},"fn_name":null},{"line":396,"address":[4305670],"length":1,"stats":{"Line":1},"fn_name":null},{"line":431,"address":[4236597,4236592],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":432,"address":[4305748],"length":1,"stats":{"Line":1},"fn_name":null},{"line":434,"address":[4305805],"length":1,"stats":{"Line":1},"fn_name":null},{"line":435,"address":[4305798],"length":1,"stats":{"Line":1},"fn_name":null},{"line":446,"address":[4305840],"length":1,"stats":{"Line":1},"fn_name":null},{"line":447,"address":[4305833],"length":1,"stats":{"Line":1},"fn_name":null},{"line":462,"address":[4236629,4236624],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":463,"address":[4305915],"length":1,"stats":{"Line":1},"fn_name":null},{"line":469,"address":[4305930],"length":1,"stats":{"Line":1},"fn_name":null},{"line":471,"address":[4306027,4306097,4306189,4305983],"length":1,"stats":{"Line":4},"fn_name":null},{"line":476,"address":[4306368,4306263,4306466],"length":1,"stats":{"Line":3},"fn_name":null},{"line":481,"address":[4306530],"length":1,"stats":{"Line":1},"fn_name":null},{"line":483,"address":[4306574],"length":1,"stats":{"Line":1},"fn_name":null},{"line":484,"address":[4306567],"length":1,"stats":{"Line":1},"fn_name":null},{"line":489,"address":[4306611],"length":1,"stats":{"Line":1},"fn_name":null},{"line":490,"address":[4306604],"length":1,"stats":{"Line":1},"fn_name":null},{"line":500,"address":[4236656,4236661],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":501,"address":[4306775],"length":1,"stats":{"Line":1},"fn_name":null},{"line":502,"address":[4306790],"length":1,"stats":{"Line":1},"fn_name":null},{"line":503,"address":[4306805],"length":1,"stats":{"Line":1},"fn_name":null},{"line":506,"address":[4306859,4306973,4307056,4306903],"length":1,"stats":{"Line":4},"fn_name":null},{"line":512,"address":[4307232,4307330,4307127],"length":1,"stats":{"Line":3},"fn_name":null},{"line":517,"address":[4307394],"length":1,"stats":{"Line":1},"fn_name":null},{"line":519,"address":[4307431],"length":1,"stats":{"Line":1},"fn_name":null},{"line":521,"address":[4307468],"length":1,"stats":{"Line":1},"fn_name":null},{"line":526,"address":[4236693,4236688],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":527,"address":[4307636],"length":1,"stats":{"Line":1},"fn_name":null},{"line":529,"address":[4307693],"length":1,"stats":{"Line":1},"fn_name":null},{"line":530,"address":[4307686],"length":1,"stats":{"Line":1},"fn_name":null},{"line":543,"address":[4236725,4236720],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":544,"address":[4307767],"length":1,"stats":{"Line":1},"fn_name":null},{"line":547,"address":[4307946,4307835,4307879,4308026],"length":1,"stats":{"Line":4},"fn_name":null},{"line":552,"address":[4308091],"length":1,"stats":{"Line":1},"fn_name":null},{"line":553,"address":[4308084],"length":1,"stats":{"Line":1},"fn_name":null},{"line":562,"address":[4236752,4236757],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":563,"address":[4308212],"length":1,"stats":{"Line":1},"fn_name":null},{"line":565,"address":[4308269],"length":1,"stats":{"Line":1},"fn_name":null},{"line":566,"address":[4308262],"length":1,"stats":{"Line":1},"fn_name":null},{"line":577,"address":[4308304],"length":1,"stats":{"Line":1},"fn_name":null},{"line":578,"address":[4308297],"length":1,"stats":{"Line":1},"fn_name":null},{"line":593,"address":[4236789,4236784],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":594,"address":[4308372],"length":1,"stats":{"Line":1},"fn_name":null},{"line":596,"address":[4308429],"length":1,"stats":{"Line":1},"fn_name":null},{"line":597,"address":[4308422],"length":1,"stats":{"Line":1},"fn_name":null},{"line":611,"address":[4236816,4236821],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":614,"address":[4237051,4237008,4236848,4236891],"length":1,"stats":{"Line":0},"fn_name":"device_num<&std::path::Path>"},{"line":617,"address":[4236906,4236944,4237025,4237168,4237200,4236865,4237172,4237066,4237204,4237104],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}<&str>"},{"line":621,"address":[4308507],"length":1,"stats":{"Line":1},"fn_name":null},{"line":623,"address":[4308574],"length":1,"stats":{"Line":1},"fn_name":null},{"line":627,"address":[4308697,4308643],"length":1,"stats":{"Line":2},"fn_name":null},{"line":628,"address":[4308859],"length":1,"stats":{"Line":1},"fn_name":null},{"line":631,"address":[4308809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":632,"address":[4308802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":635,"address":[4308868],"length":1,"stats":{"Line":0},"fn_name":null},{"line":636,"address":[4308861],"length":1,"stats":{"Line":0},"fn_name":null},{"line":649,"address":[4237232,4237237],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":650,"address":[4308951],"length":1,"stats":{"Line":1},"fn_name":null},{"line":651,"address":[4309003],"length":1,"stats":{"Line":1},"fn_name":null},{"line":654,"address":[4309103],"length":1,"stats":{"Line":1},"fn_name":null},{"line":655,"address":[4309096],"length":1,"stats":{"Line":1},"fn_name":null},{"line":659,"address":[4309140],"length":1,"stats":{"Line":1},"fn_name":null},{"line":660,"address":[4309133],"length":1,"stats":{"Line":1},"fn_name":null},{"line":665,"address":[4309170],"length":1,"stats":{"Line":1},"fn_name":null},{"line":667,"address":[4309213],"length":1,"stats":{"Line":1},"fn_name":null},{"line":668,"address":[4309206],"length":1,"stats":{"Line":1},"fn_name":null},{"line":671,"address":[4309243],"length":1,"stats":{"Line":1},"fn_name":null},{"line":676,"address":[4237269,4237264],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":677,"address":[4309332],"length":1,"stats":{"Line":1},"fn_name":null},{"line":679,"address":[4309389],"length":1,"stats":{"Line":1},"fn_name":null},{"line":680,"address":[4309382],"length":1,"stats":{"Line":1},"fn_name":null},{"line":692,"address":[4237296,4237301],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":693,"address":[4309460],"length":1,"stats":{"Line":1},"fn_name":null},{"line":695,"address":[4309517],"length":1,"stats":{"Line":1},"fn_name":null},{"line":696,"address":[4309510],"length":1,"stats":{"Line":1},"fn_name":null},{"line":708,"address":[4309552],"length":1,"stats":{"Line":1},"fn_name":null},{"line":709,"address":[4309545],"length":1,"stats":{"Line":1},"fn_name":null},{"line":718,"address":[4309597],"length":1,"stats":{"Line":1},"fn_name":null},{"line":719,"address":[4309590],"length":1,"stats":{"Line":1},"fn_name":null},{"line":729,"address":[4237333,4237328],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":730,"address":[4309668],"length":1,"stats":{"Line":1},"fn_name":null},{"line":732,"address":[4309725],"length":1,"stats":{"Line":1},"fn_name":null},{"line":733,"address":[4309718],"length":1,"stats":{"Line":1},"fn_name":null},{"line":741,"address":[4309760],"length":1,"stats":{"Line":1},"fn_name":null},{"line":742,"address":[4309753],"length":1,"stats":{"Line":1},"fn_name":null},{"line":750,"address":[4237365,4237360],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":751,"address":[4309828],"length":1,"stats":{"Line":1},"fn_name":null},{"line":753,"address":[4309885],"length":1,"stats":{"Line":1},"fn_name":null},{"line":754,"address":[4309878],"length":1,"stats":{"Line":1},"fn_name":null},{"line":763,"address":[4237392,4237397],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":764,"address":[4310017,4309959],"length":1,"stats":{"Line":2},"fn_name":null},{"line":766,"address":[4310457],"length":1,"stats":{"Line":1},"fn_name":null},{"line":767,"address":[4310113],"length":1,"stats":{"Line":1},"fn_name":null},{"line":768,"address":[4310151,4310268],"length":1,"stats":{"Line":2},"fn_name":null},{"line":769,"address":[4310120],"length":1,"stats":{"Line":1},"fn_name":null},{"line":780,"address":[4310135],"length":1,"stats":{"Line":1},"fn_name":null},{"line":784,"address":[4310812],"length":1,"stats":{"Line":1},"fn_name":null},{"line":785,"address":[4310502],"length":1,"stats":{"Line":1},"fn_name":null},{"line":786,"address":[4310540],"length":1,"stats":{"Line":1},"fn_name":null},{"line":787,"address":[4310509],"length":1,"stats":{"Line":1},"fn_name":null},{"line":793,"address":[4310524],"length":1,"stats":{"Line":1},"fn_name":null},{"line":800,"address":[4237424,4237429],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":801,"address":[4311057,4310999],"length":1,"stats":{"Line":2},"fn_name":null},{"line":803,"address":[4311549],"length":1,"stats":{"Line":1},"fn_name":null},{"line":804,"address":[4311200,4311152],"length":1,"stats":{"Line":2},"fn_name":null},{"line":805,"address":[4311292],"length":1,"stats":{"Line":1},"fn_name":null},{"line":806,"address":[4311261],"length":1,"stats":{"Line":1},"fn_name":null},{"line":812,"address":[4311276],"length":1,"stats":{"Line":1},"fn_name":null},{"line":819,"address":[4237461,4237456],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":820,"address":[4311703,4311761],"length":1,"stats":{"Line":2},"fn_name":null},{"line":822,"address":[4312158],"length":1,"stats":{"Line":1},"fn_name":null},{"line":824,"address":[4311845],"length":1,"stats":{"Line":1},"fn_name":null},{"line":825,"address":[4311883,4311997],"length":1,"stats":{"Line":2},"fn_name":null},{"line":826,"address":[4311852],"length":1,"stats":{"Line":1},"fn_name":null},{"line":832,"address":[4311867],"length":1,"stats":{"Line":1},"fn_name":null},{"line":839,"address":[4237493,4237488],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":840,"address":[4312356],"length":1,"stats":{"Line":1},"fn_name":null},{"line":842,"address":[4312413],"length":1,"stats":{"Line":1},"fn_name":null},{"line":843,"address":[4312406],"length":1,"stats":{"Line":1},"fn_name":null},{"line":852,"address":[4312441],"length":1,"stats":{"Line":1},"fn_name":null},{"line":854,"address":[4312493],"length":1,"stats":{"Line":1},"fn_name":null},{"line":855,"address":[4312486],"length":1,"stats":{"Line":1},"fn_name":null},{"line":862,"address":[4312528],"length":1,"stats":{"Line":1},"fn_name":null},{"line":863,"address":[4312521],"length":1,"stats":{"Line":1},"fn_name":null},{"line":871,"address":[4312556],"length":1,"stats":{"Line":1},"fn_name":null},{"line":877,"address":[4237520,4237525],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":880,"address":[4312631],"length":1,"stats":{"Line":1},"fn_name":null},{"line":882,"address":[4312918,4312686,4312746],"length":1,"stats":{"Line":3},"fn_name":null},{"line":886,"address":[4312811],"length":1,"stats":{"Line":1},"fn_name":null},{"line":889,"address":[4312991],"length":1,"stats":{"Line":1},"fn_name":null},{"line":891,"address":[4313035],"length":1,"stats":{"Line":1},"fn_name":null},{"line":892,"address":[4313028],"length":1,"stats":{"Line":1},"fn_name":null},{"line":903,"address":[4237552,4237557],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":904,"address":[4313148],"length":1,"stats":{"Line":1},"fn_name":null},{"line":906,"address":[4313223,4313267],"length":1,"stats":{"Line":2},"fn_name":null},{"line":907,"address":[4313372],"length":1,"stats":{"Line":1},"fn_name":null},{"line":909,"address":[4313513],"length":1,"stats":{"Line":1},"fn_name":null},{"line":911,"address":[4313744],"length":1,"stats":{"Line":1},"fn_name":null},{"line":912,"address":[4313737],"length":1,"stats":{"Line":1},"fn_name":null},{"line":917,"address":[4313781],"length":1,"stats":{"Line":1},"fn_name":null},{"line":918,"address":[4313774],"length":1,"stats":{"Line":1},"fn_name":null},{"line":923,"address":[4313811],"length":1,"stats":{"Line":1},"fn_name":null},{"line":925,"address":[4313848],"length":1,"stats":{"Line":1},"fn_name":null},{"line":930,"address":[4237584,4237589],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":931,"address":[4314023],"length":1,"stats":{"Line":1},"fn_name":null},{"line":933,"address":[4314085],"length":1,"stats":{"Line":1},"fn_name":null},{"line":934,"address":[4314078],"length":1,"stats":{"Line":1},"fn_name":null},{"line":941,"address":[4314122],"length":1,"stats":{"Line":1},"fn_name":null},{"line":942,"address":[4314115],"length":1,"stats":{"Line":1},"fn_name":null},{"line":949,"address":[4314171],"length":1,"stats":{"Line":1},"fn_name":null},{"line":950,"address":[4314164],"length":1,"stats":{"Line":1},"fn_name":null},{"line":958,"address":[4314201],"length":1,"stats":{"Line":1},"fn_name":null},{"line":960,"address":[4314238],"length":1,"stats":{"Line":1},"fn_name":null},{"line":962,"address":[4314275],"length":1,"stats":{"Line":1},"fn_name":null},{"line":964,"address":[4314318],"length":1,"stats":{"Line":1},"fn_name":null},{"line":965,"address":[4314311],"length":1,"stats":{"Line":1},"fn_name":null},{"line":970,"address":[4314348],"length":1,"stats":{"Line":1},"fn_name":null},{"line":972,"address":[4314400],"length":1,"stats":{"Line":1},"fn_name":null},{"line":974,"address":[4314437],"length":1,"stats":{"Line":1},"fn_name":null},{"line":976,"address":[4314473],"length":1,"stats":{"Line":1},"fn_name":null},{"line":978,"address":[4314510],"length":1,"stats":{"Line":1},"fn_name":null},{"line":980,"address":[4314562],"length":1,"stats":{"Line":1},"fn_name":null},{"line":982,"address":[4314601],"length":1,"stats":{"Line":1},"fn_name":null},{"line":987,"address":[4237616,4237621],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":988,"address":[4314807],"length":1,"stats":{"Line":1},"fn_name":null},{"line":989,"address":[4314862],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1005,"address":[4314961],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1006,"address":[4315316],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1008,"address":[4314988],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1009,"address":[4315086],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1010,"address":[4315055],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1022,"address":[4315070],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1028,"address":[4237653,4237648],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1029,"address":[4315537,4315479],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1031,"address":[4315934],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1033,"address":[4315621],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1034,"address":[4315773,4315659],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1035,"address":[4315628],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1040,"address":[4315643],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1046,"address":[4237680,4237685],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1047,"address":[4316135,4316193],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1049,"address":[4316909],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1050,"address":[4316283,4316397],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1051,"address":[4316723,4316633],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1052,"address":[4316602],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1057,"address":[4316617],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1063,"address":[4237717,4237712],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1064,"address":[4317169,4317111],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1065,"address":[4317281],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1066,"address":[4317330,4317404],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1068,"address":[4318123],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1070,"address":[4317740],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1073,"address":[4317513],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1075,"address":[4317962,4317859],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1076,"address":[4317828],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1079,"address":[4317843],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1085,"address":[4237744,4237749],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1086,"address":[4318529,4318471],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1087,"address":[4318641],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1088,"address":[4318690,4318764],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1089,"address":[4319816],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1090,"address":[4319416],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1092,"address":[4318888],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1093,"address":[4319272,4319149],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1095,"address":[4319627,4319534],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1096,"address":[4319503],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1099,"address":[4319518],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1105,"address":[4237776,4237781],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1106,"address":[4320148],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1108,"address":[4320205],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1109,"address":[4320198],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1119,"address":[4320240],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1120,"address":[4320233],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1129,"address":[4320285],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1130,"address":[4320278],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1134,"address":[4320320],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1135,"address":[4320313],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1140,"address":[4320355],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1141,"address":[4320348],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1155,"address":[4237808,4237813],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1156,"address":[4320423,4320481],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1159,"address":[4320903],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1160,"address":[4320565],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1161,"address":[4320603,4320717],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1162,"address":[4320572],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1168,"address":[4320587],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1172,"address":[4320955],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1173,"address":[4320948],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1182,"address":[4320992],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1183,"address":[4320985],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1192,"address":[4321029],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1193,"address":[4321022],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1202,"address":[4321066],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1203,"address":[4321059],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1212,"address":[4321103],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1213,"address":[4321096],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1222,"address":[4321133],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1227,"address":[4237845,4237840],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1228,"address":[4321287,4321353],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1229,"address":[4321445],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1233,"address":[4321896],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1234,"address":[4321568],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1235,"address":[4321784,4321606],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1236,"address":[4321575],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1237,"address":[4321590],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1241,"address":[4321948],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1242,"address":[4321941],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1246,"address":[4321988],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1247,"address":[4321981],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1251,"address":[4322028],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1252,"address":[4322021],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1256,"address":[4322067],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1257,"address":[4322060],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1261,"address":[4322107],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1262,"address":[4322100],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1266,"address":[4322147],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1267,"address":[4322140],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1271,"address":[4322187],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1272,"address":[4322180],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1280,"address":[4237877,4237872],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1281,"address":[4322388],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1282,"address":[4322400],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1283,"address":[4322412],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1286,"address":[4322455],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1287,"address":[4322448],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1293,"address":[4322483],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1296,"address":[4322528],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1299,"address":[4322569],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1300,"address":[4322562],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1305,"address":[4322597],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1311,"address":[4237904,4237909],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1315,"address":[4322684],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1316,"address":[4322699],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1317,"address":[4322714],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1320,"address":[4322775,4322912],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1321,"address":[4322829],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1325,"address":[4323011],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1327,"address":[4323048],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1330,"address":[4323085],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1335,"address":[4237936,4237941],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1336,"address":[4323195],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1338,"address":[4323291,4323335],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1339,"address":[4323440],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1340,"address":[4323581],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1341,"address":[4324537,4323722],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1342,"address":[4323887,4324579],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1345,"address":[4324046],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1346,"address":[4324039],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1355,"address":[4324076],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1358,"address":[4324120],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1359,"address":[4324113],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1367,"address":[4324150],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1370,"address":[4324187],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1373,"address":[4324231],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1374,"address":[4324224],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1380,"address":[4324261],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1383,"address":[4324298],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1386,"address":[4324335],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1389,"address":[4324371],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1392,"address":[4324415],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1393,"address":[4324408],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1399,"address":[4324445],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1402,"address":[4324482],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1406,"address":[4235264,4235310],"length":1,"stats":{"Line":1},"fn_name":"create_file_with_modified<std::path::PathBuf>"},{"line":1407,"address":[4235279,4235350,4235379],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1408,"address":[4235445],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1409,"address":[4235514],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1410,"address":[4235622],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1414,"address":[4237968,4237973],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1415,"address":[4324795],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1416,"address":[4324943,4324899],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1417,"address":[4325048],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1418,"address":[4325189],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1419,"address":[4325941,4325330],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1420,"address":[4325983,4325495],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1421,"address":[4326025,4325660],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1423,"address":[4325819],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1424,"address":[4325812],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1430,"address":[4325856],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1431,"address":[4325849],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1437,"address":[4325893],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1438,"address":[4325886],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1446,"address":[4235766,4235712],"length":1,"stats":{"Line":1},"fn_name":"change_file_modified<std::path::PathBuf>"},{"line":1447,"address":[4235732,4235781],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1448,"address":[4235848],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1449,"address":[4235896],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1453,"address":[4238000,4238005],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1454,"address":[4326283],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1455,"address":[4326340,4326381],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1456,"address":[4326482],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1458,"address":[4326622],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1459,"address":[4326615],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1462,"address":[4326659],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1463,"address":[4326652],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1469,"address":[4238032,4238037],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1470,"address":[4326772],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1472,"address":[4326829],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1473,"address":[4326822],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1483,"address":[4238064,4238069],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1484,"address":[4326903],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1486,"address":[4326968],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1487,"address":[4326961],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1497,"address":[4327008],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1498,"address":[4327001],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1506,"address":[4327063],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1507,"address":[4327056],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1515,"address":[4327096],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1516,"address":[4327235,4327371],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1517,"address":[4328006],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1518,"address":[4327598,4327509],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1519,"address":[4327743],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1520,"address":[4327712],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1526,"address":[4327727],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1532,"address":[4238101,4238096],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1533,"address":[4328244],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1536,"address":[4328303],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1537,"address":[4328296],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1543,"address":[4328340],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1544,"address":[4328333],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1550,"address":[4238272,4238128],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"},{"line":1551,"address":[4238173],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1552,"address":[4238287,4238354,4238472],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1554,"address":[4238575,4238414,4238518],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1555,"address":[4238736,4238610],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1570,"address":[4238896,4238901],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1574,"address":[4328524],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1575,"address":[4328539],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1576,"address":[4328554],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1579,"address":[4328615,4328752],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1580,"address":[4328669],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1584,"address":[4328858],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1585,"address":[4328851],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1589,"address":[4328895],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1590,"address":[4328888],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1594,"address":[4328925],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1596,"address":[4328969],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1597,"address":[4328962],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1601,"address":[4329006],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1602,"address":[4328999],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1608,"address":[4238933,4238928],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1609,"address":[4329111],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1612,"address":[4329163],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":502,"coverable":508}]}