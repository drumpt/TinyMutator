{"files":[{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","d_phobos.rs"],"content":"#![allow(non_camel_case_types)]\n\nuse libc::{c_uchar, c_void};\n\n/// Regex wraps a D regular expression\npub struct Regex {\n    re: *mut d_regex,\n}\n\nunsafe impl Send for Regex {}\n\nimpl Drop for Regex {\n    fn drop(&mut self) {\n        unsafe {\n            d_phobos_regex_free(self.re);\n            rt_term();\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct Error(());\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        unsafe {\n            rt_init();\n\n            Ok(Regex { re: d_phobos_regex_new(pattern.into()) })\n        }\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        unsafe { d_phobos_regex_is_match(self.re, text.into()) }\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_end: 0, last_match: None }\n    }\n\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        let (mut s, mut e): (usize, usize) = (0, 0);\n        let matched = unsafe {\n            d_phobos_regex_find_at(self.re, text.into(), start, &mut s, &mut e)\n        };\n        if matched {\n            Some((s, e))\n        } else {\n            None\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t str,\n    last_end: usize,\n    last_match: Option<usize>,\n}\n\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        match self.re.find_at(self.text, self.last_end) {\n            None => None,\n            Some((s, e)) => {\n                self.last_end = e;\n                Some((s, e))\n            }\n        }\n    }\n}\n\ntype d_regex = c_void;\n\n#[repr(C)]\nstruct d_string {\n    len: usize,\n    text: *const c_uchar,\n}\n\nimpl<'a> From<&'a str> for d_string {\n    fn from(s: &'a str) -> d_string {\n        d_string { len: s.len(), text: s.as_ptr() }\n    }\n}\n\nextern \"C\" {\n    fn rt_init() -> i32;\n    fn rt_term() -> i32;\n    fn d_phobos_regex_new(s: d_string) -> *mut d_regex;\n    fn d_phobos_regex_free(r: *mut d_regex);\n    fn d_phobos_regex_is_match(r: *mut d_regex, s: d_string) -> bool;\n    fn d_phobos_regex_find_at(\n        r: *mut d_regex,\n        s: d_string,\n        start: usize,\n        match_start: *mut usize,\n        match_end: *mut usize,\n    ) -> bool;\n}\n","traces":[{"line":13,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":15,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":23},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","onig.rs"],"content":"use onig;\n\npub struct Regex(onig::Regex);\n\nunsafe impl Send for Regex {}\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Self, onig::Error> {\n        onig::Regex::new(pattern).map(Regex)\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        // Gah. onig's is_match function is anchored, but find is not.\n        self.0\n            .search_with_options(\n                text,\n                0,\n                text.len(),\n                onig::SearchOptions::SEARCH_OPTION_NONE,\n                None,\n            )\n            .is_some()\n    }\n\n    pub fn find_iter<'r, 't>(\n        &'r self,\n        text: &'t str,\n    ) -> onig::FindMatches<'r, 't> {\n        self.0.find_iter(text)\n    }\n}\n","traces":[{"line":8,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":9,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":12,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":14,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":10},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","pcre1.rs"],"content":"#![allow(non_snake_case)]\n\nuse std::ffi::{CStr, CString};\nuse std::fmt;\nuse std::ptr;\n\nuse libc::{c_char, c_int, c_void};\nuse libpcre_sys::{\n    pcre, pcre_compile, pcre_exec, pcre_extra, pcre_free, pcre_free_study,\n    pcre_study, PCRE_ERROR_NOMATCH, PCRE_NO_UTF8_CHECK, PCRE_UTF8,\n};\n\nconst PCRE_UCP: c_int = 0x20000000;\nconst PCRE_STUDY_JIT_COMPLETE: c_int = 0x0001;\n\n// We use libpcre-sys directly because the pcre crate has unavoidable\n// performance problems in its core matching routines. (e.g., It always\n// allocates an ovector.)\npub struct Regex {\n    code: *mut pcre,\n    extra: *mut pcre_extra,\n}\n\nunsafe impl Send for Regex {}\n\nimpl Drop for Regex {\n    fn drop(&mut self) {\n        unsafe {\n            pcre_free_study(self.extra);\n            pcre_free(self.code as *mut c_void);\n        }\n    }\n}\n\npub struct Error {\n    msg: String,\n    offset: c_int,\n}\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        let pattern = CString::new(pattern.to_owned()).unwrap();\n        let mut errptr: *const c_char = ptr::null();\n        let mut erroffset: c_int = 0;\n        let code = unsafe {\n            pcre_compile(\n                pattern.as_ptr(),\n                PCRE_UCP | PCRE_UTF8,\n                &mut errptr,\n                &mut erroffset,\n                ptr::null(),\n            )\n        };\n        if code.is_null() {\n            let msg =\n                unsafe { CStr::from_ptr(errptr).to_str().unwrap().to_owned() };\n            return Err(Error { msg: msg, offset: erroffset });\n        }\n\n        let extra =\n            unsafe { pcre_study(code, PCRE_STUDY_JIT_COMPLETE, &mut errptr) };\n        if extra.is_null() {\n            if errptr.is_null() {\n                panic!(\"unexpected error. Maybe JIT support isn't enabled?\");\n            }\n            let msg =\n                unsafe { CStr::from_ptr(errptr).to_str().unwrap().to_owned() };\n            return Err(Error { msg: msg, offset: 0 });\n        }\n        Ok(Regex { code: code, extra: extra })\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        self.find_at(text, 0).is_some()\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_match_end: 0 }\n    }\n\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        const OVEC_SIZE: usize = 15 * 3; // hopefully enough for benchmarks?\n        let mut ovec: [c_int; OVEC_SIZE] = [0; OVEC_SIZE];\n        let err = unsafe {\n            pcre_exec(\n                self.code,\n                self.extra,\n                text.as_ptr() as *const i8,\n                text.len() as c_int,\n                start as c_int,\n                PCRE_NO_UTF8_CHECK,\n                ovec.as_mut_ptr(),\n                OVEC_SIZE as c_int,\n            )\n        };\n        if err == PCRE_ERROR_NOMATCH {\n            None\n        } else if err < 0 {\n            panic!(\"unknown error code: {:?}\", err)\n        } else {\n            Some((ovec[0] as usize, ovec[1] as usize))\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t str,\n    last_match_end: usize,\n}\n\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        match self.re.find_at(self.text, self.last_match_end) {\n            None => None,\n            Some((s, e)) => {\n                self.last_match_end = e;\n                Some((s, e))\n            }\n        }\n    }\n}\n\nimpl fmt::Debug for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"PCRE error at {:?}: {}\", self.offset, self.msg)\n    }\n}\n","traces":[{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":51},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","pcre2.rs"],"content":"#![allow(non_camel_case_types)]\n\nuse std::fmt;\nuse std::ptr;\nuse std::str;\n\nuse libc::{c_int, c_void, size_t, uint32_t, uint8_t};\n\npub struct Regex {\n    code: *mut code,\n    match_data: *mut match_data,\n    ovector: *mut size_t,\n}\n\nunsafe impl Send for Regex {}\n\nimpl Drop for Regex {\n    fn drop(&mut self) {\n        unsafe {\n            pcre2_match_data_free_8(self.match_data);\n            pcre2_code_free_8(self.code);\n        }\n    }\n}\n\npub struct Error {\n    code: c_int,\n    offset: size_t,\n}\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        let mut error_code: c_int = 0;\n        let mut error_offset: size_t = 0;\n        let code = unsafe {\n            pcre2_compile_8(\n                pattern.as_ptr(),\n                pattern.len(),\n                // PCRE2 can get significantly faster in some cases depending\n                // on the permutation of these options (in particular, dropping\n                // UCP). We should endeavor to have a separate \"ASCII compatible\"\n                // benchmark.\n                PCRE2_UCP | PCRE2_UTF,\n                &mut error_code,\n                &mut error_offset,\n                ptr::null_mut(),\n            )\n        };\n        if code.is_null() {\n            return Err(Error { code: error_code, offset: error_offset });\n        }\n        let err = unsafe { pcre2_jit_compile_8(code, PCRE2_JIT_COMPLETE) };\n        if err < 0 {\n            panic!(\"pcre2_jit_compile_8 failed with error: {:?}\", err);\n        }\n        let match_data = unsafe {\n            pcre2_match_data_create_from_pattern_8(code, ptr::null_mut())\n        };\n        if match_data.is_null() {\n            panic!(\"could not allocate match_data\");\n        }\n        let ovector = unsafe { pcre2_get_ovector_pointer_8(match_data) };\n        if ovector.is_null() {\n            panic!(\"could not get ovector\");\n        }\n        Ok(Regex { code: code, match_data: match_data, ovector: ovector })\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        self.find_at(text, 0).is_some()\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_match_end: 0 }\n    }\n\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        // The man pages for PCRE2 say that pcre2_jit_match is the fastest\n        // way to execute a JIT match because it skips sanity checks. We also\n        // explicitly disable the UTF-8 validity check, but it's probably not\n        // necessary.\n        let err = unsafe {\n            pcre2_jit_match_8(\n                self.code,\n                text.as_ptr(),\n                text.len(),\n                start,\n                PCRE2_NO_UTF_CHECK,\n                self.match_data,\n                ptr::null_mut(),\n            )\n        };\n        if err == PCRE2_ERROR_NOMATCH {\n            None\n        } else if err < 0 {\n            panic!(\"unknown error code: {:?}\", err)\n        } else {\n            Some(unsafe { (*self.ovector, *self.ovector.offset(1)) })\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t str,\n    last_match_end: usize,\n}\n\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        match self.re.find_at(self.text, self.last_match_end) {\n            None => None,\n            Some((s, e)) => {\n                self.last_match_end = e;\n                Some((s, e))\n            }\n        }\n    }\n}\n\nimpl fmt::Debug for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        const BUF_LEN: size_t = 256;\n        let mut buf = [0; BUF_LEN];\n        let len = unsafe {\n            pcre2_get_error_message_8(self.code, buf.as_mut_ptr(), BUF_LEN)\n        };\n        if len < 0 {\n            write!(\n                f,\n                \"Unknown PCRE error. (code: {:?}, offset: {:?})\",\n                self.code, self.offset\n            )\n        } else {\n            let msg = str::from_utf8(&buf[..len as usize]).unwrap();\n            write!(f, \"error at {:?}: {}\", self.offset, msg)\n        }\n    }\n}\n\n// PCRE2 FFI. We only wrap the bits we need.\n\nconst PCRE2_UCP: uint32_t = 0x00020000;\nconst PCRE2_UTF: uint32_t = 0x00080000;\nconst PCRE2_NO_UTF_CHECK: uint32_t = 0x40000000;\nconst PCRE2_JIT_COMPLETE: uint32_t = 0x00000001;\nconst PCRE2_ERROR_NOMATCH: c_int = -1;\n\ntype code = c_void;\n\ntype match_data = c_void;\n\ntype compile_context = c_void; // unused\n\ntype general_context = c_void; // unused\n\ntype match_context = c_void; // unused\n\nextern \"C\" {\n    fn pcre2_compile_8(\n        pattern: *const uint8_t,\n        len: size_t,\n        options: uint32_t,\n        error_code: *mut c_int,\n        error_offset: *mut size_t,\n        context: *mut compile_context,\n    ) -> *mut code;\n\n    fn pcre2_code_free_8(code: *mut code);\n\n    fn pcre2_match_data_create_from_pattern_8(\n        code: *const code,\n        context: *mut general_context,\n    ) -> *mut match_data;\n\n    fn pcre2_match_data_free_8(match_data: *mut match_data);\n\n    fn pcre2_get_ovector_pointer_8(match_data: *mut match_data)\n        -> *mut size_t;\n\n    fn pcre2_jit_compile_8(code: *const code, options: uint32_t) -> c_int;\n\n    fn pcre2_jit_match_8(\n        code: *const code,\n        subject: *const uint8_t,\n        length: size_t,\n        startoffset: size_t,\n        options: uint32_t,\n        match_data: *mut match_data,\n        match_context: *mut match_context,\n    ) -> c_int;\n\n    fn pcre2_get_error_message_8(\n        error_code: c_int,\n        buf: *mut uint8_t,\n        buflen: size_t,\n    ) -> c_int;\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":55},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","re2.rs"],"content":"#![allow(non_camel_case_types)]\n\nuse libc::{c_int, c_uchar, c_void};\n\n/// Regex wraps an RE2 regular expression.\n///\n/// It cannot be used safely from multiple threads simultaneously.\npub struct Regex {\n    re: *mut re2_regexp,\n}\n\nunsafe impl Send for Regex {}\n\nimpl Drop for Regex {\n    fn drop(&mut self) {\n        unsafe {\n            re2_regexp_free(self.re);\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct Error(());\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        unsafe { Ok(Regex { re: re2_regexp_new(pattern.into()) }) }\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        unsafe {\n            re2_regexp_match(self.re, text.into(), 0, text.len() as c_int)\n        }\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_end: 0, last_match: None }\n    }\n\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        let (mut s, mut e): (c_int, c_int) = (0, 0);\n        let matched = unsafe {\n            re2_regexp_find(\n                self.re,\n                text.into(),\n                start as c_int,\n                text.len() as c_int,\n                &mut s,\n                &mut e,\n            )\n        };\n        if matched {\n            Some((s as usize, e as usize))\n        } else {\n            None\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t str,\n    last_end: usize,\n    last_match: Option<usize>,\n}\n\n// This implementation is identical to the one Rust uses, since both Rust's\n// regex engine and RE2 handle empty matches in the same way.\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        fn next_after_empty(text: &str, i: usize) -> usize {\n            let b = match text.as_bytes().get(i) {\n                None => return text.len() + 1,\n                Some(&b) => b,\n            };\n            let inc = if b <= 0x7F {\n                1\n            } else if b <= 0b110_11111 {\n                2\n            } else if b <= 0b1110_1111 {\n                3\n            } else {\n                4\n            };\n            i + inc\n        }\n\n        if self.last_end > self.text.len() {\n            return None;\n        }\n        let (s, e) = match self.re.find_at(self.text, self.last_end) {\n            None => return None,\n            Some((s, e)) => (s, e),\n        };\n        assert!(s >= self.last_end);\n        if s == e {\n            // This is an empty match. To ensure we make progress, start\n            // the next search at the smallest possible starting position\n            // of the next match following this one.\n            self.last_end = next_after_empty(&self.text, e);\n            // Don't accept empty matches immediately following a match.\n            // Just move on to the next match.\n            if Some(e) == self.last_match {\n                return self.next();\n            }\n        } else {\n            self.last_end = e;\n        }\n        self.last_match = Some(self.last_end);\n        Some((s, e))\n    }\n}\n\n// RE2 FFI is below. Note that this uses a hand-rolled C API that is defined\n// in re2.cpp.\n\ntype re2_regexp = c_void;\n\n#[repr(C)]\nstruct re2_string {\n    text: *const c_uchar,\n    len: c_int,\n}\n\nimpl<'a> From<&'a str> for re2_string {\n    fn from(s: &'a str) -> re2_string {\n        re2_string { text: s.as_ptr(), len: s.len() as c_int }\n    }\n}\n\nextern \"C\" {\n    fn re2_regexp_new(pat: re2_string) -> *mut re2_regexp;\n    fn re2_regexp_free(re: *mut re2_regexp);\n    fn re2_regexp_match(\n        re: *mut re2_regexp,\n        text: re2_string,\n        startpos: c_int,\n        endpos: c_int,\n    ) -> bool;\n    fn re2_regexp_find(\n        re: *mut re2_regexp,\n        text: re2_string,\n        startpos: c_int,\n        endpos: c_int,\n        match_start: *mut c_int,\n        match_end: *mut c_int,\n    ) -> bool;\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":46},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","stdcpp.rs"],"content":"#![allow(non_camel_case_types)]\n\nuse libc::{c_int, c_uchar, c_void};\n\n/// Regex wraps a std::regex regular expression.\n///\n/// It cannot be used safely from multiple threads simultaneously.\npub struct Regex {\n    re: *mut stdcpp_regexp,\n}\n\nunsafe impl Send for Regex {}\n\nimpl Drop for Regex {\n    fn drop(&mut self) {\n        unsafe {\n            stdcpp_regexp_free(self.re);\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct Error(());\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        unsafe { Ok(Regex { re: stdcpp_regexp_new(pattern.into()) }) }\n    }\n\n    pub fn is_match(&self, text: &str) -> bool {\n        unsafe {\n            stdcpp_regexp_match(self.re, text.into(), 0, text.len() as c_int)\n        }\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_end: 0, last_match: None }\n    }\n\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        let (mut s, mut e): (c_int, c_int) = (0, 0);\n        let matched = unsafe {\n            stdcpp_regexp_find(\n                self.re,\n                text.into(),\n                start as c_int,\n                text.len() as c_int,\n                &mut s,\n                &mut e,\n            )\n        };\n        if matched {\n            Some((s as usize, e as usize))\n        } else {\n            None\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t str,\n    last_end: usize,\n    last_match: Option<usize>,\n}\n\n// This implementation is identical to the one Rust uses, since both Rust's\n// regex engine and std::regex handle empty matches in the same way.\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        fn next_after_empty(text: &str, i: usize) -> usize {\n            let b = match text.as_bytes().get(i) {\n                None => return text.len() + 1,\n                Some(&b) => b,\n            };\n            let inc = if b <= 0x7F {\n                1\n            } else if b <= 0b110_11111 {\n                2\n            } else if b <= 0b1110_1111 {\n                3\n            } else {\n                4\n            };\n            i + inc\n        }\n\n        if self.last_end > self.text.len() {\n            return None;\n        }\n        let (s, e) = match self.re.find_at(self.text, self.last_end) {\n            None => return None,\n            Some((s, e)) => (s, e),\n        };\n        assert!(s >= self.last_end);\n        if s == e {\n            // This is an empty match. To ensure we make progress, start\n            // the next search at the smallest possible starting position\n            // of the next match following this one.\n            self.last_end = next_after_empty(&self.text, e);\n            // Don't accept empty matches immediately following a match.\n            // Just move on to the next match.\n            if Some(e) == self.last_match {\n                return self.next();\n            }\n        } else {\n            self.last_end = e;\n        }\n        self.last_match = Some(self.last_end);\n        Some((s, e))\n    }\n}\n\n// stdcpp FFI is below. Note that this uses a hand-rolled C API that is defined\n// in stdcpp.cpp.\n\ntype stdcpp_regexp = c_void;\n\n#[repr(C)]\nstruct stdcpp_string {\n    text: *const c_uchar,\n    len: c_int,\n}\n\nimpl<'a> From<&'a str> for stdcpp_string {\n    fn from(s: &'a str) -> stdcpp_string {\n        stdcpp_string { text: s.as_ptr(), len: s.len() as c_int }\n    }\n}\n\nextern \"C\" {\n    fn stdcpp_regexp_new(pat: stdcpp_string) -> *mut stdcpp_regexp;\n    fn stdcpp_regexp_free(re: *mut stdcpp_regexp);\n    fn stdcpp_regexp_match(\n        re: *mut stdcpp_regexp,\n        text: stdcpp_string,\n        startpos: c_int,\n        endpos: c_int,\n    ) -> bool;\n    fn stdcpp_regexp_find(\n        re: *mut stdcpp_regexp,\n        text: stdcpp_string,\n        startpos: c_int,\n        endpos: c_int,\n        match_start: *mut c_int,\n        match_end: *mut c_int,\n    ) -> bool;\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":46},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","ffi","tcl.rs"],"content":"#![allow(non_camel_case_types)]\n\nuse std::mem;\nuse std::ptr;\nuse std::sync::Once;\n\nuse libc::{c_char, c_int, c_long, c_void};\n\n// Used to initialize the TCL interpreter exactly once.\nstatic ONCE: Once = Once::new();\n\n/// Text is a TCL string object backed by a Rust string.\n///\n/// This is a special type that is created once per benchmark and is not\n/// included in timings. In particular, all regex searches execute on values\n/// of this type, so we're careful to avoid the overhead of creating such\n/// objects on every search.\npub struct Text {\n    s: String,\n    obj: *mut tcl_obj,\n}\n\n// TCL's objects are ref-counted in a thread-unsafe manner, which would\n// normally disqualify a Send bound. However, we don't permit Text to be used\n// in a way that can lead to unsafety. In particular, the ref count is always\n// 1, until it is dropped, in which the ref count is decreased to zero and\n// the underlying memory is freed.\nunsafe impl Send for Text {}\n\nimpl Drop for Text {\n    fn drop(&mut self) {\n        unsafe {\n            assert_eq!((*self.obj).ref_count, 1);\n            // This will drop the ref count to 0 and cause it to be freed.\n            (*self.obj).decr_ref_count();\n        }\n    }\n}\n\nimpl Text {\n    pub fn new(text: String) -> Text {\n        let ptr = text.as_ptr() as *const c_char;\n        let len = text.len() as c_int;\n        let obj = unsafe { Tcl_NewStringObj(ptr, len) };\n        unsafe {\n            (*obj).incr_ref_count();\n        }\n        Text { s: text, obj: obj }\n    }\n\n    pub fn len(&self) -> usize {\n        self.s.len()\n    }\n}\n\n/// Regex wraps a TCL regex. It owns a TCL string object and a pointer to a\n/// regexp object. The two share storage.\n///\n/// There's no Drop impl for Regex because the memory for the regex will be\n/// freed when `pat` is dropped.\npub struct Regex {\n    pat: Text,\n    re: *mut tcl_regexp,\n}\n\nunsafe impl Send for Regex {}\n\n#[derive(Debug)]\npub struct Error(());\n\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        ONCE.call_once(|| unsafe {\n            Tcl_CreateInterp();\n        });\n\n        let pat = Text::new(pattern.to_owned());\n        let re = unsafe {\n            Tcl_GetRegExpFromObj(ptr::null_mut(), pat.obj, TCL_REG_ADVANCED)\n        };\n        if re.is_null() {\n            return Err(Error(()));\n        }\n        Ok(Regex { pat: pat, re: re })\n    }\n\n    pub fn is_match(&self, text: &Text) -> bool {\n        let result = unsafe {\n            Tcl_RegExpExecObj(ptr::null_mut(), self.re, text.obj, 0, 1, 0)\n        };\n        if result == -1 {\n            panic!(\"Tcl_RegExpExecObj failed\");\n        }\n        result > 0\n    }\n\n    pub fn find_iter<'r, 't>(&'r self, text: &'t Text) -> FindMatches<'r, 't> {\n        FindMatches { re: self, text: text, last_match: 0 }\n    }\n\n    fn find_at(&self, text: &Text, start: usize) -> Option<(usize, usize)> {\n        let result = unsafe {\n            Tcl_RegExpExecObj(\n                ptr::null_mut(),\n                self.re,\n                text.obj,\n                start as c_int,\n                1,\n                0,\n            )\n        };\n        if result == -1 {\n            panic!(\"Tcl_RegExpExecObj failed\");\n        } else if result == 0 {\n            return None;\n        }\n        let mut info: tcl_regexp_info = unsafe { mem::zeroed() };\n        unsafe {\n            Tcl_RegExpGetInfo(self.re, &mut info);\n            let s = start as c_long + (*info.matches).start;\n            let e = start as c_long + (*info.matches).end;\n            Some((s as usize, e as usize))\n        }\n    }\n}\n\npub struct FindMatches<'r, 't> {\n    re: &'r Regex,\n    text: &'t Text,\n    last_match: usize,\n}\n\nimpl<'r, 't> Iterator for FindMatches<'r, 't> {\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        match self.re.find_at(self.text, self.last_match) {\n            None => None,\n            Some((s, e)) => {\n                self.last_match = e;\n                Some((s, e))\n            }\n        }\n    }\n}\n\n// TCL's FFI. We only wrap the bits we need.\n\nconst TCL_REG_ADVANCED: c_int = 3;\n\ntype tcl_interp = c_void;\ntype tcl_regexp = c_void;\n\n#[repr(C)]\nstruct tcl_obj {\n    ref_count: c_int,\n    // There are more fields, but we don't care about them.\n    // We're careful to only access ref_count so we can increment/decrement it.\n    // This is necessary because Tcl_IncRefCount and Tcl_DecrRefCount are\n    // macros.\n}\n\nimpl tcl_obj {\n    unsafe fn incr_ref_count(&mut self) {\n        self.ref_count += 1;\n    }\n\n    unsafe fn decr_ref_count(&mut self) {\n        self.ref_count -= 1;\n        if self.ref_count <= 0 {\n            TclFreeObj(self);\n        }\n    }\n}\n\n#[repr(C)]\nstruct tcl_regexp_info {\n    nsubs: c_int,\n    matches: *mut tcl_regexp_indices,\n    extend_start: c_long,\n    reserved: c_long,\n}\n\n#[repr(C)]\nstruct tcl_regexp_indices {\n    start: c_long,\n    end: c_long,\n}\n\nextern \"C\" {\n    fn Tcl_CreateInterp() -> *mut tcl_interp;\n\n    fn Tcl_NewStringObj(pat: *const c_char, len: c_int) -> *mut tcl_obj;\n\n    fn TclFreeObj(obj: *mut tcl_obj);\n\n    fn Tcl_GetRegExpFromObj(\n        int: *mut tcl_interp,\n        pat: *mut tcl_obj,\n        flags: c_int,\n    ) -> *mut tcl_regexp;\n\n    fn Tcl_RegExpExecObj(\n        int: *mut tcl_interp,\n        re: *mut tcl_regexp,\n        text: *mut tcl_obj,\n        offset: c_int,\n        nmatches: c_int,\n        flags: c_int,\n    ) -> c_int;\n\n    fn Tcl_RegExpGetInfo(re: *mut tcl_regexp, info: *mut tcl_regexp_info);\n}\n","traces":[{"line":31,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":50},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","bench","src","main.rs"],"content":"extern crate docopt;\nextern crate libc;\n#[cfg(feature = \"re-pcre1\")]\nextern crate libpcre_sys;\nextern crate memmap;\n#[cfg(feature = \"re-onig\")]\nextern crate onig;\n#[cfg(any(feature = \"re-rust\", feature = \"re-rust-bytes\",))]\nextern crate regex;\n#[cfg(feature = \"re-rust\")]\nextern crate regex_syntax;\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\nuse std::fs::File;\nuse std::str;\n\nuse docopt::Docopt;\nuse memmap::Mmap;\n\nmod ffi;\n\nconst USAGE: &'static str = \"\nCount the number of matches of <pattern> in <file>.\n\nThis compiles the pattern once and counts all successive non-overlapping\nmatches in <file>. <file> is memory mapped. Matching is done as if <file> were\na single string (it is not line oriented).\n\nSince this tool includes compilation of the <pattern>, sufficiently large\nhaystacks should be used to amortize the cost of compilation. (e.g., >1MB.)\n\nUsage:\n    regex-run-one [options] [onig | pcre1 | pcre2 | stdcpp | re2 | rust | rust-bytes | tcl] <file> <pattern>\n    regex-run-one [options] (-h | --help)\n\nOptions:\n    -h, --help   Show this usage message.\n\";\n\n#[derive(Debug, Deserialize)]\nstruct Args {\n    arg_pattern: String,\n    arg_file: String,\n    cmd_onig: bool,\n    cmd_pcre1: bool,\n    cmd_pcre2: bool,\n    cmd_stdcpp: bool,\n    cmd_re2: bool,\n    cmd_rust: bool,\n    cmd_rust_bytes: bool,\n    cmd_tcl: bool,\n}\n\nfn main() {\n    let args: Args = Docopt::new(USAGE)\n        .and_then(|d| d.deserialize())\n        .unwrap_or_else(|e| e.exit());\n\n    let mmap =\n        unsafe { Mmap::map(&File::open(&args.arg_file).unwrap()).unwrap() };\n    let haystack = unsafe { str::from_utf8_unchecked(&mmap) };\n\n    println!(\"{}\", args.count(&haystack));\n}\n\nimpl Args {\n    fn count(&self, haystack: &str) -> usize {\n        let pat = &self.arg_pattern;\n        if self.cmd_onig {\n            count_onig(pat, haystack)\n        } else if self.cmd_pcre1 {\n            count_pcre1(pat, haystack)\n        } else if self.cmd_pcre2 {\n            count_pcre2(pat, haystack)\n        } else if self.cmd_stdcpp {\n            count_stdcpp(pat, haystack)\n        } else if self.cmd_re2 {\n            count_re2(pat, haystack)\n        } else if self.cmd_rust {\n            count_rust(pat, haystack)\n        } else if self.cmd_rust_bytes {\n            count_rust_bytes(pat, haystack)\n        } else if self.cmd_tcl {\n            count_tcl(pat, haystack)\n        } else {\n            panic!(\"unreachable\")\n        }\n    }\n}\n\nmacro_rules! nada {\n    ($feature:expr, $name:ident) => {\n        #[cfg(not(feature = $feature))]\n        fn $name(_pat: &str, _haystack: &str) -> usize {\n            panic!(\n                \"Support not enabled. Re-compile with '--features {}' \\\n                 to enable.\",\n                $feature\n            )\n        }\n    };\n}\n\nnada!(\"re-onig\", count_onig);\n#[cfg(feature = \"re-onig\")]\nfn count_onig(pat: &str, haystack: &str) -> usize {\n    use ffi::onig::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\nnada!(\"re-pcre1\", count_pcre1);\n#[cfg(feature = \"re-pcre1\")]\nfn count_pcre1(pat: &str, haystack: &str) -> usize {\n    use ffi::pcre1::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\nnada!(\"re-pcre2\", count_pcre2);\n#[cfg(feature = \"re-pcre2\")]\nfn count_pcre2(pat: &str, haystack: &str) -> usize {\n    use ffi::pcre2::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\n#[cfg(not(any(feature = \"re-stdcpp\", feature = \"re-boost\",)))]\nnada!(\"re-stdcpp\", count_stdcpp);\n#[cfg(any(feature = \"re-stdcpp\", feature = \"re-boost\",))]\nfn count_stdcpp(pat: &str, haystack: &str) -> usize {\n    use ffi::stdcpp::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\nnada!(\"re-re2\", count_re2);\n#[cfg(feature = \"re-re2\")]\nfn count_re2(pat: &str, haystack: &str) -> usize {\n    use ffi::re2::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\nnada!(\"re-rust\", count_rust);\n#[cfg(feature = \"re-rust\")]\nfn count_rust(pat: &str, haystack: &str) -> usize {\n    use regex::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack).count()\n}\n\nnada!(\"re-rust-bytes\", count_rust_bytes);\n#[cfg(feature = \"re-rust-bytes\")]\nfn count_rust_bytes(pat: &str, haystack: &str) -> usize {\n    use regex::bytes::Regex;\n    Regex::new(pat).unwrap().find_iter(haystack.as_bytes()).count()\n}\n\nnada!(\"re-tcl\", count_tcl);\n#[cfg(feature = \"re-tcl\")]\nfn count_tcl(pat: &str, haystack: &str) -> usize {\n    use ffi::tcl::{Regex, Text};\n    Regex::new(pat).unwrap().find_iter(&Text::new(haystack.to_owned())).count()\n}\n","traces":[{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":19},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-capi","src","error.rs"],"content":"use std::ffi;\nuse std::ffi::CString;\nuse std::fmt;\nuse std::str;\n\nuse libc::c_char;\nuse regex;\n\n#[derive(Debug)]\npub struct Error {\n    message: Option<CString>,\n    kind: ErrorKind,\n}\n\n#[derive(Debug)]\npub enum ErrorKind {\n    None,\n    Str(str::Utf8Error),\n    Regex(regex::Error),\n    Nul(ffi::NulError),\n}\n\nimpl Error {\n    pub fn new(kind: ErrorKind) -> Error {\n        Error { message: None, kind: kind }\n    }\n\n    pub fn is_err(&self) -> bool {\n        match self.kind {\n            ErrorKind::None => false,\n            ErrorKind::Str(_) | ErrorKind::Regex(_) | ErrorKind::Nul(_) => {\n                true\n            }\n        }\n    }\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self.kind {\n            ErrorKind::None => write!(f, \"no error\"),\n            ErrorKind::Str(ref e) => e.fmt(f),\n            ErrorKind::Regex(ref e) => e.fmt(f),\n            ErrorKind::Nul(ref e) => e.fmt(f),\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_error_new() -> *mut Error {\n        Box::into_raw(Box::new(Error::new(ErrorKind::None)))\n    }\n}\n\nffi_fn! {\n    fn rure_error_free(err: *mut Error) {\n        unsafe { Box::from_raw(err); }\n    }\n}\n\nffi_fn! {\n    fn rure_error_message(err: *mut Error) -> *const c_char {\n        let err = unsafe { &mut *err };\n        let cmsg = match CString::new(format!(\"{}\", err)) {\n            Ok(msg) => msg,\n            Err(err) => {\n                // I guess this can probably happen if the regex itself has a\n                // NUL, and that NUL re-occurs in the context presented by the\n                // error message. In this case, just show as much as we can.\n                let nul = err.nul_position();\n                let msg = err.into_vec();\n                CString::new(msg[0..nul].to_owned()).unwrap()\n            }\n        };\n        let p = cmsg.as_ptr();\n        err.message = Some(cmsg);\n        p\n    }\n}\n","traces":[{"line":24,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":12},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-capi","src","rure.rs"],"content":"use std::collections::HashMap;\nuse std::ffi::{CStr, CString};\nuse std::ops::Deref;\nuse std::ptr;\nuse std::slice;\nuse std::str;\n\nuse libc::{c_char, size_t};\nuse regex::bytes;\n\nuse error::{Error, ErrorKind};\n\nconst RURE_FLAG_CASEI: u32 = 1 << 0;\nconst RURE_FLAG_MULTI: u32 = 1 << 1;\nconst RURE_FLAG_DOTNL: u32 = 1 << 2;\nconst RURE_FLAG_SWAP_GREED: u32 = 1 << 3;\nconst RURE_FLAG_SPACE: u32 = 1 << 4;\nconst RURE_FLAG_UNICODE: u32 = 1 << 5;\nconst RURE_DEFAULT_FLAGS: u32 = RURE_FLAG_UNICODE;\n\npub struct Regex {\n    re: bytes::Regex,\n    capture_names: HashMap<String, i32>,\n}\n\npub struct Options {\n    size_limit: usize,\n    dfa_size_limit: usize,\n}\n\n// The `RegexSet` is not exposed with option support or matching at an\n// arbitrary position with a crate just yet. To circumvent this, we use\n// the `Exec` structure directly.\npub struct RegexSet {\n    re: bytes::RegexSet,\n}\n\n#[repr(C)]\npub struct rure_match {\n    pub start: size_t,\n    pub end: size_t,\n}\n\npub struct Captures(bytes::Locations);\n\npub struct Iter {\n    re: *const Regex,\n    last_end: usize,\n    last_match: Option<usize>,\n}\n\npub struct IterCaptureNames {\n    capture_names: bytes::CaptureNames<'static>,\n    name_ptrs: Vec<*mut c_char>,\n}\n\nimpl Deref for Regex {\n    type Target = bytes::Regex;\n    fn deref(&self) -> &bytes::Regex {\n        &self.re\n    }\n}\n\nimpl Deref for RegexSet {\n    type Target = bytes::RegexSet;\n    fn deref(&self) -> &bytes::RegexSet {\n        &self.re\n    }\n}\n\nimpl Default for Options {\n    fn default() -> Options {\n        Options { size_limit: 10 * (1 << 20), dfa_size_limit: 2 * (1 << 20) }\n    }\n}\n\nffi_fn! {\n    fn rure_compile_must(pattern: *const c_char) -> *const Regex {\n        let len = unsafe { CStr::from_ptr(pattern).to_bytes().len() };\n        let pat = pattern as *const u8;\n        let mut err = Error::new(ErrorKind::None);\n        let re = rure_compile(\n            pat, len, RURE_DEFAULT_FLAGS, ptr::null(), &mut err);\n        if err.is_err() {\n            let _ = writeln!(&mut io::stderr(), \"{}\", err);\n            let _ = writeln!(\n                &mut io::stderr(), \"aborting from rure_compile_must\");\n            unsafe { abort() }\n        }\n        re\n    }\n}\n\nffi_fn! {\n    fn rure_compile(\n        pattern: *const u8,\n        length: size_t,\n        flags: u32,\n        options: *const Options,\n        error: *mut Error,\n    ) -> *const Regex {\n        let pat = unsafe { slice::from_raw_parts(pattern, length) };\n        let pat = match str::from_utf8(pat) {\n            Ok(pat) => pat,\n            Err(err) => {\n                unsafe {\n                    if !error.is_null() {\n                        *error = Error::new(ErrorKind::Str(err));\n                    }\n                    return ptr::null();\n                }\n            }\n        };\n        let mut builder = bytes::RegexBuilder::new(pat);\n        if !options.is_null() {\n            let options = unsafe { &*options };\n            builder.size_limit(options.size_limit);\n            builder.dfa_size_limit(options.dfa_size_limit);\n        }\n        builder.case_insensitive(flags & RURE_FLAG_CASEI > 0);\n        builder.multi_line(flags & RURE_FLAG_MULTI > 0);\n        builder.dot_matches_new_line(flags & RURE_FLAG_DOTNL > 0);\n        builder.swap_greed(flags & RURE_FLAG_SWAP_GREED > 0);\n        builder.ignore_whitespace(flags & RURE_FLAG_SPACE > 0);\n        builder.unicode(flags & RURE_FLAG_UNICODE > 0);\n        match builder.build() {\n            Ok(re) => {\n                let mut capture_names = HashMap::new();\n                for (i, name) in re.capture_names().enumerate() {\n                    if let Some(name) = name {\n                        capture_names.insert(name.to_owned(), i as i32);\n                    }\n                }\n                let re = Regex {\n                    re: re,\n                    capture_names: capture_names,\n                };\n                Box::into_raw(Box::new(re))\n            }\n            Err(err) => {\n                unsafe {\n                    if !error.is_null() {\n                        *error = Error::new(ErrorKind::Regex(err));\n                    }\n                    ptr::null()\n                }\n            }\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_free(re: *const Regex) {\n        unsafe { Box::from_raw(re as *mut Regex); }\n    }\n}\n\nffi_fn! {\n    fn rure_is_match(\n        re: *const Regex,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t,\n    ) -> bool {\n        let re = unsafe { &*re };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n        re.is_match_at(haystack, start)\n    }\n}\n\nffi_fn! {\n    fn rure_find(\n        re: *const Regex,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t,\n        match_info: *mut rure_match,\n    ) -> bool {\n        let re = unsafe { &*re };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n        re.find_at(haystack, start).map(|m| unsafe {\n            if !match_info.is_null() {\n                (*match_info).start = m.start();\n                (*match_info).end = m.end();\n            }\n        }).is_some()\n    }\n}\n\nffi_fn! {\n    fn rure_find_captures(\n        re: *const Regex,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t,\n        captures: *mut Captures,\n    ) -> bool {\n        let re = unsafe { &*re };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n        let slots = unsafe { &mut (*captures).0 };\n        re.read_captures_at(slots, haystack, start).is_some()\n    }\n}\n\nffi_fn! {\n    fn rure_shortest_match(\n        re: *const Regex,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t,\n        end: *mut usize,\n    ) -> bool {\n        let re = unsafe { &*re };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n        match re.shortest_match_at(haystack, start) {\n            None => false,\n            Some(i) => {\n                if !end.is_null() {\n                    unsafe {\n                        *end = i;\n                    }\n                }\n                true\n            }\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_capture_name_index(\n        re: *const Regex,\n        name: *const c_char,\n    ) -> i32 {\n        let re = unsafe { &*re };\n        let name = unsafe { CStr::from_ptr(name) };\n        let name = match name.to_str() {\n            Err(_) => return -1,\n            Ok(name) => name,\n        };\n        re.capture_names.get(name).map(|&i|i).unwrap_or(-1)\n    }\n}\n\nffi_fn! {\n    fn rure_iter_capture_names_new(\n        re: *const Regex,\n    ) -> *mut IterCaptureNames {\n        let re = unsafe { &*re };\n        Box::into_raw(Box::new(IterCaptureNames {\n            capture_names: re.re.capture_names(),\n            name_ptrs: Vec::new(),\n        }))\n    }\n}\n\nffi_fn! {\n    fn rure_iter_capture_names_free(it: *mut IterCaptureNames) {\n        unsafe {\n            let it = &mut *it;\n            while let Some(ptr) = it.name_ptrs.pop(){\n                CString::from_raw(ptr);\n            }\n            Box::from_raw(it);\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_iter_capture_names_next(\n        it: *mut IterCaptureNames,\n        capture_name: *mut *mut c_char,\n    ) -> bool {\n        if capture_name.is_null() {\n            return false;\n        }\n\n        let it = unsafe { &mut *it };\n        let cn = match it.capture_names.next() {\n            // Top-level iterator ran out of capture groups\n            None => return false,\n            Some(val) => {\n                let name = match val {\n                    // inner Option didn't have a name\n                    None => \"\",\n                    Some(name) => name\n                };\n                name\n            }\n        };\n\n        unsafe {\n            let cs = match CString::new(cn.as_bytes()) {\n                Result::Ok(val) => val,\n                Result::Err(_) => return false\n            };\n            let ptr = cs.into_raw();\n            it.name_ptrs.push(ptr);\n            *capture_name = ptr;\n        }\n        true\n\n    }\n}\n\nffi_fn! {\n    fn rure_iter_new(\n        re: *const Regex,\n    ) -> *mut Iter {\n        Box::into_raw(Box::new(Iter {\n            re: re,\n            last_end: 0,\n            last_match: None,\n        }))\n    }\n}\n\nffi_fn! {\n    fn rure_iter_free(it: *mut Iter) {\n        unsafe { Box::from_raw(it); }\n    }\n}\n\nffi_fn! {\n    fn rure_iter_next(\n        it: *mut Iter,\n        haystack: *const u8,\n        len: size_t,\n        match_info: *mut rure_match,\n    ) -> bool {\n        let it = unsafe { &mut *it };\n        let re = unsafe { &*it.re };\n        let text = unsafe { slice::from_raw_parts(haystack, len) };\n        if it.last_end > text.len() {\n            return false;\n        }\n        let (s, e) = match re.find_at(text, it.last_end) {\n            None => return false,\n            Some(m) => (m.start(), m.end()),\n        };\n        if s == e {\n            // This is an empty match. To ensure we make progress, start\n            // the next search at the smallest possible starting position\n            // of the next match following this one.\n            it.last_end += 1;\n            // Don't accept empty matches immediately following a match.\n            // Just move on to the next match.\n            if Some(e) == it.last_match {\n                return rure_iter_next(it, haystack, len, match_info);\n            }\n        } else {\n            it.last_end = e;\n        }\n        it.last_match = Some(e);\n        if !match_info.is_null() {\n            unsafe {\n                (*match_info).start = s;\n                (*match_info).end = e;\n            }\n        }\n        true\n    }\n}\n\nffi_fn! {\n    fn rure_iter_next_captures(\n        it: *mut Iter,\n        haystack: *const u8,\n        len: size_t,\n        captures: *mut Captures,\n    ) -> bool {\n        let it = unsafe { &mut *it };\n        let re = unsafe { &*it.re };\n        let slots = unsafe { &mut (*captures).0 };\n        let text = unsafe { slice::from_raw_parts(haystack, len) };\n        if it.last_end > text.len() {\n            return false;\n        }\n        let (s, e) = match re.read_captures_at(slots, text, it.last_end) {\n            None => return false,\n            Some(m) => (m.start(), m.end()),\n        };\n        if s == e {\n            // This is an empty match. To ensure we make progress, start\n            // the next search at the smallest possible starting position\n            // of the next match following this one.\n            it.last_end += 1;\n            // Don't accept empty matches immediately following a match.\n            // Just move on to the next match.\n            if Some(e) == it.last_match {\n                return rure_iter_next_captures(it, haystack, len, captures);\n            }\n        } else {\n            it.last_end = e;\n        }\n        it.last_match = Some(e);\n        true\n    }\n}\n\nffi_fn! {\n    fn rure_captures_new(re: *const Regex) -> *mut Captures {\n        let re = unsafe { &*re };\n        let captures = Captures(re.locations());\n        Box::into_raw(Box::new(captures))\n    }\n}\n\nffi_fn! {\n    fn rure_captures_free(captures: *const Captures) {\n        unsafe { Box::from_raw(captures as *mut Captures); }\n    }\n}\n\nffi_fn! {\n    fn rure_captures_at(\n        captures: *const Captures,\n        i: size_t,\n        match_info: *mut rure_match,\n    ) -> bool {\n        let locs = unsafe { &(*captures).0 };\n        match locs.pos(i) {\n            Some((start, end)) => {\n                if !match_info.is_null() {\n                    unsafe {\n                        (*match_info).start = start;\n                        (*match_info).end = end;\n                    }\n                }\n                true\n            }\n            _ => false\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_captures_len(captures: *const Captures) -> size_t {\n        unsafe { (*captures).0.len() }\n    }\n}\n\nffi_fn! {\n    fn rure_options_new() -> *mut Options {\n        Box::into_raw(Box::new(Options::default()))\n    }\n}\n\nffi_fn! {\n    fn rure_options_free(options: *mut Options) {\n        unsafe { Box::from_raw(options); }\n    }\n}\n\nffi_fn! {\n    fn rure_options_size_limit(options: *mut Options, limit: size_t) {\n        let options = unsafe { &mut *options };\n        options.size_limit = limit;\n    }\n}\n\nffi_fn! {\n    fn rure_options_dfa_size_limit(options: *mut Options, limit: size_t) {\n        let options = unsafe { &mut *options };\n        options.dfa_size_limit = limit;\n    }\n}\n\nffi_fn! {\n    fn rure_compile_set(\n        patterns: *const *const u8,\n        patterns_lengths: *const size_t,\n        patterns_count: size_t,\n        flags: u32,\n        options: *const Options,\n        error: *mut Error\n    ) -> *const RegexSet {\n        let (raw_pats, raw_patsl) = unsafe {\n            (\n                slice::from_raw_parts(patterns, patterns_count),\n                slice::from_raw_parts(patterns_lengths, patterns_count)\n            )\n        };\n\n        let mut pats = Vec::with_capacity(patterns_count);\n        for (&raw_pat, &raw_patl) in raw_pats.iter().zip(raw_patsl) {\n            let pat = unsafe { slice::from_raw_parts(raw_pat, raw_patl) };\n            pats.push(match str::from_utf8(pat) {\n                Ok(pat) => pat,\n                Err(err) => {\n                    unsafe {\n                        if !error.is_null() {\n                            *error = Error::new(ErrorKind::Str(err));\n                        }\n                        return ptr::null();\n                    }\n                }\n            });\n        }\n\n        let mut builder = bytes::RegexSetBuilder::new(pats);\n        if !options.is_null() {\n            let options = unsafe { &*options };\n            builder.size_limit(options.size_limit);\n            builder.dfa_size_limit(options.dfa_size_limit);\n        }\n        builder.case_insensitive(flags & RURE_FLAG_CASEI > 0);\n        builder.multi_line(flags & RURE_FLAG_MULTI > 0);\n        builder.dot_matches_new_line(flags & RURE_FLAG_DOTNL > 0);\n        builder.swap_greed(flags & RURE_FLAG_SWAP_GREED > 0);\n        builder.ignore_whitespace(flags & RURE_FLAG_SPACE > 0);\n        builder.unicode(flags & RURE_FLAG_UNICODE > 0);\n        match builder.build() {\n            Ok(re) => {\n                Box::into_raw(Box::new(RegexSet { re: re }))\n            }\n            Err(err) => {\n                unsafe {\n                    if !error.is_null() {\n                        *error = Error::new(ErrorKind::Regex(err))\n                    }\n                    ptr::null()\n                }\n            }\n        }\n    }\n}\n\nffi_fn! {\n    fn rure_set_free(re: *const RegexSet) {\n        unsafe { Box::from_raw(re as *mut RegexSet); }\n    }\n}\n\nffi_fn! {\n    fn rure_set_is_match(\n        re: *const RegexSet,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t\n    ) -> bool {\n        let re = unsafe { &*re };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n        re.is_match_at(haystack, start)\n    }\n}\n\nffi_fn! {\n    fn rure_set_matches(\n        re: *const RegexSet,\n        haystack: *const u8,\n        len: size_t,\n        start: size_t,\n        matches: *mut bool\n    ) -> bool {\n        let re = unsafe { &*re };\n        let mut matches = unsafe {\n            slice::from_raw_parts_mut(matches, re.len())\n        };\n        let haystack = unsafe { slice::from_raw_parts(haystack, len) };\n\n        // read_matches_at isn't guaranteed to set non-matches to false\n        for item in matches.iter_mut() {\n            *item = false;\n        }\n        re.read_matches_at(&mut matches, haystack, start)\n    }\n}\n\nffi_fn! {\n    fn rure_set_len(re: *const RegexSet) -> size_t {\n        unsafe { (*re).len() }\n    }\n}\n\nffi_fn! {\n    fn rure_escape_must(pattern: *const c_char) -> *const c_char {\n        let len = unsafe { CStr::from_ptr(pattern).to_bytes().len() };\n        let pat = pattern as *const u8;\n        let mut err = Error::new(ErrorKind::None);\n        let esc = rure_escape(pat, len, &mut err);\n        if err.is_err() {\n            let _ = writeln!(&mut io::stderr(), \"{}\", err);\n            let _ = writeln!(\n                &mut io::stderr(), \"aborting from rure_escape_must\");\n            unsafe { abort() }\n        }\n        esc\n    }\n}\n\n/// A helper function that implements fallible escaping in a way that returns\n/// an error if escaping failed.\n///\n/// This should ideally be exposed, but it needs API design work. In\n/// particular, this should not return a C string, but a `const uint8_t *`\n/// instead, since it may contain a NUL byte.\nfn rure_escape(\n    pattern: *const u8,\n    length: size_t,\n    error: *mut Error,\n) -> *const c_char {\n    let pat: &[u8] = unsafe { slice::from_raw_parts(pattern, length) };\n    let str_pat = match str::from_utf8(pat) {\n        Ok(val) => val,\n        Err(err) => unsafe {\n            if !error.is_null() {\n                *error = Error::new(ErrorKind::Str(err));\n            }\n            return ptr::null();\n        },\n    };\n    let esc_pat = regex::escape(str_pat);\n    let c_esc_pat = match CString::new(esc_pat) {\n        Ok(val) => val,\n        Err(err) => unsafe {\n            if !error.is_null() {\n                *error = Error::new(ErrorKind::Nul(err));\n            }\n            return ptr::null();\n        },\n    };\n    c_esc_pat.into_raw() as *const c_char\n}\n\nffi_fn! {\n    fn rure_cstring_free(s: *mut c_char) {\n        unsafe { CString::from_raw(s); }\n    }\n}\n","traces":[{"line":59,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":6},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-debug","src","main.rs"],"content":"extern crate docopt;\nextern crate regex;\nextern crate regex_syntax as syntax;\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\nuse std::error;\nuse std::io::{self, Write};\nuse std::process;\nuse std::result;\n\nuse docopt::Docopt;\nuse regex::internal::{Compiler, LiteralSearcher};\nuse syntax::hir::literal::Literals;\nuse syntax::hir::Hir;\n\nconst USAGE: &'static str = \"\nUsage:\n    regex-debug [options] ast <pattern>\n    regex-debug [options] hir <pattern>\n    regex-debug [options] prefixes <patterns> ...\n    regex-debug [options] suffixes <patterns> ...\n    regex-debug [options] anchors <pattern>\n    regex-debug [options] captures <pattern>\n    regex-debug [options] compile <patterns> ...\n    regex-debug [options] utf8-ranges <class>\n    regex-debug [options] utf8-ranges-rev <class>\n    regex-debug --help\n\nOptions:\n    --help               Show this usage message.\n    --size-limit ARG     An approximate size limit on the total size (in bytes)\n                         of a compiled regular expression program.\n                         [default: 10485760]\n    --bytes              Show the instruction codes for byte oriented programs.\n                         (As opposed to Unicode oriented programs.)\n    --dfa                Show the instruction codes for a DFA.\n    --dfa-reverse        Show the instruction codes for a reverse DFA.\n                         This implies --dfa.\n    -a, --all-literals   Shows all literals extracted.\n                         By default, only unambiguous literals are shown.\n    --literal-limit ARG  An approximate limit on the total size (in bytes)\n                         of all literals extracted. [default: 250]\n    --class-limit ARG    A limit on the size of character classes used to\n                         extract literals. [default: 10]\n    --literal-bytes      Show raw literal bytes instead of Unicode chars.\n    --lcp                Show the longest common prefix of all the literals\n                         extracted.\n    --lcs                Show the longest common suffix of all the literals\n                         extracted.\n    --searcher           Show the debug output for the literal searcher\n                         constructed by the literals found.\n    --quiet              Show less output.\n\";\n\n#[derive(Deserialize)]\nstruct Args {\n    cmd_ast: bool,\n    cmd_hir: bool,\n    cmd_prefixes: bool,\n    cmd_suffixes: bool,\n    cmd_anchors: bool,\n    cmd_captures: bool,\n    cmd_compile: bool,\n    cmd_utf8_ranges: bool,\n    cmd_utf8_ranges_rev: bool,\n\n    arg_pattern: String,\n    arg_patterns: Vec<String>,\n    arg_class: String,\n\n    flag_size_limit: usize,\n    flag_bytes: bool,\n    flag_dfa: bool,\n    flag_dfa_reverse: bool,\n    flag_all_literals: bool,\n    flag_literal_limit: usize,\n    flag_class_limit: usize,\n    flag_literal_bytes: bool,\n    flag_lcp: bool,\n    flag_lcs: bool,\n    flag_searcher: bool,\n    flag_quiet: bool,\n}\n\ntype Result<T> = result::Result<T, Box<dyn error::Error + Send + Sync>>;\n\nfn main() {\n    let mut args: Args = Docopt::new(USAGE)\n        .and_then(|d| d.deserialize())\n        .unwrap_or_else(|e| e.exit());\n    if args.flag_dfa_reverse {\n        args.flag_dfa = true;\n    }\n    match run(&args) {\n        Ok(_) => process::exit(0),\n        Err(err) => {\n            let _ = writeln!(&mut io::stderr(), \"{}\", err);\n            process::exit(1)\n        }\n    }\n}\n\nfn run(args: &Args) -> Result<()> {\n    if args.cmd_ast {\n        cmd_ast(args)\n    } else if args.cmd_hir {\n        cmd_hir(args)\n    } else if args.cmd_prefixes {\n        cmd_literals(args)\n    } else if args.cmd_suffixes {\n        cmd_literals(args)\n    } else if args.cmd_anchors {\n        cmd_anchors(args)\n    } else if args.cmd_captures {\n        cmd_captures(args)\n    } else if args.cmd_compile {\n        cmd_compile(args)\n    } else if args.cmd_utf8_ranges {\n        cmd_utf8_ranges(args)\n    } else if args.cmd_utf8_ranges_rev {\n        cmd_utf8_ranges_rev(args)\n    } else {\n        unreachable!()\n    }\n}\n\nfn cmd_ast(args: &Args) -> Result<()> {\n    use syntax::ast::parse::Parser;\n\n    let mut parser = Parser::new();\n    let ast = parser.parse(&args.arg_pattern)?;\n    println!(\"{:#?}\", ast);\n    Ok(())\n}\n\nfn cmd_hir(args: &Args) -> Result<()> {\n    use syntax::ParserBuilder;\n\n    let mut parser = ParserBuilder::new().allow_invalid_utf8(false).build();\n    let hir = parser.parse(&args.arg_pattern)?;\n    println!(\"{:#?}\", hir);\n    Ok(())\n}\n\nfn cmd_literals(args: &Args) -> Result<()> {\n    let exprs = args.parse_many()?;\n    let mut lits = if args.cmd_prefixes {\n        args.literals(&exprs, |lits, e| lits.union_prefixes(e))\n    } else {\n        args.literals(&exprs, |lits, e| lits.union_suffixes(e))\n    };\n    if !args.flag_all_literals {\n        if args.cmd_prefixes {\n            lits = lits.unambiguous_prefixes();\n        } else {\n            lits = lits.unambiguous_suffixes();\n        }\n    }\n    if args.flag_searcher {\n        if args.cmd_prefixes {\n            println!(\"{:?}\", LiteralSearcher::prefixes(lits))\n        } else {\n            println!(\"{:?}\", LiteralSearcher::suffixes(lits))\n        }\n    } else if args.flag_lcp {\n        println!(\"{}\", escape_unicode(lits.longest_common_prefix()));\n    } else if args.flag_lcs {\n        println!(\"{}\", escape_unicode(lits.longest_common_suffix()));\n    } else {\n        for lit in lits.literals() {\n            if args.flag_literal_bytes {\n                if lit.is_cut() {\n                    println!(\"Cut({})\", escape_bytes(lit));\n                } else {\n                    println!(\"Complete({})\", escape_bytes(lit));\n                }\n            } else {\n                println!(\"{:?}\", lit);\n            }\n        }\n    }\n    Ok(())\n}\n\nfn cmd_anchors(args: &Args) -> Result<()> {\n    let expr = args.parse_one()?;\n    if expr.is_anchored_start() {\n        println!(\"start\");\n    }\n    if expr.is_anchored_end() {\n        println!(\"end\");\n    }\n    Ok(())\n}\n\nfn cmd_captures(args: &Args) -> Result<()> {\n    let expr = args.parse_one()?;\n    let prog = args.compiler().only_utf8(false).compile(&[expr])?;\n    for (i, name) in prog.captures.iter().enumerate() {\n        match *name {\n            None => println!(\"{}\", i),\n            Some(ref name) => println!(\"{}:{}\", i, name),\n        }\n    }\n    Ok(())\n}\n\nfn cmd_compile(args: &Args) -> Result<()> {\n    let exprs = args.parse_many()?;\n    let compiler = args\n        .compiler()\n        .bytes(args.flag_bytes)\n        .only_utf8(!args.flag_bytes)\n        .dfa(args.flag_dfa)\n        .reverse(args.flag_dfa_reverse);\n    let prog = compiler.compile(&exprs)?;\n    if !args.flag_quiet {\n        print!(\"{:?}\", prog);\n    } else {\n        println!(\"instruction count: {}\", prog.insts.len());\n    }\n    Ok(())\n}\n\nfn cmd_utf8_ranges(args: &Args) -> Result<()> {\n    use syntax::hir::{self, HirKind};\n    use syntax::utf8::Utf8Sequences;\n    use syntax::ParserBuilder;\n\n    let hir = ParserBuilder::new()\n        .build()\n        .parse(&format!(\"[{}]\", args.arg_class))?;\n    let cls = match hir.into_kind() {\n        HirKind::Class(hir::Class::Unicode(cls)) => cls,\n        _ => {\n            return Err(\n                format!(\"unexpected HIR, expected Unicode class\").into()\n            )\n        }\n    };\n    let mut char_count = 0;\n    for (i, range) in cls.iter().enumerate() {\n        if i > 0 {\n            println!(\"----------------------------\");\n        }\n        char_count += (range.end() as u32) - (range.start() as u32) + 1;\n        for seq in Utf8Sequences::new(range.start(), range.end()) {\n            for utf8_range in seq.into_iter() {\n                print!(\"[{:02X}-{:02X}]\", utf8_range.start, utf8_range.end);\n            }\n            println!();\n        }\n    }\n    println!(\"codepoint count: {}\", char_count);\n    Ok(())\n}\n\nfn cmd_utf8_ranges_rev(args: &Args) -> Result<()> {\n    use syntax::hir::{self, HirKind};\n    use syntax::utf8::Utf8Sequences;\n    use syntax::ParserBuilder;\n\n    let hir = ParserBuilder::new()\n        .build()\n        .parse(&format!(\"[{}]\", args.arg_class))?;\n    let cls = match hir.into_kind() {\n        HirKind::Class(hir::Class::Unicode(cls)) => cls,\n        _ => {\n            return Err(\n                format!(\"unexpected HIR, expected Unicode class\").into()\n            )\n        }\n    };\n    let mut char_count = 0;\n    let mut seqs = vec![];\n    for (_, range) in cls.iter().enumerate() {\n        char_count += (range.end() as u32) - (range.start() as u32) + 1;\n        for seq in Utf8Sequences::new(range.start(), range.end()) {\n            let mut seq = seq.as_slice().to_vec();\n            seq.reverse();\n            seqs.push(seq);\n        }\n    }\n    seqs.sort();\n    for seq in seqs {\n        for utf8_range in seq.into_iter() {\n            print!(\"[{:02X}-{:02X}]\", utf8_range.start, utf8_range.end);\n        }\n        println!();\n    }\n    println!(\"codepoint count: {}\", char_count);\n    Ok(())\n}\n\nimpl Args {\n    fn parse_one(&self) -> Result<Hir> {\n        parse(&self.arg_pattern)\n    }\n\n    fn parse_many(&self) -> Result<Vec<Hir>> {\n        self.arg_patterns.iter().map(|s| parse(s)).collect()\n    }\n\n    fn literals<F: Fn(&mut Literals, &Hir) -> bool>(\n        &self,\n        exprs: &[Hir],\n        get_literals: F,\n    ) -> Literals {\n        let mut lits = Some(self.empty_literals());\n        for e in exprs {\n            lits = lits.and_then(|mut lits| {\n                if !get_literals(&mut lits, e) {\n                    None\n                } else {\n                    Some(lits)\n                }\n            });\n        }\n        lits.unwrap_or(self.empty_literals())\n    }\n\n    fn empty_literals(&self) -> Literals {\n        let mut lits = Literals::empty();\n        lits.set_limit_size(self.flag_literal_limit);\n        lits.set_limit_class(self.flag_class_limit);\n        lits\n    }\n\n    fn compiler(&self) -> Compiler {\n        Compiler::new().size_limit(self.flag_size_limit)\n    }\n}\n\nfn parse(re: &str) -> Result<Hir> {\n    use syntax::ParserBuilder;\n    ParserBuilder::new()\n        .allow_invalid_utf8(true)\n        .build()\n        .parse(re)\n        .map_err(From::from)\n}\n\nfn escape_unicode(bytes: &[u8]) -> String {\n    let show = match ::std::str::from_utf8(bytes) {\n        Ok(v) => v.to_string(),\n        Err(_) => escape_bytes(bytes),\n    };\n    let mut space_escaped = String::new();\n    for c in show.chars() {\n        if c.is_whitespace() {\n            let escaped = if c as u32 <= 0x7F {\n                escape_byte(c as u8)\n            } else {\n                if c as u32 <= 0xFFFF {\n                    format!(r\"\\u{{{:04x}}}\", c as u32)\n                } else {\n                    format!(r\"\\U{{{:08x}}}\", c as u32)\n                }\n            };\n            space_escaped.push_str(&escaped);\n        } else {\n            space_escaped.push(c);\n        }\n    }\n    space_escaped\n}\n\nfn escape_bytes(bytes: &[u8]) -> String {\n    let mut s = String::new();\n    for &b in bytes {\n        s.push_str(&escape_byte(b));\n    }\n    s\n}\n\nfn escape_byte(byte: u8) -> String {\n    use std::ascii::escape_default;\n\n    let escaped: Vec<u8> = escape_default(byte).collect();\n    String::from_utf8_lossy(&escaped).into_owned()\n}\n","traces":[{"line":298,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":312,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":324,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":325,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":327,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":328,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":19},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","ast","mod.rs"],"content":"/*!\nDefines an abstract syntax for regular expressions.\n*/\n\nuse std::cmp::Ordering;\nuse std::error;\nuse std::fmt;\n\npub use ast::visitor::{visit, Visitor};\n\npub mod parse;\npub mod print;\nmod visitor;\n\n/// An error that occurred while parsing a regular expression into an abstract\n/// syntax tree.\n///\n/// Note that note all ASTs represents a valid regular expression. For example,\n/// an AST is constructed without error for `\\p{Quux}`, but `Quux` is not a\n/// valid Unicode property name. That particular error is reported when\n/// translating an AST to the high-level intermediate representation (`HIR`).\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n\nimpl Error {\n    /// Return the type of this error.\n    pub fn kind(&self) -> &ErrorKind {\n        &self.kind\n    }\n\n    /// The original pattern string in which this error occurred.\n    ///\n    /// Every span reported by this error is reported in terms of this string.\n    pub fn pattern(&self) -> &str {\n        &self.pattern\n    }\n\n    /// Return the span at which this error occurred.\n    pub fn span(&self) -> &Span {\n        &self.span\n    }\n\n    /// Return an auxiliary span. This span exists only for some errors that\n    /// benefit from being able to point to two locations in the original\n    /// regular expression. For example, \"duplicate\" errors will have the\n    /// main error position set to the duplicate occurrence while its\n    /// auxiliary span will be set to the initial occurrence.\n    pub fn auxiliary_span(&self) -> Option<&Span> {\n        use self::ErrorKind::*;\n        match self.kind {\n            FlagDuplicate { ref original } => Some(original),\n            FlagRepeatedNegation { ref original, .. } => Some(original),\n            GroupNameDuplicate { ref original, .. } => Some(original),\n            _ => None,\n        }\n    }\n}\n\n/// The type of an error that occurred while building an AST.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// The capturing group limit was exceeded.\n    ///\n    /// Note that this represents a limit on the total number of capturing\n    /// groups in a regex and not necessarily the number of nested capturing\n    /// groups. That is, the nest limit can be low and it is still possible for\n    /// this error to occur.\n    CaptureLimitExceeded,\n    /// An invalid escape sequence was found in a character class set.\n    ClassEscapeInvalid,\n    /// An invalid character class range was found. An invalid range is any\n    /// range where the start is greater than the end.\n    ClassRangeInvalid,\n    /// An invalid range boundary was found in a character class. Range\n    /// boundaries must be a single literal codepoint, but this error indicates\n    /// that something else was found, such as a nested class.\n    ClassRangeLiteral,\n    /// An opening `[` was found with no corresponding closing `]`.\n    ClassUnclosed,\n    /// Note that this error variant is no longer used. Namely, a decimal\n    /// number can only appear as a repetition quantifier. When the number\n    /// in a repetition quantifier is empty, then it gets its own specialized\n    /// error, `RepetitionCountDecimalEmpty`.\n    DecimalEmpty,\n    /// An invalid decimal number was given where one was expected.\n    DecimalInvalid,\n    /// A bracketed hex literal was empty.\n    EscapeHexEmpty,\n    /// A bracketed hex literal did not correspond to a Unicode scalar value.\n    EscapeHexInvalid,\n    /// An invalid hexadecimal digit was found.\n    EscapeHexInvalidDigit,\n    /// EOF was found before an escape sequence was completed.\n    EscapeUnexpectedEof,\n    /// An unrecognized escape sequence.\n    EscapeUnrecognized,\n    /// A dangling negation was used when setting flags, e.g., `i-`.\n    FlagDanglingNegation,\n    /// A flag was used twice, e.g., `i-i`.\n    FlagDuplicate {\n        /// The position of the original flag. The error position\n        /// points to the duplicate flag.\n        original: Span,\n    },\n    /// The negation operator was used twice, e.g., `-i-s`.\n    FlagRepeatedNegation {\n        /// The position of the original negation operator. The error position\n        /// points to the duplicate negation operator.\n        original: Span,\n    },\n    /// Expected a flag but got EOF, e.g., `(?`.\n    FlagUnexpectedEof,\n    /// Unrecognized flag, e.g., `a`.\n    FlagUnrecognized,\n    /// A duplicate capture name was found.\n    GroupNameDuplicate {\n        /// The position of the initial occurrence of the capture name. The\n        /// error position itself points to the duplicate occurrence.\n        original: Span,\n    },\n    /// A capture group name is empty, e.g., `(?P<>abc)`.\n    GroupNameEmpty,\n    /// An invalid character was seen for a capture group name. This includes\n    /// errors where the first character is a digit (even though subsequent\n    /// characters are allowed to be digits).\n    GroupNameInvalid,\n    /// A closing `>` could not be found for a capture group name.\n    GroupNameUnexpectedEof,\n    /// An unclosed group, e.g., `(ab`.\n    ///\n    /// The span of this error corresponds to the unclosed parenthesis.\n    GroupUnclosed,\n    /// An unopened group, e.g., `ab)`.\n    GroupUnopened,\n    /// The nest limit was exceeded. The limit stored here is the limit\n    /// configured in the parser.\n    NestLimitExceeded(u32),\n    /// The range provided in a counted repetition operator is invalid. The\n    /// range is invalid if the start is greater than the end.\n    RepetitionCountInvalid,\n    /// An opening `{` was not followed by a valid decimal value.\n    /// For example, `x{}` or `x{]}` would fail.\n    RepetitionCountDecimalEmpty,\n    /// An opening `{` was found with no corresponding closing `}`.\n    RepetitionCountUnclosed,\n    /// A repetition operator was applied to a missing sub-expression. This\n    /// occurs, for example, in the regex consisting of just a `*` or even\n    /// `(?i)*`. It is, however, possible to create a repetition operating on\n    /// an empty sub-expression. For example, `()*` is still considered valid.\n    RepetitionMissing,\n    /// The Unicode class is not valid. This typically occurs when a `\\p` is\n    /// followed by something other than a `{`.\n    UnicodeClassInvalid,\n    /// When octal support is disabled, this error is produced when an octal\n    /// escape is used. The octal escape is assumed to be an invocation of\n    /// a backreference, which is the common case.\n    UnsupportedBackreference,\n    /// When syntax similar to PCRE's look-around is used, this error is\n    /// returned. Some example syntaxes that are rejected include, but are\n    /// not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n    /// `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n    /// error is used to improve the user experience.\n    UnsupportedLookAround,\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}\n\nimpl error::Error for Error {\n    // TODO: Remove this method entirely on the next breaking semver release.\n    #[allow(deprecated)]\n    fn description(&self) -> &str {\n        use self::ErrorKind::*;\n        match self.kind {\n            CaptureLimitExceeded => \"capture group limit exceeded\",\n            ClassEscapeInvalid => \"invalid escape sequence in character class\",\n            ClassRangeInvalid => \"invalid character class range\",\n            ClassRangeLiteral => \"invalid range boundary, must be a literal\",\n            ClassUnclosed => \"unclosed character class\",\n            DecimalEmpty => \"empty decimal literal\",\n            DecimalInvalid => \"invalid decimal literal\",\n            EscapeHexEmpty => \"empty hexadecimal literal\",\n            EscapeHexInvalid => \"invalid hexadecimal literal\",\n            EscapeHexInvalidDigit => \"invalid hexadecimal digit\",\n            EscapeUnexpectedEof => \"unexpected eof (escape sequence)\",\n            EscapeUnrecognized => \"unrecognized escape sequence\",\n            FlagDanglingNegation => \"dangling flag negation operator\",\n            FlagDuplicate { .. } => \"duplicate flag\",\n            FlagRepeatedNegation { .. } => \"repeated negation\",\n            FlagUnexpectedEof => \"unexpected eof (flag)\",\n            FlagUnrecognized => \"unrecognized flag\",\n            GroupNameDuplicate { .. } => \"duplicate capture group name\",\n            GroupNameEmpty => \"empty capture group name\",\n            GroupNameInvalid => \"invalid capture group name\",\n            GroupNameUnexpectedEof => \"unclosed capture group name\",\n            GroupUnclosed => \"unclosed group\",\n            GroupUnopened => \"unopened group\",\n            NestLimitExceeded(_) => \"nest limit exceeded\",\n            RepetitionCountInvalid => \"invalid repetition count range\",\n            RepetitionCountUnclosed => \"unclosed counted repetition\",\n            RepetitionMissing => \"repetition operator missing expression\",\n            UnicodeClassInvalid => \"invalid Unicode character class\",\n            UnsupportedBackreference => \"backreferences are not supported\",\n            UnsupportedLookAround => \"look-around is not supported\",\n            _ => unreachable!(),\n        }\n    }\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        ::error::Formatter::from(self).fmt(f)\n    }\n}\n\nimpl fmt::Display for ErrorKind {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        use self::ErrorKind::*;\n        match *self {\n            CaptureLimitExceeded => write!(\n                f,\n                \"exceeded the maximum number of \\\n                 capturing groups ({})\",\n                ::std::u32::MAX\n            ),\n            ClassEscapeInvalid => {\n                write!(f, \"invalid escape sequence found in character class\")\n            }\n            ClassRangeInvalid => write!(\n                f,\n                \"invalid character class range, \\\n                 the start must be <= the end\"\n            ),\n            ClassRangeLiteral => {\n                write!(f, \"invalid range boundary, must be a literal\")\n            }\n            ClassUnclosed => write!(f, \"unclosed character class\"),\n            DecimalEmpty => write!(f, \"decimal literal empty\"),\n            DecimalInvalid => write!(f, \"decimal literal invalid\"),\n            EscapeHexEmpty => write!(f, \"hexadecimal literal empty\"),\n            EscapeHexInvalid => {\n                write!(f, \"hexadecimal literal is not a Unicode scalar value\")\n            }\n            EscapeHexInvalidDigit => write!(f, \"invalid hexadecimal digit\"),\n            EscapeUnexpectedEof => write!(\n                f,\n                \"incomplete escape sequence, \\\n                 reached end of pattern prematurely\"\n            ),\n            EscapeUnrecognized => write!(f, \"unrecognized escape sequence\"),\n            FlagDanglingNegation => {\n                write!(f, \"dangling flag negation operator\")\n            }\n            FlagDuplicate { .. } => write!(f, \"duplicate flag\"),\n            FlagRepeatedNegation { .. } => {\n                write!(f, \"flag negation operator repeated\")\n            }\n            FlagUnexpectedEof => {\n                write!(f, \"expected flag but got end of regex\")\n            }\n            FlagUnrecognized => write!(f, \"unrecognized flag\"),\n            GroupNameDuplicate { .. } => {\n                write!(f, \"duplicate capture group name\")\n            }\n            GroupNameEmpty => write!(f, \"empty capture group name\"),\n            GroupNameInvalid => write!(f, \"invalid capture group character\"),\n            GroupNameUnexpectedEof => write!(f, \"unclosed capture group name\"),\n            GroupUnclosed => write!(f, \"unclosed group\"),\n            GroupUnopened => write!(f, \"unopened group\"),\n            NestLimitExceeded(limit) => write!(\n                f,\n                \"exceed the maximum number of \\\n                 nested parentheses/brackets ({})\",\n                limit\n            ),\n            RepetitionCountInvalid => write!(\n                f,\n                \"invalid repetition count range, \\\n                 the start must be <= the end\"\n            ),\n            RepetitionCountDecimalEmpty => {\n                write!(f, \"repetition quantifier expects a valid decimal\")\n            }\n            RepetitionCountUnclosed => {\n                write!(f, \"unclosed counted repetition\")\n            }\n            RepetitionMissing => {\n                write!(f, \"repetition operator missing expression\")\n            }\n            UnicodeClassInvalid => {\n                write!(f, \"invalid Unicode character class\")\n            }\n            UnsupportedBackreference => {\n                write!(f, \"backreferences are not supported\")\n            }\n            UnsupportedLookAround => write!(\n                f,\n                \"look-around, including look-ahead and look-behind, \\\n                 is not supported\"\n            ),\n            _ => unreachable!(),\n        }\n    }\n}\n\n/// Span represents the position information of a single AST item.\n///\n/// All span positions are absolute byte offsets that can be used on the\n/// original regular expression that was parsed.\n#[derive(Clone, Copy, Eq, PartialEq)]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n\nimpl fmt::Debug for Span {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"Span({:?}, {:?})\", self.start, self.end)\n    }\n}\n\nimpl Ord for Span {\n    fn cmp(&self, other: &Span) -> Ordering {\n        (&self.start, &self.end).cmp(&(&other.start, &other.end))\n    }\n}\n\nimpl PartialOrd for Span {\n    fn partial_cmp(&self, other: &Span) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\n/// A single position in a regular expression.\n///\n/// A position encodes one half of a span, and include the byte offset, line\n/// number and column number.\n#[derive(Clone, Copy, Eq, PartialEq)]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\n\nimpl fmt::Debug for Position {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(\n            f,\n            \"Position(o: {:?}, l: {:?}, c: {:?})\",\n            self.offset, self.line, self.column\n        )\n    }\n}\n\nimpl Ord for Position {\n    fn cmp(&self, other: &Position) -> Ordering {\n        self.offset.cmp(&other.offset)\n    }\n}\n\nimpl PartialOrd for Position {\n    fn partial_cmp(&self, other: &Position) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\nimpl Span {\n    /// Create a new span with the given positions.\n    pub fn new(start: Position, end: Position) -> Span {\n        Span { start: start, end: end }\n    }\n\n    /// Create a new span using the given position as the start and end.\n    pub fn splat(pos: Position) -> Span {\n        Span::new(pos, pos)\n    }\n\n    /// Create a new span by replacing the starting the position with the one\n    /// given.\n    pub fn with_start(self, pos: Position) -> Span {\n        Span { start: pos, ..self }\n    }\n\n    /// Create a new span by replacing the ending the position with the one\n    /// given.\n    pub fn with_end(self, pos: Position) -> Span {\n        Span { end: pos, ..self }\n    }\n\n    /// Returns true if and only if this span occurs on a single line.\n    pub fn is_one_line(&self) -> bool {\n        self.start.line == self.end.line\n    }\n\n    /// Returns true if and only if this span is empty. That is, it points to\n    /// a single position in the concrete syntax of a regular expression.\n    pub fn is_empty(&self) -> bool {\n        self.start.offset == self.end.offset\n    }\n}\n\nimpl Position {\n    /// Create a new position with the given information.\n    ///\n    /// `offset` is the absolute offset of the position, starting at `0` from\n    /// the beginning of the regular expression pattern string.\n    ///\n    /// `line` is the line number, starting at `1`.\n    ///\n    /// `column` is the approximate column number, starting at `1`.\n    pub fn new(offset: usize, line: usize, column: usize) -> Position {\n        Position { offset: offset, line: line, column: column }\n    }\n}\n\n/// An abstract syntax tree for a singular expression along with comments\n/// found.\n///\n/// Comments are not stored in the tree itself to avoid complexity. Each\n/// comment contains a span of precisely where it occurred in the original\n/// regular expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct WithComments {\n    /// The actual ast.\n    pub ast: Ast,\n    /// All comments found in the original regular expression.\n    pub comments: Vec<Comment>,\n}\n\n/// A comment from a regular expression with an associated span.\n///\n/// A regular expression can only contain comments when the `x` flag is\n/// enabled.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Comment {\n    /// The span of this comment, including the beginning `#` and ending `\\n`.\n    pub span: Span,\n    /// The comment text, starting with the first character following the `#`\n    /// and ending with the last character preceding the `\\n`.\n    pub comment: String,\n}\n\n/// An abstract syntax tree for a single regular expression.\n///\n/// An `Ast`'s `fmt::Display` implementation uses constant stack space and heap\n/// space proportional to the size of the `Ast`.\n///\n/// This type defines its own destructor that uses constant stack space and\n/// heap space proportional to the size of the `Ast`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Span),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(SetFlags),\n    /// A single character literal, which includes escape sequences.\n    Literal(Literal),\n    /// The \"any character\" class.\n    Dot(Span),\n    /// A single zero-width assertion.\n    Assertion(Assertion),\n    /// A single character class. This includes all forms of character classes\n    /// except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.\n    Class(Class),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Repetition),\n    /// A grouped regular expression.\n    Group(Group),\n    /// An alternation of regular expressions.\n    Alternation(Alternation),\n    /// A concatenation of regular expressions.\n    Concat(Concat),\n}\n\nimpl Ast {\n    /// Return the span of this abstract syntax tree.\n    pub fn span(&self) -> &Span {\n        match *self {\n            Ast::Empty(ref span) => span,\n            Ast::Flags(ref x) => &x.span,\n            Ast::Literal(ref x) => &x.span,\n            Ast::Dot(ref span) => span,\n            Ast::Assertion(ref x) => &x.span,\n            Ast::Class(ref x) => x.span(),\n            Ast::Repetition(ref x) => &x.span,\n            Ast::Group(ref x) => &x.span,\n            Ast::Alternation(ref x) => &x.span,\n            Ast::Concat(ref x) => &x.span,\n        }\n    }\n\n    /// Return true if and only if this Ast is empty.\n    pub fn is_empty(&self) -> bool {\n        match *self {\n            Ast::Empty(_) => true,\n            _ => false,\n        }\n    }\n\n    /// Returns true if and only if this AST has any (including possibly empty)\n    /// subexpressions.\n    fn has_subexprs(&self) -> bool {\n        match *self {\n            Ast::Empty(_)\n            | Ast::Flags(_)\n            | Ast::Literal(_)\n            | Ast::Dot(_)\n            | Ast::Assertion(_) => false,\n            Ast::Class(_)\n            | Ast::Repetition(_)\n            | Ast::Group(_)\n            | Ast::Alternation(_)\n            | Ast::Concat(_) => true,\n        }\n    }\n}\n\n/// Print a display representation of this Ast.\n///\n/// This does not preserve any of the original whitespace formatting that may\n/// have originally been present in the concrete syntax from which this Ast\n/// was generated.\n///\n/// This implementation uses constant stack space and heap space proportional\n/// to the size of the `Ast`.\nimpl fmt::Display for Ast {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        use ast::print::Printer;\n        Printer::new().print(self, f)\n    }\n}\n\n/// An alternation of regular expressions.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Alternation {\n    /// The span of this alternation.\n    pub span: Span,\n    /// The alternate regular expressions.\n    pub asts: Vec<Ast>,\n}\n\nimpl Alternation {\n    /// Return this alternation as an AST.\n    ///\n    /// If this alternation contains zero ASTs, then Ast::Empty is\n    /// returned. If this alternation contains exactly 1 AST, then the\n    /// corresponding AST is returned. Otherwise, Ast::Alternation is returned.\n    pub fn into_ast(mut self) -> Ast {\n        match self.asts.len() {\n            0 => Ast::Empty(self.span),\n            1 => self.asts.pop().unwrap(),\n            _ => Ast::Alternation(self),\n        }\n    }\n}\n\n/// A concatenation of regular expressions.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Concat {\n    /// The span of this concatenation.\n    pub span: Span,\n    /// The concatenation regular expressions.\n    pub asts: Vec<Ast>,\n}\n\nimpl Concat {\n    /// Return this concatenation as an AST.\n    ///\n    /// If this concatenation contains zero ASTs, then Ast::Empty is\n    /// returned. If this concatenation contains exactly 1 AST, then the\n    /// corresponding AST is returned. Otherwise, Ast::Concat is returned.\n    pub fn into_ast(mut self) -> Ast {\n        match self.asts.len() {\n            0 => Ast::Empty(self.span),\n            1 => self.asts.pop().unwrap(),\n            _ => Ast::Concat(self),\n        }\n    }\n}\n\n/// A single literal expression.\n///\n/// A literal corresponds to a single Unicode scalar value. Literals may be\n/// represented in their literal form, e.g., `a` or in their escaped form,\n/// e.g., `\\x61`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n\nimpl Literal {\n    /// If this literal was written as a `\\x` hex escape, then this returns\n    /// the corresponding byte value. Otherwise, this returns `None`.\n    pub fn byte(&self) -> Option<u8> {\n        let short_hex = LiteralKind::HexFixed(HexLiteralKind::X);\n        if self.c as u32 <= 255 && self.kind == short_hex {\n            Some(self.c as u8)\n        } else {\n            None\n        }\n    }\n}\n\n/// The kind of a single literal expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum LiteralKind {\n    /// The literal is written verbatim, e.g., `a` or `☃`.\n    Verbatim,\n    /// The literal is written as an escape because it is punctuation, e.g.,\n    /// `\\*` or `\\[`.\n    Punctuation,\n    /// The literal is written as an octal escape, e.g., `\\141`.\n    Octal,\n    /// The literal is written as a hex code with a fixed number of digits\n    /// depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or\n    /// `\\U00000061`.\n    HexFixed(HexLiteralKind),\n    /// The literal is written as a hex code with a bracketed number of\n    /// digits. The only restriction is that the bracketed hex code must refer\n    /// to a valid Unicode scalar value.\n    HexBrace(HexLiteralKind),\n    /// The literal is written as a specially recognized escape, e.g., `\\f`\n    /// or `\\n`.\n    Special(SpecialLiteralKind),\n}\n\n/// The type of a special literal.\n///\n/// A special literal is a special escape sequence recognized by the regex\n/// parser, e.g., `\\f` or `\\n`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum SpecialLiteralKind {\n    /// Bell, spelled `\\a` (`\\x07`).\n    Bell,\n    /// Form feed, spelled `\\f` (`\\x0C`).\n    FormFeed,\n    /// Tab, spelled `\\t` (`\\x09`).\n    Tab,\n    /// Line feed, spelled `\\n` (`\\x0A`).\n    LineFeed,\n    /// Carriage return, spelled `\\r` (`\\x0D`).\n    CarriageReturn,\n    /// Vertical tab, spelled `\\v` (`\\x0B`).\n    VerticalTab,\n    /// Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n    /// parsing in verbose mode.\n    Space,\n}\n\n/// The type of a Unicode hex literal.\n///\n/// Note that all variants behave the same when used with brackets. They only\n/// differ when used without brackets in the number of hex digits that must\n/// follow.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HexLiteralKind {\n    /// A `\\x` prefix. When used without brackets, this form is limited to\n    /// two digits.\n    X,\n    /// A `\\u` prefix. When used without brackets, this form is limited to\n    /// four digits.\n    UnicodeShort,\n    /// A `\\U` prefix. When used without brackets, this form is limited to\n    /// eight digits.\n    UnicodeLong,\n}\n\nimpl HexLiteralKind {\n    /// The number of digits that must be used with this literal form when\n    /// used without brackets. When used with brackets, there is no\n    /// restriction on the number of digits.\n    pub fn digits(&self) -> u32 {\n        match *self {\n            HexLiteralKind::X => 2,\n            HexLiteralKind::UnicodeShort => 4,\n            HexLiteralKind::UnicodeLong => 8,\n        }\n    }\n}\n\n/// A single character class expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Class {\n    /// A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    Unicode(ClassUnicode),\n    /// A perl character class, e.g., `\\d` or `\\W`.\n    Perl(ClassPerl),\n    /// A bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    Bracketed(ClassBracketed),\n}\n\nimpl Class {\n    /// Return the span of this character class.\n    pub fn span(&self) -> &Span {\n        match *self {\n            Class::Perl(ref x) => &x.span,\n            Class::Unicode(ref x) => &x.span,\n            Class::Bracketed(ref x) => &x.span,\n        }\n    }\n}\n\n/// A Perl character class.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassPerl {\n    /// The span of this class.\n    pub span: Span,\n    /// The kind of Perl class.\n    pub kind: ClassPerlKind,\n    /// Whether the class is negated or not. e.g., `\\d` is not negated but\n    /// `\\D` is.\n    pub negated: bool,\n}\n\n/// The available Perl character classes.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassPerlKind {\n    /// Decimal numbers.\n    Digit,\n    /// Whitespace.\n    Space,\n    /// Word characters.\n    Word,\n}\n\n/// An ASCII character class.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassAscii {\n    /// The span of this class.\n    pub span: Span,\n    /// The kind of ASCII class.\n    pub kind: ClassAsciiKind,\n    /// Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated\n    /// but `[[:^alpha:]]` is.\n    pub negated: bool,\n}\n\n/// The available ASCII character classes.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassAsciiKind {\n    /// `[0-9A-Za-z]`\n    Alnum,\n    /// `[A-Za-z]`\n    Alpha,\n    /// `[\\x00-\\x7F]`\n    Ascii,\n    /// `[ \\t]`\n    Blank,\n    /// `[\\x00-\\x1F\\x7F]`\n    Cntrl,\n    /// `[0-9]`\n    Digit,\n    /// `[!-~]`\n    Graph,\n    /// `[a-z]`\n    Lower,\n    /// `[ -~]`\n    Print,\n    /// `[!-/:-@\\[-`{-~]`\n    Punct,\n    /// `[\\t\\n\\v\\f\\r ]`\n    Space,\n    /// `[A-Z]`\n    Upper,\n    /// `[0-9A-Za-z_]`\n    Word,\n    /// `[0-9A-Fa-f]`\n    Xdigit,\n}\n\nimpl ClassAsciiKind {\n    /// Return the corresponding ClassAsciiKind variant for the given name.\n    ///\n    /// The name given should correspond to the lowercase version of the\n    /// variant name. e.g., `cntrl` is the name for `ClassAsciiKind::Cntrl`.\n    ///\n    /// If no variant with the corresponding name exists, then `None` is\n    /// returned.\n    pub fn from_name(name: &str) -> Option<ClassAsciiKind> {\n        use self::ClassAsciiKind::*;\n        match name {\n            \"alnum\" => Some(Alnum),\n            \"alpha\" => Some(Alpha),\n            \"ascii\" => Some(Ascii),\n            \"blank\" => Some(Blank),\n            \"cntrl\" => Some(Cntrl),\n            \"digit\" => Some(Digit),\n            \"graph\" => Some(Graph),\n            \"lower\" => Some(Lower),\n            \"print\" => Some(Print),\n            \"punct\" => Some(Punct),\n            \"space\" => Some(Space),\n            \"upper\" => Some(Upper),\n            \"word\" => Some(Word),\n            \"xdigit\" => Some(Xdigit),\n            _ => None,\n        }\n    }\n}\n\n/// A Unicode character class.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n\nimpl ClassUnicode {\n    /// Returns true if this class has been negated.\n    ///\n    /// Note that this takes the Unicode op into account, if it's present.\n    /// e.g., `is_negated` for `\\P{scx!=Katakana}` will return `false`.\n    pub fn is_negated(&self) -> bool {\n        match self.kind {\n            ClassUnicodeKind::NamedValue {\n                op: ClassUnicodeOpKind::NotEqual,\n                ..\n            } => !self.negated,\n            _ => self.negated,\n        }\n    }\n}\n\n/// The available forms of Unicode character classes.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassUnicodeKind {\n    /// A one letter abbreviated class, e.g., `\\pN`.\n    OneLetter(char),\n    /// A binary property, general category or script. The string may be\n    /// empty.\n    Named(String),\n    /// A property name and an associated value.\n    NamedValue {\n        /// The type of Unicode op used to associate `name` with `value`.\n        op: ClassUnicodeOpKind,\n        /// The property name (which may be empty).\n        name: String,\n        /// The property value (which may be empty).\n        value: String,\n    },\n}\n\n/// The type of op used in a Unicode character class.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassUnicodeOpKind {\n    /// A property set to a specific value, e.g., `\\p{scx=Katakana}`.\n    Equal,\n    /// A property set to a specific value using a colon, e.g.,\n    /// `\\p{scx:Katakana}`.\n    Colon,\n    /// A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.\n    NotEqual,\n}\n\nimpl ClassUnicodeOpKind {\n    /// Whether the op is an equality op or not.\n    pub fn is_equal(&self) -> bool {\n        match *self {\n            ClassUnicodeOpKind::Equal | ClassUnicodeOpKind::Colon => true,\n            _ => false,\n        }\n    }\n}\n\n/// A bracketed character class, e.g., `[a-z0-9]`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\n\n/// A character class set.\n///\n/// This type corresponds to the internal structure of a bracketed character\n/// class. That is, every bracketed character is one of two types: a union of\n/// items (literals, ranges, other bracketed classes) or a tree of binary set\n/// operations.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassSet {\n    /// An item, which can be a single literal, range, nested character class\n    /// or a union of items.\n    Item(ClassSetItem),\n    /// A single binary operation (i.e., &&, -- or ~~).\n    BinaryOp(ClassSetBinaryOp),\n}\n\nimpl ClassSet {\n    /// Build a set from a union.\n    pub fn union(ast: ClassSetUnion) -> ClassSet {\n        ClassSet::Item(ClassSetItem::Union(ast))\n    }\n\n    /// Return the span of this character class set.\n    pub fn span(&self) -> &Span {\n        match *self {\n            ClassSet::Item(ref x) => x.span(),\n            ClassSet::BinaryOp(ref x) => &x.span,\n        }\n    }\n\n    /// Return true if and only if this class set is empty.\n    fn is_empty(&self) -> bool {\n        match *self {\n            ClassSet::Item(ClassSetItem::Empty(_)) => true,\n            _ => false,\n        }\n    }\n}\n\n/// A single component of a character class set.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassSetItem {\n    /// An empty item.\n    ///\n    /// Note that a bracketed character class cannot contain a single empty\n    /// item. Empty items can appear when using one of the binary operators.\n    /// For example, `[&&]` is the intersection of two empty classes.\n    Empty(Span),\n    /// A single literal.\n    Literal(Literal),\n    /// A range between two literals.\n    Range(ClassSetRange),\n    /// An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n    Ascii(ClassAscii),\n    /// A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    Unicode(ClassUnicode),\n    /// A perl character class, e.g., `\\d` or `\\W`.\n    Perl(ClassPerl),\n    /// A bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    Bracketed(Box<ClassBracketed>),\n    /// A union of items.\n    Union(ClassSetUnion),\n}\n\nimpl ClassSetItem {\n    /// Return the span of this character class set item.\n    pub fn span(&self) -> &Span {\n        match *self {\n            ClassSetItem::Empty(ref span) => span,\n            ClassSetItem::Literal(ref x) => &x.span,\n            ClassSetItem::Range(ref x) => &x.span,\n            ClassSetItem::Ascii(ref x) => &x.span,\n            ClassSetItem::Perl(ref x) => &x.span,\n            ClassSetItem::Unicode(ref x) => &x.span,\n            ClassSetItem::Bracketed(ref x) => &x.span,\n            ClassSetItem::Union(ref x) => &x.span,\n        }\n    }\n}\n\n/// A single character class range in a set.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassSetRange {\n    /// The span of this range.\n    pub span: Span,\n    /// The start of this range.\n    pub start: Literal,\n    /// The end of this range.\n    pub end: Literal,\n}\n\nimpl ClassSetRange {\n    /// Returns true if and only if this character class range is valid.\n    ///\n    /// The only case where a range is invalid is if its start is greater than\n    /// its end.\n    pub fn is_valid(&self) -> bool {\n        self.start.c <= self.end.c\n    }\n}\n\n/// A union of items inside a character class set.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassSetUnion {\n    /// The span of the items in this operation. e.g., the `a-z0-9` in\n    /// `[^a-z0-9]`\n    pub span: Span,\n    /// The sequence of items that make up this union.\n    pub items: Vec<ClassSetItem>,\n}\n\nimpl ClassSetUnion {\n    /// Push a new item in this union.\n    ///\n    /// The ending position of this union's span is updated to the ending\n    /// position of the span of the item given. If the union is empty, then\n    /// the starting position of this union is set to the starting position\n    /// of this item.\n    ///\n    /// In other words, if you only use this method to add items to a union\n    /// and you set the spans on each item correctly, then you should never\n    /// need to adjust the span of the union directly.\n    pub fn push(&mut self, item: ClassSetItem) {\n        if self.items.is_empty() {\n            self.span.start = item.span().start;\n        }\n        self.span.end = item.span().end;\n        self.items.push(item);\n    }\n\n    /// Return this union as a character class set item.\n    ///\n    /// If this union contains zero items, then an empty union is\n    /// returned. If this concatenation contains exactly 1 item, then the\n    /// corresponding item is returned. Otherwise, ClassSetItem::Union is\n    /// returned.\n    pub fn into_item(mut self) -> ClassSetItem {\n        match self.items.len() {\n            0 => ClassSetItem::Empty(self.span),\n            1 => self.items.pop().unwrap(),\n            _ => ClassSetItem::Union(self),\n        }\n    }\n}\n\n/// A Unicode character class set operation.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassSetBinaryOp {\n    /// The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n    pub span: Span,\n    /// The type of this set operation.\n    pub kind: ClassSetBinaryOpKind,\n    /// The left hand side of the operation.\n    pub lhs: Box<ClassSet>,\n    /// The right hand side of the operation.\n    pub rhs: Box<ClassSet>,\n}\n\n/// The type of a Unicode character class set operation.\n///\n/// Note that this doesn't explicitly represent union since there is no\n/// explicit union operator. Concatenation inside a character class corresponds\n/// to the union operation.\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum ClassSetBinaryOpKind {\n    /// The intersection of two sets, e.g., `\\pN&&[a-z]`.\n    Intersection,\n    /// The difference of two sets, e.g., `\\pN--[0-9]`.\n    Difference,\n    /// The symmetric difference of two sets. The symmetric difference is the\n    /// set of elements belonging to one but not both sets.\n    /// e.g., `[\\pL~~[:ascii:]]`.\n    SymmetricDifference,\n}\n\n/// A single zero-width assertion.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Assertion {\n    /// The span of this assertion.\n    pub span: Span,\n    /// The assertion kind, e.g., `\\b` or `^`.\n    pub kind: AssertionKind,\n}\n\n/// An assertion kind.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum AssertionKind {\n    /// `^`\n    StartLine,\n    /// `$`\n    EndLine,\n    /// `\\A`\n    StartText,\n    /// `\\z`\n    EndText,\n    /// `\\b`\n    WordBoundary,\n    /// `\\B`\n    NotWordBoundary,\n}\n\n/// A repetition operation applied to a regular expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The span of this operation.\n    pub span: Span,\n    /// The actual operation.\n    pub op: RepetitionOp,\n    /// Whether this operation was applied greedily or not.\n    pub greedy: bool,\n    /// The regular expression under repetition.\n    pub ast: Box<Ast>,\n}\n\n/// The repetition operator itself.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct RepetitionOp {\n    /// The span of this operator. This includes things like `+`, `*?` and\n    /// `{m,n}`.\n    pub span: Span,\n    /// The type of operation.\n    pub kind: RepetitionKind,\n}\n\n/// The kind of a repetition operator.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum RepetitionKind {\n    /// `?`\n    ZeroOrOne,\n    /// `*`\n    ZeroOrMore,\n    /// `+`\n    OneOrMore,\n    /// `{m,n}`\n    Range(RepetitionRange),\n}\n\n/// A range repetition operator.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum RepetitionRange {\n    /// `{m}`\n    Exactly(u32),\n    /// `{m,}`\n    AtLeast(u32),\n    /// `{m,n}`\n    Bounded(u32, u32),\n}\n\nimpl RepetitionRange {\n    /// Returns true if and only if this repetition range is valid.\n    ///\n    /// The only case where a repetition range is invalid is if it is bounded\n    /// and its start is greater than its end.\n    pub fn is_valid(&self) -> bool {\n        match *self {\n            RepetitionRange::Bounded(s, e) if s > e => false,\n            _ => true,\n        }\n    }\n}\n\n/// A grouped regular expression.\n///\n/// This includes both capturing and non-capturing groups. This does **not**\n/// include flag-only groups like `(?is)`, but does contain any group that\n/// contains a sub-expression, e.g., `(a)`, `(?P<name>a)`, `(?:a)` and\n/// `(?is:a)`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Group {\n    /// The span of this group.\n    pub span: Span,\n    /// The kind of this group.\n    pub kind: GroupKind,\n    /// The regular expression in this group.\n    pub ast: Box<Ast>,\n}\n\nimpl Group {\n    /// If this group is non-capturing, then this returns the (possibly empty)\n    /// set of flags. Otherwise, `None` is returned.\n    pub fn flags(&self) -> Option<&Flags> {\n        match self.kind {\n            GroupKind::NonCapturing(ref flags) => Some(flags),\n            _ => None,\n        }\n    }\n\n    /// Returns true if and only if this group is capturing.\n    pub fn is_capturing(&self) -> bool {\n        match self.kind {\n            GroupKind::CaptureIndex(_) | GroupKind::CaptureName(_) => true,\n            GroupKind::NonCapturing(_) => false,\n        }\n    }\n\n    /// Returns the capture index of this group, if this is a capturing group.\n    ///\n    /// This returns a capture index precisely when `is_capturing` is `true`.\n    pub fn capture_index(&self) -> Option<u32> {\n        match self.kind {\n            GroupKind::CaptureIndex(i) => Some(i),\n            GroupKind::CaptureName(ref x) => Some(x.index),\n            GroupKind::NonCapturing(_) => None,\n        }\n    }\n}\n\n/// The kind of a group.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum GroupKind {\n    /// `(a)`\n    CaptureIndex(u32),\n    /// `(?P<name>a)`\n    CaptureName(CaptureName),\n    /// `(?:a)` and `(?i:a)`\n    NonCapturing(Flags),\n}\n\n/// A capture name.\n///\n/// This corresponds to the name itself between the angle brackets in, e.g.,\n/// `(?P<foo>expr)`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct CaptureName {\n    /// The span of this capture name.\n    pub span: Span,\n    /// The capture name.\n    pub name: String,\n    /// The capture index.\n    pub index: u32,\n}\n\n/// A group of flags that is not applied to a particular regular expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SetFlags {\n    /// The span of these flags, including the grouping parentheses.\n    pub span: Span,\n    /// The actual sequence of flags.\n    pub flags: Flags,\n}\n\n/// A group of flags.\n///\n/// This corresponds only to the sequence of flags themselves, e.g., `is-u`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\n\nimpl Flags {\n    /// Add the given item to this sequence of flags.\n    ///\n    /// If the item was added successfully, then `None` is returned. If the\n    /// given item is a duplicate, then `Some(i)` is returned, where\n    /// `items[i].kind == item.kind`.\n    pub fn add_item(&mut self, item: FlagsItem) -> Option<usize> {\n        for (i, x) in self.items.iter().enumerate() {\n            if x.kind == item.kind {\n                return Some(i);\n            }\n        }\n        self.items.push(item);\n        None\n    }\n\n    /// Returns the state of the given flag in this set.\n    ///\n    /// If the given flag is in the set but is negated, then `Some(false)` is\n    /// returned.\n    ///\n    /// If the given flag is in the set and is not negated, then `Some(true)`\n    /// is returned.\n    ///\n    /// Otherwise, `None` is returned.\n    pub fn flag_state(&self, flag: Flag) -> Option<bool> {\n        let mut negated = false;\n        for x in &self.items {\n            match x.kind {\n                FlagsItemKind::Negation => {\n                    negated = true;\n                }\n                FlagsItemKind::Flag(ref xflag) if xflag == &flag => {\n                    return Some(!negated);\n                }\n                _ => {}\n            }\n        }\n        None\n    }\n}\n\n/// A single item in a group of flags.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct FlagsItem {\n    /// The span of this item.\n    pub span: Span,\n    /// The kind of this item.\n    pub kind: FlagsItemKind,\n}\n\n/// The kind of an item in a group of flags.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum FlagsItemKind {\n    /// A negation operator applied to all subsequent flags in the enclosing\n    /// group.\n    Negation,\n    /// A single flag in a group.\n    Flag(Flag),\n}\n\nimpl FlagsItemKind {\n    /// Returns true if and only if this item is a negation operator.\n    pub fn is_negation(&self) -> bool {\n        match *self {\n            FlagsItemKind::Negation => true,\n            _ => false,\n        }\n    }\n}\n\n/// A single flag.\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Flag {\n    /// `i`\n    CaseInsensitive,\n    /// `m`\n    MultiLine,\n    /// `s`\n    DotMatchesNewLine,\n    /// `U`\n    SwapGreed,\n    /// `u`\n    Unicode,\n    /// `x`\n    IgnoreWhitespace,\n}\n\n/// A custom `Drop` impl is used for `Ast` such that it uses constant stack\n/// space but heap space proportional to the depth of the `Ast`.\nimpl Drop for Ast {\n    fn drop(&mut self) {\n        use std::mem;\n\n        match *self {\n            Ast::Empty(_)\n            | Ast::Flags(_)\n            | Ast::Literal(_)\n            | Ast::Dot(_)\n            | Ast::Assertion(_)\n            // Classes are recursive, so they get their own Drop impl.\n            | Ast::Class(_) => return,\n            Ast::Repetition(ref x) if !x.ast.has_subexprs() => return,\n            Ast::Group(ref x) if !x.ast.has_subexprs() => return,\n            Ast::Alternation(ref x) if x.asts.is_empty() => return,\n            Ast::Concat(ref x) if x.asts.is_empty() => return,\n            _ => {}\n        }\n\n        let empty_span = || Span::splat(Position::new(0, 0, 0));\n        let empty_ast = || Ast::Empty(empty_span());\n        let mut stack = vec![mem::replace(self, empty_ast())];\n        while let Some(mut ast) = stack.pop() {\n            match ast {\n                Ast::Empty(_)\n                | Ast::Flags(_)\n                | Ast::Literal(_)\n                | Ast::Dot(_)\n                | Ast::Assertion(_)\n                // Classes are recursive, so they get their own Drop impl.\n                | Ast::Class(_) => {}\n                Ast::Repetition(ref mut x) => {\n                    stack.push(mem::replace(&mut x.ast, empty_ast()));\n                }\n                Ast::Group(ref mut x) => {\n                    stack.push(mem::replace(&mut x.ast, empty_ast()));\n                }\n                Ast::Alternation(ref mut x) => {\n                    stack.extend(x.asts.drain(..));\n                }\n                Ast::Concat(ref mut x) => {\n                    stack.extend(x.asts.drain(..));\n                }\n            }\n        }\n    }\n}\n\n/// A custom `Drop` impl is used for `ClassSet` such that it uses constant\n/// stack space but heap space proportional to the depth of the `ClassSet`.\nimpl Drop for ClassSet {\n    fn drop(&mut self) {\n        use std::mem;\n\n        match *self {\n            ClassSet::Item(ref item) => match *item {\n                ClassSetItem::Empty(_)\n                | ClassSetItem::Literal(_)\n                | ClassSetItem::Range(_)\n                | ClassSetItem::Ascii(_)\n                | ClassSetItem::Unicode(_)\n                | ClassSetItem::Perl(_) => return,\n                ClassSetItem::Bracketed(ref x) => {\n                    if x.kind.is_empty() {\n                        return;\n                    }\n                }\n                ClassSetItem::Union(ref x) => {\n                    if x.items.is_empty() {\n                        return;\n                    }\n                }\n            },\n            ClassSet::BinaryOp(ref op) => {\n                if op.lhs.is_empty() && op.rhs.is_empty() {\n                    return;\n                }\n            }\n        }\n\n        let empty_span = || Span::splat(Position::new(0, 0, 0));\n        let empty_set = || ClassSet::Item(ClassSetItem::Empty(empty_span()));\n        let mut stack = vec![mem::replace(self, empty_set())];\n        while let Some(mut set) = stack.pop() {\n            match set {\n                ClassSet::Item(ref mut item) => match *item {\n                    ClassSetItem::Empty(_)\n                    | ClassSetItem::Literal(_)\n                    | ClassSetItem::Range(_)\n                    | ClassSetItem::Ascii(_)\n                    | ClassSetItem::Unicode(_)\n                    | ClassSetItem::Perl(_) => {}\n                    ClassSetItem::Bracketed(ref mut x) => {\n                        stack.push(mem::replace(&mut x.kind, empty_set()));\n                    }\n                    ClassSetItem::Union(ref mut x) => {\n                        stack.extend(x.items.drain(..).map(ClassSet::Item));\n                    }\n                },\n                ClassSet::BinaryOp(ref mut op) => {\n                    stack.push(mem::replace(&mut op.lhs, empty_set()));\n                    stack.push(mem::replace(&mut op.rhs, empty_set()));\n                }\n            }\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    // We use a thread with an explicit stack size to test that our destructor\n    // for Ast can handle arbitrarily sized expressions in constant stack\n    // space. In case we run on a platform without threads (WASM?), we limit\n    // this test to Windows/Unix.\n    #[test]\n    #[cfg(any(unix, windows))]\n    fn no_stack_overflow_on_drop() {\n        use std::thread;\n\n        let run = || {\n            let span = || Span::splat(Position::new(0, 0, 0));\n            let mut ast = Ast::Empty(span());\n            for i in 0..200 {\n                ast = Ast::Group(Group {\n                    span: span(),\n                    kind: GroupKind::CaptureIndex(i),\n                    ast: Box::new(ast),\n                });\n            }\n            assert!(!ast.is_empty());\n        };\n\n        // We run our test on a thread with a small stack size so we can\n        // force the issue more easily.\n        thread::Builder::new()\n            .stack_size(1 << 10)\n            .spawn(run)\n            .unwrap()\n            .join()\n            .unwrap();\n    }\n}\n","traces":[{"line":35,"address":[6887760],"length":1,"stats":{"Line":12},"fn_name":"kind"},{"line":36,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[6887776],"length":1,"stats":{"Line":11},"fn_name":"pattern"},{"line":43,"address":[6887785],"length":1,"stats":{"Line":11},"fn_name":null},{"line":47,"address":[6887824],"length":1,"stats":{"Line":12},"fn_name":"span"},{"line":48,"address":[6887829],"length":1,"stats":{"Line":12},"fn_name":null},{"line":56,"address":[6887856],"length":1,"stats":{"Line":12},"fn_name":"auxiliary_span"},{"line":58,"address":[6887945,6887968,6887922],"length":1,"stats":{"Line":20},"fn_name":null},{"line":59,"address":[6887929,6887865],"length":1,"stats":{"Line":12},"fn_name":null},{"line":60,"address":[6887952],"length":1,"stats":{"Line":8},"fn_name":null},{"line":61,"address":[6887975],"length":1,"stats":{"Line":8},"fn_name":null},{"line":62,"address":[6887913],"length":1,"stats":{"Line":12},"fn_name":null},{"line":184,"address":[6888016],"length":1,"stats":{"Line":0},"fn_name":"description"},{"line":186,"address":[6888349,6888427,6888687,6888661,6888557,6888453,6888831,6888245,6888219,6888115,6888193,6888785,6888271,6888375,6888505,6888609,6888762,6888583,6888808,6888401,6888739,6888713,6888141,6888635,6888167,6888479,6888531,6888297,6888323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[6888025,6888101],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[6888127],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[6888153],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[6888179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[6888205],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[6888231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[6888257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[6888283],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[6888309],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[6888335],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[6888361],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[6888387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[6888413],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[6888439],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[6888465],"length":1,"stats":{"Line":0},"fn_name":null},{"line":202,"address":[6888491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[6888517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[6888543],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[6888569],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[6888595],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[6888621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[6888647],"length":1,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[6888673],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[6888699],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[6888725],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[6888748],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[6888771],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[6888794],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[6888817],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[6888840],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[6888880],"length":1,"stats":{"Line":8},"fn_name":"fmt"},{"line":224,"address":[6888894],"length":1,"stats":{"Line":8},"fn_name":null},{"line":229,"address":[6888960],"length":1,"stats":{"Line":13},"fn_name":"fmt"},{"line":231,"address":[6889845,6890795,6891895,6889560,6889940,6890035,6890320,6890890,6889655,6889465,6891539,6890510,6891984,6890225,6891163,6889275,6891074,6890415,6891341,6892073,6892159,6890985,6889750,6890605,6891806,6889370,6890700,6890130,6891717,6891252,6891628],"length":1,"stats":{"Line":157},"fn_name":null},{"line":232,"address":[6888983,6889095],"length":1,"stats":{"Line":13},"fn_name":null},{"line":233,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[6889088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[6889285],"length":1,"stats":{"Line":9},"fn_name":null},{"line":241,"address":[6889387],"length":1,"stats":{"Line":8},"fn_name":null},{"line":242,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":247,"address":[6889475],"length":1,"stats":{"Line":8},"fn_name":null},{"line":249,"address":[6889570],"length":1,"stats":{"Line":8},"fn_name":null},{"line":250,"address":[6889665],"length":1,"stats":{"Line":0},"fn_name":null},{"line":251,"address":[6889760],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[6889855],"length":1,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[6889950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":256,"address":[6890045],"length":1,"stats":{"Line":8},"fn_name":null},{"line":257,"address":[6890147],"length":1,"stats":{"Line":8},"fn_name":null},{"line":258,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":262,"address":[6890235],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[6890330],"length":1,"stats":{"Line":8},"fn_name":null},{"line":266,"address":[6890425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":267,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":268,"address":[6890520],"length":1,"stats":{"Line":8},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[6890615],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[6890710],"length":1,"stats":{"Line":8},"fn_name":null},{"line":274,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":275,"address":[6890805],"length":1,"stats":{"Line":8},"fn_name":null},{"line":277,"address":[6890900],"length":1,"stats":{"Line":8},"fn_name":null},{"line":278,"address":[6890995],"length":1,"stats":{"Line":8},"fn_name":null},{"line":279,"address":[6891084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":280,"address":[6891173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":281,"address":[6891262],"length":1,"stats":{"Line":8},"fn_name":null},{"line":282,"address":[6891378,6891361],"length":1,"stats":{"Line":0},"fn_name":null},{"line":283,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":288,"address":[6891556],"length":1,"stats":{"Line":8},"fn_name":null},{"line":289,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":293,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[6891638],"length":1,"stats":{"Line":8},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[6891727],"length":1,"stats":{"Line":8},"fn_name":null},{"line":299,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":300,"address":[6891816],"length":1,"stats":{"Line":8},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[6891905],"length":1,"stats":{"Line":0},"fn_name":null},{"line":305,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[6891994],"length":1,"stats":{"Line":8},"fn_name":null},{"line":308,"address":[6892087],"length":1,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[6892192],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":332,"address":[6892222],"length":1,"stats":{"Line":0},"fn_name":null},{"line":337,"address":[6892496],"length":1,"stats":{"Line":8},"fn_name":"cmp"},{"line":338,"address":[6892510],"length":1,"stats":{"Line":8},"fn_name":null},{"line":343,"address":[6892592],"length":1,"stats":{"Line":8},"fn_name":"partial_cmp"},{"line":344,"address":[6892606],"length":1,"stats":{"Line":8},"fn_name":null},{"line":364,"address":[6892640],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":365,"address":[6892690],"length":1,"stats":{"Line":0},"fn_name":null},{"line":366,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":368,"address":[6892670],"length":1,"stats":{"Line":0},"fn_name":null},{"line":374,"address":[6893024],"length":1,"stats":{"Line":8},"fn_name":"cmp"},{"line":375,"address":[6893038],"length":1,"stats":{"Line":8},"fn_name":null},{"line":380,"address":[6893056],"length":1,"stats":{"Line":0},"fn_name":"partial_cmp"},{"line":381,"address":[6893070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":387,"address":[6893104],"length":1,"stats":{"Line":15},"fn_name":"new"},{"line":392,"address":[6893232],"length":1,"stats":{"Line":15},"fn_name":"splat"},{"line":393,"address":[6893239],"length":1,"stats":{"Line":15},"fn_name":null},{"line":398,"address":[6893328],"length":1,"stats":{"Line":0},"fn_name":"with_start"},{"line":404,"address":[6893424],"length":1,"stats":{"Line":8},"fn_name":"with_end"},{"line":409,"address":[6893520],"length":1,"stats":{"Line":10},"fn_name":"is_one_line"},{"line":410,"address":[6893525],"length":1,"stats":{"Line":10},"fn_name":null},{"line":415,"address":[6893552],"length":1,"stats":{"Line":0},"fn_name":"is_empty"},{"line":416,"address":[6893557],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[6893584],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":495,"address":[6893632],"length":1,"stats":{"Line":8},"fn_name":"span"},{"line":496,"address":[6893776,6893724,6893750,6893891,6893696,6893868,6893914,6893802,6893828],"length":1,"stats":{"Line":40},"fn_name":null},{"line":497,"address":[6893641,6893708],"length":1,"stats":{"Line":8},"fn_name":null},{"line":498,"address":[6893734],"length":1,"stats":{"Line":0},"fn_name":null},{"line":499,"address":[6893760],"length":1,"stats":{"Line":8},"fn_name":null},{"line":500,"address":[6893786],"length":1,"stats":{"Line":8},"fn_name":null},{"line":501,"address":[6893812],"length":1,"stats":{"Line":8},"fn_name":null},{"line":502,"address":[6893835],"length":1,"stats":{"Line":8},"fn_name":null},{"line":503,"address":[6893875],"length":1,"stats":{"Line":0},"fn_name":null},{"line":504,"address":[6893898],"length":1,"stats":{"Line":8},"fn_name":null},{"line":505,"address":[6893921],"length":1,"stats":{"Line":0},"fn_name":null},{"line":506,"address":[6893680],"length":1,"stats":{"Line":0},"fn_name":null},{"line":511,"address":[6893952],"length":1,"stats":{"Line":0},"fn_name":"is_empty"},{"line":512,"address":[6893972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[6893961,6893974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":514,"address":[6893967],"length":1,"stats":{"Line":0},"fn_name":null},{"line":520,"address":[6894000],"length":1,"stats":{"Line":9},"fn_name":"has_subexprs"},{"line":521,"address":[6894022,6894029],"length":1,"stats":{"Line":9},"fn_name":null},{"line":522,"address":[6894009],"length":1,"stats":{"Line":9},"fn_name":null},{"line":523,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":524,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":525,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":526,"address":[6894024],"length":1,"stats":{"Line":9},"fn_name":null},{"line":527,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":528,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":529,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":530,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":531,"address":[6894031],"length":1,"stats":{"Line":8},"fn_name":null},{"line":545,"address":[6894064],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":547,"address":[6894088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":566,"address":[6894144,6894211],"length":1,"stats":{"Line":8},"fn_name":"into_ast"},{"line":567,"address":[6894377,6894466,6894154,6894524],"length":1,"stats":{"Line":16},"fn_name":null},{"line":568,"address":[6894387,6894231],"length":1,"stats":{"Line":8},"fn_name":null},{"line":569,"address":[6894473],"length":1,"stats":{"Line":0},"fn_name":null},{"line":570,"address":[6894280],"length":1,"stats":{"Line":8},"fn_name":null},{"line":590,"address":[6894592,6894659],"length":1,"stats":{"Line":9},"fn_name":"into_ast"},{"line":591,"address":[6894914,6894825,6894602,6894972],"length":1,"stats":{"Line":35},"fn_name":null},{"line":592,"address":[6894835,6894679],"length":1,"stats":{"Line":17},"fn_name":null},{"line":593,"address":[6894921],"length":1,"stats":{"Line":9},"fn_name":null},{"line":594,"address":[6894728],"length":1,"stats":{"Line":9},"fn_name":null},{"line":617,"address":[6895040],"length":1,"stats":{"Line":8},"fn_name":"byte"},{"line":618,"address":[6895049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":619,"address":[6895144,6895059],"length":1,"stats":{"Line":16},"fn_name":null},{"line":620,"address":[6895151],"length":1,"stats":{"Line":8},"fn_name":null},{"line":622,"address":[6895139],"length":1,"stats":{"Line":8},"fn_name":null},{"line":695,"address":[6895184],"length":1,"stats":{"Line":8},"fn_name":"digits"},{"line":696,"address":[6895241,6895229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":697,"address":[6895193,6895233],"length":1,"stats":{"Line":16},"fn_name":null},{"line":698,"address":[6895243],"length":1,"stats":{"Line":0},"fn_name":null},{"line":699,"address":[6895221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":719,"address":[6895264],"length":1,"stats":{"Line":8},"fn_name":"span"},{"line":720,"address":[6895350,6895325],"length":1,"stats":{"Line":21},"fn_name":null},{"line":721,"address":[6895334,6895273],"length":1,"stats":{"Line":21},"fn_name":null},{"line":722,"address":[6895357],"length":1,"stats":{"Line":8},"fn_name":null},{"line":723,"address":[6895309],"length":1,"stats":{"Line":8},"fn_name":null},{"line":804,"address":[6895392],"length":1,"stats":{"Line":8},"fn_name":"from_name"},{"line":806,"address":[6896114,6896100,6896135,6896107,6896163,6896093,6896142,6896170,6896079,6896128,6896149,6896156,6896086,6896121],"length":1,"stats":{"Line":48},"fn_name":null},{"line":807,"address":[6895423,6896081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":808,"address":[6895471,6896088],"length":1,"stats":{"Line":16},"fn_name":null},{"line":809,"address":[6895519,6896095],"length":1,"stats":{"Line":8},"fn_name":null},{"line":810,"address":[6895567,6896102],"length":1,"stats":{"Line":16},"fn_name":null},{"line":811,"address":[6896109,6895615],"length":1,"stats":{"Line":8},"fn_name":null},{"line":812,"address":[6895663,6896116],"length":1,"stats":{"Line":8},"fn_name":null},{"line":813,"address":[6896123,6895711],"length":1,"stats":{"Line":8},"fn_name":null},{"line":814,"address":[6896130,6895759],"length":1,"stats":{"Line":16},"fn_name":null},{"line":815,"address":[6896137,6895807],"length":1,"stats":{"Line":8},"fn_name":null},{"line":816,"address":[6895855,6896144],"length":1,"stats":{"Line":8},"fn_name":null},{"line":817,"address":[6895903,6896151],"length":1,"stats":{"Line":16},"fn_name":null},{"line":818,"address":[6895951,6896158],"length":1,"stats":{"Line":16},"fn_name":null},{"line":819,"address":[6895999,6896165],"length":1,"stats":{"Line":16},"fn_name":null},{"line":820,"address":[6896172,6896047],"length":1,"stats":{"Line":0},"fn_name":null},{"line":821,"address":[6896074],"length":1,"stats":{"Line":0},"fn_name":null},{"line":850,"address":[6896192],"length":1,"stats":{"Line":0},"fn_name":"is_negated"},{"line":851,"address":[6896231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":852,"address":[6896201],"length":1,"stats":{"Line":0},"fn_name":null},{"line":853,"address":[6896237],"length":1,"stats":{"Line":0},"fn_name":null},{"line":854,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":855,"address":[6896253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":856,"address":[6896221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":894,"address":[6896288],"length":1,"stats":{"Line":0},"fn_name":"is_equal"},{"line":895,"address":[6896310],"length":1,"stats":{"Line":0},"fn_name":null},{"line":896,"address":[6896297,6896312],"length":1,"stats":{"Line":0},"fn_name":null},{"line":897,"address":[6896305],"length":1,"stats":{"Line":0},"fn_name":null},{"line":932,"address":[6896336],"length":1,"stats":{"Line":8},"fn_name":"union"},{"line":933,"address":[6896346],"length":1,"stats":{"Line":8},"fn_name":null},{"line":937,"address":[6896496],"length":1,"stats":{"Line":0},"fn_name":"span"},{"line":938,"address":[6896541],"length":1,"stats":{"Line":0},"fn_name":null},{"line":939,"address":[6896505,6896550],"length":1,"stats":{"Line":0},"fn_name":null},{"line":940,"address":[6896525],"length":1,"stats":{"Line":0},"fn_name":null},{"line":945,"address":[6896608],"length":1,"stats":{"Line":0},"fn_name":"is_empty"},{"line":946,"address":[6896643],"length":1,"stats":{"Line":0},"fn_name":null},{"line":947,"address":[6896617,6896645],"length":1,"stats":{"Line":0},"fn_name":null},{"line":948,"address":[6896638],"length":1,"stats":{"Line":0},"fn_name":null},{"line":982,"address":[6896672],"length":1,"stats":{"Line":8},"fn_name":"span"},{"line":983,"address":[6896762,6896880,6896834,6896734,6896811,6896857,6896788],"length":1,"stats":{"Line":32},"fn_name":null},{"line":984,"address":[6896681,6896746],"length":1,"stats":{"Line":8},"fn_name":null},{"line":985,"address":[6896772],"length":1,"stats":{"Line":8},"fn_name":null},{"line":986,"address":[6896795],"length":1,"stats":{"Line":8},"fn_name":null},{"line":987,"address":[6896818],"length":1,"stats":{"Line":8},"fn_name":null},{"line":988,"address":[6896841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":989,"address":[6896864],"length":1,"stats":{"Line":8},"fn_name":null},{"line":990,"address":[6896887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":991,"address":[6896718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1012,"address":[6896928],"length":1,"stats":{"Line":8},"fn_name":"is_valid"},{"line":1013,"address":[6896933],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1038,"address":[6896960,6897026],"length":1,"stats":{"Line":8},"fn_name":"push"},{"line":1039,"address":[6896975,6897045],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1040,"address":[6897053],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1042,"address":[6897136],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1043,"address":[6897209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1052,"address":[6897392,6897459],"length":1,"stats":{"Line":8},"fn_name":"into_item"},{"line":1053,"address":[6897402,6897625,6897714,6897772],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1054,"address":[6897479,6897635],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1055,"address":[6897721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1056,"address":[6897528],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1169,"address":[6897840],"length":1,"stats":{"Line":8},"fn_name":"is_valid"},{"line":1170,"address":[6897868,6897935],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1171,"address":[6897937,6897849,6897874],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1172,"address":[6897863],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1196,"address":[6897968],"length":1,"stats":{"Line":14},"fn_name":"flags"},{"line":1197,"address":[6898001],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1198,"address":[6897977,6898007],"length":1,"stats":{"Line":23},"fn_name":null},{"line":1199,"address":[6897992],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1204,"address":[6898048],"length":1,"stats":{"Line":0},"fn_name":"is_capturing"},{"line":1205,"address":[6898075],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1206,"address":[6898079,6898057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1207,"address":[6898070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1214,"address":[6898112],"length":1,"stats":{"Line":0},"fn_name":"capture_index"},{"line":1215,"address":[6898190,6898162],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1216,"address":[6898121,6898171],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1217,"address":[6898197],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1218,"address":[6898154],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1275,"address":[6898256],"length":1,"stats":{"Line":13},"fn_name":"add_item"},{"line":1276,"address":[6898271,6898540,6898655],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1277,"address":[6898606],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1278,"address":[6898665],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1281,"address":[6898474],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1282,"address":[6898697],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1294,"address":[6898720],"length":1,"stats":{"Line":14},"fn_name":"flag_state"},{"line":1295,"address":[6898737],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1296,"address":[6898833,6899000,6898742,6899005],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1297,"address":[6898896,6898903],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1298,"address":[6898855],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1299,"address":[6898898],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1301,"address":[6898910,6898986],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1302,"address":[6898972],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1304,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1307,"address":[6898823],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1332,"address":[6899008],"length":1,"stats":{"Line":0},"fn_name":"is_negation"},{"line":1333,"address":[6899049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1334,"address":[6899051,6899021],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1335,"address":[6899044],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1360,"address":[6998112,6998170],"length":1,"stats":{"Line":9},"fn_name":"drop"},{"line":1363,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1364,"address":[6998127],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1365,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1366,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1367,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1368,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1370,"address":[6998251,6998241],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1371,"address":[6998258],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1372,"address":[6998324],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1373,"address":[6998396],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1374,"address":[6998469],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1375,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1378,"address":[7073472,7073488],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}"},{"line":1379,"address":[6998190],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1380,"address":[6998205,6999226,6998537],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1381,"address":[6998628,6998674,6999205,6998758],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1382,"address":[6998840,6998976,6999089,6999158,6999184],"length":1,"stats":{"Line":34},"fn_name":null},{"line":1383,"address":[6998760],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1384,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1386,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1387,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1389,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1390,"address":[6998847],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1391,"address":[6998863,6998952],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1393,"address":[6998981],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1394,"address":[6998997],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1396,"address":[6999091],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1397,"address":[6999107],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1399,"address":[6998794],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1400,"address":[6999160,6998810],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1410,"address":[6999328,6999360],"length":1,"stats":{"Line":8},"fn_name":"drop"},{"line":1413,"address":[6999422,6999615,6999680],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1414,"address":[6999597,6999343,6999611,6999429,6999524],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1415,"address":[6999446],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1416,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1417,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1418,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1419,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1420,"address":[6999526,6999536],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1421,"address":[6999545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1422,"address":[6999564],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1423,"address":[6999599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1426,"address":[6999489],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1427,"address":[6999605,6999503],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1428,"address":[6999613],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1432,"address":[6999380],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1433,"address":[6999617,6999399],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1434,"address":[6999682],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1439,"address":[7073648,7073664],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":1440,"address":[6999692],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1441,"address":[7000563,6999707],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1442,"address":[6999886,7000539,6999834,6999970],"length":1,"stats":{"Line":40},"fn_name":null},{"line":1443,"address":[7000518,7000047,7000358],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1444,"address":[6999972,7000356,7000158,7000049,7000300],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1445,"address":[7000065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1446,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1447,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1448,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1449,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1450,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1451,"address":[7000170],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1452,"address":[7000187,7000273],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1454,"address":[7000112],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1455,"address":[7000302,7000129],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1458,"address":[6999987],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1459,"address":[7000363,7000003],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1460,"address":[7000427],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":180,"coverable":344},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","ast","parse.rs"],"content":"/*!\nThis module provides a regular expression parser.\n*/\n\nuse std::borrow::Borrow;\nuse std::cell::{Cell, RefCell};\nuse std::mem;\nuse std::result;\n\nuse ast::{self, Ast, Position, Span};\nuse either::Either;\n\nuse is_meta_character;\n\ntype Result<T> = result::Result<T, ast::Error>;\n\n/// A primitive is an expression with no sub-expressions. This includes\n/// literals, assertions and non-set character classes. This representation\n/// is used as intermediate state in the parser.\n///\n/// This does not include ASCII character classes, since they can only appear\n/// within a set character class.\n#[derive(Clone, Debug, Eq, PartialEq)]\nenum Primitive {\n    Literal(ast::Literal),\n    Assertion(ast::Assertion),\n    Dot(Span),\n    Perl(ast::ClassPerl),\n    Unicode(ast::ClassUnicode),\n}\n\nimpl Primitive {\n    /// Return the span of this primitive.\n    fn span(&self) -> &Span {\n        match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }\n    }\n\n    /// Convert this primitive into a proper AST.\n    fn into_ast(self) -> Ast {\n        match self {\n            Primitive::Literal(lit) => Ast::Literal(lit),\n            Primitive::Assertion(assert) => Ast::Assertion(assert),\n            Primitive::Dot(span) => Ast::Dot(span),\n            Primitive::Perl(cls) => Ast::Class(ast::Class::Perl(cls)),\n            Primitive::Unicode(cls) => Ast::Class(ast::Class::Unicode(cls)),\n        }\n    }\n\n    /// Convert this primitive into an item in a character class.\n    ///\n    /// If this primitive is not a legal item (i.e., an assertion or a dot),\n    /// then return an error.\n    fn into_class_set_item<P: Borrow<Parser>>(\n        self,\n        p: &ParserI<P>,\n    ) -> Result<ast::ClassSetItem> {\n        use self::Primitive::*;\n        use ast::ClassSetItem;\n\n        match self {\n            Literal(lit) => Ok(ClassSetItem::Literal(lit)),\n            Perl(cls) => Ok(ClassSetItem::Perl(cls)),\n            Unicode(cls) => Ok(ClassSetItem::Unicode(cls)),\n            x => Err(p.error(*x.span(), ast::ErrorKind::ClassEscapeInvalid)),\n        }\n    }\n\n    /// Convert this primitive into a literal in a character class. In\n    /// particular, literals are the only valid items that can appear in\n    /// ranges.\n    ///\n    /// If this primitive is not a legal item (i.e., a class, assertion or a\n    /// dot), then return an error.\n    fn into_class_literal<P: Borrow<Parser>>(\n        self,\n        p: &ParserI<P>,\n    ) -> Result<ast::Literal> {\n        use self::Primitive::*;\n\n        match self {\n            Literal(lit) => Ok(lit),\n            x => Err(p.error(*x.span(), ast::ErrorKind::ClassRangeLiteral)),\n        }\n    }\n}\n\n/// Returns true if the given character is a hexadecimal digit.\nfn is_hex(c: char) -> bool {\n    ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F')\n}\n\n/// Returns true if the given character is a valid in a capture group name.\n///\n/// If `first` is true, then `c` is treated as the first character in the\n/// group name (which is not allowed to be a digit).\nfn is_capture_char(c: char, first: bool) -> bool {\n    c == '_'\n        || (!first && c >= '0' && c <= '9')\n        || (c >= 'a' && c <= 'z')\n        || (c >= 'A' && c <= 'Z')\n}\n\n/// A builder for a regular expression parser.\n///\n/// This builder permits modifying configuration options for the parser.\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n\nimpl Default for ParserBuilder {\n    fn default() -> ParserBuilder {\n        ParserBuilder::new()\n    }\n}\n\nimpl ParserBuilder {\n    /// Create a new parser builder with a default configuration.\n    pub fn new() -> ParserBuilder {\n        ParserBuilder {\n            ignore_whitespace: false,\n            nest_limit: 250,\n            octal: false,\n        }\n    }\n\n    /// Build a parser from this configuration with the given pattern.\n    pub fn build(&self) -> Parser {\n        Parser {\n            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),\n            capture_index: Cell::new(0),\n            nest_limit: self.nest_limit,\n            octal: self.octal,\n            initial_ignore_whitespace: self.ignore_whitespace,\n            ignore_whitespace: Cell::new(self.ignore_whitespace),\n            comments: RefCell::new(vec![]),\n            stack_group: RefCell::new(vec![]),\n            stack_class: RefCell::new(vec![]),\n            capture_names: RefCell::new(vec![]),\n            scratch: RefCell::new(String::new()),\n        }\n    }\n\n    /// Set the nesting limit for this parser.\n    ///\n    /// The nesting limit controls how deep the abstract syntax tree is allowed\n    /// to be. If the AST exceeds the given limit (e.g., with too many nested\n    /// groups), then an error is returned by the parser.\n    ///\n    /// The purpose of this limit is to act as a heuristic to prevent stack\n    /// overflow for consumers that do structural induction on an `Ast` using\n    /// explicit recursion. While this crate never does this (instead using\n    /// constant stack space and moving the call stack to the heap), other\n    /// crates may.\n    ///\n    /// This limit is not checked until the entire Ast is parsed. Therefore,\n    /// if callers want to put a limit on the amount of heap space used, then\n    /// they should impose a limit on the length, in bytes, of the concrete\n    /// pattern string. In particular, this is viable since this parser\n    /// implementation will limit itself to heap space proportional to the\n    /// lenth of the pattern string.\n    ///\n    /// Note that a nest limit of `0` will return a nest limit error for most\n    /// patterns but not all. For example, a nest limit of `0` permits `a` but\n    /// not `ab`, since `ab` requires a concatenation, which results in a nest\n    /// depth of `1`. In general, a nest limit is not something that manifests\n    /// in an obvious way in the concrete syntax, therefore, it should not be\n    /// used in a granular way.\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {\n        self.nest_limit = limit;\n        self\n    }\n\n    /// Whether to support octal syntax or not.\n    ///\n    /// Octal syntax is a little-known way of uttering Unicode codepoints in\n    /// a regular expression. For example, `a`, `\\x61`, `\\u0061` and\n    /// `\\141` are all equivalent regular expressions, where the last example\n    /// shows octal syntax.\n    ///\n    /// While supporting octal syntax isn't in and of itself a problem, it does\n    /// make good error messages harder. That is, in PCRE based regex engines,\n    /// syntax like `\\0` invokes a backreference, which is explicitly\n    /// unsupported in Rust's regex engine. However, many users expect it to\n    /// be supported. Therefore, when octal support is disabled, the error\n    /// message will explicitly mention that backreferences aren't supported.\n    ///\n    /// Octal syntax is disabled by default.\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.octal = yes;\n        self\n    }\n\n    /// Enable verbose mode in the regular expression.\n    ///\n    /// When enabled, verbose mode permits insigificant whitespace in many\n    /// places in the regular expression, as well as comments. Comments are\n    /// started using `#` and continue until the end of the line.\n    ///\n    /// By default, this is disabled. It may be selectively enabled in the\n    /// regular expression by using the `x` flag regardless of this setting.\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.ignore_whitespace = yes;\n        self\n    }\n}\n\n/// A regular expression parser.\n///\n/// This parses a string representation of a regular expression into an\n/// abstract syntax tree. The size of the tree is proportional to the length\n/// of the regular expression pattern.\n///\n/// A `Parser` can be configured in more detail via a\n/// [`ParserBuilder`](struct.ParserBuilder.html).\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// Th`ParserBuilder`. is is used when reseting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n\n/// ParserI is the internal parser implementation.\n///\n/// We use this separate type so that we can carry the provided pattern string\n/// along with us. In particular, a `Parser` internal state is not tied to any\n/// one pattern, but `ParserI` is.\n///\n/// This type also lets us use `ParserI<&Parser>` in production code while\n/// retaining the convenience of `ParserI<Parser>` for tests, which sometimes\n/// work against the internal interface of the parser.\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n\n/// GroupState represents a single stack frame while parsing nested groups\n/// and alternations. Each frame records the state up to an opening parenthesis\n/// or a alternating bracket `|`.\n#[derive(Clone, Debug)]\nenum GroupState {\n    /// This state is pushed whenever an opening group is found.\n    Group {\n        /// The concatenation immediately preceding the opening group.\n        concat: ast::Concat,\n        /// The group that has been opened. Its sub-AST is always empty.\n        group: ast::Group,\n        /// Whether this group has the `x` flag enabled or not.\n        ignore_whitespace: bool,\n    },\n    /// This state is pushed whenever a new alternation branch is found. If\n    /// an alternation branch is found and this state is at the top of the\n    /// stack, then this state should be modified to include the new\n    /// alternation.\n    Alternation(ast::Alternation),\n}\n\n/// ClassState represents a single stack frame while parsing character classes.\n/// Each frame records the state up to an intersection, difference, symmetric\n/// difference or nested class.\n///\n/// Note that a parser's character class stack is only non-empty when parsing\n/// a character class. In all other cases, it is empty.\n#[derive(Clone, Debug)]\nenum ClassState {\n    /// This state is pushed whenever an opening bracket is found.\n    Open {\n        /// The union of class items immediately preceding this class.\n        union: ast::ClassSetUnion,\n        /// The class that has been opened. Typically this just corresponds\n        /// to the `[`, but it can also include `[^` since `^` indicates\n        /// negation of the class.\n        set: ast::ClassBracketed,\n    },\n    /// This state is pushed when a operator is seen. When popped, the stored\n    /// set becomes the left hand side of the operator.\n    Op {\n        /// The type of the operation, i.e., &&, -- or ~~.\n        kind: ast::ClassSetBinaryOpKind,\n        /// The left-hand side of the operator.\n        lhs: ast::ClassSet,\n    },\n}\n\nimpl Parser {\n    /// Create a new parser with a default configuration.\n    ///\n    /// The parser can be run with either the `parse` or `parse_with_comments`\n    /// methods. The parse methods return an abstract syntax tree.\n    ///\n    /// To set configuration options on the parser, use\n    /// [`ParserBuilder`](struct.ParserBuilder.html).\n    pub fn new() -> Parser {\n        ParserBuilder::new().build()\n    }\n\n    /// Parse the regular expression into an abstract syntax tree.\n    pub fn parse(&mut self, pattern: &str) -> Result<Ast> {\n        ParserI::new(self, pattern).parse()\n    }\n\n    /// Parse the regular expression and return an abstract syntax tree with\n    /// all of the comments found in the pattern.\n    pub fn parse_with_comments(\n        &mut self,\n        pattern: &str,\n    ) -> Result<ast::WithComments> {\n        ParserI::new(self, pattern).parse_with_comments()\n    }\n\n    /// Reset the internal state of a parser.\n    ///\n    /// This is called at the beginning of every parse. This prevents the\n    /// parser from running with inconsistent state (say, if a previous\n    /// invocation returned an error and the parser is reused).\n    fn reset(&self) {\n        // These settings should be in line with the construction\n        // in `ParserBuilder::build`.\n        self.pos.set(Position { offset: 0, line: 1, column: 1 });\n        self.ignore_whitespace.set(self.initial_ignore_whitespace);\n        self.comments.borrow_mut().clear();\n        self.stack_group.borrow_mut().clear();\n        self.stack_class.borrow_mut().clear();\n    }\n}\n\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    /// Build an internal parser from a parser configuration and a pattern.\n    fn new(parser: P, pattern: &'s str) -> ParserI<'s, P> {\n        ParserI { parser: parser, pattern: pattern }\n    }\n\n    /// Return a reference to the parser state.\n    fn parser(&self) -> &Parser {\n        self.parser.borrow()\n    }\n\n    /// Return a reference to the pattern being parsed.\n    fn pattern(&self) -> &str {\n        self.pattern.borrow()\n    }\n\n    /// Create a new error with the given span and error type.\n    fn error(&self, span: Span, kind: ast::ErrorKind) -> ast::Error {\n        ast::Error {\n            kind: kind,\n            pattern: self.pattern().to_string(),\n            span: span,\n        }\n    }\n\n    /// Return the current offset of the parser.\n    ///\n    /// The offset starts at `0` from the beginning of the regular expression\n    /// pattern string.\n    fn offset(&self) -> usize {\n        self.parser().pos.get().offset\n    }\n\n    /// Return the current line number of the parser.\n    ///\n    /// The line number starts at `1`.\n    fn line(&self) -> usize {\n        self.parser().pos.get().line\n    }\n\n    /// Return the current column of the parser.\n    ///\n    /// The column number starts at `1` and is reset whenever a `\\n` is seen.\n    fn column(&self) -> usize {\n        self.parser().pos.get().column\n    }\n\n    /// Return the next capturing index. Each subsequent call increments the\n    /// internal index.\n    ///\n    /// The span given should correspond to the location of the opening\n    /// parenthesis.\n    ///\n    /// If the capture limit is exceeded, then an error is returned.\n    fn next_capture_index(&self, span: Span) -> Result<u32> {\n        let current = self.parser().capture_index.get();\n        let i = current.checked_add(1).ok_or_else(|| {\n            self.error(span, ast::ErrorKind::CaptureLimitExceeded)\n        })?;\n        self.parser().capture_index.set(i);\n        Ok(i)\n    }\n\n    /// Adds the given capture name to this parser. If this capture name has\n    /// already been used, then an error is returned.\n    fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {\n        let mut names = self.parser().capture_names.borrow_mut();\n        match names\n            .binary_search_by_key(&cap.name.as_str(), |c| c.name.as_str())\n        {\n            Err(i) => {\n                names.insert(i, cap.clone());\n                Ok(())\n            }\n            Ok(i) => Err(self.error(\n                cap.span,\n                ast::ErrorKind::GroupNameDuplicate { original: names[i].span },\n            )),\n        }\n    }\n\n    /// Return whether the parser should ignore whitespace or not.\n    fn ignore_whitespace(&self) -> bool {\n        self.parser().ignore_whitespace.get()\n    }\n\n    /// Return the character at the current position of the parser.\n    ///\n    /// This panics if the current position does not point to a valid char.\n    fn char(&self) -> char {\n        self.char_at(self.offset())\n    }\n\n    /// Return the character at the given position.\n    ///\n    /// This panics if the given position does not point to a valid char.\n    fn char_at(&self, i: usize) -> char {\n        self.pattern()[i..]\n            .chars()\n            .next()\n            .unwrap_or_else(|| panic!(\"expected char at offset {}\", i))\n    }\n\n    /// Bump the parser to the next Unicode scalar value.\n    ///\n    /// If the end of the input has been reached, then `false` is returned.\n    fn bump(&self) -> bool {\n        if self.is_eof() {\n            return false;\n        }\n        let Position { mut offset, mut line, mut column } = self.pos();\n        if self.char() == '\\n' {\n            line = line.checked_add(1).unwrap();\n            column = 1;\n        } else {\n            column = column.checked_add(1).unwrap();\n        }\n        offset += self.char().len_utf8();\n        self.parser().pos.set(Position {\n            offset: offset,\n            line: line,\n            column: column,\n        });\n        self.pattern()[self.offset()..].chars().next().is_some()\n    }\n\n    /// If the substring starting at the current position of the parser has\n    /// the given prefix, then bump the parser to the character immediately\n    /// following the prefix and return true. Otherwise, don't bump the parser\n    /// and return false.\n    fn bump_if(&self, prefix: &str) -> bool {\n        if self.pattern()[self.offset()..].starts_with(prefix) {\n            for _ in 0..prefix.chars().count() {\n                self.bump();\n            }\n            true\n        } else {\n            false\n        }\n    }\n\n    /// Returns true if and only if the parser is positioned at a look-around\n    /// prefix. The conditions under which this returns true must always\n    /// correspond to a regular expression that would otherwise be consider\n    /// invalid.\n    ///\n    /// This should only be called immediately after parsing the opening of\n    /// a group or a set of flags.\n    fn is_lookaround_prefix(&self) -> bool {\n        self.bump_if(\"?=\")\n            || self.bump_if(\"?!\")\n            || self.bump_if(\"?<=\")\n            || self.bump_if(\"?<!\")\n    }\n\n    /// Bump the parser, and if the `x` flag is enabled, bump through any\n    /// subsequent spaces. Return true if and only if the parser is not at\n    /// EOF.\n    fn bump_and_bump_space(&self) -> bool {\n        if !self.bump() {\n            return false;\n        }\n        self.bump_space();\n        !self.is_eof()\n    }\n\n    /// If the `x` flag is enabled (i.e., whitespace insensitivity with\n    /// comments), then this will advance the parser through all whitespace\n    /// and comments to the next non-whitespace non-comment byte.\n    ///\n    /// If the `x` flag is disabled, then this is a no-op.\n    ///\n    /// This should be used selectively throughout the parser where\n    /// arbitrary whitespace is permitted when the `x` flag is enabled. For\n    /// example, `{   5  , 6}` is equivalent to `{5,6}`.\n    fn bump_space(&self) {\n        if !self.ignore_whitespace() {\n            return;\n        }\n        while !self.is_eof() {\n            if self.char().is_whitespace() {\n                self.bump();\n            } else if self.char() == '#' {\n                let start = self.pos();\n                let mut comment_text = String::new();\n                self.bump();\n                while !self.is_eof() {\n                    let c = self.char();\n                    self.bump();\n                    if c == '\\n' {\n                        break;\n                    }\n                    comment_text.push(c);\n                }\n                let comment = ast::Comment {\n                    span: Span::new(start, self.pos()),\n                    comment: comment_text,\n                };\n                self.parser().comments.borrow_mut().push(comment);\n            } else {\n                break;\n            }\n        }\n    }\n\n    /// Peek at the next character in the input without advancing the parser.\n    ///\n    /// If the input has been exhausted, then this returns `None`.\n    fn peek(&self) -> Option<char> {\n        if self.is_eof() {\n            return None;\n        }\n        self.pattern()[self.offset() + self.char().len_utf8()..].chars().next()\n    }\n\n    /// Like peek, but will ignore spaces when the parser is in whitespace\n    /// insensitive mode.\n    fn peek_space(&self) -> Option<char> {\n        if !self.ignore_whitespace() {\n            return self.peek();\n        }\n        if self.is_eof() {\n            return None;\n        }\n        let mut start = self.offset() + self.char().len_utf8();\n        let mut in_comment = false;\n        for (i, c) in self.pattern()[start..].char_indices() {\n            if c.is_whitespace() {\n                continue;\n            } else if !in_comment && c == '#' {\n                in_comment = true;\n            } else if in_comment && c == '\\n' {\n                in_comment = false;\n            } else {\n                start += i;\n                break;\n            }\n        }\n        self.pattern()[start..].chars().next()\n    }\n\n    /// Returns true if the next call to `bump` would return false.\n    fn is_eof(&self) -> bool {\n        self.offset() == self.pattern().len()\n    }\n\n    /// Return the current position of the parser, which includes the offset,\n    /// line and column.\n    fn pos(&self) -> Position {\n        self.parser().pos.get()\n    }\n\n    /// Create a span at the current position of the parser. Both the start\n    /// and end of the span are set.\n    fn span(&self) -> Span {\n        Span::splat(self.pos())\n    }\n\n    /// Create a span that covers the current character.\n    fn span_char(&self) -> Span {\n        let mut next = Position {\n            offset: self.offset().checked_add(self.char().len_utf8()).unwrap(),\n            line: self.line(),\n            column: self.column().checked_add(1).unwrap(),\n        };\n        if self.char() == '\\n' {\n            next.line += 1;\n            next.column = 1;\n        }\n        Span::new(self.pos(), next)\n    }\n\n    /// Parse and push a single alternation on to the parser's internal stack.\n    /// If the top of the stack already has an alternation, then add to that\n    /// instead of pushing a new one.\n    ///\n    /// The concatenation given corresponds to a single alternation branch.\n    /// The concatenation returned starts the next branch and is empty.\n    ///\n    /// This assumes the parser is currently positioned at `|` and will advance\n    /// the parser to the character following `|`.\n    #[inline(never)]\n    fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n        assert_eq!(self.char(), '|');\n        concat.span.end = self.pos();\n        self.push_or_add_alternation(concat);\n        self.bump();\n        Ok(ast::Concat { span: self.span(), asts: vec![] })\n    }\n\n    /// Pushes or adds the given branch of an alternation to the parser's\n    /// internal stack of state.\n    fn push_or_add_alternation(&self, concat: ast::Concat) {\n        use self::GroupState::*;\n\n        let mut stack = self.parser().stack_group.borrow_mut();\n        if let Some(&mut Alternation(ref mut alts)) = stack.last_mut() {\n            alts.asts.push(concat.into_ast());\n            return;\n        }\n        stack.push(Alternation(ast::Alternation {\n            span: Span::new(concat.span.start, self.pos()),\n            asts: vec![concat.into_ast()],\n        }));\n    }\n\n    /// Parse and push a group AST (and its parent concatenation) on to the\n    /// parser's internal stack. Return a fresh concatenation corresponding\n    /// to the group's sub-AST.\n    ///\n    /// If a set of flags was found (with no group), then the concatenation\n    /// is returned with that set of flags added.\n    ///\n    /// This assumes that the parser is currently positioned on the opening\n    /// parenthesis. It advances the parser to the character at the start\n    /// of the sub-expression (or adjoining expression).\n    ///\n    /// If there was a problem parsing the start of the group, then an error\n    /// is returned.\n    #[inline(never)]\n    fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n        assert_eq!(self.char(), '(');\n        match self.parse_group()? {\n            Either::Left(set) => {\n                let ignore = set.flags.flag_state(ast::Flag::IgnoreWhitespace);\n                if let Some(v) = ignore {\n                    self.parser().ignore_whitespace.set(v);\n                }\n\n                concat.asts.push(Ast::Flags(set));\n                Ok(concat)\n            }\n            Either::Right(group) => {\n                let old_ignore_whitespace = self.ignore_whitespace();\n                let new_ignore_whitespace = group\n                    .flags()\n                    .and_then(|f| f.flag_state(ast::Flag::IgnoreWhitespace))\n                    .unwrap_or(old_ignore_whitespace);\n                self.parser().stack_group.borrow_mut().push(\n                    GroupState::Group {\n                        concat: concat,\n                        group: group,\n                        ignore_whitespace: old_ignore_whitespace,\n                    },\n                );\n                self.parser().ignore_whitespace.set(new_ignore_whitespace);\n                Ok(ast::Concat { span: self.span(), asts: vec![] })\n            }\n        }\n    }\n\n    /// Pop a group AST from the parser's internal stack and set the group's\n    /// AST to the given concatenation. Return the concatenation containing\n    /// the group.\n    ///\n    /// This assumes that the parser is currently positioned on the closing\n    /// parenthesis and advances the parser to the character following the `)`.\n    ///\n    /// If no such group could be popped, then an unopened group error is\n    /// returned.\n    #[inline(never)]\n    fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {\n        use self::GroupState::*;\n\n        assert_eq!(self.char(), ')');\n        let mut stack = self.parser().stack_group.borrow_mut();\n        let (mut prior_concat, mut group, ignore_whitespace, alt) = match stack\n            .pop()\n        {\n            Some(Group { concat, group, ignore_whitespace }) => {\n                (concat, group, ignore_whitespace, None)\n            }\n            Some(Alternation(alt)) => match stack.pop() {\n                Some(Group { concat, group, ignore_whitespace }) => {\n                    (concat, group, ignore_whitespace, Some(alt))\n                }\n                None | Some(Alternation(_)) => {\n                    return Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::GroupUnopened,\n                    ));\n                }\n            },\n            None => {\n                return Err(self\n                    .error(self.span_char(), ast::ErrorKind::GroupUnopened));\n            }\n        };\n        self.parser().ignore_whitespace.set(ignore_whitespace);\n        group_concat.span.end = self.pos();\n        self.bump();\n        group.span.end = self.pos();\n        match alt {\n            Some(mut alt) => {\n                alt.span.end = group_concat.span.end;\n                alt.asts.push(group_concat.into_ast());\n                group.ast = Box::new(alt.into_ast());\n            }\n            None => {\n                group.ast = Box::new(group_concat.into_ast());\n            }\n        }\n        prior_concat.asts.push(Ast::Group(group));\n        Ok(prior_concat)\n    }\n\n    /// Pop the last state from the parser's internal stack, if it exists, and\n    /// add the given concatenation to it. There either must be no state or a\n    /// single alternation item on the stack. Any other scenario produces an\n    /// error.\n    ///\n    /// This assumes that the parser has advanced to the end.\n    #[inline(never)]\n    fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {\n        concat.span.end = self.pos();\n        let mut stack = self.parser().stack_group.borrow_mut();\n        let ast = match stack.pop() {\n            None => Ok(concat.into_ast()),\n            Some(GroupState::Alternation(mut alt)) => {\n                alt.span.end = self.pos();\n                alt.asts.push(concat.into_ast());\n                Ok(Ast::Alternation(alt))\n            }\n            Some(GroupState::Group { group, .. }) => {\n                return Err(\n                    self.error(group.span, ast::ErrorKind::GroupUnclosed)\n                );\n            }\n        };\n        // If we try to pop again, there should be nothing.\n        match stack.pop() {\n            None => ast,\n            Some(GroupState::Alternation(_)) => {\n                // This unreachable is unfortunate. This case can't happen\n                // because the only way we can be here is if there were two\n                // `GroupState::Alternation`s adjacent in the parser's stack,\n                // which we guarantee to never happen because we never push a\n                // `GroupState::Alternation` if one is already at the top of\n                // the stack.\n                unreachable!()\n            }\n            Some(GroupState::Group { group, .. }) => {\n                Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))\n            }\n        }\n    }\n\n    /// Parse the opening of a character class and push the current class\n    /// parsing context onto the parser's stack. This assumes that the parser\n    /// is positioned at an opening `[`. The given union should correspond to\n    /// the union of set items built up before seeing the `[`.\n    ///\n    /// If there was a problem parsing the opening of the class, then an error\n    /// is returned. Otherwise, a new union of set items for the class is\n    /// returned (which may be populated with either a `]` or a `-`).\n    #[inline(never)]\n    fn push_class_open(\n        &self,\n        parent_union: ast::ClassSetUnion,\n    ) -> Result<ast::ClassSetUnion> {\n        assert_eq!(self.char(), '[');\n\n        let (nested_set, nested_union) = self.parse_set_class_open()?;\n        self.parser()\n            .stack_class\n            .borrow_mut()\n            .push(ClassState::Open { union: parent_union, set: nested_set });\n        Ok(nested_union)\n    }\n\n    /// Parse the end of a character class set and pop the character class\n    /// parser stack. The union given corresponds to the last union built\n    /// before seeing the closing `]`. The union returned corresponds to the\n    /// parent character class set with the nested class added to it.\n    ///\n    /// This assumes that the parser is positioned at a `]` and will advance\n    /// the parser to the byte immediately following the `]`.\n    ///\n    /// If the stack is empty after popping, then this returns the final\n    /// \"top-level\" character class AST (where a \"top-level\" character class\n    /// is one that is not nested inside any other character class).\n    ///\n    /// If there is no corresponding opening bracket on the parser's stack,\n    /// then an error is returned.\n    #[inline(never)]\n    fn pop_class(\n        &self,\n        nested_union: ast::ClassSetUnion,\n    ) -> Result<Either<ast::ClassSetUnion, ast::Class>> {\n        assert_eq!(self.char(), ']');\n\n        let item = ast::ClassSet::Item(nested_union.into_item());\n        let prevset = self.pop_class_op(item);\n        let mut stack = self.parser().stack_class.borrow_mut();\n        match stack.pop() {\n            None => {\n                // We can never observe an empty stack:\n                //\n                // 1) We are guaranteed to start with a non-empty stack since\n                //    the character class parser is only initiated when it sees\n                //    a `[`.\n                // 2) If we ever observe an empty stack while popping after\n                //    seeing a `]`, then we signal the character class parser\n                //    to terminate.\n                panic!(\"unexpected empty character class stack\")\n            }\n            Some(ClassState::Op { .. }) => {\n                // This panic is unfortunate, but this case is impossible\n                // since we already popped the Op state if one exists above.\n                // Namely, every push to the class parser stack is guarded by\n                // whether an existing Op is already on the top of the stack.\n                // If it is, the existing Op is modified. That is, the stack\n                // can never have consecutive Op states.\n                panic!(\"unexpected ClassState::Op\")\n            }\n            Some(ClassState::Open { mut union, mut set }) => {\n                self.bump();\n                set.span.end = self.pos();\n                set.kind = prevset;\n                if stack.is_empty() {\n                    Ok(Either::Right(ast::Class::Bracketed(set)))\n                } else {\n                    union.push(ast::ClassSetItem::Bracketed(Box::new(set)));\n                    Ok(Either::Left(union))\n                }\n            }\n        }\n    }\n\n    /// Return an \"unclosed class\" error whose span points to the most\n    /// recently opened class.\n    ///\n    /// This should only be called while parsing a character class.\n    #[inline(never)]\n    fn unclosed_class_error(&self) -> ast::Error {\n        for state in self.parser().stack_class.borrow().iter().rev() {\n            match *state {\n                ClassState::Open { ref set, .. } => {\n                    return self\n                        .error(set.span, ast::ErrorKind::ClassUnclosed);\n                }\n                _ => {}\n            }\n        }\n        // We are guaranteed to have a non-empty stack with at least\n        // one open bracket, so we should never get here.\n        panic!(\"no open character class found\")\n    }\n\n    /// Push the current set of class items on to the class parser's stack as\n    /// the left hand side of the given operator.\n    ///\n    /// A fresh set union is returned, which should be used to build the right\n    /// hand side of this operator.\n    #[inline(never)]\n    fn push_class_op(\n        &self,\n        next_kind: ast::ClassSetBinaryOpKind,\n        next_union: ast::ClassSetUnion,\n    ) -> ast::ClassSetUnion {\n        let item = ast::ClassSet::Item(next_union.into_item());\n        let new_lhs = self.pop_class_op(item);\n        self.parser()\n            .stack_class\n            .borrow_mut()\n            .push(ClassState::Op { kind: next_kind, lhs: new_lhs });\n        ast::ClassSetUnion { span: self.span(), items: vec![] }\n    }\n\n    /// Pop a character class set from the character class parser stack. If the\n    /// top of the stack is just an item (not an operation), then return the\n    /// given set unchanged. If the top of the stack is an operation, then the\n    /// given set will be used as the rhs of the operation on the top of the\n    /// stack. In that case, the binary operation is returned as a set.\n    #[inline(never)]\n    fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {\n        let mut stack = self.parser().stack_class.borrow_mut();\n        let (kind, lhs) = match stack.pop() {\n            Some(ClassState::Op { kind, lhs }) => (kind, lhs),\n            Some(state @ ClassState::Open { .. }) => {\n                stack.push(state);\n                return rhs;\n            }\n            None => unreachable!(),\n        };\n        let span = Span::new(lhs.span().start, rhs.span().end);\n        ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n            span: span,\n            kind: kind,\n            lhs: Box::new(lhs),\n            rhs: Box::new(rhs),\n        })\n    }\n}\n\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    /// Parse the regular expression into an abstract syntax tree.\n    fn parse(&self) -> Result<Ast> {\n        self.parse_with_comments().map(|astc| astc.ast)\n    }\n\n    /// Parse the regular expression and return an abstract syntax tree with\n    /// all of the comments found in the pattern.\n    fn parse_with_comments(&self) -> Result<ast::WithComments> {\n        assert_eq!(self.offset(), 0, \"parser can only be used once\");\n        self.parser().reset();\n        let mut concat = ast::Concat { span: self.span(), asts: vec![] };\n        loop {\n            self.bump_space();\n            if self.is_eof() {\n                break;\n            }\n            match self.char() {\n                '(' => concat = self.push_group(concat)?,\n                ')' => concat = self.pop_group(concat)?,\n                '|' => concat = self.push_alternate(concat)?,\n                '[' => {\n                    let class = self.parse_set_class()?;\n                    concat.asts.push(Ast::Class(class));\n                }\n                '?' => {\n                    concat = self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrOne,\n                    )?;\n                }\n                '*' => {\n                    concat = self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrMore,\n                    )?;\n                }\n                '+' => {\n                    concat = self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::OneOrMore,\n                    )?;\n                }\n                '{' => {\n                    concat = self.parse_counted_repetition(concat)?;\n                }\n                _ => concat.asts.push(self.parse_primitive()?.into_ast()),\n            }\n        }\n        let ast = self.pop_group_end(concat)?;\n        NestLimiter::new(self).check(&ast)?;\n        Ok(ast::WithComments {\n            ast: ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })\n    }\n\n    /// Parses an uncounted repetition operation. An uncounted repetition\n    /// operator includes ?, * and +, but does not include the {m,n} syntax.\n    /// The given `kind` should correspond to the operator observed by the\n    /// caller.\n    ///\n    /// This assumes that the paser is currently positioned at the repetition\n    /// operator and advances the parser to the first character after the\n    /// operator. (Note that the operator may include a single additional `?`,\n    /// which makes the operator ungreedy.)\n    ///\n    /// The caller should include the concatenation that is being built. The\n    /// concatenation returned includes the repetition operator applied to the\n    /// last expression in the given concatenation.\n    #[inline(never)]\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: ast::Concat,\n        kind: ast::RepetitionKind,\n    ) -> Result<ast::Concat> {\n        assert!(\n            self.char() == '?' || self.char() == '*' || self.char() == '+'\n        );\n        let op_start = self.pos();\n        let ast = match concat.asts.pop() {\n            Some(ast) => ast,\n            None => {\n                return Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )\n            }\n        };\n        match ast {\n            Ast::Empty(_) | Ast::Flags(_) => {\n                return Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )\n            }\n            _ => {}\n        }\n        let mut greedy = true;\n        if self.bump() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        concat.asts.push(Ast::Repetition(ast::Repetition {\n            span: ast.span().with_end(self.pos()),\n            op: ast::RepetitionOp {\n                span: Span::new(op_start, self.pos()),\n                kind: kind,\n            },\n            greedy: greedy,\n            ast: Box::new(ast),\n        }));\n        Ok(concat)\n    }\n\n    /// Parses a counted repetition operation. A counted repetition operator\n    /// corresponds to the {m,n} syntax, and does not include the ?, * or +\n    /// operators.\n    ///\n    /// This assumes that the paser is currently positioned at the opening `{`\n    /// and advances the parser to the first character after the operator.\n    /// (Note that the operator may include a single additional `?`, which\n    /// makes the operator ungreedy.)\n    ///\n    /// The caller should include the concatenation that is being built. The\n    /// concatenation returned includes the repetition operator applied to the\n    /// last expression in the given concatenation.\n    #[inline(never)]\n    fn parse_counted_repetition(\n        &self,\n        mut concat: ast::Concat,\n    ) -> Result<ast::Concat> {\n        assert!(self.char() == '{');\n        let start = self.pos();\n        let ast = match concat.asts.pop() {\n            Some(ast) => ast,\n            None => {\n                return Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )\n            }\n        };\n        match ast {\n            Ast::Empty(_) | Ast::Flags(_) => {\n                return Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )\n            }\n            _ => {}\n        }\n        if !self.bump_and_bump_space() {\n            return Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ));\n        }\n        let count_start = specialize_err(\n            self.parse_decimal(),\n            ast::ErrorKind::DecimalEmpty,\n            ast::ErrorKind::RepetitionCountDecimalEmpty,\n        )?;\n        let mut range = ast::RepetitionRange::Exactly(count_start);\n        if self.is_eof() {\n            return Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ));\n        }\n        if self.char() == ',' {\n            if !self.bump_and_bump_space() {\n                return Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::RepetitionCountUnclosed,\n                ));\n            }\n            if self.char() != '}' {\n                let count_end = specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?;\n                range = ast::RepetitionRange::Bounded(count_start, count_end);\n            } else {\n                range = ast::RepetitionRange::AtLeast(count_start);\n            }\n        }\n        if self.is_eof() || self.char() != '}' {\n            return Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ));\n        }\n\n        let mut greedy = true;\n        if self.bump_and_bump_space() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n\n        let op_span = Span::new(start, self.pos());\n        if !range.is_valid() {\n            return Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            );\n        }\n        concat.asts.push(Ast::Repetition(ast::Repetition {\n            span: ast.span().with_end(self.pos()),\n            op: ast::RepetitionOp {\n                span: op_span,\n                kind: ast::RepetitionKind::Range(range),\n            },\n            greedy: greedy,\n            ast: Box::new(ast),\n        }));\n        Ok(concat)\n    }\n\n    /// Parse a group (which contains a sub-expression) or a set of flags.\n    ///\n    /// If a group was found, then it is returned with an empty AST. If a set\n    /// of flags is found, then that set is returned.\n    ///\n    /// The parser should be positioned at the opening parenthesis.\n    ///\n    /// This advances the parser to the character before the start of the\n    /// sub-expression (in the case of a group) or to the closing parenthesis\n    /// immediately following the set of flags.\n    ///\n    /// # Errors\n    ///\n    /// If flags are given and incorrectly specified, then a corresponding\n    /// error is returned.\n    ///\n    /// If a capture name is given and it is incorrectly specified, then a\n    /// corresponding error is returned.\n    #[inline(never)]\n    fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {\n        assert_eq!(self.char(), '(');\n        let open_span = self.span_char();\n        self.bump();\n        self.bump_space();\n        if self.is_lookaround_prefix() {\n            return Err(self.error(\n                Span::new(open_span.start, self.span().end),\n                ast::ErrorKind::UnsupportedLookAround,\n            ));\n        }\n        let inner_span = self.span();\n        if self.bump_if(\"?P<\") {\n            let capture_index = self.next_capture_index(open_span)?;\n            let cap = self.parse_capture_name(capture_index)?;\n            Ok(Either::Right(ast::Group {\n                span: open_span,\n                kind: ast::GroupKind::CaptureName(cap),\n                ast: Box::new(Ast::Empty(self.span())),\n            }))\n        } else if self.bump_if(\"?\") {\n            if self.is_eof() {\n                return Err(\n                    self.error(open_span, ast::ErrorKind::GroupUnclosed)\n                );\n            }\n            let flags = self.parse_flags()?;\n            let char_end = self.char();\n            self.bump();\n            if char_end == ')' {\n                // We don't allow empty flags, e.g., `(?)`. We instead\n                // interpret it as a repetition operator missing its argument.\n                if flags.items.is_empty() {\n                    return Err(self.error(\n                        inner_span,\n                        ast::ErrorKind::RepetitionMissing,\n                    ));\n                }\n                Ok(Either::Left(ast::SetFlags {\n                    span: Span { end: self.pos(), ..open_span },\n                    flags: flags,\n                }))\n            } else {\n                assert_eq!(char_end, ':');\n                Ok(Either::Right(ast::Group {\n                    span: open_span,\n                    kind: ast::GroupKind::NonCapturing(flags),\n                    ast: Box::new(Ast::Empty(self.span())),\n                }))\n            }\n        } else {\n            let capture_index = self.next_capture_index(open_span)?;\n            Ok(Either::Right(ast::Group {\n                span: open_span,\n                kind: ast::GroupKind::CaptureIndex(capture_index),\n                ast: Box::new(Ast::Empty(self.span())),\n            }))\n        }\n    }\n\n    /// Parses a capture group name. Assumes that the parser is positioned at\n    /// the first character in the name following the opening `<` (and may\n    /// possibly be EOF). This advances the parser to the first character\n    /// following the closing `>`.\n    ///\n    /// The caller must provide the capture index of the group for this name.\n    #[inline(never)]\n    fn parse_capture_name(\n        &self,\n        capture_index: u32,\n    ) -> Result<ast::CaptureName> {\n        if self.is_eof() {\n            return Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof));\n        }\n        let start = self.pos();\n        loop {\n            if self.char() == '>' {\n                break;\n            }\n            if !is_capture_char(self.char(), self.pos() == start) {\n                return Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::GroupNameInvalid,\n                ));\n            }\n            if !self.bump() {\n                break;\n            }\n        }\n        let end = self.pos();\n        if self.is_eof() {\n            return Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof));\n        }\n        assert_eq!(self.char(), '>');\n        self.bump();\n        let name = &self.pattern()[start.offset..end.offset];\n        if name.is_empty() {\n            return Err(self.error(\n                Span::new(start, start),\n                ast::ErrorKind::GroupNameEmpty,\n            ));\n        }\n        let capname = ast::CaptureName {\n            span: Span::new(start, end),\n            name: name.to_string(),\n            index: capture_index,\n        };\n        self.add_capture_name(&capname)?;\n        Ok(capname)\n    }\n\n    /// Parse a sequence of flags starting at the current character.\n    ///\n    /// This advances the parser to the character immediately following the\n    /// flags, which is guaranteed to be either `:` or `)`.\n    ///\n    /// # Errors\n    ///\n    /// If any flags are duplicated, then an error is returned.\n    ///\n    /// If the negation operator is used more than once, then an error is\n    /// returned.\n    ///\n    /// If no flags could be found or if the negation operation is not followed\n    /// by any flags, then an error is returned.\n    #[inline(never)]\n    fn parse_flags(&self) -> Result<ast::Flags> {\n        let mut flags = ast::Flags { span: self.span(), items: vec![] };\n        let mut last_was_negation = None;\n        while self.char() != ':' && self.char() != ')' {\n            if self.char() == '-' {\n                last_was_negation = Some(self.span_char());\n                let item = ast::FlagsItem {\n                    span: self.span_char(),\n                    kind: ast::FlagsItemKind::Negation,\n                };\n                if let Some(i) = flags.add_item(item) {\n                    return Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::FlagRepeatedNegation {\n                            original: flags.items[i].span,\n                        },\n                    ));\n                }\n            } else {\n                last_was_negation = None;\n                let item = ast::FlagsItem {\n                    span: self.span_char(),\n                    kind: ast::FlagsItemKind::Flag(self.parse_flag()?),\n                };\n                if let Some(i) = flags.add_item(item) {\n                    return Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::FlagDuplicate {\n                            original: flags.items[i].span,\n                        },\n                    ));\n                }\n            }\n            if !self.bump() {\n                return Err(\n                    self.error(self.span(), ast::ErrorKind::FlagUnexpectedEof)\n                );\n            }\n        }\n        if let Some(span) = last_was_negation {\n            return Err(self.error(span, ast::ErrorKind::FlagDanglingNegation));\n        }\n        flags.span.end = self.pos();\n        Ok(flags)\n    }\n\n    /// Parse the current character as a flag. Do not advance the parser.\n    ///\n    /// # Errors\n    ///\n    /// If the flag is not recognized, then an error is returned.\n    #[inline(never)]\n    fn parse_flag(&self) -> Result<ast::Flag> {\n        match self.char() {\n            'i' => Ok(ast::Flag::CaseInsensitive),\n            'm' => Ok(ast::Flag::MultiLine),\n            's' => Ok(ast::Flag::DotMatchesNewLine),\n            'U' => Ok(ast::Flag::SwapGreed),\n            'u' => Ok(ast::Flag::Unicode),\n            'x' => Ok(ast::Flag::IgnoreWhitespace),\n            _ => {\n                Err(self\n                    .error(self.span_char(), ast::ErrorKind::FlagUnrecognized))\n            }\n        }\n    }\n\n    /// Parse a primitive AST. e.g., A literal, non-set character class or\n    /// assertion.\n    ///\n    /// This assumes that the parser expects a primitive at the current\n    /// location. i.e., All other non-primitive cases have been handled.\n    /// For example, if the parser's position is at `|`, then `|` will be\n    /// treated as a literal (e.g., inside a character class).\n    ///\n    /// This advances the parser to the first character immediately following\n    /// the primitive.\n    fn parse_primitive(&self) -> Result<Primitive> {\n        match self.char() {\n            '\\\\' => self.parse_escape(),\n            '.' => {\n                let ast = Primitive::Dot(self.span_char());\n                self.bump();\n                Ok(ast)\n            }\n            '^' => {\n                let ast = Primitive::Assertion(ast::Assertion {\n                    span: self.span_char(),\n                    kind: ast::AssertionKind::StartLine,\n                });\n                self.bump();\n                Ok(ast)\n            }\n            '$' => {\n                let ast = Primitive::Assertion(ast::Assertion {\n                    span: self.span_char(),\n                    kind: ast::AssertionKind::EndLine,\n                });\n                self.bump();\n                Ok(ast)\n            }\n            c => {\n                let ast = Primitive::Literal(ast::Literal {\n                    span: self.span_char(),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: c,\n                });\n                self.bump();\n                Ok(ast)\n            }\n        }\n    }\n\n    /// Parse an escape sequence as a primitive AST.\n    ///\n    /// This assumes the parser is positioned at the start of the escape\n    /// sequence, i.e., `\\`. It advances the parser to the first position\n    /// immediately following the escape sequence.\n    #[inline(never)]\n    fn parse_escape(&self) -> Result<Primitive> {\n        assert_eq!(self.char(), '\\\\');\n        let start = self.pos();\n        if !self.bump() {\n            return Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::EscapeUnexpectedEof,\n            ));\n        }\n        let c = self.char();\n        // Put some of the more complicated routines into helpers.\n        match c {\n            '0'..='7' => {\n                if !self.parser().octal {\n                    return Err(self.error(\n                        Span::new(start, self.span_char().end),\n                        ast::ErrorKind::UnsupportedBackreference,\n                    ));\n                }\n                let mut lit = self.parse_octal();\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            '8'..='9' if !self.parser().octal => {\n                return Err(self.error(\n                    Span::new(start, self.span_char().end),\n                    ast::ErrorKind::UnsupportedBackreference,\n                ));\n            }\n            'x' | 'u' | 'U' => {\n                let mut lit = self.parse_hex()?;\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            'p' | 'P' => {\n                let mut cls = self.parse_unicode_class()?;\n                cls.span.start = start;\n                return Ok(Primitive::Unicode(cls));\n            }\n            'd' | 's' | 'w' | 'D' | 'S' | 'W' => {\n                let mut cls = self.parse_perl_class();\n                cls.span.start = start;\n                return Ok(Primitive::Perl(cls));\n            }\n            _ => {}\n        }\n\n        // Handle all of the one letter sequences inline.\n        self.bump();\n        let span = Span::new(start, self.pos());\n        if is_meta_character(c) {\n            return Ok(Primitive::Literal(ast::Literal {\n                span: span,\n                kind: ast::LiteralKind::Punctuation,\n                c: c,\n            }));\n        }\n        let special = |kind, c| {\n            Ok(Primitive::Literal(ast::Literal {\n                span: span,\n                kind: ast::LiteralKind::Special(kind),\n                c: c,\n            }))\n        };\n        match c {\n            'a' => special(ast::SpecialLiteralKind::Bell, '\\x07'),\n            'f' => special(ast::SpecialLiteralKind::FormFeed, '\\x0C'),\n            't' => special(ast::SpecialLiteralKind::Tab, '\\t'),\n            'n' => special(ast::SpecialLiteralKind::LineFeed, '\\n'),\n            'r' => special(ast::SpecialLiteralKind::CarriageReturn, '\\r'),\n            'v' => special(ast::SpecialLiteralKind::VerticalTab, '\\x0B'),\n            ' ' if self.ignore_whitespace() => {\n                special(ast::SpecialLiteralKind::Space, ' ')\n            }\n            'A' => Ok(Primitive::Assertion(ast::Assertion {\n                span: span,\n                kind: ast::AssertionKind::StartText,\n            })),\n            'z' => Ok(Primitive::Assertion(ast::Assertion {\n                span: span,\n                kind: ast::AssertionKind::EndText,\n            })),\n            'b' => Ok(Primitive::Assertion(ast::Assertion {\n                span: span,\n                kind: ast::AssertionKind::WordBoundary,\n            })),\n            'B' => Ok(Primitive::Assertion(ast::Assertion {\n                span: span,\n                kind: ast::AssertionKind::NotWordBoundary,\n            })),\n            _ => Err(self.error(span, ast::ErrorKind::EscapeUnrecognized)),\n        }\n    }\n\n    /// Parse an octal representation of a Unicode codepoint up to 3 digits\n    /// long. This expects the parser to be positioned at the first octal\n    /// digit and advances the parser to the first character immediately\n    /// following the octal number. This also assumes that parsing octal\n    /// escapes is enabled.\n    ///\n    /// Assuming the preconditions are met, this routine can never fail.\n    #[inline(never)]\n    fn parse_octal(&self) -> ast::Literal {\n        use std::char;\n        use std::u32;\n\n        assert!(self.parser().octal);\n        assert!('0' <= self.char() && self.char() <= '7');\n        let start = self.pos();\n        // Parse up to two more digits.\n        while self.bump()\n            && '0' <= self.char()\n            && self.char() <= '7'\n            && self.pos().offset - start.offset <= 2\n        {}\n        let end = self.pos();\n        let octal = &self.pattern()[start.offset..end.offset];\n        // Parsing the octal should never fail since the above guarantees a\n        // valid number.\n        let codepoint =\n            u32::from_str_radix(octal, 8).expect(\"valid octal number\");\n        // The max value for 3 digit octal is 0777 = 511 and [0, 511] has no\n        // invalid Unicode scalar values.\n        let c = char::from_u32(codepoint).expect(\"Unicode scalar value\");\n        ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c: c,\n        }\n    }\n\n    /// Parse a hex representation of a Unicode codepoint. This handles both\n    /// hex notations, i.e., `\\xFF` and `\\x{FFFF}`. This expects the parser to\n    /// be positioned at the `x`, `u` or `U` prefix. The parser is advanced to\n    /// the first character immediately following the hexadecimal literal.\n    #[inline(never)]\n    fn parse_hex(&self) -> Result<ast::Literal> {\n        assert!(\n            self.char() == 'x' || self.char() == 'u' || self.char() == 'U'\n        );\n\n        let hex_kind = match self.char() {\n            'x' => ast::HexLiteralKind::X,\n            'u' => ast::HexLiteralKind::UnicodeShort,\n            _ => ast::HexLiteralKind::UnicodeLong,\n        };\n        if !self.bump_and_bump_space() {\n            return Err(\n                self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof)\n            );\n        }\n        if self.char() == '{' {\n            self.parse_hex_brace(hex_kind)\n        } else {\n            self.parse_hex_digits(hex_kind)\n        }\n    }\n\n    /// Parse an N-digit hex representation of a Unicode codepoint. This\n    /// expects the parser to be positioned at the first digit and will advance\n    /// the parser to the first character immediately following the escape\n    /// sequence.\n    ///\n    /// The number of digits given must be 2 (for `\\xNN`), 4 (for `\\uNNNN`)\n    /// or 8 (for `\\UNNNNNNNN`).\n    #[inline(never)]\n    fn parse_hex_digits(\n        &self,\n        kind: ast::HexLiteralKind,\n    ) -> Result<ast::Literal> {\n        use std::char;\n        use std::u32;\n\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n\n        let start = self.pos();\n        for i in 0..kind.digits() {\n            if i > 0 && !self.bump_and_bump_space() {\n                return Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));\n            }\n            if !is_hex(self.char()) {\n                return Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::EscapeHexInvalidDigit,\n                ));\n            }\n            scratch.push(self.char());\n        }\n        // The final bump just moves the parser past the literal, which may\n        // be EOF.\n        self.bump_and_bump_space();\n        let end = self.pos();\n        let hex = scratch.as_str();\n        match u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) {\n            None => Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            )),\n            Some(c) => Ok(ast::Literal {\n                span: Span::new(start, end),\n                kind: ast::LiteralKind::HexFixed(kind),\n                c: c,\n            }),\n        }\n    }\n\n    /// Parse a hex representation of any Unicode scalar value. This expects\n    /// the parser to be positioned at the opening brace `{` and will advance\n    /// the parser to the first character following the closing brace `}`.\n    #[inline(never)]\n    fn parse_hex_brace(\n        &self,\n        kind: ast::HexLiteralKind,\n    ) -> Result<ast::Literal> {\n        use std::char;\n        use std::u32;\n\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n\n        let brace_pos = self.pos();\n        let start = self.span_char().end;\n        while self.bump_and_bump_space() && self.char() != '}' {\n            if !is_hex(self.char()) {\n                return Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::EscapeHexInvalidDigit,\n                ));\n            }\n            scratch.push(self.char());\n        }\n        if self.is_eof() {\n            return Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeUnexpectedEof,\n            ));\n        }\n        let end = self.pos();\n        let hex = scratch.as_str();\n        assert_eq!(self.char(), '}');\n        self.bump_and_bump_space();\n\n        if hex.is_empty() {\n            return Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeHexEmpty,\n            ));\n        }\n        match u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) {\n            None => Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            )),\n            Some(c) => Ok(ast::Literal {\n                span: Span::new(start, self.pos()),\n                kind: ast::LiteralKind::HexBrace(kind),\n                c: c,\n            }),\n        }\n    }\n\n    /// Parse a decimal number into a u32 while trimming leading and trailing\n    /// whitespace.\n    ///\n    /// This expects the parser to be positioned at the first position where\n    /// a decimal digit could occur. This will advance the parser to the byte\n    /// immediately following the last contiguous decimal digit.\n    ///\n    /// If no decimal digit could be found or if there was a problem parsing\n    /// the complete set of digits into a u32, then an error is returned.\n    fn parse_decimal(&self) -> Result<u32> {\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n\n        while !self.is_eof() && self.char().is_whitespace() {\n            self.bump();\n        }\n        let start = self.pos();\n        while !self.is_eof() && '0' <= self.char() && self.char() <= '9' {\n            scratch.push(self.char());\n            self.bump_and_bump_space();\n        }\n        let span = Span::new(start, self.pos());\n        while !self.is_eof() && self.char().is_whitespace() {\n            self.bump_and_bump_space();\n        }\n        let digits = scratch.as_str();\n        if digits.is_empty() {\n            return Err(self.error(span, ast::ErrorKind::DecimalEmpty));\n        }\n        match u32::from_str_radix(digits, 10).ok() {\n            Some(n) => Ok(n),\n            None => Err(self.error(span, ast::ErrorKind::DecimalInvalid)),\n        }\n    }\n\n    /// Parse a standard character class consisting primarily of characters or\n    /// character ranges, but can also contain nested character classes of\n    /// any type (sans `.`).\n    ///\n    /// This assumes the parser is positioned at the opening `[`. If parsing\n    /// is successful, then the parser is advanced to the position immediately\n    /// following the closing `]`.\n    #[inline(never)]\n    fn parse_set_class(&self) -> Result<ast::Class> {\n        assert_eq!(self.char(), '[');\n\n        let mut union =\n            ast::ClassSetUnion { span: self.span(), items: vec![] };\n        loop {\n            self.bump_space();\n            if self.is_eof() {\n                return Err(self.unclosed_class_error());\n            }\n            match self.char() {\n                '[' => {\n                    // If we've already parsed the opening bracket, then\n                    // attempt to treat this as the beginning of an ASCII\n                    // class. If ASCII class parsing fails, then the parser\n                    // backs up to `[`.\n                    if !self.parser().stack_class.borrow().is_empty() {\n                        if let Some(cls) = self.maybe_parse_ascii_class() {\n                            union.push(ast::ClassSetItem::Ascii(cls));\n                            continue;\n                        }\n                    }\n                    union = self.push_class_open(union)?;\n                }\n                ']' => match self.pop_class(union)? {\n                    Either::Left(nested_union) => {\n                        union = nested_union;\n                    }\n                    Either::Right(class) => return Ok(class),\n                },\n                '&' if self.peek() == Some('&') => {\n                    assert!(self.bump_if(\"&&\"));\n                    union = self.push_class_op(\n                        ast::ClassSetBinaryOpKind::Intersection,\n                        union,\n                    );\n                }\n                '-' if self.peek() == Some('-') => {\n                    assert!(self.bump_if(\"--\"));\n                    union = self.push_class_op(\n                        ast::ClassSetBinaryOpKind::Difference,\n                        union,\n                    );\n                }\n                '~' if self.peek() == Some('~') => {\n                    assert!(self.bump_if(\"~~\"));\n                    union = self.push_class_op(\n                        ast::ClassSetBinaryOpKind::SymmetricDifference,\n                        union,\n                    );\n                }\n                _ => {\n                    union.push(self.parse_set_class_range()?);\n                }\n            }\n        }\n    }\n\n    /// Parse a single primitive item in a character class set. The item to\n    /// be parsed can either be one of a simple literal character, a range\n    /// between two simple literal characters or a \"primitive\" character\n    /// class like \\w or \\p{Greek}.\n    ///\n    /// If an invalid escape is found, or if a character class is found where\n    /// a simple literal is expected (e.g., in a range), then an error is\n    /// returned.\n    #[inline(never)]\n    fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {\n        let prim1 = self.parse_set_class_item()?;\n        self.bump_space();\n        if self.is_eof() {\n            return Err(self.unclosed_class_error());\n        }\n        // If the next char isn't a `-`, then we don't have a range.\n        // There are two exceptions. If the char after a `-` is a `]`, then\n        // `-` is interpreted as a literal `-`. Alternatively, if the char\n        // after a `-` is a `-`, then `--` corresponds to a \"difference\"\n        // operation.\n        if self.char() != '-'\n            || self.peek_space() == Some(']')\n            || self.peek_space() == Some('-')\n        {\n            return prim1.into_class_set_item(self);\n        }\n        // OK, now we're parsing a range, so bump past the `-` and parse the\n        // second half of the range.\n        if !self.bump_and_bump_space() {\n            return Err(self.unclosed_class_error());\n        }\n        let prim2 = self.parse_set_class_item()?;\n        let range = ast::ClassSetRange {\n            span: Span::new(prim1.span().start, prim2.span().end),\n            start: prim1.into_class_literal(self)?,\n            end: prim2.into_class_literal(self)?,\n        };\n        if !range.is_valid() {\n            return Err(\n                self.error(range.span, ast::ErrorKind::ClassRangeInvalid)\n            );\n        }\n        Ok(ast::ClassSetItem::Range(range))\n    }\n\n    /// Parse a single item in a character class as a primitive, where the\n    /// primitive either consists of a verbatim literal or a single escape\n    /// sequence.\n    ///\n    /// This assumes the parser is positioned at the beginning of a primitive,\n    /// and advances the parser to the first position after the primitive if\n    /// successful.\n    ///\n    /// Note that it is the caller's responsibility to report an error if an\n    /// illegal primitive was parsed.\n    #[inline(never)]\n    fn parse_set_class_item(&self) -> Result<Primitive> {\n        if self.char() == '\\\\' {\n            self.parse_escape()\n        } else {\n            let x = Primitive::Literal(ast::Literal {\n                span: self.span_char(),\n                kind: ast::LiteralKind::Verbatim,\n                c: self.char(),\n            });\n            self.bump();\n            Ok(x)\n        }\n    }\n\n    /// Parses the opening of a character class set. This includes the opening\n    /// bracket along with `^` if present to indicate negation. This also\n    /// starts parsing the opening set of unioned items if applicable, since\n    /// there are special rules applied to certain characters in the opening\n    /// of a character class. For example, `[^]]` is the class of all\n    /// characters not equal to `]`. (`]` would need to be escaped in any other\n    /// position.) Similarly for `-`.\n    ///\n    /// In all cases, the op inside the returned `ast::ClassBracketed` is an\n    /// empty union. This empty union should be replaced with the actual item\n    /// when it is popped from the parser's stack.\n    ///\n    /// This assumes the parser is positioned at the opening `[` and advances\n    /// the parser to the first non-special byte of the character class.\n    ///\n    /// An error is returned if EOF is found.\n    #[inline(never)]\n    fn parse_set_class_open(\n        &self,\n    ) -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {\n        assert_eq!(self.char(), '[');\n        let start = self.pos();\n        if !self.bump_and_bump_space() {\n            return Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::ClassUnclosed,\n            ));\n        }\n\n        let negated = if self.char() != '^' {\n            false\n        } else {\n            if !self.bump_and_bump_space() {\n                return Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ));\n            }\n            true\n        };\n        // Accept any number of `-` as literal `-`.\n        let mut union =\n            ast::ClassSetUnion { span: self.span(), items: vec![] };\n        while self.char() == '-' {\n            union.push(ast::ClassSetItem::Literal(ast::Literal {\n                span: self.span_char(),\n                kind: ast::LiteralKind::Verbatim,\n                c: '-',\n            }));\n            if !self.bump_and_bump_space() {\n                return Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ));\n            }\n        }\n        // If `]` is the *first* char in a set, then interpret it as a literal\n        // `]`. That is, an empty class is impossible to write.\n        if union.items.is_empty() && self.char() == ']' {\n            union.push(ast::ClassSetItem::Literal(ast::Literal {\n                span: self.span_char(),\n                kind: ast::LiteralKind::Verbatim,\n                c: ']',\n            }));\n            if !self.bump_and_bump_space() {\n                return Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ));\n            }\n        }\n        let set = ast::ClassBracketed {\n            span: Span::new(start, self.pos()),\n            negated: negated,\n            kind: ast::ClassSet::union(ast::ClassSetUnion {\n                span: Span::new(union.span.start, union.span.start),\n                items: vec![],\n            }),\n        };\n        Ok((set, union))\n    }\n\n    /// Attempt to parse an ASCII character class, e.g., `[:alnum:]`.\n    ///\n    /// This assumes the parser is positioned at the opening `[`.\n    ///\n    /// If no valid ASCII character class could be found, then this does not\n    /// advance the parser and `None` is returned. Otherwise, the parser is\n    /// advanced to the first byte following the closing `]` and the\n    /// corresponding ASCII class is returned.\n    #[inline(never)]\n    fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {\n        // ASCII character classes are interesting from a parsing perspective\n        // because parsing cannot fail with any interesting error. For example,\n        // in order to use an ASCII character class, it must be enclosed in\n        // double brackets, e.g., `[[:alnum:]]`. Alternatively, you might think\n        // of it as \"ASCII character characters have the syntax `[:NAME:]`\n        // which can only appear within character brackets.\" This means that\n        // things like `[[:lower:]A]` are legal constructs.\n        //\n        // However, if one types an incorrect ASCII character class, e.g.,\n        // `[[:loower:]]`, then we treat that as a normal nested character\n        // class containing the characters `:elorw`. One might argue that we\n        // should return an error instead since the repeated colons give away\n        // the intent to write an ASCII class. But what if the user typed\n        // `[[:lower]]` instead? How can we tell that was intended to be an\n        // ASCII class and not just a normal nested class?\n        //\n        // Reasonable people can probably disagree over this, but for better\n        // or worse, we implement semantics that never fails at the expense\n        // of better failure modes.\n        assert_eq!(self.char(), '[');\n        // If parsing fails, then we back up the parser to this starting point.\n        let start = self.pos();\n        let mut negated = false;\n        if !self.bump() || self.char() != ':' {\n            self.parser().pos.set(start);\n            return None;\n        }\n        if !self.bump() {\n            self.parser().pos.set(start);\n            return None;\n        }\n        if self.char() == '^' {\n            negated = true;\n            if !self.bump() {\n                self.parser().pos.set(start);\n                return None;\n            }\n        }\n        let name_start = self.offset();\n        while self.char() != ':' && self.bump() {}\n        if self.is_eof() {\n            self.parser().pos.set(start);\n            return None;\n        }\n        let name = &self.pattern()[name_start..self.offset()];\n        if !self.bump_if(\":]\") {\n            self.parser().pos.set(start);\n            return None;\n        }\n        let kind = match ast::ClassAsciiKind::from_name(name) {\n            Some(kind) => kind,\n            None => {\n                self.parser().pos.set(start);\n                return None;\n            }\n        };\n        Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind: kind,\n            negated: negated,\n        })\n    }\n\n    /// Parse a Unicode class in either the single character notation, `\\pN`\n    /// or the multi-character bracketed notation, `\\p{Greek}`. This assumes\n    /// the parser is positioned at the `p` (or `P` for negation) and will\n    /// advance the parser to the character immediately following the class.\n    ///\n    /// Note that this does not check whether the class name is valid or not.\n    #[inline(never)]\n    fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {\n        assert!(self.char() == 'p' || self.char() == 'P');\n\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n\n        let negated = self.char() == 'P';\n        if !self.bump_and_bump_space() {\n            return Err(\n                self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof)\n            );\n        }\n        let (start, kind) = if self.char() == '{' {\n            let start = self.span_char().end;\n            while self.bump_and_bump_space() && self.char() != '}' {\n                scratch.push(self.char());\n            }\n            if self.is_eof() {\n                return Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));\n            }\n            assert_eq!(self.char(), '}');\n            self.bump();\n\n            let name = scratch.as_str();\n            if let Some(i) = name.find(\"!=\") {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::NotEqual,\n                        name: name[..i].to_string(),\n                        value: name[i + 2..].to_string(),\n                    },\n                )\n            } else if let Some(i) = name.find(':') {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::Colon,\n                        name: name[..i].to_string(),\n                        value: name[i + 1..].to_string(),\n                    },\n                )\n            } else if let Some(i) = name.find('=') {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::Equal,\n                        name: name[..i].to_string(),\n                        value: name[i + 1..].to_string(),\n                    },\n                )\n            } else {\n                (start, ast::ClassUnicodeKind::Named(name.to_string()))\n            }\n        } else {\n            let start = self.pos();\n            let c = self.char();\n            if c == '\\\\' {\n                return Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::UnicodeClassInvalid,\n                ));\n            }\n            self.bump_and_bump_space();\n            let kind = ast::ClassUnicodeKind::OneLetter(c);\n            (start, kind)\n        };\n        Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated: negated,\n            kind: kind,\n        })\n    }\n\n    /// Parse a Perl character class, e.g., `\\d` or `\\W`. This assumes the\n    /// parser is currently at a valid character class name and will be\n    /// advanced to the character immediately following the class.\n    #[inline(never)]\n    fn parse_perl_class(&self) -> ast::ClassPerl {\n        let c = self.char();\n        let span = self.span_char();\n        self.bump();\n        let (negated, kind) = match c {\n            'd' => (false, ast::ClassPerlKind::Digit),\n            'D' => (true, ast::ClassPerlKind::Digit),\n            's' => (false, ast::ClassPerlKind::Space),\n            'S' => (true, ast::ClassPerlKind::Space),\n            'w' => (false, ast::ClassPerlKind::Word),\n            'W' => (true, ast::ClassPerlKind::Word),\n            c => panic!(\"expected valid Perl class but got '{}'\", c),\n        };\n        ast::ClassPerl { span: span, kind: kind, negated: negated }\n    }\n}\n\n/// A type that traverses a fully parsed Ast and checks whether its depth\n/// exceeds the specified nesting limit. If it does, then an error is returned.\n#[derive(Debug)]\nstruct NestLimiter<'p, 's: 'p, P: 'p + 's> {\n    /// The parser that is checking the nest limit.\n    p: &'p ParserI<'s, P>,\n    /// The current depth while walking an Ast.\n    depth: u32,\n}\n\nimpl<'p, 's, P: Borrow<Parser>> NestLimiter<'p, 's, P> {\n    fn new(p: &'p ParserI<'s, P>) -> NestLimiter<'p, 's, P> {\n        NestLimiter { p: p, depth: 0 }\n    }\n\n    #[inline(never)]\n    fn check(self, ast: &Ast) -> Result<()> {\n        ast::visit(ast, self)\n    }\n\n    fn increment_depth(&mut self, span: &Span) -> Result<()> {\n        let new = self.depth.checked_add(1).ok_or_else(|| {\n            self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(::std::u32::MAX),\n            )\n        })?;\n        let limit = self.p.parser().nest_limit;\n        if new > limit {\n            return Err(self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(limit),\n            ));\n        }\n        self.depth = new;\n        Ok(())\n    }\n\n    fn decrement_depth(&mut self) {\n        // Assuming the correctness of the visitor, this should never drop\n        // below 0.\n        self.depth = self.depth.checked_sub(1).unwrap();\n    }\n}\n\nimpl<'p, 's, P: Borrow<Parser>> ast::Visitor for NestLimiter<'p, 's, P> {\n    type Output = ();\n    type Err = ast::Error;\n\n    fn finish(self) -> Result<()> {\n        Ok(())\n    }\n\n    fn visit_pre(&mut self, ast: &Ast) -> Result<()> {\n        let span = match *ast {\n            Ast::Empty(_)\n            | Ast::Flags(_)\n            | Ast::Literal(_)\n            | Ast::Dot(_)\n            | Ast::Assertion(_)\n            | Ast::Class(ast::Class::Unicode(_))\n            | Ast::Class(ast::Class::Perl(_)) => {\n                // These are all base cases, so we don't increment depth.\n                return Ok(());\n            }\n            Ast::Class(ast::Class::Bracketed(ref x)) => &x.span,\n            Ast::Repetition(ref x) => &x.span,\n            Ast::Group(ref x) => &x.span,\n            Ast::Alternation(ref x) => &x.span,\n            Ast::Concat(ref x) => &x.span,\n        };\n        self.increment_depth(span)\n    }\n\n    fn visit_post(&mut self, ast: &Ast) -> Result<()> {\n        match *ast {\n            Ast::Empty(_)\n            | Ast::Flags(_)\n            | Ast::Literal(_)\n            | Ast::Dot(_)\n            | Ast::Assertion(_)\n            | Ast::Class(ast::Class::Unicode(_))\n            | Ast::Class(ast::Class::Perl(_)) => {\n                // These are all base cases, so we don't decrement depth.\n                Ok(())\n            }\n            Ast::Class(ast::Class::Bracketed(_))\n            | Ast::Repetition(_)\n            | Ast::Group(_)\n            | Ast::Alternation(_)\n            | Ast::Concat(_) => {\n                self.decrement_depth();\n                Ok(())\n            }\n        }\n    }\n\n    fn visit_class_set_item_pre(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<()> {\n        let span = match *ast {\n            ast::ClassSetItem::Empty(_)\n            | ast::ClassSetItem::Literal(_)\n            | ast::ClassSetItem::Range(_)\n            | ast::ClassSetItem::Ascii(_)\n            | ast::ClassSetItem::Unicode(_)\n            | ast::ClassSetItem::Perl(_) => {\n                // These are all base cases, so we don't increment depth.\n                return Ok(());\n            }\n            ast::ClassSetItem::Bracketed(ref x) => &x.span,\n            ast::ClassSetItem::Union(ref x) => &x.span,\n        };\n        self.increment_depth(span)\n    }\n\n    fn visit_class_set_item_post(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<()> {\n        match *ast {\n            ast::ClassSetItem::Empty(_)\n            | ast::ClassSetItem::Literal(_)\n            | ast::ClassSetItem::Range(_)\n            | ast::ClassSetItem::Ascii(_)\n            | ast::ClassSetItem::Unicode(_)\n            | ast::ClassSetItem::Perl(_) => {\n                // These are all base cases, so we don't decrement depth.\n                Ok(())\n            }\n            ast::ClassSetItem::Bracketed(_) | ast::ClassSetItem::Union(_) => {\n                self.decrement_depth();\n                Ok(())\n            }\n        }\n    }\n\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        ast: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {\n        self.increment_depth(&ast.span)\n    }\n\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {\n        self.decrement_depth();\n        Ok(())\n    }\n}\n\n/// When the result is an error, transforms the ast::ErrorKind from the source\n/// Result into another one. This function is used to return clearer error\n/// messages when possible.\nfn specialize_err<T>(\n    result: Result<T>,\n    from: ast::ErrorKind,\n    to: ast::ErrorKind,\n) -> Result<T> {\n    if let Err(e) = result {\n        if e.kind == from {\n            Err(ast::Error { kind: to, pattern: e.pattern, span: e.span })\n        } else {\n            Err(e)\n        }\n    } else {\n        result\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use std::ops::Range;\n\n    use super::{Parser, ParserBuilder, ParserI, Primitive};\n    use ast::{self, Ast, Position, Span};\n\n    // Our own assert_eq, which has slightly better formatting (but honestly\n    // still kind of crappy).\n    macro_rules! assert_eq {\n        ($left:expr, $right:expr) => {{\n            match (&$left, &$right) {\n                (left_val, right_val) => {\n                    if !(*left_val == *right_val) {\n                        panic!(\n                            \"assertion failed: `(left == right)`\\n\\n\\\n                             left:  `{:?}`\\nright: `{:?}`\\n\\n\",\n                            left_val, right_val\n                        )\n                    }\n                }\n            }\n        }};\n    }\n\n    // We create these errors to compare with real ast::Errors in the tests.\n    // We define equality between TestError and ast::Error to disregard the\n    // pattern string in ast::Error, which is annoying to provide in tests.\n    #[derive(Clone, Debug)]\n    struct TestError {\n        span: Span,\n        kind: ast::ErrorKind,\n    }\n\n    impl PartialEq<ast::Error> for TestError {\n        fn eq(&self, other: &ast::Error) -> bool {\n            self.span == other.span && self.kind == other.kind\n        }\n    }\n\n    impl PartialEq<TestError> for ast::Error {\n        fn eq(&self, other: &TestError) -> bool {\n            self.span == other.span && self.kind == other.kind\n        }\n    }\n\n    fn s(str: &str) -> String {\n        str.to_string()\n    }\n\n    fn parser(pattern: &str) -> ParserI<Parser> {\n        ParserI::new(Parser::new(), pattern)\n    }\n\n    fn parser_octal(pattern: &str) -> ParserI<Parser> {\n        let parser = ParserBuilder::new().octal(true).build();\n        ParserI::new(parser, pattern)\n    }\n\n    fn parser_nest_limit(pattern: &str, nest_limit: u32) -> ParserI<Parser> {\n        let p = ParserBuilder::new().nest_limit(nest_limit).build();\n        ParserI::new(p, pattern)\n    }\n\n    fn parser_ignore_whitespace(pattern: &str) -> ParserI<Parser> {\n        let p = ParserBuilder::new().ignore_whitespace(true).build();\n        ParserI::new(p, pattern)\n    }\n\n    /// Short alias for creating a new span.\n    fn nspan(start: Position, end: Position) -> Span {\n        Span::new(start, end)\n    }\n\n    /// Short alias for creating a new position.\n    fn npos(offset: usize, line: usize, column: usize) -> Position {\n        Position::new(offset, line, column)\n    }\n\n    /// Create a new span from the given offset range. This assumes a single\n    /// line and sets the columns based on the offsets. i.e., This only works\n    /// out of the box for ASCII, which is fine for most tests.\n    fn span(range: Range<usize>) -> Span {\n        let start = Position::new(range.start, 1, range.start + 1);\n        let end = Position::new(range.end, 1, range.end + 1);\n        Span::new(start, end)\n    }\n\n    /// Create a new span for the corresponding byte range in the given string.\n    fn span_range(subject: &str, range: Range<usize>) -> Span {\n        let start = Position {\n            offset: range.start,\n            line: 1 + subject[..range.start].matches('\\n').count(),\n            column: 1 + subject[..range.start]\n                .chars()\n                .rev()\n                .position(|c| c == '\\n')\n                .unwrap_or(subject[..range.start].chars().count()),\n        };\n        let end = Position {\n            offset: range.end,\n            line: 1 + subject[..range.end].matches('\\n').count(),\n            column: 1 + subject[..range.end]\n                .chars()\n                .rev()\n                .position(|c| c == '\\n')\n                .unwrap_or(subject[..range.end].chars().count()),\n        };\n        Span::new(start, end)\n    }\n\n    /// Create a verbatim literal starting at the given position.\n    fn lit(c: char, start: usize) -> Ast {\n        lit_with(c, span(start..start + c.len_utf8()))\n    }\n\n    /// Create a punctuation literal starting at the given position.\n    fn punct_lit(c: char, span: Span) -> Ast {\n        Ast::Literal(ast::Literal {\n            span: span,\n            kind: ast::LiteralKind::Punctuation,\n            c: c,\n        })\n    }\n\n    /// Create a verbatim literal with the given span.\n    fn lit_with(c: char, span: Span) -> Ast {\n        Ast::Literal(ast::Literal {\n            span: span,\n            kind: ast::LiteralKind::Verbatim,\n            c: c,\n        })\n    }\n\n    /// Create a concatenation with the given range.\n    fn concat(range: Range<usize>, asts: Vec<Ast>) -> Ast {\n        concat_with(span(range), asts)\n    }\n\n    /// Create a concatenation with the given span.\n    fn concat_with(span: Span, asts: Vec<Ast>) -> Ast {\n        Ast::Concat(ast::Concat { span: span, asts: asts })\n    }\n\n    /// Create an alternation with the given span.\n    fn alt(range: Range<usize>, asts: Vec<Ast>) -> Ast {\n        Ast::Alternation(ast::Alternation { span: span(range), asts: asts })\n    }\n\n    /// Create a capturing group with the given span.\n    fn group(range: Range<usize>, index: u32, ast: Ast) -> Ast {\n        Ast::Group(ast::Group {\n            span: span(range),\n            kind: ast::GroupKind::CaptureIndex(index),\n            ast: Box::new(ast),\n        })\n    }\n\n    /// Create an ast::SetFlags.\n    ///\n    /// The given pattern should be the full pattern string. The range given\n    /// should correspond to the byte offsets where the flag set occurs.\n    ///\n    /// If negated is true, then the set is interpreted as beginning with a\n    /// negation.\n    fn flag_set(\n        pat: &str,\n        range: Range<usize>,\n        flag: ast::Flag,\n        negated: bool,\n    ) -> Ast {\n        let mut items = vec![ast::FlagsItem {\n            span: span_range(pat, (range.end - 2)..(range.end - 1)),\n            kind: ast::FlagsItemKind::Flag(flag),\n        }];\n        if negated {\n            items.insert(\n                0,\n                ast::FlagsItem {\n                    span: span_range(pat, (range.start + 2)..(range.end - 2)),\n                    kind: ast::FlagsItemKind::Negation,\n                },\n            );\n        }\n        Ast::Flags(ast::SetFlags {\n            span: span_range(pat, range.clone()),\n            flags: ast::Flags {\n                span: span_range(pat, (range.start + 2)..(range.end - 1)),\n                items: items,\n            },\n        })\n    }\n\n    #[test]\n    fn parse_nest_limit() {\n        // A nest limit of 0 still allows some types of regexes.\n        assert_eq!(\n            parser_nest_limit(\"\", 0).parse(),\n            Ok(Ast::Empty(span(0..0)))\n        );\n        assert_eq!(parser_nest_limit(\"a\", 0).parse(), Ok(lit('a', 0)));\n\n        // Test repetition operations, which require one level of nesting.\n        assert_eq!(\n            parser_nest_limit(\"a+\", 0).parse().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::NestLimitExceeded(0),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"a+\", 1).parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..2),\n                op: ast::RepetitionOp {\n                    span: span(1..2),\n                    kind: ast::RepetitionKind::OneOrMore,\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser_nest_limit(\"(a)+\", 1).parse().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::NestLimitExceeded(1),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"a+*\", 1).parse().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::NestLimitExceeded(1),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"a+*\", 2).parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..3),\n                op: ast::RepetitionOp {\n                    span: span(2..3),\n                    kind: ast::RepetitionKind::ZeroOrMore,\n                },\n                greedy: true,\n                ast: Box::new(Ast::Repetition(ast::Repetition {\n                    span: span(0..2),\n                    op: ast::RepetitionOp {\n                        span: span(1..2),\n                        kind: ast::RepetitionKind::OneOrMore,\n                    },\n                    greedy: true,\n                    ast: Box::new(lit('a', 0)),\n                })),\n            }))\n        );\n\n        // Test concatenations. A concatenation requires one level of nesting.\n        assert_eq!(\n            parser_nest_limit(\"ab\", 0).parse().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::NestLimitExceeded(0),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"ab\", 1).parse(),\n            Ok(concat(0..2, vec![lit('a', 0), lit('b', 1)]))\n        );\n        assert_eq!(\n            parser_nest_limit(\"abc\", 1).parse(),\n            Ok(concat(0..3, vec![lit('a', 0), lit('b', 1), lit('c', 2)]))\n        );\n\n        // Test alternations. An alternation requires one level of nesting.\n        assert_eq!(\n            parser_nest_limit(\"a|b\", 0).parse().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::NestLimitExceeded(0),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"a|b\", 1).parse(),\n            Ok(alt(0..3, vec![lit('a', 0), lit('b', 2)]))\n        );\n        assert_eq!(\n            parser_nest_limit(\"a|b|c\", 1).parse(),\n            Ok(alt(0..5, vec![lit('a', 0), lit('b', 2), lit('c', 4)]))\n        );\n\n        // Test character classes. Classes form their own mini-recursive\n        // syntax!\n        assert_eq!(\n            parser_nest_limit(\"[a]\", 0).parse().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::NestLimitExceeded(0),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"[a]\", 1).parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..3),\n                negated: false,\n                kind: ast::ClassSet::Item(ast::ClassSetItem::Literal(\n                    ast::Literal {\n                        span: span(1..2),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: 'a',\n                    }\n                )),\n            })))\n        );\n        assert_eq!(\n            parser_nest_limit(\"[ab]\", 1).parse().unwrap_err(),\n            TestError {\n                span: span(1..3),\n                kind: ast::ErrorKind::NestLimitExceeded(1),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"[ab[cd]]\", 2).parse().unwrap_err(),\n            TestError {\n                span: span(3..7),\n                kind: ast::ErrorKind::NestLimitExceeded(2),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"[ab[cd]]\", 3).parse().unwrap_err(),\n            TestError {\n                span: span(4..6),\n                kind: ast::ErrorKind::NestLimitExceeded(3),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"[a--b]\", 1).parse().unwrap_err(),\n            TestError {\n                span: span(1..5),\n                kind: ast::ErrorKind::NestLimitExceeded(1),\n            }\n        );\n        assert_eq!(\n            parser_nest_limit(\"[a--bc]\", 2).parse().unwrap_err(),\n            TestError {\n                span: span(4..6),\n                kind: ast::ErrorKind::NestLimitExceeded(2),\n            }\n        );\n    }\n\n    #[test]\n    fn parse_comments() {\n        let pat = \"(?x)\n# This is comment 1.\nfoo # This is comment 2.\n  # This is comment 3.\nbar\n# This is comment 4.\";\n        let astc = parser(pat).parse_with_comments().unwrap();\n        assert_eq!(\n            astc.ast,\n            concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    lit_with('f', span_range(pat, 26..27)),\n                    lit_with('o', span_range(pat, 27..28)),\n                    lit_with('o', span_range(pat, 28..29)),\n                    lit_with('b', span_range(pat, 74..75)),\n                    lit_with('a', span_range(pat, 75..76)),\n                    lit_with('r', span_range(pat, 76..77)),\n                ]\n            )\n        );\n        assert_eq!(\n            astc.comments,\n            vec![\n                ast::Comment {\n                    span: span_range(pat, 5..26),\n                    comment: s(\" This is comment 1.\"),\n                },\n                ast::Comment {\n                    span: span_range(pat, 30..51),\n                    comment: s(\" This is comment 2.\"),\n                },\n                ast::Comment {\n                    span: span_range(pat, 53..74),\n                    comment: s(\" This is comment 3.\"),\n                },\n                ast::Comment {\n                    span: span_range(pat, 78..98),\n                    comment: s(\" This is comment 4.\"),\n                },\n            ]\n        );\n    }\n\n    #[test]\n    fn parse_holistic() {\n        assert_eq!(parser(\"]\").parse(), Ok(lit(']', 0)));\n        assert_eq!(\n            parser(r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\").parse(),\n            Ok(concat(\n                0..36,\n                vec![\n                    punct_lit('\\\\', span(0..2)),\n                    punct_lit('.', span(2..4)),\n                    punct_lit('+', span(4..6)),\n                    punct_lit('*', span(6..8)),\n                    punct_lit('?', span(8..10)),\n                    punct_lit('(', span(10..12)),\n                    punct_lit(')', span(12..14)),\n                    punct_lit('|', span(14..16)),\n                    punct_lit('[', span(16..18)),\n                    punct_lit(']', span(18..20)),\n                    punct_lit('{', span(20..22)),\n                    punct_lit('}', span(22..24)),\n                    punct_lit('^', span(24..26)),\n                    punct_lit('$', span(26..28)),\n                    punct_lit('#', span(28..30)),\n                    punct_lit('&', span(30..32)),\n                    punct_lit('-', span(32..34)),\n                    punct_lit('~', span(34..36)),\n                ]\n            ))\n        );\n    }\n\n    #[test]\n    fn parse_ignore_whitespace() {\n        // Test that basic whitespace insensitivity works.\n        let pat = \"(?x)a b\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                nspan(npos(0, 1, 1), npos(7, 1, 8)),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    lit_with('a', nspan(npos(4, 1, 5), npos(5, 1, 6))),\n                    lit_with('b', nspan(npos(6, 1, 7), npos(7, 1, 8))),\n                ]\n            ))\n        );\n\n        // Test that we can toggle whitespace insensitivity.\n        let pat = \"(?x)a b(?-x)a b\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                nspan(npos(0, 1, 1), npos(15, 1, 16)),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    lit_with('a', nspan(npos(4, 1, 5), npos(5, 1, 6))),\n                    lit_with('b', nspan(npos(6, 1, 7), npos(7, 1, 8))),\n                    flag_set(pat, 7..12, ast::Flag::IgnoreWhitespace, true),\n                    lit_with('a', nspan(npos(12, 1, 13), npos(13, 1, 14))),\n                    lit_with(' ', nspan(npos(13, 1, 14), npos(14, 1, 15))),\n                    lit_with('b', nspan(npos(14, 1, 15), npos(15, 1, 16))),\n                ]\n            ))\n        );\n\n        // Test that nesting whitespace insensitive flags works.\n        let pat = \"a (?x:a )a \";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..11),\n                vec![\n                    lit_with('a', span_range(pat, 0..1)),\n                    lit_with(' ', span_range(pat, 1..2)),\n                    Ast::Group(ast::Group {\n                        span: span_range(pat, 2..9),\n                        kind: ast::GroupKind::NonCapturing(ast::Flags {\n                            span: span_range(pat, 4..5),\n                            items: vec![ast::FlagsItem {\n                                span: span_range(pat, 4..5),\n                                kind: ast::FlagsItemKind::Flag(\n                                    ast::Flag::IgnoreWhitespace\n                                ),\n                            },],\n                        }),\n                        ast: Box::new(lit_with('a', span_range(pat, 6..7))),\n                    }),\n                    lit_with('a', span_range(pat, 9..10)),\n                    lit_with(' ', span_range(pat, 10..11)),\n                ]\n            ))\n        );\n\n        // Test that whitespace after an opening paren is insignificant.\n        let pat = \"(?x)( ?P<foo> a )\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    Ast::Group(ast::Group {\n                        span: span_range(pat, 4..pat.len()),\n                        kind: ast::GroupKind::CaptureName(ast::CaptureName {\n                            span: span_range(pat, 9..12),\n                            name: s(\"foo\"),\n                            index: 1,\n                        }),\n                        ast: Box::new(lit_with('a', span_range(pat, 14..15))),\n                    }),\n                ]\n            ))\n        );\n        let pat = \"(?x)(  a )\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    Ast::Group(ast::Group {\n                        span: span_range(pat, 4..pat.len()),\n                        kind: ast::GroupKind::CaptureIndex(1),\n                        ast: Box::new(lit_with('a', span_range(pat, 7..8))),\n                    }),\n                ]\n            ))\n        );\n        let pat = \"(?x)(  ?:  a )\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    Ast::Group(ast::Group {\n                        span: span_range(pat, 4..pat.len()),\n                        kind: ast::GroupKind::NonCapturing(ast::Flags {\n                            span: span_range(pat, 8..8),\n                            items: vec![],\n                        }),\n                        ast: Box::new(lit_with('a', span_range(pat, 11..12))),\n                    }),\n                ]\n            ))\n        );\n        let pat = r\"(?x)\\x { 53 }\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    Ast::Literal(ast::Literal {\n                        span: span(4..13),\n                        kind: ast::LiteralKind::HexBrace(\n                            ast::HexLiteralKind::X\n                        ),\n                        c: 'S',\n                    }),\n                ]\n            ))\n        );\n\n        // Test that whitespace after an escape is OK.\n        let pat = r\"(?x)\\ \";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    flag_set(pat, 0..4, ast::Flag::IgnoreWhitespace, false),\n                    Ast::Literal(ast::Literal {\n                        span: span_range(pat, 4..6),\n                        kind: ast::LiteralKind::Special(\n                            ast::SpecialLiteralKind::Space\n                        ),\n                        c: ' ',\n                    }),\n                ]\n            ))\n        );\n        // ... but only when `x` mode is enabled.\n        let pat = r\"\\ \";\n        assert_eq!(\n            parser(pat).parse().unwrap_err(),\n            TestError {\n                span: span_range(pat, 0..2),\n                kind: ast::ErrorKind::EscapeUnrecognized,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_newlines() {\n        let pat = \".\\n.\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..3),\n                vec![\n                    Ast::Dot(span_range(pat, 0..1)),\n                    lit_with('\\n', span_range(pat, 1..2)),\n                    Ast::Dot(span_range(pat, 2..3)),\n                ]\n            ))\n        );\n\n        let pat = \"foobar\\nbaz\\nquux\\n\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(concat_with(\n                span_range(pat, 0..pat.len()),\n                vec![\n                    lit_with('f', nspan(npos(0, 1, 1), npos(1, 1, 2))),\n                    lit_with('o', nspan(npos(1, 1, 2), npos(2, 1, 3))),\n                    lit_with('o', nspan(npos(2, 1, 3), npos(3, 1, 4))),\n                    lit_with('b', nspan(npos(3, 1, 4), npos(4, 1, 5))),\n                    lit_with('a', nspan(npos(4, 1, 5), npos(5, 1, 6))),\n                    lit_with('r', nspan(npos(5, 1, 6), npos(6, 1, 7))),\n                    lit_with('\\n', nspan(npos(6, 1, 7), npos(7, 2, 1))),\n                    lit_with('b', nspan(npos(7, 2, 1), npos(8, 2, 2))),\n                    lit_with('a', nspan(npos(8, 2, 2), npos(9, 2, 3))),\n                    lit_with('z', nspan(npos(9, 2, 3), npos(10, 2, 4))),\n                    lit_with('\\n', nspan(npos(10, 2, 4), npos(11, 3, 1))),\n                    lit_with('q', nspan(npos(11, 3, 1), npos(12, 3, 2))),\n                    lit_with('u', nspan(npos(12, 3, 2), npos(13, 3, 3))),\n                    lit_with('u', nspan(npos(13, 3, 3), npos(14, 3, 4))),\n                    lit_with('x', nspan(npos(14, 3, 4), npos(15, 3, 5))),\n                    lit_with('\\n', nspan(npos(15, 3, 5), npos(16, 4, 1))),\n                ]\n            ))\n        );\n    }\n\n    #[test]\n    fn parse_uncounted_repetition() {\n        assert_eq!(\n            parser(r\"a*\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..2),\n                op: ast::RepetitionOp {\n                    span: span(1..2),\n                    kind: ast::RepetitionKind::ZeroOrMore,\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a+\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..2),\n                op: ast::RepetitionOp {\n                    span: span(1..2),\n                    kind: ast::RepetitionKind::OneOrMore,\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"a?\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..2),\n                op: ast::RepetitionOp {\n                    span: span(1..2),\n                    kind: ast::RepetitionKind::ZeroOrOne,\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a??\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..3),\n                op: ast::RepetitionOp {\n                    span: span(1..3),\n                    kind: ast::RepetitionKind::ZeroOrOne,\n                },\n                greedy: false,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a?\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..2),\n                op: ast::RepetitionOp {\n                    span: span(1..2),\n                    kind: ast::RepetitionKind::ZeroOrOne,\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a?b\").parse(),\n            Ok(concat(\n                0..3,\n                vec![\n                    Ast::Repetition(ast::Repetition {\n                        span: span(0..2),\n                        op: ast::RepetitionOp {\n                            span: span(1..2),\n                            kind: ast::RepetitionKind::ZeroOrOne,\n                        },\n                        greedy: true,\n                        ast: Box::new(lit('a', 0)),\n                    }),\n                    lit('b', 2),\n                ]\n            ))\n        );\n        assert_eq!(\n            parser(r\"a??b\").parse(),\n            Ok(concat(\n                0..4,\n                vec![\n                    Ast::Repetition(ast::Repetition {\n                        span: span(0..3),\n                        op: ast::RepetitionOp {\n                            span: span(1..3),\n                            kind: ast::RepetitionKind::ZeroOrOne,\n                        },\n                        greedy: false,\n                        ast: Box::new(lit('a', 0)),\n                    }),\n                    lit('b', 3),\n                ]\n            ))\n        );\n        assert_eq!(\n            parser(r\"ab?\").parse(),\n            Ok(concat(\n                0..3,\n                vec![\n                    lit('a', 0),\n                    Ast::Repetition(ast::Repetition {\n                        span: span(1..3),\n                        op: ast::RepetitionOp {\n                            span: span(2..3),\n                            kind: ast::RepetitionKind::ZeroOrOne,\n                        },\n                        greedy: true,\n                        ast: Box::new(lit('b', 1)),\n                    }),\n                ]\n            ))\n        );\n        assert_eq!(\n            parser(r\"(ab)?\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..5),\n                op: ast::RepetitionOp {\n                    span: span(4..5),\n                    kind: ast::RepetitionKind::ZeroOrOne,\n                },\n                greedy: true,\n                ast: Box::new(group(\n                    0..4,\n                    1,\n                    concat(1..3, vec![lit('a', 1), lit('b', 2),])\n                )),\n            }))\n        );\n        assert_eq!(\n            parser(r\"|a?\").parse(),\n            Ok(alt(\n                0..3,\n                vec![\n                    Ast::Empty(span(0..0)),\n                    Ast::Repetition(ast::Repetition {\n                        span: span(1..3),\n                        op: ast::RepetitionOp {\n                            span: span(2..3),\n                            kind: ast::RepetitionKind::ZeroOrOne,\n                        },\n                        greedy: true,\n                        ast: Box::new(lit('a', 1)),\n                    }),\n                ]\n            ))\n        );\n\n        assert_eq!(\n            parser(r\"*\").parse().unwrap_err(),\n            TestError {\n                span: span(0..0),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?i)*\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"(*)\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?:?)\").parse().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"+\").parse().unwrap_err(),\n            TestError {\n                span: span(0..0),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"?\").parse().unwrap_err(),\n            TestError {\n                span: span(0..0),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?)\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"|*\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"|+\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"|?\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_counted_repetition() {\n        assert_eq!(\n            parser(r\"a{5}\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..4),\n                op: ast::RepetitionOp {\n                    span: span(1..4),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Exactly(5)\n                    ),\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a{5,}\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..5),\n                op: ast::RepetitionOp {\n                    span: span(1..5),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::AtLeast(5)\n                    ),\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a{5,9}\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..6),\n                op: ast::RepetitionOp {\n                    span: span(1..6),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Bounded(5, 9)\n                    ),\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a{5}?\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..5),\n                op: ast::RepetitionOp {\n                    span: span(1..5),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Exactly(5)\n                    ),\n                },\n                greedy: false,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"ab{5}\").parse(),\n            Ok(concat(\n                0..5,\n                vec![\n                    lit('a', 0),\n                    Ast::Repetition(ast::Repetition {\n                        span: span(1..5),\n                        op: ast::RepetitionOp {\n                            span: span(2..5),\n                            kind: ast::RepetitionKind::Range(\n                                ast::RepetitionRange::Exactly(5)\n                            ),\n                        },\n                        greedy: true,\n                        ast: Box::new(lit('b', 1)),\n                    }),\n                ]\n            ))\n        );\n        assert_eq!(\n            parser(r\"ab{5}c\").parse(),\n            Ok(concat(\n                0..6,\n                vec![\n                    lit('a', 0),\n                    Ast::Repetition(ast::Repetition {\n                        span: span(1..5),\n                        op: ast::RepetitionOp {\n                            span: span(2..5),\n                            kind: ast::RepetitionKind::Range(\n                                ast::RepetitionRange::Exactly(5)\n                            ),\n                        },\n                        greedy: true,\n                        ast: Box::new(lit('b', 1)),\n                    }),\n                    lit('c', 5),\n                ]\n            ))\n        );\n\n        assert_eq!(\n            parser(r\"a{ 5 }\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..6),\n                op: ast::RepetitionOp {\n                    span: span(1..6),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Exactly(5)\n                    ),\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser(r\"a{ 5 , 9 }\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..10),\n                op: ast::RepetitionOp {\n                    span: span(1..10),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Bounded(5, 9)\n                    ),\n                },\n                greedy: true,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n        assert_eq!(\n            parser_ignore_whitespace(r\"a{5,9} ?\").parse(),\n            Ok(Ast::Repetition(ast::Repetition {\n                span: span(0..8),\n                op: ast::RepetitionOp {\n                    span: span(1..8),\n                    kind: ast::RepetitionKind::Range(\n                        ast::RepetitionRange::Bounded(5, 9)\n                    ),\n                },\n                greedy: false,\n                ast: Box::new(lit('a', 0)),\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"(?i){0}\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?m){1,1}\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{]}\").parse().unwrap_err(),\n            TestError {\n                span: span(2..2),\n                kind: ast::ErrorKind::RepetitionCountDecimalEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{1,]}\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::RepetitionCountDecimalEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{\").parse().unwrap_err(),\n            TestError {\n                span: span(1..2),\n                kind: ast::ErrorKind::RepetitionCountUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{}\").parse().unwrap_err(),\n            TestError {\n                span: span(2..2),\n                kind: ast::ErrorKind::RepetitionCountDecimalEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{a\").parse().unwrap_err(),\n            TestError {\n                span: span(2..2),\n                kind: ast::ErrorKind::RepetitionCountDecimalEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9999999999}\").parse().unwrap_err(),\n            TestError {\n                span: span(2..12),\n                kind: ast::ErrorKind::DecimalInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9\").parse().unwrap_err(),\n            TestError {\n                span: span(1..3),\n                kind: ast::ErrorKind::RepetitionCountUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9,a\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::RepetitionCountDecimalEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9,9999999999}\").parse().unwrap_err(),\n            TestError {\n                span: span(4..14),\n                kind: ast::ErrorKind::DecimalInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9,\").parse().unwrap_err(),\n            TestError {\n                span: span(1..4),\n                kind: ast::ErrorKind::RepetitionCountUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{9,11\").parse().unwrap_err(),\n            TestError {\n                span: span(1..6),\n                kind: ast::ErrorKind::RepetitionCountUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(r\"a{2,1}\").parse().unwrap_err(),\n            TestError {\n                span: span(1..6),\n                kind: ast::ErrorKind::RepetitionCountInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"{5}\").parse().unwrap_err(),\n            TestError {\n                span: span(0..0),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n        assert_eq!(\n            parser(r\"|{5}\").parse().unwrap_err(),\n            TestError {\n                span: span(1..1),\n                kind: ast::ErrorKind::RepetitionMissing,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_alternate() {\n        assert_eq!(\n            parser(r\"a|b\").parse(),\n            Ok(Ast::Alternation(ast::Alternation {\n                span: span(0..3),\n                asts: vec![lit('a', 0), lit('b', 2)],\n            }))\n        );\n        assert_eq!(\n            parser(r\"(a|b)\").parse(),\n            Ok(group(\n                0..5,\n                1,\n                Ast::Alternation(ast::Alternation {\n                    span: span(1..4),\n                    asts: vec![lit('a', 1), lit('b', 3)],\n                })\n            ))\n        );\n\n        assert_eq!(\n            parser(r\"a|b|c\").parse(),\n            Ok(Ast::Alternation(ast::Alternation {\n                span: span(0..5),\n                asts: vec![lit('a', 0), lit('b', 2), lit('c', 4)],\n            }))\n        );\n        assert_eq!(\n            parser(r\"ax|by|cz\").parse(),\n            Ok(Ast::Alternation(ast::Alternation {\n                span: span(0..8),\n                asts: vec![\n                    concat(0..2, vec![lit('a', 0), lit('x', 1)]),\n                    concat(3..5, vec![lit('b', 3), lit('y', 4)]),\n                    concat(6..8, vec![lit('c', 6), lit('z', 7)]),\n                ],\n            }))\n        );\n        assert_eq!(\n            parser(r\"(ax|by|cz)\").parse(),\n            Ok(group(\n                0..10,\n                1,\n                Ast::Alternation(ast::Alternation {\n                    span: span(1..9),\n                    asts: vec![\n                        concat(1..3, vec![lit('a', 1), lit('x', 2)]),\n                        concat(4..6, vec![lit('b', 4), lit('y', 5)]),\n                        concat(7..9, vec![lit('c', 7), lit('z', 8)]),\n                    ],\n                })\n            ))\n        );\n        assert_eq!(\n            parser(r\"(ax|(by|(cz)))\").parse(),\n            Ok(group(\n                0..14,\n                1,\n                alt(\n                    1..13,\n                    vec![\n                        concat(1..3, vec![lit('a', 1), lit('x', 2)]),\n                        group(\n                            4..13,\n                            2,\n                            alt(\n                                5..12,\n                                vec![\n                                    concat(\n                                        5..7,\n                                        vec![lit('b', 5), lit('y', 6)]\n                                    ),\n                                    group(\n                                        8..12,\n                                        3,\n                                        concat(\n                                            9..11,\n                                            vec![lit('c', 9), lit('z', 10),]\n                                        )\n                                    ),\n                                ]\n                            )\n                        ),\n                    ]\n                )\n            ))\n        );\n\n        assert_eq!(\n            parser(r\"|\").parse(),\n            Ok(alt(\n                0..1,\n                vec![Ast::Empty(span(0..0)), Ast::Empty(span(1..1)),]\n            ))\n        );\n        assert_eq!(\n            parser(r\"||\").parse(),\n            Ok(alt(\n                0..2,\n                vec![\n                    Ast::Empty(span(0..0)),\n                    Ast::Empty(span(1..1)),\n                    Ast::Empty(span(2..2)),\n                ]\n            ))\n        );\n        assert_eq!(\n            parser(r\"a|\").parse(),\n            Ok(alt(0..2, vec![lit('a', 0), Ast::Empty(span(2..2)),]))\n        );\n        assert_eq!(\n            parser(r\"|a\").parse(),\n            Ok(alt(0..2, vec![Ast::Empty(span(0..0)), lit('a', 1),]))\n        );\n\n        assert_eq!(\n            parser(r\"(|)\").parse(),\n            Ok(group(\n                0..3,\n                1,\n                alt(\n                    1..2,\n                    vec![Ast::Empty(span(1..1)), Ast::Empty(span(2..2)),]\n                )\n            ))\n        );\n        assert_eq!(\n            parser(r\"(a|)\").parse(),\n            Ok(group(\n                0..4,\n                1,\n                alt(1..3, vec![lit('a', 1), Ast::Empty(span(3..3)),])\n            ))\n        );\n        assert_eq!(\n            parser(r\"(|a)\").parse(),\n            Ok(group(\n                0..4,\n                1,\n                alt(1..3, vec![Ast::Empty(span(1..1)), lit('a', 2),])\n            ))\n        );\n\n        assert_eq!(\n            parser(r\"a|b)\").parse().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::GroupUnopened,\n            }\n        );\n        assert_eq!(\n            parser(r\"(a|b\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnclosed,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_unsupported_lookaround() {\n        assert_eq!(\n            parser(r\"(?=a)\").parse().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::UnsupportedLookAround,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?!a)\").parse().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::UnsupportedLookAround,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?<=a)\").parse().unwrap_err(),\n            TestError {\n                span: span(0..4),\n                kind: ast::ErrorKind::UnsupportedLookAround,\n            }\n        );\n        assert_eq!(\n            parser(r\"(?<!a)\").parse().unwrap_err(),\n            TestError {\n                span: span(0..4),\n                kind: ast::ErrorKind::UnsupportedLookAround,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_group() {\n        assert_eq!(\n            parser(\"(?i)\").parse(),\n            Ok(Ast::Flags(ast::SetFlags {\n                span: span(0..4),\n                flags: ast::Flags {\n                    span: span(2..3),\n                    items: vec![ast::FlagsItem {\n                        span: span(2..3),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::CaseInsensitive\n                        ),\n                    }],\n                },\n            }))\n        );\n        assert_eq!(\n            parser(\"(?iU)\").parse(),\n            Ok(Ast::Flags(ast::SetFlags {\n                span: span(0..5),\n                flags: ast::Flags {\n                    span: span(2..4),\n                    items: vec![\n                        ast::FlagsItem {\n                            span: span(2..3),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::CaseInsensitive\n                            ),\n                        },\n                        ast::FlagsItem {\n                            span: span(3..4),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::SwapGreed\n                            ),\n                        },\n                    ],\n                },\n            }))\n        );\n        assert_eq!(\n            parser(\"(?i-U)\").parse(),\n            Ok(Ast::Flags(ast::SetFlags {\n                span: span(0..6),\n                flags: ast::Flags {\n                    span: span(2..5),\n                    items: vec![\n                        ast::FlagsItem {\n                            span: span(2..3),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::CaseInsensitive\n                            ),\n                        },\n                        ast::FlagsItem {\n                            span: span(3..4),\n                            kind: ast::FlagsItemKind::Negation,\n                        },\n                        ast::FlagsItem {\n                            span: span(4..5),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::SwapGreed\n                            ),\n                        },\n                    ],\n                },\n            }))\n        );\n\n        assert_eq!(\n            parser(\"()\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..2),\n                kind: ast::GroupKind::CaptureIndex(1),\n                ast: Box::new(Ast::Empty(span(1..1))),\n            }))\n        );\n        assert_eq!(\n            parser(\"(a)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..3),\n                kind: ast::GroupKind::CaptureIndex(1),\n                ast: Box::new(lit('a', 1)),\n            }))\n        );\n        assert_eq!(\n            parser(\"(())\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..4),\n                kind: ast::GroupKind::CaptureIndex(1),\n                ast: Box::new(Ast::Group(ast::Group {\n                    span: span(1..3),\n                    kind: ast::GroupKind::CaptureIndex(2),\n                    ast: Box::new(Ast::Empty(span(2..2))),\n                })),\n            }))\n        );\n\n        assert_eq!(\n            parser(\"(?:a)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..5),\n                kind: ast::GroupKind::NonCapturing(ast::Flags {\n                    span: span(2..2),\n                    items: vec![],\n                }),\n                ast: Box::new(lit('a', 3)),\n            }))\n        );\n\n        assert_eq!(\n            parser(\"(?i:a)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..6),\n                kind: ast::GroupKind::NonCapturing(ast::Flags {\n                    span: span(2..3),\n                    items: vec![ast::FlagsItem {\n                        span: span(2..3),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::CaseInsensitive\n                        ),\n                    },],\n                }),\n                ast: Box::new(lit('a', 4)),\n            }))\n        );\n        assert_eq!(\n            parser(\"(?i-U:a)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..8),\n                kind: ast::GroupKind::NonCapturing(ast::Flags {\n                    span: span(2..5),\n                    items: vec![\n                        ast::FlagsItem {\n                            span: span(2..3),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::CaseInsensitive\n                            ),\n                        },\n                        ast::FlagsItem {\n                            span: span(3..4),\n                            kind: ast::FlagsItemKind::Negation,\n                        },\n                        ast::FlagsItem {\n                            span: span(4..5),\n                            kind: ast::FlagsItemKind::Flag(\n                                ast::Flag::SwapGreed\n                            ),\n                        },\n                    ],\n                }),\n                ast: Box::new(lit('a', 6)),\n            }))\n        );\n\n        assert_eq!(\n            parser(\"(\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"(?\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P\").parse().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::FlagUnrecognized,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::GroupNameUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(\"(a\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"(()\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\")\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::GroupUnopened,\n            }\n        );\n        assert_eq!(\n            parser(\"a)\").parse().unwrap_err(),\n            TestError {\n                span: span(1..2),\n                kind: ast::ErrorKind::GroupUnopened,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_capture_name() {\n        assert_eq!(\n            parser(\"(?P<a>z)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..8),\n                kind: ast::GroupKind::CaptureName(ast::CaptureName {\n                    span: span(4..5),\n                    name: s(\"a\"),\n                    index: 1,\n                }),\n                ast: Box::new(lit('z', 6)),\n            }))\n        );\n        assert_eq!(\n            parser(\"(?P<abc>z)\").parse(),\n            Ok(Ast::Group(ast::Group {\n                span: span(0..10),\n                kind: ast::GroupKind::CaptureName(ast::CaptureName {\n                    span: span(4..7),\n                    name: s(\"abc\"),\n                    index: 1,\n                }),\n                ast: Box::new(lit('z', 8)),\n            }))\n        );\n\n        assert_eq!(\n            parser(\"(?P<\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::GroupNameUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<>z)\").parse().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::GroupNameEmpty,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<a\").parse().unwrap_err(),\n            TestError {\n                span: span(5..5),\n                kind: ast::ErrorKind::GroupNameUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<ab\").parse().unwrap_err(),\n            TestError {\n                span: span(6..6),\n                kind: ast::ErrorKind::GroupNameUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<0a\").parse().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::GroupNameInvalid,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<~\").parse().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::GroupNameInvalid,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<abc~\").parse().unwrap_err(),\n            TestError {\n                span: span(7..8),\n                kind: ast::ErrorKind::GroupNameInvalid,\n            }\n        );\n        assert_eq!(\n            parser(\"(?P<a>y)(?P<a>z)\").parse().unwrap_err(),\n            TestError {\n                span: span(12..13),\n                kind: ast::ErrorKind::GroupNameDuplicate {\n                    original: span(4..5),\n                },\n            }\n        );\n    }\n\n    #[test]\n    fn parse_flags() {\n        assert_eq!(\n            parser(\"i:\").parse_flags(),\n            Ok(ast::Flags {\n                span: span(0..1),\n                items: vec![ast::FlagsItem {\n                    span: span(0..1),\n                    kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),\n                }],\n            })\n        );\n        assert_eq!(\n            parser(\"i)\").parse_flags(),\n            Ok(ast::Flags {\n                span: span(0..1),\n                items: vec![ast::FlagsItem {\n                    span: span(0..1),\n                    kind: ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive),\n                }],\n            })\n        );\n\n        assert_eq!(\n            parser(\"isU:\").parse_flags(),\n            Ok(ast::Flags {\n                span: span(0..3),\n                items: vec![\n                    ast::FlagsItem {\n                        span: span(0..1),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::CaseInsensitive\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(1..2),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::DotMatchesNewLine\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(2..3),\n                        kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),\n                    },\n                ],\n            })\n        );\n\n        assert_eq!(\n            parser(\"-isU:\").parse_flags(),\n            Ok(ast::Flags {\n                span: span(0..4),\n                items: vec![\n                    ast::FlagsItem {\n                        span: span(0..1),\n                        kind: ast::FlagsItemKind::Negation,\n                    },\n                    ast::FlagsItem {\n                        span: span(1..2),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::CaseInsensitive\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(2..3),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::DotMatchesNewLine\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(3..4),\n                        kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),\n                    },\n                ],\n            })\n        );\n        assert_eq!(\n            parser(\"i-sU:\").parse_flags(),\n            Ok(ast::Flags {\n                span: span(0..4),\n                items: vec![\n                    ast::FlagsItem {\n                        span: span(0..1),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::CaseInsensitive\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(1..2),\n                        kind: ast::FlagsItemKind::Negation,\n                    },\n                    ast::FlagsItem {\n                        span: span(2..3),\n                        kind: ast::FlagsItemKind::Flag(\n                            ast::Flag::DotMatchesNewLine\n                        ),\n                    },\n                    ast::FlagsItem {\n                        span: span(3..4),\n                        kind: ast::FlagsItemKind::Flag(ast::Flag::SwapGreed),\n                    },\n                ],\n            })\n        );\n\n        assert_eq!(\n            parser(\"isU\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::FlagUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(\"isUa:\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::FlagUnrecognized,\n            }\n        );\n        assert_eq!(\n            parser(\"isUi:\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::FlagDuplicate { original: span(0..1) },\n            }\n        );\n        assert_eq!(\n            parser(\"i-sU-i:\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::FlagRepeatedNegation {\n                    original: span(1..2),\n                },\n            }\n        );\n        assert_eq!(\n            parser(\"-)\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::FlagDanglingNegation,\n            }\n        );\n        assert_eq!(\n            parser(\"i-)\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(1..2),\n                kind: ast::ErrorKind::FlagDanglingNegation,\n            }\n        );\n        assert_eq!(\n            parser(\"iU-)\").parse_flags().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::FlagDanglingNegation,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_flag() {\n        assert_eq!(parser(\"i\").parse_flag(), Ok(ast::Flag::CaseInsensitive));\n        assert_eq!(parser(\"m\").parse_flag(), Ok(ast::Flag::MultiLine));\n        assert_eq!(parser(\"s\").parse_flag(), Ok(ast::Flag::DotMatchesNewLine));\n        assert_eq!(parser(\"U\").parse_flag(), Ok(ast::Flag::SwapGreed));\n        assert_eq!(parser(\"u\").parse_flag(), Ok(ast::Flag::Unicode));\n        assert_eq!(parser(\"x\").parse_flag(), Ok(ast::Flag::IgnoreWhitespace));\n\n        assert_eq!(\n            parser(\"a\").parse_flag().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::FlagUnrecognized,\n            }\n        );\n        assert_eq!(\n            parser(\"☃\").parse_flag().unwrap_err(),\n            TestError {\n                span: span_range(\"☃\", 0..3),\n                kind: ast::ErrorKind::FlagUnrecognized,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_primitive_non_escape() {\n        assert_eq!(\n            parser(r\".\").parse_primitive(),\n            Ok(Primitive::Dot(span(0..1)))\n        );\n        assert_eq!(\n            parser(r\"^\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..1),\n                kind: ast::AssertionKind::StartLine,\n            }))\n        );\n        assert_eq!(\n            parser(r\"$\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..1),\n                kind: ast::AssertionKind::EndLine,\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"a\").parse_primitive(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..1),\n                kind: ast::LiteralKind::Verbatim,\n                c: 'a',\n            }))\n        );\n        assert_eq!(\n            parser(r\"|\").parse_primitive(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..1),\n                kind: ast::LiteralKind::Verbatim,\n                c: '|',\n            }))\n        );\n        assert_eq!(\n            parser(r\"☃\").parse_primitive(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span_range(\"☃\", 0..3),\n                kind: ast::LiteralKind::Verbatim,\n                c: '☃',\n            }))\n        );\n    }\n\n    #[test]\n    fn parse_escape() {\n        assert_eq!(\n            parser(r\"\\|\").parse_primitive(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..2),\n                kind: ast::LiteralKind::Punctuation,\n                c: '|',\n            }))\n        );\n        let specials = &[\n            (r\"\\a\", '\\x07', ast::SpecialLiteralKind::Bell),\n            (r\"\\f\", '\\x0C', ast::SpecialLiteralKind::FormFeed),\n            (r\"\\t\", '\\t', ast::SpecialLiteralKind::Tab),\n            (r\"\\n\", '\\n', ast::SpecialLiteralKind::LineFeed),\n            (r\"\\r\", '\\r', ast::SpecialLiteralKind::CarriageReturn),\n            (r\"\\v\", '\\x0B', ast::SpecialLiteralKind::VerticalTab),\n        ];\n        for &(pat, c, ref kind) in specials {\n            assert_eq!(\n                parser(pat).parse_primitive(),\n                Ok(Primitive::Literal(ast::Literal {\n                    span: span(0..2),\n                    kind: ast::LiteralKind::Special(kind.clone()),\n                    c: c,\n                }))\n            );\n        }\n        assert_eq!(\n            parser(r\"\\A\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..2),\n                kind: ast::AssertionKind::StartText,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\z\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..2),\n                kind: ast::AssertionKind::EndText,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\b\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..2),\n                kind: ast::AssertionKind::WordBoundary,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\B\").parse_primitive(),\n            Ok(Primitive::Assertion(ast::Assertion {\n                span: span(0..2),\n                kind: ast::AssertionKind::NotWordBoundary,\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\y\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::EscapeUnrecognized,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_unsupported_backreference() {\n        assert_eq!(\n            parser(r\"\\0\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::UnsupportedBackreference,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\9\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::UnsupportedBackreference,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_octal() {\n        for i in 0..511 {\n            let pat = format!(r\"\\{:o}\", i);\n            assert_eq!(\n                parser_octal(&pat).parse_escape(),\n                Ok(Primitive::Literal(ast::Literal {\n                    span: span(0..pat.len()),\n                    kind: ast::LiteralKind::Octal,\n                    c: ::std::char::from_u32(i).unwrap(),\n                }))\n            );\n        }\n        assert_eq!(\n            parser_octal(r\"\\778\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..3),\n                kind: ast::LiteralKind::Octal,\n                c: '?',\n            }))\n        );\n        assert_eq!(\n            parser_octal(r\"\\7777\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..4),\n                kind: ast::LiteralKind::Octal,\n                c: '\\u{01FF}',\n            }))\n        );\n        assert_eq!(\n            parser_octal(r\"\\778\").parse(),\n            Ok(Ast::Concat(ast::Concat {\n                span: span(0..4),\n                asts: vec![\n                    Ast::Literal(ast::Literal {\n                        span: span(0..3),\n                        kind: ast::LiteralKind::Octal,\n                        c: '?',\n                    }),\n                    Ast::Literal(ast::Literal {\n                        span: span(3..4),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '8',\n                    }),\n                ],\n            }))\n        );\n        assert_eq!(\n            parser_octal(r\"\\7777\").parse(),\n            Ok(Ast::Concat(ast::Concat {\n                span: span(0..5),\n                asts: vec![\n                    Ast::Literal(ast::Literal {\n                        span: span(0..4),\n                        kind: ast::LiteralKind::Octal,\n                        c: '\\u{01FF}',\n                    }),\n                    Ast::Literal(ast::Literal {\n                        span: span(4..5),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '7',\n                    }),\n                ],\n            }))\n        );\n\n        assert_eq!(\n            parser_octal(r\"\\8\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::EscapeUnrecognized,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_hex_two() {\n        for i in 0..256 {\n            let pat = format!(r\"\\x{:02x}\", i);\n            assert_eq!(\n                parser(&pat).parse_escape(),\n                Ok(Primitive::Literal(ast::Literal {\n                    span: span(0..pat.len()),\n                    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),\n                    c: ::std::char::from_u32(i).unwrap(),\n                }))\n            );\n        }\n\n        assert_eq!(\n            parser(r\"\\xF\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\xG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\xFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_hex_four() {\n        for i in 0..65536 {\n            let c = match ::std::char::from_u32(i) {\n                None => continue,\n                Some(c) => c,\n            };\n            let pat = format!(r\"\\u{:04x}\", i);\n            assert_eq!(\n                parser(&pat).parse_escape(),\n                Ok(Primitive::Literal(ast::Literal {\n                    span: span(0..pat.len()),\n                    kind: ast::LiteralKind::HexFixed(\n                        ast::HexLiteralKind::UnicodeShort\n                    ),\n                    c: c,\n                }))\n            );\n        }\n\n        assert_eq!(\n            parser(r\"\\uF\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\uG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\uFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\uFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\uFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(5..6),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\uD800\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..6),\n                kind: ast::ErrorKind::EscapeHexInvalid,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_hex_eight() {\n        for i in 0..65536 {\n            let c = match ::std::char::from_u32(i) {\n                None => continue,\n                Some(c) => c,\n            };\n            let pat = format!(r\"\\U{:08x}\", i);\n            assert_eq!(\n                parser(&pat).parse_escape(),\n                Ok(Primitive::Literal(ast::Literal {\n                    span: span(0..pat.len()),\n                    kind: ast::LiteralKind::HexFixed(\n                        ast::HexLiteralKind::UnicodeLong\n                    ),\n                    c: c,\n                }))\n            );\n        }\n\n        assert_eq!(\n            parser(r\"\\UF\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..4),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(5..6),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(6..7),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(7..8),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFFFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(8..9),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\UFFFFFFFG\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(9..10),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_hex_brace() {\n        assert_eq!(\n            parser(r\"\\u{26c4}\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..8),\n                kind: ast::LiteralKind::HexBrace(\n                    ast::HexLiteralKind::UnicodeShort\n                ),\n                c: '⛄',\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\U{26c4}\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..8),\n                kind: ast::LiteralKind::HexBrace(\n                    ast::HexLiteralKind::UnicodeLong\n                ),\n                c: '⛄',\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\x{26c4}\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..8),\n                kind: ast::LiteralKind::HexBrace(ast::HexLiteralKind::X),\n                c: '⛄',\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\x{26C4}\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..8),\n                kind: ast::LiteralKind::HexBrace(ast::HexLiteralKind::X),\n                c: '⛄',\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\x{10fFfF}\").parse_escape(),\n            Ok(Primitive::Literal(ast::Literal {\n                span: span(0..10),\n                kind: ast::LiteralKind::HexBrace(ast::HexLiteralKind::X),\n                c: '\\u{10FFFF}',\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\x\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..2),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{FF\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..5),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{}\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..4),\n                kind: ast::ErrorKind::EscapeHexEmpty,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{FGF}\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(4..5),\n                kind: ast::ErrorKind::EscapeHexInvalidDigit,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{FFFFFF}\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..9),\n                kind: ast::ErrorKind::EscapeHexInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{D800}\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..7),\n                kind: ast::ErrorKind::EscapeHexInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\x{FFFFFFFFF}\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..12),\n                kind: ast::ErrorKind::EscapeHexInvalid,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_decimal() {\n        assert_eq!(parser(\"123\").parse_decimal(), Ok(123));\n        assert_eq!(parser(\"0\").parse_decimal(), Ok(0));\n        assert_eq!(parser(\"01\").parse_decimal(), Ok(1));\n\n        assert_eq!(\n            parser(\"-1\").parse_decimal().unwrap_err(),\n            TestError { span: span(0..0), kind: ast::ErrorKind::DecimalEmpty }\n        );\n        assert_eq!(\n            parser(\"\").parse_decimal().unwrap_err(),\n            TestError { span: span(0..0), kind: ast::ErrorKind::DecimalEmpty }\n        );\n        assert_eq!(\n            parser(\"9999999999\").parse_decimal().unwrap_err(),\n            TestError {\n                span: span(0..10),\n                kind: ast::ErrorKind::DecimalInvalid,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_set_class() {\n        fn union(span: Span, items: Vec<ast::ClassSetItem>) -> ast::ClassSet {\n            ast::ClassSet::union(ast::ClassSetUnion {\n                span: span,\n                items: items,\n            })\n        }\n\n        fn intersection(\n            span: Span,\n            lhs: ast::ClassSet,\n            rhs: ast::ClassSet,\n        ) -> ast::ClassSet {\n            ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n                span: span,\n                kind: ast::ClassSetBinaryOpKind::Intersection,\n                lhs: Box::new(lhs),\n                rhs: Box::new(rhs),\n            })\n        }\n\n        fn difference(\n            span: Span,\n            lhs: ast::ClassSet,\n            rhs: ast::ClassSet,\n        ) -> ast::ClassSet {\n            ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n                span: span,\n                kind: ast::ClassSetBinaryOpKind::Difference,\n                lhs: Box::new(lhs),\n                rhs: Box::new(rhs),\n            })\n        }\n\n        fn symdifference(\n            span: Span,\n            lhs: ast::ClassSet,\n            rhs: ast::ClassSet,\n        ) -> ast::ClassSet {\n            ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n                span: span,\n                kind: ast::ClassSetBinaryOpKind::SymmetricDifference,\n                lhs: Box::new(lhs),\n                rhs: Box::new(rhs),\n            })\n        }\n\n        fn itemset(item: ast::ClassSetItem) -> ast::ClassSet {\n            ast::ClassSet::Item(item)\n        }\n\n        fn item_ascii(cls: ast::ClassAscii) -> ast::ClassSetItem {\n            ast::ClassSetItem::Ascii(cls)\n        }\n\n        fn item_unicode(cls: ast::ClassUnicode) -> ast::ClassSetItem {\n            ast::ClassSetItem::Unicode(cls)\n        }\n\n        fn item_perl(cls: ast::ClassPerl) -> ast::ClassSetItem {\n            ast::ClassSetItem::Perl(cls)\n        }\n\n        fn item_bracket(cls: ast::ClassBracketed) -> ast::ClassSetItem {\n            ast::ClassSetItem::Bracketed(Box::new(cls))\n        }\n\n        fn lit(span: Span, c: char) -> ast::ClassSetItem {\n            ast::ClassSetItem::Literal(ast::Literal {\n                span: span,\n                kind: ast::LiteralKind::Verbatim,\n                c: c,\n            })\n        }\n\n        fn empty(span: Span) -> ast::ClassSetItem {\n            ast::ClassSetItem::Empty(span)\n        }\n\n        fn range(span: Span, start: char, end: char) -> ast::ClassSetItem {\n            let pos1 = Position {\n                offset: span.start.offset + start.len_utf8(),\n                column: span.start.column + 1,\n                ..span.start\n            };\n            let pos2 = Position {\n                offset: span.end.offset - end.len_utf8(),\n                column: span.end.column - 1,\n                ..span.end\n            };\n            ast::ClassSetItem::Range(ast::ClassSetRange {\n                span: span,\n                start: ast::Literal {\n                    span: Span { end: pos1, ..span },\n                    kind: ast::LiteralKind::Verbatim,\n                    c: start,\n                },\n                end: ast::Literal {\n                    span: Span { start: pos2, ..span },\n                    kind: ast::LiteralKind::Verbatim,\n                    c: end,\n                },\n            })\n        }\n\n        fn alnum(span: Span, negated: bool) -> ast::ClassAscii {\n            ast::ClassAscii {\n                span: span,\n                kind: ast::ClassAsciiKind::Alnum,\n                negated: negated,\n            }\n        }\n\n        fn lower(span: Span, negated: bool) -> ast::ClassAscii {\n            ast::ClassAscii {\n                span: span,\n                kind: ast::ClassAsciiKind::Lower,\n                negated: negated,\n            }\n        }\n\n        assert_eq!(\n            parser(\"[[:alnum:]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..11),\n                negated: false,\n                kind: itemset(item_ascii(alnum(span(1..10), false))),\n            })))\n        );\n        assert_eq!(\n            parser(\"[[[:alnum:]]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..13),\n                negated: false,\n                kind: itemset(item_bracket(ast::ClassBracketed {\n                    span: span(1..12),\n                    negated: false,\n                    kind: itemset(item_ascii(alnum(span(2..11), false))),\n                })),\n            })))\n        );\n        assert_eq!(\n            parser(\"[[:alnum:]&&[:lower:]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..22),\n                negated: false,\n                kind: intersection(\n                    span(1..21),\n                    itemset(item_ascii(alnum(span(1..10), false))),\n                    itemset(item_ascii(lower(span(12..21), false))),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(\"[[:alnum:]--[:lower:]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..22),\n                negated: false,\n                kind: difference(\n                    span(1..21),\n                    itemset(item_ascii(alnum(span(1..10), false))),\n                    itemset(item_ascii(lower(span(12..21), false))),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(\"[[:alnum:]~~[:lower:]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..22),\n                negated: false,\n                kind: symdifference(\n                    span(1..21),\n                    itemset(item_ascii(alnum(span(1..10), false))),\n                    itemset(item_ascii(lower(span(12..21), false))),\n                ),\n            })))\n        );\n\n        assert_eq!(\n            parser(\"[a]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..3),\n                negated: false,\n                kind: itemset(lit(span(1..2), 'a')),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a\\]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..5),\n                negated: false,\n                kind: union(\n                    span(1..4),\n                    vec![\n                        lit(span(1..2), 'a'),\n                        ast::ClassSetItem::Literal(ast::Literal {\n                            span: span(2..4),\n                            kind: ast::LiteralKind::Punctuation,\n                            c: ']',\n                        }),\n                    ]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a\\-z]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..6),\n                negated: false,\n                kind: union(\n                    span(1..5),\n                    vec![\n                        lit(span(1..2), 'a'),\n                        ast::ClassSetItem::Literal(ast::Literal {\n                            span: span(2..4),\n                            kind: ast::LiteralKind::Punctuation,\n                            c: '-',\n                        }),\n                        lit(span(4..5), 'z'),\n                    ]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(\"[ab]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..4),\n                negated: false,\n                kind: union(\n                    span(1..3),\n                    vec![lit(span(1..2), 'a'), lit(span(2..3), 'b'),]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(\"[a-]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..4),\n                negated: false,\n                kind: union(\n                    span(1..3),\n                    vec![lit(span(1..2), 'a'), lit(span(2..3), '-'),]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(\"[-a]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..4),\n                negated: false,\n                kind: union(\n                    span(1..3),\n                    vec![lit(span(1..2), '-'), lit(span(2..3), 'a'),]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\pL]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..5),\n                negated: false,\n                kind: itemset(item_unicode(ast::ClassUnicode {\n                    span: span(1..4),\n                    negated: false,\n                    kind: ast::ClassUnicodeKind::OneLetter('L'),\n                })),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\w]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..4),\n                negated: false,\n                kind: itemset(item_perl(ast::ClassPerl {\n                    span: span(1..3),\n                    kind: ast::ClassPerlKind::Word,\n                    negated: false,\n                })),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a\\wz]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..6),\n                negated: false,\n                kind: union(\n                    span(1..5),\n                    vec![\n                        lit(span(1..2), 'a'),\n                        item_perl(ast::ClassPerl {\n                            span: span(2..4),\n                            kind: ast::ClassPerlKind::Word,\n                            negated: false,\n                        }),\n                        lit(span(4..5), 'z'),\n                    ]\n                ),\n            })))\n        );\n\n        assert_eq!(\n            parser(\"[a-z]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..5),\n                negated: false,\n                kind: itemset(range(span(1..4), 'a', 'z')),\n            })))\n        );\n        assert_eq!(\n            parser(\"[a-cx-z]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..8),\n                negated: false,\n                kind: union(\n                    span(1..7),\n                    vec![\n                        range(span(1..4), 'a', 'c'),\n                        range(span(4..7), 'x', 'z'),\n                    ]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\w&&a-cx-z]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..12),\n                negated: false,\n                kind: intersection(\n                    span(1..11),\n                    itemset(item_perl(ast::ClassPerl {\n                        span: span(1..3),\n                        kind: ast::ClassPerlKind::Word,\n                        negated: false,\n                    })),\n                    union(\n                        span(5..11),\n                        vec![\n                            range(span(5..8), 'a', 'c'),\n                            range(span(8..11), 'x', 'z'),\n                        ]\n                    ),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a-cx-z&&\\w]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..12),\n                negated: false,\n                kind: intersection(\n                    span(1..11),\n                    union(\n                        span(1..7),\n                        vec![\n                            range(span(1..4), 'a', 'c'),\n                            range(span(4..7), 'x', 'z'),\n                        ]\n                    ),\n                    itemset(item_perl(ast::ClassPerl {\n                        span: span(9..11),\n                        kind: ast::ClassPerlKind::Word,\n                        negated: false,\n                    })),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a--b--c]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..9),\n                negated: false,\n                kind: difference(\n                    span(1..8),\n                    difference(\n                        span(1..5),\n                        itemset(lit(span(1..2), 'a')),\n                        itemset(lit(span(4..5), 'b')),\n                    ),\n                    itemset(lit(span(7..8), 'c')),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[a~~b~~c]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..9),\n                negated: false,\n                kind: symdifference(\n                    span(1..8),\n                    symdifference(\n                        span(1..5),\n                        itemset(lit(span(1..2), 'a')),\n                        itemset(lit(span(4..5), 'b')),\n                    ),\n                    itemset(lit(span(7..8), 'c')),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\^&&^]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..7),\n                negated: false,\n                kind: intersection(\n                    span(1..6),\n                    itemset(ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(1..3),\n                        kind: ast::LiteralKind::Punctuation,\n                        c: '^',\n                    })),\n                    itemset(lit(span(5..6), '^')),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\&&&&]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..7),\n                negated: false,\n                kind: intersection(\n                    span(1..6),\n                    itemset(ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(1..3),\n                        kind: ast::LiteralKind::Punctuation,\n                        c: '&',\n                    })),\n                    itemset(lit(span(5..6), '&')),\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[&&&&]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..6),\n                negated: false,\n                kind: intersection(\n                    span(1..5),\n                    intersection(\n                        span(1..3),\n                        itemset(empty(span(1..1))),\n                        itemset(empty(span(3..3))),\n                    ),\n                    itemset(empty(span(5..5))),\n                ),\n            })))\n        );\n\n        let pat = \"[☃-⛄]\";\n        assert_eq!(\n            parser(pat).parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span_range(pat, 0..9),\n                negated: false,\n                kind: itemset(ast::ClassSetItem::Range(ast::ClassSetRange {\n                    span: span_range(pat, 1..8),\n                    start: ast::Literal {\n                        span: span_range(pat, 1..4),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '☃',\n                    },\n                    end: ast::Literal {\n                        span: span_range(pat, 5..8),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '⛄',\n                    },\n                })),\n            })))\n        );\n\n        assert_eq!(\n            parser(r\"[]]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..3),\n                negated: false,\n                kind: itemset(lit(span(1..2), ']')),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[]\\[]\").parse(),\n            Ok(Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                span: span(0..5),\n                negated: false,\n                kind: union(\n                    span(1..4),\n                    vec![\n                        lit(span(1..2), ']'),\n                        ast::ClassSetItem::Literal(ast::Literal {\n                            span: span(2..4),\n                            kind: ast::LiteralKind::Punctuation,\n                            c: '[',\n                        }),\n                    ]\n                ),\n            })))\n        );\n        assert_eq!(\n            parser(r\"[\\[]]\").parse(),\n            Ok(concat(\n                0..5,\n                vec![\n                    Ast::Class(ast::Class::Bracketed(ast::ClassBracketed {\n                        span: span(0..4),\n                        negated: false,\n                        kind: itemset(ast::ClassSetItem::Literal(\n                            ast::Literal {\n                                span: span(1..3),\n                                kind: ast::LiteralKind::Punctuation,\n                                c: '[',\n                            }\n                        )),\n                    })),\n                    Ast::Literal(ast::Literal {\n                        span: span(4..5),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: ']',\n                    }),\n                ]\n            ))\n        );\n\n        assert_eq!(\n            parser(\"[\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[[\").parse().unwrap_err(),\n            TestError {\n                span: span(1..2),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[[-]\").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[[[:alnum:]\").parse().unwrap_err(),\n            TestError {\n                span: span(1..2),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(r\"[\\b]\").parse().unwrap_err(),\n            TestError {\n                span: span(1..3),\n                kind: ast::ErrorKind::ClassEscapeInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"[\\w-a]\").parse().unwrap_err(),\n            TestError {\n                span: span(1..3),\n                kind: ast::ErrorKind::ClassRangeLiteral,\n            }\n        );\n        assert_eq!(\n            parser(r\"[a-\\w]\").parse().unwrap_err(),\n            TestError {\n                span: span(3..5),\n                kind: ast::ErrorKind::ClassRangeLiteral,\n            }\n        );\n        assert_eq!(\n            parser(r\"[z-a]\").parse().unwrap_err(),\n            TestError {\n                span: span(1..4),\n                kind: ast::ErrorKind::ClassRangeInvalid,\n            }\n        );\n\n        assert_eq!(\n            parser_ignore_whitespace(\"[a \").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser_ignore_whitespace(\"[a- \").parse().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_set_class_open() {\n        assert_eq!(parser(\"[a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..1),\n                negated: false,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(1..1),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion { span: span(1..1), items: vec![] };\n            Ok((set, union))\n        });\n        assert_eq!(\n            parser_ignore_whitespace(\"[   a]\").parse_set_class_open(),\n            {\n                let set = ast::ClassBracketed {\n                    span: span(0..4),\n                    negated: false,\n                    kind: ast::ClassSet::union(ast::ClassSetUnion {\n                        span: span(4..4),\n                        items: vec![],\n                    }),\n                };\n                let union =\n                    ast::ClassSetUnion { span: span(4..4), items: vec![] };\n                Ok((set, union))\n            }\n        );\n        assert_eq!(parser(\"[^a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..2),\n                negated: true,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(2..2),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion { span: span(2..2), items: vec![] };\n            Ok((set, union))\n        });\n        assert_eq!(\n            parser_ignore_whitespace(\"[ ^ a]\").parse_set_class_open(),\n            {\n                let set = ast::ClassBracketed {\n                    span: span(0..4),\n                    negated: true,\n                    kind: ast::ClassSet::union(ast::ClassSetUnion {\n                        span: span(4..4),\n                        items: vec![],\n                    }),\n                };\n                let union =\n                    ast::ClassSetUnion { span: span(4..4), items: vec![] };\n                Ok((set, union))\n            }\n        );\n        assert_eq!(parser(\"[-a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..2),\n                negated: false,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(1..1),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(1..2),\n                items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                    span: span(1..2),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: '-',\n                })],\n            };\n            Ok((set, union))\n        });\n        assert_eq!(\n            parser_ignore_whitespace(\"[ - a]\").parse_set_class_open(),\n            {\n                let set = ast::ClassBracketed {\n                    span: span(0..4),\n                    negated: false,\n                    kind: ast::ClassSet::union(ast::ClassSetUnion {\n                        span: span(2..2),\n                        items: vec![],\n                    }),\n                };\n                let union = ast::ClassSetUnion {\n                    span: span(2..3),\n                    items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(2..3),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '-',\n                    })],\n                };\n                Ok((set, union))\n            }\n        );\n        assert_eq!(parser(\"[^-a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..3),\n                negated: true,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(2..2),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(2..3),\n                items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                    span: span(2..3),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: '-',\n                })],\n            };\n            Ok((set, union))\n        });\n        assert_eq!(parser(\"[--a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..3),\n                negated: false,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(1..1),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(1..3),\n                items: vec![\n                    ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(1..2),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '-',\n                    }),\n                    ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(2..3),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: '-',\n                    }),\n                ],\n            };\n            Ok((set, union))\n        });\n        assert_eq!(parser(\"[]a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..2),\n                negated: false,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(1..1),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(1..2),\n                items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                    span: span(1..2),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: ']',\n                })],\n            };\n            Ok((set, union))\n        });\n        assert_eq!(\n            parser_ignore_whitespace(\"[ ] a]\").parse_set_class_open(),\n            {\n                let set = ast::ClassBracketed {\n                    span: span(0..4),\n                    negated: false,\n                    kind: ast::ClassSet::union(ast::ClassSetUnion {\n                        span: span(2..2),\n                        items: vec![],\n                    }),\n                };\n                let union = ast::ClassSetUnion {\n                    span: span(2..3),\n                    items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                        span: span(2..3),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: ']',\n                    })],\n                };\n                Ok((set, union))\n            }\n        );\n        assert_eq!(parser(\"[^]a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..3),\n                negated: true,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(2..2),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(2..3),\n                items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                    span: span(2..3),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: ']',\n                })],\n            };\n            Ok((set, union))\n        });\n        assert_eq!(parser(\"[-]a]\").parse_set_class_open(), {\n            let set = ast::ClassBracketed {\n                span: span(0..2),\n                negated: false,\n                kind: ast::ClassSet::union(ast::ClassSetUnion {\n                    span: span(1..1),\n                    items: vec![],\n                }),\n            };\n            let union = ast::ClassSetUnion {\n                span: span(1..2),\n                items: vec![ast::ClassSetItem::Literal(ast::Literal {\n                    span: span(1..2),\n                    kind: ast::LiteralKind::Verbatim,\n                    c: '-',\n                })],\n            };\n            Ok((set, union))\n        });\n\n        assert_eq!(\n            parser(\"[\").parse_set_class_open().unwrap_err(),\n            TestError {\n                span: span(0..1),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser_ignore_whitespace(\"[    \")\n                .parse_set_class_open()\n                .unwrap_err(),\n            TestError {\n                span: span(0..5),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[^\").parse_set_class_open().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[]\").parse_set_class_open().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[-\").parse_set_class_open().unwrap_err(),\n            TestError {\n                span: span(0..2),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n        assert_eq!(\n            parser(\"[--\").parse_set_class_open().unwrap_err(),\n            TestError {\n                span: span(0..3),\n                kind: ast::ErrorKind::ClassUnclosed,\n            }\n        );\n    }\n\n    #[test]\n    fn maybe_parse_ascii_class() {\n        assert_eq!(\n            parser(r\"[:alnum:]\").maybe_parse_ascii_class(),\n            Some(ast::ClassAscii {\n                span: span(0..9),\n                kind: ast::ClassAsciiKind::Alnum,\n                negated: false,\n            })\n        );\n        assert_eq!(\n            parser(r\"[:alnum:]A\").maybe_parse_ascii_class(),\n            Some(ast::ClassAscii {\n                span: span(0..9),\n                kind: ast::ClassAsciiKind::Alnum,\n                negated: false,\n            })\n        );\n        assert_eq!(\n            parser(r\"[:^alnum:]\").maybe_parse_ascii_class(),\n            Some(ast::ClassAscii {\n                span: span(0..10),\n                kind: ast::ClassAsciiKind::Alnum,\n                negated: true,\n            })\n        );\n\n        let p = parser(r\"[:\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n\n        let p = parser(r\"[:^\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n\n        let p = parser(r\"[^:alnum:]\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n\n        let p = parser(r\"[:alnnum:]\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n\n        let p = parser(r\"[:alnum]\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n\n        let p = parser(r\"[:alnum:\");\n        assert_eq!(p.maybe_parse_ascii_class(), None);\n        assert_eq!(p.offset(), 0);\n    }\n\n    #[test]\n    fn parse_unicode_class() {\n        assert_eq!(\n            parser(r\"\\pN\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..3),\n                negated: false,\n                kind: ast::ClassUnicodeKind::OneLetter('N'),\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\PN\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..3),\n                negated: true,\n                kind: ast::ClassUnicodeKind::OneLetter('N'),\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{N}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..5),\n                negated: false,\n                kind: ast::ClassUnicodeKind::Named(s(\"N\")),\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\P{N}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..5),\n                negated: true,\n                kind: ast::ClassUnicodeKind::Named(s(\"N\")),\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{Greek}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..9),\n                negated: false,\n                kind: ast::ClassUnicodeKind::Named(s(\"Greek\")),\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\p{scx:Katakana}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..16),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::Colon,\n                    name: s(\"scx\"),\n                    value: s(\"Katakana\"),\n                },\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{scx=Katakana}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..16),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::Equal,\n                    name: s(\"scx\"),\n                    value: s(\"Katakana\"),\n                },\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{scx!=Katakana}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..17),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::NotEqual,\n                    name: s(\"scx\"),\n                    value: s(\"Katakana\"),\n                },\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\p{:}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..5),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::Colon,\n                    name: s(\"\"),\n                    value: s(\"\"),\n                },\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{=}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..5),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::Equal,\n                    name: s(\"\"),\n                    value: s(\"\"),\n                },\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{!=}\").parse_escape(),\n            Ok(Primitive::Unicode(ast::ClassUnicode {\n                span: span(0..6),\n                negated: false,\n                kind: ast::ClassUnicodeKind::NamedValue {\n                    op: ast::ClassUnicodeOpKind::NotEqual,\n                    name: s(\"\"),\n                    value: s(\"\"),\n                },\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\p\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(2..2),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\p{\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(3..3),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\p{N\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(4..4),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\p{Greek\").parse_escape().unwrap_err(),\n            TestError {\n                span: span(8..8),\n                kind: ast::ErrorKind::EscapeUnexpectedEof,\n            }\n        );\n\n        assert_eq!(\n            parser(r\"\\pNz\").parse(),\n            Ok(Ast::Concat(ast::Concat {\n                span: span(0..4),\n                asts: vec![\n                    Ast::Class(ast::Class::Unicode(ast::ClassUnicode {\n                        span: span(0..3),\n                        negated: false,\n                        kind: ast::ClassUnicodeKind::OneLetter('N'),\n                    })),\n                    Ast::Literal(ast::Literal {\n                        span: span(3..4),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: 'z',\n                    }),\n                ],\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p{Greek}z\").parse(),\n            Ok(Ast::Concat(ast::Concat {\n                span: span(0..10),\n                asts: vec![\n                    Ast::Class(ast::Class::Unicode(ast::ClassUnicode {\n                        span: span(0..9),\n                        negated: false,\n                        kind: ast::ClassUnicodeKind::Named(s(\"Greek\")),\n                    })),\n                    Ast::Literal(ast::Literal {\n                        span: span(9..10),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: 'z',\n                    }),\n                ],\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\p\\{\").parse().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::UnicodeClassInvalid,\n            }\n        );\n        assert_eq!(\n            parser(r\"\\P\\{\").parse().unwrap_err(),\n            TestError {\n                span: span(2..3),\n                kind: ast::ErrorKind::UnicodeClassInvalid,\n            }\n        );\n    }\n\n    #[test]\n    fn parse_perl_class() {\n        assert_eq!(\n            parser(r\"\\d\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Digit,\n                negated: false,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\D\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Digit,\n                negated: true,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\s\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Space,\n                negated: false,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\S\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Space,\n                negated: true,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\w\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Word,\n                negated: false,\n            }))\n        );\n        assert_eq!(\n            parser(r\"\\W\").parse_escape(),\n            Ok(Primitive::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Word,\n                negated: true,\n            }))\n        );\n\n        assert_eq!(\n            parser(r\"\\d\").parse(),\n            Ok(Ast::Class(ast::Class::Perl(ast::ClassPerl {\n                span: span(0..2),\n                kind: ast::ClassPerlKind::Digit,\n                negated: false,\n            })))\n        );\n        assert_eq!(\n            parser(r\"\\dz\").parse(),\n            Ok(Ast::Concat(ast::Concat {\n                span: span(0..3),\n                asts: vec![\n                    Ast::Class(ast::Class::Perl(ast::ClassPerl {\n                        span: span(0..2),\n                        kind: ast::ClassPerlKind::Digit,\n                        negated: false,\n                    })),\n                    Ast::Literal(ast::Literal {\n                        span: span(2..3),\n                        kind: ast::LiteralKind::Verbatim,\n                        c: 'z',\n                    }),\n                ],\n            }))\n        );\n    }\n\n    // This tests a bug fix where the nest limit checker wasn't decrementing\n    // its depth during post-traversal, which causes long regexes to trip\n    // the default limit too aggressively.\n    #[test]\n    fn regression_454_nest_too_big() {\n        let pattern = r#\"\n        2(?:\n          [45]\\d{3}|\n          7(?:\n            1[0-267]|\n            2[0-289]|\n            3[0-29]|\n            4[01]|\n            5[1-3]|\n            6[013]|\n            7[0178]|\n            91\n          )|\n          8(?:\n            0[125]|\n            [139][1-6]|\n            2[0157-9]|\n            41|\n            6[1-35]|\n            7[1-5]|\n            8[1-8]|\n            90\n          )|\n          9(?:\n            0[0-2]|\n            1[0-4]|\n            2[568]|\n            3[3-6]|\n            5[5-7]|\n            6[0167]|\n            7[15]|\n            8[0146-9]\n          )\n        )\\d{4}\n        \"#;\n        assert!(parser_nest_limit(pattern, 50).parse().is_ok());\n    }\n\n    // This tests that we treat a trailing `-` in a character class as a\n    // literal `-` even when whitespace mode is enabled and there is whitespace\n    // after the trailing `-`.\n    #[test]\n    fn regression_455_trailing_dash_ignore_whitespace() {\n        assert!(parser(\"(?x)[ / - ]\").parse().is_ok());\n        assert!(parser(\"(?x)[ a - ]\").parse().is_ok());\n        assert!(parser(\n            \"(?x)[\n            a\n            - ]\n        \"\n        )\n        .parse()\n        .is_ok());\n        assert!(parser(\n            \"(?x)[\n            a # wat\n            - ]\n        \"\n        )\n        .parse()\n        .is_ok());\n\n        assert!(parser(\"(?x)[ / -\").parse().is_err());\n        assert!(parser(\"(?x)[ / - \").parse().is_err());\n        assert!(parser(\n            \"(?x)[\n            / -\n        \"\n        )\n        .parse()\n        .is_err());\n        assert!(parser(\n            \"(?x)[\n            / - # wat\n        \"\n        )\n        .parse()\n        .is_err());\n    }\n}\n","traces":[{"line":34,"address":[7196304],"length":1,"stats":{"Line":8},"fn_name":"span"},{"line":35,"address":[7196391,7196437,7196414,7196366],"length":1,"stats":{"Line":16},"fn_name":null},{"line":36,"address":[7196313,7196375],"length":1,"stats":{"Line":16},"fn_name":null},{"line":37,"address":[7196398],"length":1,"stats":{"Line":8},"fn_name":null},{"line":38,"address":[7196421],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[7196444],"length":1,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[7196350],"length":1,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[7196480],"length":1,"stats":{"Line":9},"fn_name":"into_ast"},{"line":46,"address":[7196752,7197046,7197192,7196900],"length":1,"stats":{"Line":34},"fn_name":null},{"line":47,"address":[7196490,7196767],"length":1,"stats":{"Line":18},"fn_name":null},{"line":48,"address":[7196913],"length":1,"stats":{"Line":9},"fn_name":null},{"line":49,"address":[7197059],"length":1,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[7197205],"length":1,"stats":{"Line":13},"fn_name":null},{"line":51,"address":[7196557],"length":1,"stats":{"Line":8},"fn_name":null},{"line":59,"address":[7102464,7102000],"length":1,"stats":{"Line":8},"fn_name":"into_class_set_item<&mut regex_syntax::ast::parse::Parser>"},{"line":66,"address":[7102459,7102676,7102878,7103090],"length":1,"stats":{"Line":24},"fn_name":null},{"line":67,"address":[7102018,7102270],"length":1,"stats":{"Line":16},"fn_name":null},{"line":68,"address":[7102487],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[7102689],"length":1,"stats":{"Line":8},"fn_name":null},{"line":70,"address":[7102128,7102888],"length":1,"stats":{"Line":16},"fn_name":null},{"line":80,"address":[7103152,7103218],"length":1,"stats":{"Line":8},"fn_name":"into_class_literal<&mut regex_syntax::ast::parse::Parser>"},{"line":86,"address":[7103694,7103493],"length":1,"stats":{"Line":16},"fn_name":null},{"line":87,"address":[7103170,7103369],"length":1,"stats":{"Line":16},"fn_name":null},{"line":88,"address":[7103233,7103503],"length":1,"stats":{"Line":16},"fn_name":null},{"line":94,"address":[7197408],"length":1,"stats":{"Line":9},"fn_name":"is_hex"},{"line":95,"address":[7197416,7197476],"length":1,"stats":{"Line":18},"fn_name":null},{"line":102,"address":[7197632],"length":1,"stats":{"Line":13},"fn_name":"is_capture_char"},{"line":103,"address":[7197918,7197809,7197775,7197711,7197649,7197934,7197740,7197877],"length":1,"stats":{"Line":86},"fn_name":null},{"line":104,"address":[7197767,7197784,7197818],"length":1,"stats":{"Line":26},"fn_name":null},{"line":105,"address":[7197852,7197729],"length":1,"stats":{"Line":26},"fn_name":null},{"line":106,"address":[7197683,7197893],"length":1,"stats":{"Line":8},"fn_name":null},{"line":120,"address":[7197936],"length":1,"stats":{"Line":15},"fn_name":"default"},{"line":121,"address":[7197940],"length":1,"stats":{"Line":15},"fn_name":null},{"line":127,"address":[7197984],"length":1,"stats":{"Line":15},"fn_name":"new"},{"line":136,"address":[7198016,7198100],"length":1,"stats":{"Line":15},"fn_name":"build"},{"line":138,"address":[7198034],"length":1,"stats":{"Line":15},"fn_name":null},{"line":139,"address":[7198117],"length":1,"stats":{"Line":15},"fn_name":null},{"line":140,"address":[7198132],"length":1,"stats":{"Line":15},"fn_name":null},{"line":141,"address":[7198134],"length":1,"stats":{"Line":15},"fn_name":null},{"line":142,"address":[7198137],"length":1,"stats":{"Line":15},"fn_name":null},{"line":143,"address":[7198141],"length":1,"stats":{"Line":15},"fn_name":null},{"line":144,"address":[7198176],"length":1,"stats":{"Line":15},"fn_name":null},{"line":145,"address":[7198238,7198203],"length":1,"stats":{"Line":30},"fn_name":null},{"line":146,"address":[7198300,7198265],"length":1,"stats":{"Line":30},"fn_name":null},{"line":147,"address":[7198327,7198362],"length":1,"stats":{"Line":30},"fn_name":null},{"line":148,"address":[7198397,7198420],"length":1,"stats":{"Line":30},"fn_name":null},{"line":177,"address":[7198896],"length":1,"stats":{"Line":15},"fn_name":"nest_limit"},{"line":178,"address":[7198908],"length":1,"stats":{"Line":15},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[7198928],"length":1,"stats":{"Line":15},"fn_name":"octal"},{"line":198,"address":[7198945],"length":1,"stats":{"Line":15},"fn_name":null},{"line":199,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[7198976],"length":1,"stats":{"Line":15},"fn_name":"ignore_whitespace"},{"line":211,"address":[7198993],"length":1,"stats":{"Line":15},"fn_name":null},{"line":212,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[7199024],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":332,"address":[7199041],"length":1,"stats":{"Line":0},"fn_name":null},{"line":336,"address":[7199088],"length":1,"stats":{"Line":15},"fn_name":"parse"},{"line":337,"address":[7199110],"length":1,"stats":{"Line":15},"fn_name":null},{"line":342,"address":[7199168],"length":1,"stats":{"Line":0},"fn_name":"parse_with_comments"},{"line":346,"address":[7199190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[7199311,7199248],"length":1,"stats":{"Line":15},"fn_name":"reset"},{"line":357,"address":[7199260],"length":1,"stats":{"Line":15},"fn_name":null},{"line":358,"address":[7199328],"length":1,"stats":{"Line":15},"fn_name":null},{"line":359,"address":[7199365],"length":1,"stats":{"Line":15},"fn_name":null},{"line":360,"address":[7199460],"length":1,"stats":{"Line":15},"fn_name":null},{"line":361,"address":[7199555],"length":1,"stats":{"Line":15},"fn_name":null},{"line":367,"address":[7103776],"length":1,"stats":{"Line":15},"fn_name":"new<&mut regex_syntax::ast::parse::Parser>"},{"line":372,"address":[7103824],"length":1,"stats":{"Line":15},"fn_name":"parser<&mut regex_syntax::ast::parse::Parser>"},{"line":373,"address":[7103833],"length":1,"stats":{"Line":15},"fn_name":null},{"line":377,"address":[7103856],"length":1,"stats":{"Line":15},"fn_name":"pattern<&mut regex_syntax::ast::parse::Parser>"},{"line":378,"address":[7103865],"length":1,"stats":{"Line":15},"fn_name":null},{"line":382,"address":[7103920],"length":1,"stats":{"Line":8},"fn_name":"error<&mut regex_syntax::ast::parse::Parser>"},{"line":385,"address":[7103987],"length":1,"stats":{"Line":8},"fn_name":null},{"line":394,"address":[7104176],"length":1,"stats":{"Line":15},"fn_name":"offset<&mut regex_syntax::ast::parse::Parser>"},{"line":395,"address":[7104185],"length":1,"stats":{"Line":15},"fn_name":null},{"line":401,"address":[7104224],"length":1,"stats":{"Line":9},"fn_name":"line<&mut regex_syntax::ast::parse::Parser>"},{"line":402,"address":[7104233],"length":1,"stats":{"Line":14},"fn_name":null},{"line":408,"address":[7104272],"length":1,"stats":{"Line":14},"fn_name":"column<&mut regex_syntax::ast::parse::Parser>"},{"line":409,"address":[7104281],"length":1,"stats":{"Line":14},"fn_name":null},{"line":419,"address":[7104520,7104320],"length":1,"stats":{"Line":13},"fn_name":"next_capture_index<&mut regex_syntax::ast::parse::Parser>"},{"line":420,"address":[7104335],"length":1,"stats":{"Line":13},"fn_name":null},{"line":421,"address":[7104404,7104573,7104976,7104535],"length":1,"stats":{"Line":26},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":422,"address":[7105002],"length":1,"stats":{"Line":0},"fn_name":null},{"line":424,"address":[7104885],"length":1,"stats":{"Line":13},"fn_name":null},{"line":425,"address":[7104932],"length":1,"stats":{"Line":13},"fn_name":null},{"line":430,"address":[7105104,7105181],"length":1,"stats":{"Line":13},"fn_name":"add_capture_name<&mut regex_syntax::ast::parse::Parser>"},{"line":431,"address":[7105204,7105138],"length":1,"stats":{"Line":26},"fn_name":null},{"line":432,"address":[7105395,7105592,7105705,7105236],"length":1,"stats":{"Line":39},"fn_name":null},{"line":433,"address":[7106000,7105335,7106014],"length":1,"stats":{"Line":29},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":435,"address":[7105594,7105487],"length":1,"stats":{"Line":26},"fn_name":null},{"line":436,"address":[7105610],"length":1,"stats":{"Line":13},"fn_name":null},{"line":437,"address":[7105699],"length":1,"stats":{"Line":13},"fn_name":null},{"line":439,"address":[7105504,7105842],"length":1,"stats":{"Line":16},"fn_name":null},{"line":440,"address":[7105528],"length":1,"stats":{"Line":8},"fn_name":null},{"line":441,"address":[7105563,7105710],"length":1,"stats":{"Line":16},"fn_name":null},{"line":447,"address":[7106064],"length":1,"stats":{"Line":15},"fn_name":"ignore_whitespace<&mut regex_syntax::ast::parse::Parser>"},{"line":448,"address":[7106073],"length":1,"stats":{"Line":15},"fn_name":null},{"line":454,"address":[7106128],"length":1,"stats":{"Line":15},"fn_name":"char<&mut regex_syntax::ast::parse::Parser>"},{"line":455,"address":[7106142],"length":1,"stats":{"Line":15},"fn_name":null},{"line":461,"address":[7106192],"length":1,"stats":{"Line":15},"fn_name":"char_at<&mut regex_syntax::ast::parse::Parser>"},{"line":462,"address":[7106206,7106322],"length":1,"stats":{"Line":30},"fn_name":null},{"line":465,"address":[7106368,7106352,7106312],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":471,"address":[7106496],"length":1,"stats":{"Line":9},"fn_name":"bump<&mut regex_syntax::ast::parse::Parser>"},{"line":472,"address":[7106519],"length":1,"stats":{"Line":14},"fn_name":null},{"line":473,"address":[7106567],"length":1,"stats":{"Line":0},"fn_name":null},{"line":475,"address":[7106595,7106544],"length":1,"stats":{"Line":28},"fn_name":null},{"line":476,"address":[7106651,7106789],"length":1,"stats":{"Line":22},"fn_name":null},{"line":477,"address":[7106705],"length":1,"stats":{"Line":8},"fn_name":null},{"line":478,"address":[7106777],"length":1,"stats":{"Line":8},"fn_name":null},{"line":480,"address":[7106675,7106808],"length":1,"stats":{"Line":28},"fn_name":null},{"line":482,"address":[7107206,7106843,7107176],"length":1,"stats":{"Line":15},"fn_name":null},{"line":483,"address":[7106917,7106957],"length":1,"stats":{"Line":30},"fn_name":null},{"line":484,"address":[7106933],"length":1,"stats":{"Line":15},"fn_name":null},{"line":485,"address":[7106941],"length":1,"stats":{"Line":15},"fn_name":null},{"line":486,"address":[7106949],"length":1,"stats":{"Line":15},"fn_name":null},{"line":488,"address":[7107006],"length":1,"stats":{"Line":15},"fn_name":null},{"line":495,"address":[7107216],"length":1,"stats":{"Line":9},"fn_name":"bump_if<&mut regex_syntax::ast::parse::Parser>"},{"line":496,"address":[7107262,7107389,7107575],"length":1,"stats":{"Line":32},"fn_name":null},{"line":497,"address":[7107577,7107404,7107613],"length":1,"stats":{"Line":28},"fn_name":null},{"line":498,"address":[7107608],"length":1,"stats":{"Line":14},"fn_name":null},{"line":500,"address":[7107570],"length":1,"stats":{"Line":14},"fn_name":null},{"line":502,"address":[7107384],"length":1,"stats":{"Line":9},"fn_name":null},{"line":513,"address":[7107632],"length":1,"stats":{"Line":9},"fn_name":"is_lookaround_prefix<&mut regex_syntax::ast::parse::Parser>"},{"line":514,"address":[7107737,7107782,7107653,7107836],"length":1,"stats":{"Line":37},"fn_name":null},{"line":515,"address":[7107817],"length":1,"stats":{"Line":9},"fn_name":null},{"line":516,"address":[7107763],"length":1,"stats":{"Line":14},"fn_name":null},{"line":517,"address":[7107701],"length":1,"stats":{"Line":14},"fn_name":null},{"line":523,"address":[7107904],"length":1,"stats":{"Line":8},"fn_name":"bump_and_bump_space<&mut regex_syntax::ast::parse::Parser>"},{"line":524,"address":[7107918],"length":1,"stats":{"Line":8},"fn_name":null},{"line":525,"address":[7107949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":527,"address":[7107942],"length":1,"stats":{"Line":8},"fn_name":null},{"line":528,"address":[7107973],"length":1,"stats":{"Line":8},"fn_name":null},{"line":540,"address":[7108000,7108047],"length":1,"stats":{"Line":15},"fn_name":"bump_space<&mut regex_syntax::ast::parse::Parser>"},{"line":541,"address":[7108066,7108015],"length":1,"stats":{"Line":30},"fn_name":null},{"line":542,"address":[7108074],"length":1,"stats":{"Line":15},"fn_name":null},{"line":544,"address":[7108072,7108089,7108818],"length":1,"stats":{"Line":16},"fn_name":null},{"line":545,"address":[7108118,7108176,7108811],"length":1,"stats":{"Line":8},"fn_name":null},{"line":546,"address":[7108171],"length":1,"stats":{"Line":0},"fn_name":null},{"line":547,"address":[7108155,7108185],"length":1,"stats":{"Line":16},"fn_name":null},{"line":548,"address":[7108195],"length":1,"stats":{"Line":0},"fn_name":null},{"line":549,"address":[7108210],"length":1,"stats":{"Line":0},"fn_name":null},{"line":550,"address":[7108233],"length":1,"stats":{"Line":0},"fn_name":null},{"line":551,"address":[7108382,7108240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":552,"address":[7108275],"length":1,"stats":{"Line":0},"fn_name":null},{"line":553,"address":[7108302],"length":1,"stats":{"Line":0},"fn_name":null},{"line":554,"address":[7108313],"length":1,"stats":{"Line":0},"fn_name":null},{"line":555,"address":[7108334],"length":1,"stats":{"Line":0},"fn_name":null},{"line":557,"address":[7108327],"length":1,"stats":{"Line":0},"fn_name":null},{"line":560,"address":[7108336,7108387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":563,"address":[7108544],"length":1,"stats":{"Line":0},"fn_name":null},{"line":565,"address":[7108190,7108813],"length":1,"stats":{"Line":16},"fn_name":null},{"line":573,"address":[7108960],"length":1,"stats":{"Line":8},"fn_name":"peek<&mut regex_syntax::ast::parse::Parser>"},{"line":574,"address":[7108974],"length":1,"stats":{"Line":8},"fn_name":null},{"line":575,"address":[7109016],"length":1,"stats":{"Line":0},"fn_name":null},{"line":577,"address":[7108998,7109225,7109195,7109038],"length":1,"stats":{"Line":16},"fn_name":null},{"line":582,"address":[7109232],"length":1,"stats":{"Line":8},"fn_name":"peek_space<&mut regex_syntax::ast::parse::Parser>"},{"line":583,"address":[7109255],"length":1,"stats":{"Line":8},"fn_name":null},{"line":584,"address":[7109301,7109330],"length":1,"stats":{"Line":16},"fn_name":null},{"line":586,"address":[7109336,7109282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":587,"address":[7109362],"length":1,"stats":{"Line":0},"fn_name":null},{"line":589,"address":[7109350,7109383,7110116],"length":1,"stats":{"Line":0},"fn_name":null},{"line":590,"address":[7109449],"length":1,"stats":{"Line":0},"fn_name":null},{"line":591,"address":[7109465,7109997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":592,"address":[7109752,7109807],"length":1,"stats":{"Line":0},"fn_name":null},{"line":593,"address":[7109828],"length":1,"stats":{"Line":0},"fn_name":null},{"line":594,"address":[7109813,7109833,7109977,7109894],"length":1,"stats":{"Line":0},"fn_name":null},{"line":595,"address":[7109886],"length":1,"stats":{"Line":0},"fn_name":null},{"line":596,"address":[7109896,7109874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":597,"address":[7109969],"length":1,"stats":{"Line":0},"fn_name":null},{"line":599,"address":[7110176,7109984,7110146,7109942],"length":1,"stats":{"Line":15},"fn_name":"is_eof<&mut regex_syntax::ast::parse::Parser>"},{"line":600,"address":[7109992],"length":1,"stats":{"Line":0},"fn_name":null},{"line":603,"address":[7110009,7109782],"length":1,"stats":{"Line":0},"fn_name":null},{"line":607,"address":[7110176],"length":1,"stats":{"Line":0},"fn_name":"is_eof<&mut regex_syntax::ast::parse::Parser>"},{"line":608,"address":[7110190],"length":1,"stats":{"Line":15},"fn_name":null},{"line":613,"address":[7110272],"length":1,"stats":{"Line":15},"fn_name":"pos<&mut regex_syntax::ast::parse::Parser>"},{"line":614,"address":[7110289],"length":1,"stats":{"Line":15},"fn_name":null},{"line":619,"address":[7110352],"length":1,"stats":{"Line":15},"fn_name":"span<&mut regex_syntax::ast::parse::Parser>"},{"line":620,"address":[7110364],"length":1,"stats":{"Line":15},"fn_name":null},{"line":624,"address":[7110416],"length":1,"stats":{"Line":9},"fn_name":"span_char<&mut regex_syntax::ast::parse::Parser>"},{"line":626,"address":[7110442],"length":1,"stats":{"Line":9},"fn_name":null},{"line":627,"address":[7110554],"length":1,"stats":{"Line":9},"fn_name":null},{"line":628,"address":[7110569],"length":1,"stats":{"Line":14},"fn_name":null},{"line":630,"address":[7110679],"length":1,"stats":{"Line":14},"fn_name":null},{"line":631,"address":[7110894,7110699,7110864],"length":1,"stats":{"Line":8},"fn_name":null},{"line":632,"address":[7110743],"length":1,"stats":{"Line":8},"fn_name":null},{"line":634,"address":[7110755],"length":1,"stats":{"Line":14},"fn_name":null},{"line":647,"address":[7111746,7110896],"length":1,"stats":{"Line":8},"fn_name":"push_alternate<&mut regex_syntax::ast::parse::Parser>"},{"line":648,"address":[7111089,7110914],"length":1,"stats":{"Line":8},"fn_name":null},{"line":649,"address":[7111079,7111404],"length":1,"stats":{"Line":16},"fn_name":null},{"line":650,"address":[7111433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":651,"address":[7111525],"length":1,"stats":{"Line":8},"fn_name":null},{"line":652,"address":[7111545],"length":1,"stats":{"Line":8},"fn_name":null},{"line":657,"address":[7111849,7111792],"length":1,"stats":{"Line":8},"fn_name":"push_or_add_alternation<&mut regex_syntax::ast::parse::Parser>"},{"line":660,"address":[7111807,7111869],"length":1,"stats":{"Line":16},"fn_name":null},{"line":661,"address":[7112071,7111917,7111980],"length":1,"stats":{"Line":24},"fn_name":null},{"line":662,"address":[7112118],"length":1,"stats":{"Line":8},"fn_name":null},{"line":663,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":665,"address":[7112548,7112047],"length":1,"stats":{"Line":16},"fn_name":null},{"line":666,"address":[7112281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":667,"address":[7112369,7112800],"length":1,"stats":{"Line":8},"fn_name":null},{"line":685,"address":[7112979,7112880],"length":1,"stats":{"Line":9},"fn_name":"push_group<&mut regex_syntax::ast::parse::Parser>"},{"line":686,"address":[7112898,7113131,7113001],"length":1,"stats":{"Line":18},"fn_name":null},{"line":687,"address":[7113121,7113988,7114110,7113687,7114882,7113552,7113500],"length":1,"stats":{"Line":58},"fn_name":null},{"line":688,"address":[7113663,7114112],"length":1,"stats":{"Line":27},"fn_name":null},{"line":689,"address":[7114256],"length":1,"stats":{"Line":13},"fn_name":null},{"line":690,"address":[7114335,7114444,7114297],"length":1,"stats":{"Line":34},"fn_name":null},{"line":691,"address":[7114351],"length":1,"stats":{"Line":8},"fn_name":null},{"line":694,"address":[7114454],"length":1,"stats":{"Line":13},"fn_name":null},{"line":695,"address":[7114756],"length":1,"stats":{"Line":13},"fn_name":null},{"line":697,"address":[7114039,7115769,7114874],"length":1,"stats":{"Line":27},"fn_name":null},{"line":698,"address":[7114093,7114894],"length":1,"stats":{"Line":28},"fn_name":null},{"line":699,"address":[7114903],"length":1,"stats":{"Line":14},"fn_name":null},{"line":701,"address":[7115961,7115952],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":702,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":703,"address":[7115014,7115396],"length":1,"stats":{"Line":28},"fn_name":null},{"line":704,"address":[7115258],"length":1,"stats":{"Line":14},"fn_name":null},{"line":705,"address":[7115121],"length":1,"stats":{"Line":14},"fn_name":null},{"line":706,"address":[7115196],"length":1,"stats":{"Line":14},"fn_name":null},{"line":707,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":710,"address":[7115463],"length":1,"stats":{"Line":14},"fn_name":null},{"line":711,"address":[7115550],"length":1,"stats":{"Line":14},"fn_name":null},{"line":726,"address":[7116137,7116000],"length":1,"stats":{"Line":9},"fn_name":"pop_group<&mut regex_syntax::ast::parse::Parser>"},{"line":729,"address":[7116024,7116293,7116159],"length":1,"stats":{"Line":18},"fn_name":null},{"line":730,"address":[7116670,7116263],"length":1,"stats":{"Line":18},"fn_name":null},{"line":731,"address":[7118467,7117297,7116736,7116880,7120153],"length":1,"stats":{"Line":35},"fn_name":null},{"line":732,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":734,"address":[7116858,7116809,7116882],"length":1,"stats":{"Line":27},"fn_name":null},{"line":735,"address":[7117037],"length":1,"stats":{"Line":9},"fn_name":null},{"line":737,"address":[7117302,7117491],"length":1,"stats":{"Line":8},"fn_name":null},{"line":738,"address":[7117444,7117497],"length":1,"stats":{"Line":16},"fn_name":null},{"line":739,"address":[7117659],"length":1,"stats":{"Line":8},"fn_name":null},{"line":741,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":742,"address":[7118111,7118319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":743,"address":[7118077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":744,"address":[7118100],"length":1,"stats":{"Line":0},"fn_name":null},{"line":748,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":749,"address":[7118362],"length":1,"stats":{"Line":8},"fn_name":null},{"line":750,"address":[7116848,7118351],"length":1,"stats":{"Line":16},"fn_name":null},{"line":753,"address":[7120422,7118749],"length":1,"stats":{"Line":18},"fn_name":null},{"line":754,"address":[7118822],"length":1,"stats":{"Line":9},"fn_name":null},{"line":755,"address":[7118869],"length":1,"stats":{"Line":9},"fn_name":null},{"line":756,"address":[7118892],"length":1,"stats":{"Line":9},"fn_name":null},{"line":757,"address":[7119061,7120605,7120553],"length":1,"stats":{"Line":17},"fn_name":null},{"line":758,"address":[7118931,7119063],"length":1,"stats":{"Line":17},"fn_name":null},{"line":759,"address":[7119175],"length":1,"stats":{"Line":8},"fn_name":null},{"line":760,"address":[7119231],"length":1,"stats":{"Line":8},"fn_name":null},{"line":761,"address":[7120501,7119530,7119357],"length":1,"stats":{"Line":16},"fn_name":null},{"line":763,"address":[7120545,7120451],"length":1,"stats":{"Line":8},"fn_name":null},{"line":764,"address":[7120558,7118956,7119618],"length":1,"stats":{"Line":18},"fn_name":null},{"line":767,"address":[7119648],"length":1,"stats":{"Line":9},"fn_name":null},{"line":768,"address":[7119805],"length":1,"stats":{"Line":9},"fn_name":null},{"line":778,"address":[7120800,7120892],"length":1,"stats":{"Line":9},"fn_name":"pop_group_end<&mut regex_syntax::ast::parse::Parser>"},{"line":779,"address":[7120818,7120907],"length":1,"stats":{"Line":18},"fn_name":null},{"line":780,"address":[7120939],"length":1,"stats":{"Line":9},"fn_name":null},{"line":781,"address":[7121465,7121303,7121022,7121925],"length":1,"stats":{"Line":26},"fn_name":null},{"line":782,"address":[7121305,7121089],"length":1,"stats":{"Line":18},"fn_name":null},{"line":783,"address":[7121470,7121114],"length":1,"stats":{"Line":16},"fn_name":null},{"line":784,"address":[7121566],"length":1,"stats":{"Line":8},"fn_name":null},{"line":785,"address":[7121742,7121605],"length":1,"stats":{"Line":16},"fn_name":null},{"line":786,"address":[7121766],"length":1,"stats":{"Line":8},"fn_name":null},{"line":788,"address":[7121723,7121136],"length":1,"stats":{"Line":8},"fn_name":null},{"line":789,"address":[7121946],"length":1,"stats":{"Line":8},"fn_name":null},{"line":790,"address":[7121166],"length":1,"stats":{"Line":8},"fn_name":null},{"line":795,"address":[7122485,7122527,7122236,7123069,7122795],"length":1,"stats":{"Line":27},"fn_name":null},{"line":796,"address":[7122487,7122271],"length":1,"stats":{"Line":18},"fn_name":null},{"line":806,"address":[7122318],"length":1,"stats":{"Line":0},"fn_name":null},{"line":807,"address":[7122348,7122646],"length":1,"stats":{"Line":0},"fn_name":null},{"line":821,"address":[7123611,7123520],"length":1,"stats":{"Line":8},"fn_name":"push_class_open<&mut regex_syntax::ast::parse::Parser>"},{"line":825,"address":[7123538,7123633,7123763],"length":1,"stats":{"Line":16},"fn_name":null},{"line":827,"address":[7124755,7123753,7124454,7124132],"length":1,"stats":{"Line":16},"fn_name":null},{"line":828,"address":[7124422,7124846,7125179],"length":1,"stats":{"Line":24},"fn_name":null},{"line":829,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":831,"address":[7124924,7125208],"length":1,"stats":{"Line":8},"fn_name":null},{"line":832,"address":[7125246],"length":1,"stats":{"Line":8},"fn_name":null},{"line":850,"address":[7125611,7125504],"length":1,"stats":{"Line":8},"fn_name":"pop_class<&mut regex_syntax::ast::parse::Parser>"},{"line":854,"address":[7125522,7125633,7125842],"length":1,"stats":{"Line":16},"fn_name":null},{"line":856,"address":[7125737,7126211],"length":1,"stats":{"Line":16},"fn_name":null},{"line":857,"address":[7126282],"length":1,"stats":{"Line":8},"fn_name":null},{"line":858,"address":[7126463,7126359],"length":1,"stats":{"Line":16},"fn_name":null},{"line":859,"address":[7126487,7126759],"length":1,"stats":{"Line":8},"fn_name":null},{"line":860,"address":[7126560],"length":1,"stats":{"Line":8},"fn_name":null},{"line":869,"address":[7126761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":871,"address":[7126585],"length":1,"stats":{"Line":8},"fn_name":null},{"line":878,"address":[7126867],"length":1,"stats":{"Line":0},"fn_name":null},{"line":880,"address":[7126607],"length":1,"stats":{"Line":8},"fn_name":null},{"line":881,"address":[7126749],"length":1,"stats":{"Line":8},"fn_name":null},{"line":882,"address":[7126916],"length":1,"stats":{"Line":8},"fn_name":null},{"line":883,"address":[7127903,7126955],"length":1,"stats":{"Line":8},"fn_name":null},{"line":884,"address":[7127989,7127033,7127406],"length":1,"stats":{"Line":24},"fn_name":null},{"line":885,"address":[7127188],"length":1,"stats":{"Line":8},"fn_name":null},{"line":887,"address":[7127074,7127416],"length":1,"stats":{"Line":0},"fn_name":null},{"line":888,"address":[7127463],"length":1,"stats":{"Line":0},"fn_name":null},{"line":899,"address":[7128256,7128308],"length":1,"stats":{"Line":8},"fn_name":"unclosed_class_error<&mut regex_syntax::ast::parse::Parser>"},{"line":900,"address":[7128282,7128820,7128328,7128681],"length":1,"stats":{"Line":24},"fn_name":null},{"line":901,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":902,"address":[7128691,7128660],"length":1,"stats":{"Line":16},"fn_name":null},{"line":903,"address":[7128755],"length":1,"stats":{"Line":8},"fn_name":null},{"line":904,"address":[7128708],"length":1,"stats":{"Line":8},"fn_name":null},{"line":906,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":911,"address":[7128847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":920,"address":[7128912,7129020],"length":1,"stats":{"Line":0},"fn_name":"push_class_op<&mut regex_syntax::ast::parse::Parser>"},{"line":925,"address":[7129035,7128937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":926,"address":[7129094],"length":1,"stats":{"Line":0},"fn_name":null},{"line":927,"address":[7129162,7129382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":928,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":930,"address":[7129266,7129410],"length":1,"stats":{"Line":0},"fn_name":null},{"line":931,"address":[7129461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":940,"address":[7129664,7129760],"length":1,"stats":{"Line":8},"fn_name":"pop_class_op<&mut regex_syntax::ast::parse::Parser>"},{"line":941,"address":[7129783,7129682],"length":1,"stats":{"Line":16},"fn_name":null},{"line":942,"address":[7130001,7130204,7129849],"length":1,"stats":{"Line":8},"fn_name":null},{"line":943,"address":[7130007,7129922,7129978],"length":1,"stats":{"Line":16},"fn_name":null},{"line":944,"address":[7130326],"length":1,"stats":{"Line":8},"fn_name":null},{"line":945,"address":[7130364],"length":1,"stats":{"Line":8},"fn_name":null},{"line":946,"address":[7130465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":950,"address":[7130577,7131321],"length":1,"stats":{"Line":0},"fn_name":null},{"line":951,"address":[7131014],"length":1,"stats":{"Line":0},"fn_name":null},{"line":952,"address":[7130704],"length":1,"stats":{"Line":0},"fn_name":null},{"line":953,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":954,"address":[7130752,7130866],"length":1,"stats":{"Line":0},"fn_name":null},{"line":955,"address":[7130874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":962,"address":[7131520],"length":1,"stats":{"Line":15},"fn_name":"parse<&mut regex_syntax::ast::parse::Parser>"},{"line":963,"address":[7131607,7131538,7131600],"length":1,"stats":{"Line":33},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":968,"address":[7131664,7131754],"length":1,"stats":{"Line":15},"fn_name":"parse_with_comments<&mut regex_syntax::ast::parse::Parser>"},{"line":969,"address":[7131769,7131688,7131900],"length":1,"stats":{"Line":30},"fn_name":null},{"line":970,"address":[7131876,7132393],"length":1,"stats":{"Line":30},"fn_name":null},{"line":971,"address":[7132398],"length":1,"stats":{"Line":15},"fn_name":null},{"line":972,"address":[7138876],"length":1,"stats":{"Line":9},"fn_name":null},{"line":973,"address":[7132529],"length":1,"stats":{"Line":15},"fn_name":null},{"line":974,"address":[7132544],"length":1,"stats":{"Line":15},"fn_name":null},{"line":975,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":977,"address":[7136591,7135930,7140397,7132579,7133894,7133224,7137252,7134536,7137873,7135586],"length":1,"stats":{"Line":96},"fn_name":null},{"line":978,"address":[7132722,7132904,7133572,7133229,7133530],"length":1,"stats":{"Line":40},"fn_name":null},{"line":979,"address":[7133899,7133574],"length":1,"stats":{"Line":9},"fn_name":null},{"line":980,"address":[7134216,7134541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":981,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":982,"address":[7134874,7135234,7135554],"length":1,"stats":{"Line":16},"fn_name":null},{"line":983,"address":[7135064],"length":1,"stats":{"Line":8},"fn_name":null},{"line":985,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":986,"address":[7135781,7135722,7135935],"length":1,"stats":{"Line":16},"fn_name":null},{"line":987,"address":[7135591],"length":1,"stats":{"Line":8},"fn_name":null},{"line":988,"address":[7135679],"length":1,"stats":{"Line":8},"fn_name":null},{"line":991,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":992,"address":[7136442,7136596,7136383],"length":1,"stats":{"Line":16},"fn_name":null},{"line":993,"address":[7136252],"length":1,"stats":{"Line":8},"fn_name":null},{"line":994,"address":[7136340],"length":1,"stats":{"Line":8},"fn_name":null},{"line":997,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":998,"address":[7137103,7137044,7137257],"length":1,"stats":{"Line":16},"fn_name":null},{"line":999,"address":[7136913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1000,"address":[7137001],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1003,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1004,"address":[7137574,7137878],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1006,"address":[7132859,7138195],"length":1,"stats":{"Line":19},"fn_name":null},{"line":1009,"address":[7132593,7139380,7139060,7138881],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1010,"address":[7139041,7139858,7139429],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1011,"address":[7140118],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1012,"address":[7139863],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1013,"address":[7140086],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1014,"address":[7139987,7139901],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1015,"address":[7140032],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1034,"address":[7140752,7140941],"length":1,"stats":{"Line":8},"fn_name":"parse_uncounted_repetition<&mut regex_syntax::ast::parse::Parser>"},{"line":1039,"address":[7140871,7141035,7140770],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1040,"address":[7140987,7140890,7140960,7140786],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1042,"address":[7141028],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1043,"address":[7141076,7141154],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1044,"address":[7141184,7141102],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1045,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1046,"address":[7141363],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1047,"address":[7141144,7141309],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1051,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1052,"address":[7141251],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1053,"address":[7141646,7141792],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1054,"address":[7141585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1057,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1059,"address":[7141539],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1060,"address":[7141555,7141894,7141797],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1061,"address":[7141871],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1062,"address":[7141887],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1064,"address":[7142359,7141904],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1065,"address":[7141908],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1066,"address":[7142154],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1067,"address":[7142035],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1068,"address":[7142133],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1070,"address":[7142232],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1071,"address":[7142240],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1073,"address":[7142661],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1089,"address":[7142945,7142864],"length":1,"stats":{"Line":8},"fn_name":"parse_counted_repetition<&mut regex_syntax::ast::parse::Parser>"},{"line":1093,"address":[7142967,7142888,7143022],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1094,"address":[7143015],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1095,"address":[7143063,7143141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1096,"address":[7143089,7143171],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1097,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1098,"address":[7143371],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1099,"address":[7143317,7143131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1103,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1104,"address":[7143259],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1105,"address":[7143734,7143654],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1106,"address":[7143585],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1109,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1111,"address":[7143743,7143555],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1112,"address":[7143876],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1113,"address":[7143775],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1114,"address":[7143865],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1117,"address":[7144088,7144031,7144135],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1118,"address":[7143765],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1119,"address":[7143977],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1120,"address":[7143988],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1122,"address":[7144458],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1123,"address":[7144484],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1124,"address":[7144628],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1125,"address":[7144527],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1126,"address":[7144617],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1129,"address":[7145623,7144513,7144733],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1130,"address":[7144751],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1131,"address":[7144895],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1132,"address":[7144794],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1133,"address":[7144884],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1136,"address":[7145057,7144780,7145000],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1137,"address":[7145243,7145196,7145139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1138,"address":[7145078],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1139,"address":[7145085],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1140,"address":[7145096],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1142,"address":[7145564],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1144,"address":[7145009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1147,"address":[7145633],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1148,"address":[7145847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1149,"address":[7145746],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1150,"address":[7145836],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1154,"address":[7145716],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1155,"address":[7145948,7146045,7145732],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1156,"address":[7146022],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1157,"address":[7146038],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1160,"address":[7146047],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1161,"address":[7146137],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1162,"address":[7146324],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1163,"address":[7146214],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1166,"address":[7146178,7146779],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1167,"address":[7146182,7146379],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1168,"address":[7146580],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1169,"address":[7146472],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1170,"address":[7146520],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1172,"address":[7146658],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1173,"address":[7146665],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1175,"address":[7147081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1197,"address":[7147409,7147328],"length":1,"stats":{"Line":9},"fn_name":"parse_group<&mut regex_syntax::ast::parse::Parser>"},{"line":1198,"address":[7147352,7147424,7147554],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1199,"address":[7147521],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1200,"address":[7147889],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1201,"address":[7147902],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1202,"address":[7147915],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1203,"address":[7148142],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1204,"address":[7147966,7148053],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1205,"address":[7148131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1208,"address":[7147940],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1209,"address":[7150014,7153420,7148253],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1210,"address":[7148326],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1211,"address":[7149307,7148811,7149627],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1212,"address":[7149797],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1213,"address":[7149054],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1214,"address":[7149102],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1215,"address":[7149297,7149667],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1217,"address":[7150026,7153427,7149632,7148301,7152586,7149619,7150006],"length":1,"stats":{"Line":53},"fn_name":null},{"line":1218,"address":[7150117],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1219,"address":[7150268],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1220,"address":[7150168],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1223,"address":[7150878,7150558,7150142,7150318],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1224,"address":[7150541,7150909],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1225,"address":[7150924],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1226,"address":[7150931,7151659],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1229,"address":[7151047],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1230,"address":[7151171,7151297],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1231,"address":[7151112],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1232,"address":[7151160],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1235,"address":[7151460],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1236,"address":[7151302,7151102],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1237,"address":[7151398],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1240,"address":[7150941,7151917],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1241,"address":[7152387],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1242,"address":[7151664],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1243,"address":[7151712],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1244,"address":[7151907,7152269],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1248,"address":[7150032,7152591],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1249,"address":[7153229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1250,"address":[7152997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1251,"address":[7153049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1252,"address":[7153083],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1264,"address":[7153721,7153648],"length":1,"stats":{"Line":13},"fn_name":"parse_capture_name<&mut regex_syntax::ast::parse::Parser>"},{"line":1268,"address":[7153681,7153743],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1269,"address":[7153825],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1270,"address":[7153775,7153814],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1272,"address":[7153749],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1273,"address":[7153918,7154264],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1274,"address":[7153954],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1275,"address":[7154000],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1277,"address":[7154002,7153986],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1278,"address":[7154155],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1279,"address":[7154123],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1280,"address":[7154144],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1283,"address":[7154258,7154106],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1284,"address":[7154269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1287,"address":[7153920],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1288,"address":[7154282],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1289,"address":[7154364],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1290,"address":[7154332],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1292,"address":[7154315,7154460,7154576],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1293,"address":[7154559],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1294,"address":[7154863],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1295,"address":[7154989],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1296,"address":[7155286],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1297,"address":[7155149],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1298,"address":[7155275],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1302,"address":[7155018],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1303,"address":[7155382],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1306,"address":[7155950,7155523,7155576],"length":1,"stats":{"Line":34},"fn_name":null},{"line":1307,"address":[7155955],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1325,"address":[7156096,7156156],"length":1,"stats":{"Line":10},"fn_name":"parse_flags<&mut regex_syntax::ast::parse::Parser>"},{"line":1326,"address":[7156171,7156114],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1327,"address":[7156265],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1328,"address":[7156285,7158235,7156318],"length":1,"stats":{"Line":38},"fn_name":null},{"line":1329,"address":[7156914,7157894,7156428],"length":1,"stats":{"Line":38},"fn_name":null},{"line":1330,"address":[7156566],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1332,"address":[7156713],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1335,"address":[7156776,7156919],"length":1,"stats":{"Line":19},"fn_name":null},{"line":1336,"address":[7157114,7157255],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1337,"address":[7156956],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1338,"address":[7157055],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1339,"address":[7156979],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1344,"address":[7156448],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1346,"address":[7156540],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1347,"address":[7157439,7157276,7157334],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1349,"address":[7157756,7157899],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1350,"address":[7158078],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1351,"address":[7157936],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1352,"address":[7158019],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1353,"address":[7157943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1358,"address":[7158214],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1359,"address":[7158325],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1360,"address":[7158256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1364,"address":[7156400,7158401],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1365,"address":[7158449],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1367,"address":[7158391,7158609],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1368,"address":[7158657],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1377,"address":[7158800],"length":1,"stats":{"Line":14},"fn_name":"parse_flag<&mut regex_syntax::ast::parse::Parser>"},{"line":1378,"address":[7158963,7158915,7158991,7158949,7158823,7158977,7158932],"length":1,"stats":{"Line":68},"fn_name":null},{"line":1379,"address":[7158908,7158849],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1380,"address":[7158925],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1381,"address":[7158942],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1382,"address":[7158956],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1383,"address":[7158970],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1384,"address":[7158984],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1386,"address":[7159004],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1387,"address":[7158993,7158883],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1402,"address":[7159104,7159151],"length":1,"stats":{"Line":10},"fn_name":"parse_primitive<&mut regex_syntax::ast::parse::Parser>"},{"line":1403,"address":[7159720,7159445,7160297,7159998,7159267,7159127],"length":1,"stats":{"Line":58},"fn_name":null},{"line":1404,"address":[7159170,7159262],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1405,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1406,"address":[7159272],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1407,"address":[7159349],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1408,"address":[7159356],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1410,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1411,"address":[7159484],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1412,"address":[7159466],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1413,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1415,"address":[7159621],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1416,"address":[7159628],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1418,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1419,"address":[7159762],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1420,"address":[7159744],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1421,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1423,"address":[7159899],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1424,"address":[7159906],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1426,"address":[7159222],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1427,"address":[7160030],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1428,"address":[7159229],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1429,"address":[7160022],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1430,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1432,"address":[7160198],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1433,"address":[7160205],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1444,"address":[7160416,7160481],"length":1,"stats":{"Line":14},"fn_name":"parse_escape<&mut regex_syntax::ast::parse::Parser>"},{"line":1445,"address":[7160496,7160626,7160448],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1446,"address":[7160593],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1447,"address":[7160961],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1448,"address":[7161146],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1449,"address":[7161018,7161105],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1450,"address":[7161135],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1453,"address":[7160994],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1455,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1456,"address":[7161242],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1457,"address":[7161535],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1458,"address":[7161755],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1459,"address":[7161597],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1460,"address":[7161744],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1463,"address":[7161571],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1464,"address":[7161853],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1465,"address":[7161949],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1467,"address":[7162134,7161274,7162243],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1468,"address":[7162337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1469,"address":[7162172,7162248],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1470,"address":[7162326],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1473,"address":[7161333],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1474,"address":[7162433,7162872],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1475,"address":[7162607],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1476,"address":[7162703],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1478,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1479,"address":[7163191,7163630],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1480,"address":[7163365],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1481,"address":[7163461],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1483,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1484,"address":[7163947],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1485,"address":[7163968],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1486,"address":[7164064],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1488,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1492,"address":[7161316],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1493,"address":[7164241],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1494,"address":[7164347],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1495,"address":[7164504],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1496,"address":[7164442],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1497,"address":[7164496],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1498,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1501,"address":[7164381,7166208],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":1502,"address":[7166320],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1503,"address":[7166240],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1504,"address":[7166304],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1505,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1508,"address":[7165698,7165058,7164872,7165902,7166106,7165284,7164996,7165120,7165182,7164934,7165494],"length":1,"stats":{"Line":48},"fn_name":null},{"line":1509,"address":[7164396,7164815],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1510,"address":[7164877],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1511,"address":[7164939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1512,"address":[7165001],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1513,"address":[7165063],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1514,"address":[7165125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1515,"address":[7165195,7165279],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1516,"address":[7165220],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1518,"address":[7165340],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1519,"address":[7165289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1520,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1522,"address":[7165547],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1523,"address":[7165499],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1524,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1526,"address":[7165751],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1527,"address":[7165703],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1528,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1530,"address":[7165955],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1531,"address":[7165907],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1532,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1534,"address":[7164718,7166116],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1546,"address":[7166512],"length":1,"stats":{"Line":1},"fn_name":"parse_octal<&mut regex_syntax::ast::parse::Parser>"},{"line":1550,"address":[7166594,7166535],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1551,"address":[7166583,7166624,7166712],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1552,"address":[7166692],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1554,"address":[7166953,7166861,7166806,7167034,7166909,7166742,7167003,7166942],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1555,"address":[7166931,7166898],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1556,"address":[7166850,7166950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1557,"address":[7167528,7166961,7167558,7166783],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1559,"address":[7167014],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1560,"address":[7167044],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1563,"address":[7167170],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1564,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1567,"address":[7167262],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1569,"address":[7167314],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1580,"address":[7167568],"length":1,"stats":{"Line":9},"fn_name":"parse_hex<&mut regex_syntax::ast::parse::Parser>"},{"line":1581,"address":[7167745,7167645],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1582,"address":[7167591,7167657],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1585,"address":[7167809,7167734,7167802],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1586,"address":[7167804,7167779],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1587,"address":[7167811],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1588,"address":[7167797],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1590,"address":[7167821],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1591,"address":[7167936],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1592,"address":[7167855,7167888],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1595,"address":[7167980,7168027,7167845],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1596,"address":[7168017],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1598,"address":[7167995],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1610,"address":[7168048,7168116],"length":1,"stats":{"Line":8},"fn_name":"parse_hex_digits<&mut regex_syntax::ast::parse::Parser>"},{"line":1617,"address":[7168081,7168139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1618,"address":[7168173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1620,"address":[7168247],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1621,"address":[7168948,7168254,7168439],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1622,"address":[7168469],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1623,"address":[7168721,7168611],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1624,"address":[7168577,7168600],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1626,"address":[7168730,7168547],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1627,"address":[7168812],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1628,"address":[7168794],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1629,"address":[7168801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1632,"address":[7168921,7168751],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1636,"address":[7168429],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1637,"address":[7168969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1638,"address":[7168976],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1639,"address":[7169333,7169541,7169048],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1640,"address":[7169188,7169445],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1641,"address":[7169335],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1642,"address":[7169434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1644,"address":[7169568,7169213],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1645,"address":[7169227],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1646,"address":[7169546],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1647,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1656,"address":[7169819,7169744],"length":1,"stats":{"Line":9},"fn_name":"parse_hex_brace<&mut regex_syntax::ast::parse::Parser>"},{"line":1663,"address":[7169777,7169842],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1664,"address":[7169876],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1666,"address":[7169950],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1667,"address":[7169973],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1668,"address":[7170036,7170451],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1669,"address":[7170164],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1670,"address":[7170292,7170402],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1671,"address":[7170258],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1672,"address":[7170281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1675,"address":[7170415,7170212],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1677,"address":[7170463,7170139],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1678,"address":[7170596],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1679,"address":[7170495],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1680,"address":[7170585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1683,"address":[7170485],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1684,"address":[7170697],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1685,"address":[7170827,7170958],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1686,"address":[7170948],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1688,"address":[7171289],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1689,"address":[7171451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1690,"address":[7171350],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1691,"address":[7171440],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1694,"address":[7171743,7171557,7171951,7171310],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1695,"address":[7171642,7171855],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1696,"address":[7171745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1697,"address":[7171844],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1699,"address":[7171667,7172013],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1700,"address":[7171681,7171956],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1701,"address":[7171998],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1702,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1716,"address":[7172192,7172250],"length":1,"stats":{"Line":8},"fn_name":"parse_decimal<&mut regex_syntax::ast::parse::Parser>"},{"line":1717,"address":[7172270,7172218],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1718,"address":[7172304],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1720,"address":[7172503,7172356],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1721,"address":[7172496],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1723,"address":[7172481],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1724,"address":[7172508,7172809],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1725,"address":[7172735],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1726,"address":[7172802],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1728,"address":[7172814,7172680],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1729,"address":[7172849,7172997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1730,"address":[7172990],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1732,"address":[7172958,7173007],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1733,"address":[7173060],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1734,"address":[7173254,7173312,7173128],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1736,"address":[7173543,7173094,7173510,7173319],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1737,"address":[7173390,7173512],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1738,"address":[7173553,7173408],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1750,"address":[7173648,7173721],"length":1,"stats":{"Line":8},"fn_name":"parse_set_class<&mut regex_syntax::ast::parse::Parser>"},{"line":1751,"address":[7173866,7173672,7173736],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1753,"address":[7174193,7173833],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1754,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1755,"address":[7178109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1756,"address":[7174303],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1757,"address":[7174318],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1758,"address":[7174383],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1760,"address":[7178107,7177288,7174353,7175435,7176970,7176655,7177606],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1761,"address":[7174488],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1766,"address":[7174874,7174593],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1767,"address":[7174835,7174879],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1768,"address":[7174943],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1769,"address":[7175110],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1772,"address":[7175115,7175440],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1774,"address":[7176062,7175930,7175759,7176525],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1775,"address":[7176038,7176527],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1776,"address":[7176581],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1778,"address":[7176379],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1780,"address":[7176668,7176761],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1781,"address":[7176770,7176730,7176897],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1782,"address":[7176890,7176930],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1783,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1784,"address":[7176776],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1787,"address":[7176983,7177076],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1788,"address":[7177085,7177215,7177045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1789,"address":[7177248,7177208],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1790,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1791,"address":[7177091],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1794,"address":[7177301,7177394],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1795,"address":[7177403,7177363,7177533],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1796,"address":[7177566,7177526],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1797,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1798,"address":[7177409],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1801,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1802,"address":[7177611,7174583],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1817,"address":[7178288,7178361],"length":1,"stats":{"Line":8},"fn_name":"parse_set_class_range<&mut regex_syntax::ast::parse::Parser>"},{"line":1818,"address":[7178312,7178376,7178991,7179023,7178693],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1819,"address":[7178683],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1820,"address":[7179049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1821,"address":[7179102,7179178],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1828,"address":[7179222,7179183,7179396,7179075,7179277,7179345],"length":1,"stats":{"Line":48},"fn_name":null},{"line":1829,"address":[7179266,7179304],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1830,"address":[7179355,7179208],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1832,"address":[7179428],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1836,"address":[7179414,7179592],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1837,"address":[7179631],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1839,"address":[7180343,7180026,7179690,7179611],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1841,"address":[7180011,7180372],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1842,"address":[7181317,7180479,7180689,7180984],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1843,"address":[7181322,7180817,7181704,7181374],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1845,"address":[7181678,7182022],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1846,"address":[7182303],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1847,"address":[7182199],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1850,"address":[7182032],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1864,"address":[7182576,7182623],"length":1,"stats":{"Line":8},"fn_name":"parse_set_class_item<&mut regex_syntax::ast::parse::Parser>"},{"line":1865,"address":[7182682,7182642,7182599,7182958],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1866,"address":[7182677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1868,"address":[7182709],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1869,"address":[7182647],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1870,"address":[7182687],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1871,"address":[7182700],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1873,"address":[7182862],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1874,"address":[7182869],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1895,"address":[7183008,7183067],"length":1,"stats":{"Line":8},"fn_name":"parse_set_class_open<&mut regex_syntax::ast::parse::Parser>"},{"line":1898,"address":[7183082,7183212,7183034],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1899,"address":[7183179],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1900,"address":[7183511],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1901,"address":[7183680],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1902,"address":[7183639,7183552],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1903,"address":[7183669],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1907,"address":[7183538,7183780,7183835,7183812],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1908,"address":[7183804],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1910,"address":[7183793,7183821],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1911,"address":[7183950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1912,"address":[7183840],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1913,"address":[7183939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1916,"address":[7183827],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1919,"address":[7184046],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1920,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1921,"address":[7184169,7184203,7184484],"length":1,"stats":{"Line":25},"fn_name":null},{"line":1922,"address":[7184265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1923,"address":[7184250],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1924,"address":[7184257],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1925,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1927,"address":[7184463],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1928,"address":[7184590,7184700],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1929,"address":[7184489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1930,"address":[7184579],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1936,"address":[7184208,7185032,7184705],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1937,"address":[7184813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1938,"address":[7184798],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1939,"address":[7184805],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1940,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1942,"address":[7185011],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1943,"address":[7185138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1944,"address":[7185037],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1945,"address":[7185127],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1950,"address":[7185239],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1952,"address":[7185458],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1957,"address":[7185657],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1969,"address":[7185904],"length":1,"stats":{"Line":8},"fn_name":"maybe_parse_ascii_class<&mut regex_syntax::ast::parse::Parser>"},{"line":1989,"address":[7185930,7186091],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1991,"address":[7186058],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1992,"address":[7186418],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1993,"address":[7186434],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1994,"address":[7186561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1995,"address":[7186678,7186656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1997,"address":[7186539,7186687],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1998,"address":[7186723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1999,"address":[7186812],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2001,"address":[7186828,7186873,7186701],"length":1,"stats":{"Line":25},"fn_name":null},{"line":2002,"address":[7186838],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2003,"address":[7186854],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2004,"address":[7186883],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2005,"address":[7186972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2008,"address":[7186989],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2009,"address":[7187119,7187007],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2010,"address":[7187108,7187125],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2011,"address":[7187165],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2012,"address":[7187254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2014,"address":[7187139,7187271],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2015,"address":[7187400],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2016,"address":[7187460],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2017,"address":[7187549],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2019,"address":[7187602,7187437],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2020,"address":[7187558,7187604],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2021,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2022,"address":[7187589,7187705],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2023,"address":[7187778],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2026,"address":[7187824],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2027,"address":[7187625,7187787],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2028,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2029,"address":[7187817],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2040,"address":[7187936,7188052],"length":1,"stats":{"Line":8},"fn_name":"parse_unicode_class<&mut regex_syntax::ast::parse::Parser>"},{"line":2041,"address":[7188119,7187962,7188074],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2043,"address":[7188103,7188157],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2044,"address":[7188191],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2046,"address":[7188260],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2047,"address":[7188317],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2048,"address":[7188470,7188529],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2049,"address":[7188408,7188385],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2052,"address":[7188352,7188541,7192139,7191753],"length":1,"stats":{"Line":32},"fn_name":null},{"line":2053,"address":[7188588],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2054,"address":[7188651,7188839],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2055,"address":[7188768],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2057,"address":[7188754,7188851],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2058,"address":[7188916],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2059,"address":[7188898],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2061,"address":[7188865,7189024,7189146],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2062,"address":[7189136],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2064,"address":[7189515],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2065,"address":[7191751,7189621,7189802,7190351],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2067,"address":[7189818],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2068,"address":[7190153],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2069,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2070,"address":[7189850],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2071,"address":[7189983,7190146,7192672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2074,"address":[7190364,7190450,7191749,7189751,7190987],"length":1,"stats":{"Line":24},"fn_name":null},{"line":2076,"address":[7190466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2077,"address":[7190789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2078,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2079,"address":[7190498],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2080,"address":[7190631,7190782,7192622],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2083,"address":[7191602,7191000,7191101,7190399],"length":1,"stats":{"Line":33},"fn_name":null},{"line":2085,"address":[7191117],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2086,"address":[7191404],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2087,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2088,"address":[7191149],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2089,"address":[7191258,7192572,7191397],"length":1,"stats":{"Line":18},"fn_name":null},{"line":2093,"address":[7191035,7191607],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2096,"address":[7188562],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2097,"address":[7191766],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2098,"address":[7191788],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2099,"address":[7191845],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2100,"address":[7191827],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2101,"address":[7191834],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2104,"address":[7191801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2105,"address":[7191950],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2106,"address":[7191965],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2108,"address":[7192392],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2109,"address":[7192309,7192235],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2110,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2111,"address":[7192344],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2119,"address":[7192752],"length":1,"stats":{"Line":13},"fn_name":"parse_perl_class<&mut regex_syntax::ast::parse::Parser>"},{"line":2120,"address":[7192775],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2121,"address":[7192804],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2122,"address":[7192824],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2123,"address":[7193052,7193070,7193175,7192968,7193031,7193010,7192989],"length":1,"stats":{"Line":66},"fn_name":null},{"line":2124,"address":[7192833,7192952],"length":1,"stats":{"Line":21},"fn_name":null},{"line":2125,"address":[7192973],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2126,"address":[7192994],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2127,"address":[7193015],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2128,"address":[7193036],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2129,"address":[7193054],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2130,"address":[7192880,7193077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2147,"address":[7193328],"length":1,"stats":{"Line":9},"fn_name":"new<&mut regex_syntax::ast::parse::Parser>"},{"line":2152,"address":[7193376],"length":1,"stats":{"Line":9},"fn_name":"check<&mut regex_syntax::ast::parse::Parser>"},{"line":2153,"address":[7193402],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2156,"address":[7193456,7193614],"length":1,"stats":{"Line":9},"fn_name":"increment_depth<&mut regex_syntax::ast::parse::Parser>"},{"line":2157,"address":[7194208,7193476,7193667,7193629],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}<&mut regex_syntax::ast::parse::Parser>"},{"line":2158,"address":[7194300,7194234],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2159,"address":[7194240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2160,"address":[7194274],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2163,"address":[7193984],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2164,"address":[7194025],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2165,"address":[7194058,7194114],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2166,"address":[7194066],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2167,"address":[7194096],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2170,"address":[7194033],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2171,"address":[7194050],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2174,"address":[7194336],"length":1,"stats":{"Line":9},"fn_name":"decrement_depth<&mut regex_syntax::ast::parse::Parser>"},{"line":2177,"address":[7194345],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2185,"address":[7194432],"length":1,"stats":{"Line":9},"fn_name":"finish<&mut regex_syntax::ast::parse::Parser>"},{"line":2186,"address":[7194447],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2189,"address":[7194464],"length":1,"stats":{"Line":9},"fn_name":"visit_pre<&mut regex_syntax::ast::parse::Parser>"},{"line":2190,"address":[7194666,7194547,7194620,7194643,7194570],"length":1,"stats":{"Line":44},"fn_name":null},{"line":2191,"address":[7194481],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2192,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2193,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2194,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2195,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2196,"address":[7194533],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2197,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2199,"address":[7194577],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2201,"address":[7194598],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2202,"address":[7194627],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2203,"address":[7194650],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2204,"address":[7194673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2205,"address":[7194554],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2207,"address":[7194689],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2210,"address":[7194720],"length":1,"stats":{"Line":9},"fn_name":"visit_post<&mut regex_syntax::ast::parse::Parser>"},{"line":2211,"address":[7194808,7194821],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2212,"address":[7194737],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2213,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2214,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2215,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2217,"address":[7194794],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2220,"address":[7194815],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2222,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2225,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2226,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2227,"address":[7194828],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2228,"address":[7194839],"length":1,"stats":{"Line":9},"fn_name":null},{"line":2233,"address":[7194864],"length":1,"stats":{"Line":8},"fn_name":"visit_class_set_item_pre<&mut regex_syntax::ast::parse::Parser>"},{"line":2237,"address":[7194954],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2238,"address":[7194881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2239,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2240,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2241,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2242,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2243,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2245,"address":[7194963],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2247,"address":[7194984],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2248,"address":[7194938],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2250,"address":[7195009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2253,"address":[7195040],"length":1,"stats":{"Line":8},"fn_name":"visit_class_set_item_post<&mut regex_syntax::ast::parse::Parser>"},{"line":2257,"address":[7195097,7195084],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2258,"address":[7195057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2259,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2260,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2261,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2262,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2263,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2265,"address":[7195091],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2267,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2268,"address":[7195104],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2269,"address":[7195115],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2274,"address":[7195136],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_pre<&mut regex_syntax::ast::parse::Parser>"},{"line":2278,"address":[7195157],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2281,"address":[7195184],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_post<&mut regex_syntax::ast::parse::Parser>"},{"line":2285,"address":[7195206],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2286,"address":[7195225],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2293,"address":[7195248,7195313],"length":1,"stats":{"Line":8},"fn_name":"specialize_err<u32>"},{"line":2298,"address":[7195362,7195258],"length":1,"stats":{"Line":16},"fn_name":null},{"line":2299,"address":[7195475,7195625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2300,"address":[7195630],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2302,"address":[7195537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":2305,"address":[7195328],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2344,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2345,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2350,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":2351,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":769,"coverable":1034},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","ast","print.rs"],"content":"/*!\nThis module provides a regular expression printer for `Ast`.\n*/\n\nuse std::fmt;\n\nuse ast::visitor::{self, Visitor};\nuse ast::{self, Ast};\n\n/// A builder for constructing a printer.\n///\n/// Note that since a printer doesn't have any configuration knobs, this type\n/// remains unexported.\n#[derive(Clone, Debug)]\nstruct PrinterBuilder {\n    _priv: (),\n}\n\nimpl Default for PrinterBuilder {\n    fn default() -> PrinterBuilder {\n        PrinterBuilder::new()\n    }\n}\n\nimpl PrinterBuilder {\n    fn new() -> PrinterBuilder {\n        PrinterBuilder { _priv: () }\n    }\n\n    fn build(&self) -> Printer {\n        Printer { _priv: () }\n    }\n}\n\n/// A printer for a regular expression abstract syntax tree.\n///\n/// A printer converts an abstract syntax tree (AST) to a regular expression\n/// pattern string. This particular printer uses constant stack space and heap\n/// space proportional to the size of the AST.\n///\n/// This printer will not necessarily preserve the original formatting of the\n/// regular expression pattern string. For example, all whitespace and comments\n/// are ignored.\n#[derive(Debug)]\npub struct Printer {\n    _priv: (),\n}\n\nimpl Printer {\n    /// Create a new printer.\n    pub fn new() -> Printer {\n        PrinterBuilder::new().build()\n    }\n\n    /// Print the given `Ast` to the given writer. The writer must implement\n    /// `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n    /// here are a `fmt::Formatter` (which is available in `fmt::Display`\n    /// implementations) or a `&mut String`.\n    pub fn print<W: fmt::Write>(&mut self, ast: &Ast, wtr: W) -> fmt::Result {\n        visitor::visit(ast, Writer { printer: self, wtr: wtr })\n    }\n}\n\n#[derive(Debug)]\nstruct Writer<'p, W> {\n    printer: &'p mut Printer,\n    wtr: W,\n}\n\nimpl<'p, W: fmt::Write> Visitor for Writer<'p, W> {\n    type Output = ();\n    type Err = fmt::Error;\n\n    fn finish(self) -> fmt::Result {\n        Ok(())\n    }\n\n    fn visit_pre(&mut self, ast: &Ast) -> fmt::Result {\n        match *ast {\n            Ast::Group(ref x) => self.fmt_group_pre(x),\n            Ast::Class(ast::Class::Bracketed(ref x)) => {\n                self.fmt_class_bracketed_pre(x)\n            }\n            _ => Ok(()),\n        }\n    }\n\n    fn visit_post(&mut self, ast: &Ast) -> fmt::Result {\n        use ast::Class;\n\n        match *ast {\n            Ast::Empty(_) => Ok(()),\n            Ast::Flags(ref x) => self.fmt_set_flags(x),\n            Ast::Literal(ref x) => self.fmt_literal(x),\n            Ast::Dot(_) => self.wtr.write_str(\".\"),\n            Ast::Assertion(ref x) => self.fmt_assertion(x),\n            Ast::Class(Class::Perl(ref x)) => self.fmt_class_perl(x),\n            Ast::Class(Class::Unicode(ref x)) => self.fmt_class_unicode(x),\n            Ast::Class(Class::Bracketed(ref x)) => {\n                self.fmt_class_bracketed_post(x)\n            }\n            Ast::Repetition(ref x) => self.fmt_repetition(x),\n            Ast::Group(ref x) => self.fmt_group_post(x),\n            Ast::Alternation(_) => Ok(()),\n            Ast::Concat(_) => Ok(()),\n        }\n    }\n\n    fn visit_alternation_in(&mut self) -> fmt::Result {\n        self.wtr.write_str(\"|\")\n    }\n\n    fn visit_class_set_item_pre(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        match *ast {\n            ast::ClassSetItem::Bracketed(ref x) => {\n                self.fmt_class_bracketed_pre(x)\n            }\n            _ => Ok(()),\n        }\n    }\n\n    fn visit_class_set_item_post(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        use ast::ClassSetItem::*;\n\n        match *ast {\n            Empty(_) => Ok(()),\n            Literal(ref x) => self.fmt_literal(x),\n            Range(ref x) => {\n                self.fmt_literal(&x.start)?;\n                self.wtr.write_str(\"-\")?;\n                self.fmt_literal(&x.end)?;\n                Ok(())\n            }\n            Ascii(ref x) => self.fmt_class_ascii(x),\n            Unicode(ref x) => self.fmt_class_unicode(x),\n            Perl(ref x) => self.fmt_class_perl(x),\n            Bracketed(ref x) => self.fmt_class_bracketed_post(x),\n            Union(_) => Ok(()),\n        }\n    }\n\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        self.fmt_class_set_binary_op_kind(&ast.kind)\n    }\n}\n\nimpl<'p, W: fmt::Write> Writer<'p, W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {\n        use ast::GroupKind::*;\n        match ast.kind {\n            CaptureIndex(_) => self.wtr.write_str(\"(\"),\n            CaptureName(ref x) => {\n                self.wtr.write_str(\"(?P<\")?;\n                self.wtr.write_str(&x.name)?;\n                self.wtr.write_str(\">\")?;\n                Ok(())\n            }\n            NonCapturing(ref flags) => {\n                self.wtr.write_str(\"(?\")?;\n                self.fmt_flags(flags)?;\n                self.wtr.write_str(\":\")?;\n                Ok(())\n            }\n        }\n    }\n\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {\n        self.wtr.write_str(\")\")\n    }\n\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {\n        use ast::RepetitionKind::*;\n        match ast.op.kind {\n            ZeroOrOne if ast.greedy => self.wtr.write_str(\"?\"),\n            ZeroOrOne => self.wtr.write_str(\"??\"),\n            ZeroOrMore if ast.greedy => self.wtr.write_str(\"*\"),\n            ZeroOrMore => self.wtr.write_str(\"*?\"),\n            OneOrMore if ast.greedy => self.wtr.write_str(\"+\"),\n            OneOrMore => self.wtr.write_str(\"+?\"),\n            Range(ref x) => {\n                self.fmt_repetition_range(x)?;\n                if !ast.greedy {\n                    self.wtr.write_str(\"?\")?;\n                }\n                Ok(())\n            }\n        }\n    }\n\n    fn fmt_repetition_range(\n        &mut self,\n        ast: &ast::RepetitionRange,\n    ) -> fmt::Result {\n        use ast::RepetitionRange::*;\n        match *ast {\n            Exactly(x) => write!(self.wtr, \"{{{}}}\", x),\n            AtLeast(x) => write!(self.wtr, \"{{{},}}\", x),\n            Bounded(x, y) => write!(self.wtr, \"{{{},{}}}\", x, y),\n        }\n    }\n\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n        use ast::LiteralKind::*;\n\n        match ast.kind {\n            Verbatim => self.wtr.write_char(ast.c),\n            Punctuation => write!(self.wtr, r\"\\{}\", ast.c),\n            Octal => write!(self.wtr, r\"\\{:o}\", ast.c as u32),\n            HexFixed(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{:02X}\", ast.c as u32)\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{:04X}\", ast.c as u32)\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{:08X}\", ast.c as u32)\n            }\n            HexBrace(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{{{:X}}}\", ast.c as u32)\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{{{:X}}}\", ast.c as u32)\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{{{:X}}}\", ast.c as u32)\n            }\n            Special(ast::SpecialLiteralKind::Bell) => {\n                self.wtr.write_str(r\"\\a\")\n            }\n            Special(ast::SpecialLiteralKind::FormFeed) => {\n                self.wtr.write_str(r\"\\f\")\n            }\n            Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n            Special(ast::SpecialLiteralKind::LineFeed) => {\n                self.wtr.write_str(r\"\\n\")\n            }\n            Special(ast::SpecialLiteralKind::CarriageReturn) => {\n                self.wtr.write_str(r\"\\r\")\n            }\n            Special(ast::SpecialLiteralKind::VerticalTab) => {\n                self.wtr.write_str(r\"\\v\")\n            }\n            Special(ast::SpecialLiteralKind::Space) => {\n                self.wtr.write_str(r\"\\ \")\n            }\n        }\n    }\n\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {\n        use ast::AssertionKind::*;\n        match ast.kind {\n            StartLine => self.wtr.write_str(\"^\"),\n            EndLine => self.wtr.write_str(\"$\"),\n            StartText => self.wtr.write_str(r\"\\A\"),\n            EndText => self.wtr.write_str(r\"\\z\"),\n            WordBoundary => self.wtr.write_str(r\"\\b\"),\n            NotWordBoundary => self.wtr.write_str(r\"\\B\"),\n        }\n    }\n\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {\n        self.wtr.write_str(\"(?\")?;\n        self.fmt_flags(&ast.flags)?;\n        self.wtr.write_str(\")\")?;\n        Ok(())\n    }\n\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {\n        use ast::{Flag, FlagsItemKind};\n\n        for item in &ast.items {\n            match item.kind {\n                FlagsItemKind::Negation => self.wtr.write_str(\"-\"),\n                FlagsItemKind::Flag(ref flag) => match *flag {\n                    Flag::CaseInsensitive => self.wtr.write_str(\"i\"),\n                    Flag::MultiLine => self.wtr.write_str(\"m\"),\n                    Flag::DotMatchesNewLine => self.wtr.write_str(\"s\"),\n                    Flag::SwapGreed => self.wtr.write_str(\"U\"),\n                    Flag::Unicode => self.wtr.write_str(\"u\"),\n                    Flag::IgnoreWhitespace => self.wtr.write_str(\"x\"),\n                },\n            }?;\n        }\n        Ok(())\n    }\n\n    fn fmt_class_bracketed_pre(\n        &mut self,\n        ast: &ast::ClassBracketed,\n    ) -> fmt::Result {\n        if ast.negated {\n            self.wtr.write_str(\"[^\")\n        } else {\n            self.wtr.write_str(\"[\")\n        }\n    }\n\n    fn fmt_class_bracketed_post(\n        &mut self,\n        _ast: &ast::ClassBracketed,\n    ) -> fmt::Result {\n        self.wtr.write_str(\"]\")\n    }\n\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {\n        use ast::ClassSetBinaryOpKind::*;\n        match *ast {\n            Intersection => self.wtr.write_str(\"&&\"),\n            Difference => self.wtr.write_str(\"--\"),\n            SymmetricDifference => self.wtr.write_str(\"~~\"),\n        }\n    }\n\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {\n        use ast::ClassPerlKind::*;\n        match ast.kind {\n            Digit if ast.negated => self.wtr.write_str(r\"\\D\"),\n            Digit => self.wtr.write_str(r\"\\d\"),\n            Space if ast.negated => self.wtr.write_str(r\"\\S\"),\n            Space => self.wtr.write_str(r\"\\s\"),\n            Word if ast.negated => self.wtr.write_str(r\"\\W\"),\n            Word => self.wtr.write_str(r\"\\w\"),\n        }\n    }\n\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {\n        use ast::ClassAsciiKind::*;\n        match ast.kind {\n            Alnum if ast.negated => self.wtr.write_str(\"[:^alnum:]\"),\n            Alnum => self.wtr.write_str(\"[:alnum:]\"),\n            Alpha if ast.negated => self.wtr.write_str(\"[:^alpha:]\"),\n            Alpha => self.wtr.write_str(\"[:alpha:]\"),\n            Ascii if ast.negated => self.wtr.write_str(\"[:^ascii:]\"),\n            Ascii => self.wtr.write_str(\"[:ascii:]\"),\n            Blank if ast.negated => self.wtr.write_str(\"[:^blank:]\"),\n            Blank => self.wtr.write_str(\"[:blank:]\"),\n            Cntrl if ast.negated => self.wtr.write_str(\"[:^cntrl:]\"),\n            Cntrl => self.wtr.write_str(\"[:cntrl:]\"),\n            Digit if ast.negated => self.wtr.write_str(\"[:^digit:]\"),\n            Digit => self.wtr.write_str(\"[:digit:]\"),\n            Graph if ast.negated => self.wtr.write_str(\"[:^graph:]\"),\n            Graph => self.wtr.write_str(\"[:graph:]\"),\n            Lower if ast.negated => self.wtr.write_str(\"[:^lower:]\"),\n            Lower => self.wtr.write_str(\"[:lower:]\"),\n            Print if ast.negated => self.wtr.write_str(\"[:^print:]\"),\n            Print => self.wtr.write_str(\"[:print:]\"),\n            Punct if ast.negated => self.wtr.write_str(\"[:^punct:]\"),\n            Punct => self.wtr.write_str(\"[:punct:]\"),\n            Space if ast.negated => self.wtr.write_str(\"[:^space:]\"),\n            Space => self.wtr.write_str(\"[:space:]\"),\n            Upper if ast.negated => self.wtr.write_str(\"[:^upper:]\"),\n            Upper => self.wtr.write_str(\"[:upper:]\"),\n            Word if ast.negated => self.wtr.write_str(\"[:^word:]\"),\n            Word => self.wtr.write_str(\"[:word:]\"),\n            Xdigit if ast.negated => self.wtr.write_str(\"[:^xdigit:]\"),\n            Xdigit => self.wtr.write_str(\"[:xdigit:]\"),\n        }\n    }\n\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {\n        use ast::ClassUnicodeKind::*;\n        use ast::ClassUnicodeOpKind::*;\n\n        if ast.negated {\n            self.wtr.write_str(r\"\\P\")?;\n        } else {\n            self.wtr.write_str(r\"\\p\")?;\n        }\n        match ast.kind {\n            OneLetter(c) => self.wtr.write_char(c),\n            Named(ref x) => write!(self.wtr, \"{{{}}}\", x),\n            NamedValue { op: Equal, ref name, ref value } => {\n                write!(self.wtr, \"{{{}={}}}\", name, value)\n            }\n            NamedValue { op: Colon, ref name, ref value } => {\n                write!(self.wtr, \"{{{}:{}}}\", name, value)\n            }\n            NamedValue { op: NotEqual, ref name, ref value } => {\n                write!(self.wtr, \"{{{}!={}}}\", name, value)\n            }\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Printer;\n    use ast::parse::ParserBuilder;\n\n    fn roundtrip(given: &str) {\n        roundtrip_with(|b| b, given);\n    }\n\n    fn roundtrip_with<F>(mut f: F, given: &str)\n    where\n        F: FnMut(&mut ParserBuilder) -> &mut ParserBuilder,\n    {\n        let mut builder = ParserBuilder::new();\n        f(&mut builder);\n        let ast = builder.build().parse(given).unwrap();\n\n        let mut printer = Printer::new();\n        let mut dst = String::new();\n        printer.print(&ast, &mut dst).unwrap();\n        assert_eq!(given, dst);\n    }\n\n    #[test]\n    fn print_literal() {\n        roundtrip(\"a\");\n        roundtrip(r\"\\[\");\n        roundtrip_with(|b| b.octal(true), r\"\\141\");\n        roundtrip(r\"\\x61\");\n        roundtrip(r\"\\x7F\");\n        roundtrip(r\"\\u0061\");\n        roundtrip(r\"\\U00000061\");\n        roundtrip(r\"\\x{61}\");\n        roundtrip(r\"\\x{7F}\");\n        roundtrip(r\"\\u{61}\");\n        roundtrip(r\"\\U{61}\");\n\n        roundtrip(r\"\\a\");\n        roundtrip(r\"\\f\");\n        roundtrip(r\"\\t\");\n        roundtrip(r\"\\n\");\n        roundtrip(r\"\\r\");\n        roundtrip(r\"\\v\");\n        roundtrip(r\"(?x)\\ \");\n    }\n\n    #[test]\n    fn print_dot() {\n        roundtrip(\".\");\n    }\n\n    #[test]\n    fn print_concat() {\n        roundtrip(\"ab\");\n        roundtrip(\"abcde\");\n        roundtrip(\"a(bcd)ef\");\n    }\n\n    #[test]\n    fn print_alternation() {\n        roundtrip(\"a|b\");\n        roundtrip(\"a|b|c|d|e\");\n        roundtrip(\"|a|b|c|d|e\");\n        roundtrip(\"|a|b|c|d|e|\");\n        roundtrip(\"a(b|c|d)|e|f\");\n    }\n\n    #[test]\n    fn print_assertion() {\n        roundtrip(r\"^\");\n        roundtrip(r\"$\");\n        roundtrip(r\"\\A\");\n        roundtrip(r\"\\z\");\n        roundtrip(r\"\\b\");\n        roundtrip(r\"\\B\");\n    }\n\n    #[test]\n    fn print_repetition() {\n        roundtrip(\"a?\");\n        roundtrip(\"a??\");\n        roundtrip(\"a*\");\n        roundtrip(\"a*?\");\n        roundtrip(\"a+\");\n        roundtrip(\"a+?\");\n        roundtrip(\"a{5}\");\n        roundtrip(\"a{5}?\");\n        roundtrip(\"a{5,}\");\n        roundtrip(\"a{5,}?\");\n        roundtrip(\"a{5,10}\");\n        roundtrip(\"a{5,10}?\");\n    }\n\n    #[test]\n    fn print_flags() {\n        roundtrip(\"(?i)\");\n        roundtrip(\"(?-i)\");\n        roundtrip(\"(?s-i)\");\n        roundtrip(\"(?-si)\");\n        roundtrip(\"(?siUmux)\");\n    }\n\n    #[test]\n    fn print_group() {\n        roundtrip(\"(?i:a)\");\n        roundtrip(\"(?P<foo>a)\");\n        roundtrip(\"(a)\");\n    }\n\n    #[test]\n    fn print_class() {\n        roundtrip(r\"[abc]\");\n        roundtrip(r\"[a-z]\");\n        roundtrip(r\"[^a-z]\");\n        roundtrip(r\"[a-z0-9]\");\n        roundtrip(r\"[-a-z0-9]\");\n        roundtrip(r\"[-a-z0-9]\");\n        roundtrip(r\"[a-z0-9---]\");\n        roundtrip(r\"[a-z&&m-n]\");\n        roundtrip(r\"[[a-z&&m-n]]\");\n        roundtrip(r\"[a-z--m-n]\");\n        roundtrip(r\"[a-z~~m-n]\");\n        roundtrip(r\"[a-z[0-9]]\");\n        roundtrip(r\"[a-z[^0-9]]\");\n\n        roundtrip(r\"\\d\");\n        roundtrip(r\"\\D\");\n        roundtrip(r\"\\s\");\n        roundtrip(r\"\\S\");\n        roundtrip(r\"\\w\");\n        roundtrip(r\"\\W\");\n\n        roundtrip(r\"[[:alnum:]]\");\n        roundtrip(r\"[[:^alnum:]]\");\n        roundtrip(r\"[[:alpha:]]\");\n        roundtrip(r\"[[:^alpha:]]\");\n        roundtrip(r\"[[:ascii:]]\");\n        roundtrip(r\"[[:^ascii:]]\");\n        roundtrip(r\"[[:blank:]]\");\n        roundtrip(r\"[[:^blank:]]\");\n        roundtrip(r\"[[:cntrl:]]\");\n        roundtrip(r\"[[:^cntrl:]]\");\n        roundtrip(r\"[[:digit:]]\");\n        roundtrip(r\"[[:^digit:]]\");\n        roundtrip(r\"[[:graph:]]\");\n        roundtrip(r\"[[:^graph:]]\");\n        roundtrip(r\"[[:lower:]]\");\n        roundtrip(r\"[[:^lower:]]\");\n        roundtrip(r\"[[:print:]]\");\n        roundtrip(r\"[[:^print:]]\");\n        roundtrip(r\"[[:punct:]]\");\n        roundtrip(r\"[[:^punct:]]\");\n        roundtrip(r\"[[:space:]]\");\n        roundtrip(r\"[[:^space:]]\");\n        roundtrip(r\"[[:upper:]]\");\n        roundtrip(r\"[[:^upper:]]\");\n        roundtrip(r\"[[:word:]]\");\n        roundtrip(r\"[[:^word:]]\");\n        roundtrip(r\"[[:xdigit:]]\");\n        roundtrip(r\"[[:^xdigit:]]\");\n\n        roundtrip(r\"\\pL\");\n        roundtrip(r\"\\PL\");\n        roundtrip(r\"\\p{L}\");\n        roundtrip(r\"\\P{L}\");\n        roundtrip(r\"\\p{X=Y}\");\n        roundtrip(r\"\\P{X=Y}\");\n        roundtrip(r\"\\p{X:Y}\");\n        roundtrip(r\"\\P{X:Y}\");\n        roundtrip(r\"\\p{X!=Y}\");\n        roundtrip(r\"\\P{X!=Y}\");\n    }\n}\n","traces":[{"line":20,"address":[7020416],"length":1,"stats":{"Line":0},"fn_name":"default"},{"line":21,"address":[7020417],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[7020432],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[7020448],"length":1,"stats":{"Line":0},"fn_name":"build"},{"line":31,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[7020464],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":52,"address":[7020465],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[6746432],"length":1,"stats":{"Line":0},"fn_name":"print<&mut core::fmt::Formatter>"},{"line":60,"address":[6746451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[6746512],"length":1,"stats":{"Line":0},"fn_name":"finish<&mut core::fmt::Formatter>"},{"line":75,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[6746544],"length":1,"stats":{"Line":0},"fn_name":"visit_pre<&mut core::fmt::Formatter>"},{"line":79,"address":[6746605,6746657,6746701],"length":1,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[6746558,6746626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[6746612,6746664],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[6746686],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[6746600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[6746720],"length":1,"stats":{"Line":0},"fn_name":"visit_post<&mut core::fmt::Formatter>"},{"line":91,"address":[6746835,6747219,6746818,6747099,6747005,6746876,6747143,6746964,6746825,6746917,6747052,6747181],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[6746734,6746830],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[6746845],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[6746886],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[6746934],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[6746974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[6746778,6747015],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[6747062],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[6747106],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[6747128],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[6747150],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[6747188],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[6747221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[6746820],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[6747248],"length":1,"stats":{"Line":0},"fn_name":"visit_alternation_in<&mut core::fmt::Formatter>"},{"line":110,"address":[6747264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[6747312],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_item_pre<&mut core::fmt::Formatter>"},{"line":117,"address":[6747347,6747391],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[6747326,6747354],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[6747370],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[6747342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[6747408],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_item_post<&mut core::fmt::Formatter>"},{"line":131,"address":[6747525,6747481,6747854,6747923,6747967,6747469,6748058,6748063,6748011],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[6747476,6747425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[6747491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[6747535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[6747667,6747694,6747549],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[6747714,6747637,6747784],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[6747810,6747758,6747859],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[6747849],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[6747889],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[6747933],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[6747977],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[6748021],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[6747464],"length":1,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[6748064],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_in<&mut core::fmt::Formatter>"},{"line":152,"address":[6748078],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[6748112],"length":1,"stats":{"Line":0},"fn_name":"fmt_group_pre<&mut core::fmt::Formatter>"},{"line":159,"address":[6748294,6748250,6748965,6748688],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[6748129,6748264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[6748311],"length":1,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[6748338,6748489,6748462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[6748615,6748419,6748520],"length":1,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[6748644,6748585,6748693],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[6748683],"length":1,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[6748185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[6748722,6748783,6748212],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[6748814,6748895,6748771],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[6748865,6748921,6748970],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[6748960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[6749008],"length":1,"stats":{"Line":0},"fn_name":"fmt_group_post<&mut core::fmt::Formatter>"},{"line":177,"address":[6749029],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[6749072],"length":1,"stats":{"Line":0},"fn_name":"fmt_repetition<&mut core::fmt::Formatter>"},{"line":182,"address":[6749190,6749728,6749291,6749509,6749400,6749733],"length":1,"stats":{"Line":0},"fn_name":null},{"line":183,"address":[6749197,6749086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[6749259],"length":1,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[6749306],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[6749368],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[6749415],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[6749477],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[6749150],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[6749172,6749517,6749598,6749574],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[6749614,6749699,6749561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[6749628,6749701],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[6749723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[6749744],"length":1,"stats":{"Line":0},"fn_name":"fmt_repetition_range<&mut core::fmt::Formatter>"},{"line":204,"address":[6750428,6750210,6749995,6750600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[6749767,6750012],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[6750230],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[6749841,6750448],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[6750624],"length":1,"stats":{"Line":0},"fn_name":"fmt_literal<&mut core::fmt::Formatter>"},{"line":214,"address":[6752706,6750759,6753082,6753135,6753185,6751710,6753029,6751191,6753235,6751988,6752489,6752266,6752976,6751432,6752923,6750961],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[6750647,6750926],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[6750981],"length":1,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[6751211],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[6750709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[6751452],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[6751730],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[6752008],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[6750769],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[6752286],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[6752509],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[6752726],"length":1,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[6750827],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[6752943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":240,"address":[6752996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":242,"address":[6753049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[6753102],"length":1,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":247,"address":[6753152],"length":1,"stats":{"Line":0},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[6753202],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[6750880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":258,"address":[6753264],"length":1,"stats":{"Line":0},"fn_name":"fmt_assertion<&mut core::fmt::Formatter>"},{"line":260,"address":[6753498,6753404,6753451,6753360,6753542,6753586],"length":1,"stats":{"Line":0},"fn_name":null},{"line":261,"address":[6753278,6753374],"length":1,"stats":{"Line":0},"fn_name":null},{"line":262,"address":[6753421],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[6753468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[6753512],"length":1,"stats":{"Line":0},"fn_name":null},{"line":265,"address":[6753556],"length":1,"stats":{"Line":0},"fn_name":null},{"line":266,"address":[6753325],"length":1,"stats":{"Line":0},"fn_name":null},{"line":270,"address":[6753616],"length":1,"stats":{"Line":0},"fn_name":"fmt_set_flags<&mut core::fmt::Formatter>"},{"line":271,"address":[6753637,6753776,6753752],"length":1,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[6753875,6753726,6753794],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[6753904,6753845,6753953],"length":1,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[6753943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[6753984],"length":1,"stats":{"Line":0},"fn_name":"fmt_flags<&mut core::fmt::Formatter>"},{"line":280,"address":[6754100,6754570,6754001],"length":1,"stats":{"Line":0},"fn_name":null},{"line":281,"address":[6754575,6754531,6754205,6754249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":282,"address":[6754128,6754219],"length":1,"stats":{"Line":0},"fn_name":null},{"line":283,"address":[6754156,6754345,6754483,6754392,6754527,6754301,6754439],"length":1,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[6754173,6754315],"length":1,"stats":{"Line":0},"fn_name":null},{"line":285,"address":[6754362],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[6754409],"length":1,"stats":{"Line":0},"fn_name":null},{"line":287,"address":[6754453],"length":1,"stats":{"Line":0},"fn_name":null},{"line":288,"address":[6754497],"length":1,"stats":{"Line":0},"fn_name":null},{"line":289,"address":[6754266],"length":1,"stats":{"Line":0},"fn_name":null},{"line":293,"address":[6754090],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[6754624],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_bracketed_pre<&mut core::fmt::Formatter>"},{"line":300,"address":[6754738,6754638],"length":1,"stats":{"Line":0},"fn_name":null},{"line":301,"address":[6754708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[6754664],"length":1,"stats":{"Line":0},"fn_name":null},{"line":307,"address":[6754768],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_bracketed_post<&mut core::fmt::Formatter>"},{"line":311,"address":[6754789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[6754832],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_set_binary_op_kind<&mut core::fmt::Formatter>"},{"line":319,"address":[6755011,6754967,6754923],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[6754846,6754937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[6754981],"length":1,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[6754891],"length":1,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[6755040],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_perl<&mut core::fmt::Formatter>"},{"line":328,"address":[6755100,6755413,6755201,6755310],"length":1,"stats":{"Line":0},"fn_name":null},{"line":329,"address":[6755054,6755107],"length":1,"stats":{"Line":0},"fn_name":null},{"line":330,"address":[6755169],"length":1,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[6755216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[6755278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":333,"address":[6755319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":334,"address":[6755381],"length":1,"stats":{"Line":0},"fn_name":null},{"line":338,"address":[6755440],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_ascii<&mut core::fmt::Formatter>"},{"line":340,"address":[6755815,6756142,6755496,6755597,6756687,6755924,6756251,6756360,6756469,6756905,6756033,6756578,6756796,6755706,6757008],"length":1,"stats":{"Line":0},"fn_name":null},{"line":341,"address":[6755454,6755503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":342,"address":[6755565],"length":1,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[6755612],"length":1,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[6755674],"length":1,"stats":{"Line":0},"fn_name":null},{"line":345,"address":[6755721],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[6755783],"length":1,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[6755830],"length":1,"stats":{"Line":0},"fn_name":null},{"line":348,"address":[6755892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":349,"address":[6755939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[6756001],"length":1,"stats":{"Line":0},"fn_name":null},{"line":351,"address":[6756048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":352,"address":[6756110],"length":1,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[6756157],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[6756219],"length":1,"stats":{"Line":0},"fn_name":null},{"line":355,"address":[6756266],"length":1,"stats":{"Line":0},"fn_name":null},{"line":356,"address":[6756328],"length":1,"stats":{"Line":0},"fn_name":null},{"line":357,"address":[6756375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":358,"address":[6756437],"length":1,"stats":{"Line":0},"fn_name":null},{"line":359,"address":[6756484],"length":1,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[6756546],"length":1,"stats":{"Line":0},"fn_name":null},{"line":361,"address":[6756593],"length":1,"stats":{"Line":0},"fn_name":null},{"line":362,"address":[6756655],"length":1,"stats":{"Line":0},"fn_name":null},{"line":363,"address":[6756702],"length":1,"stats":{"Line":0},"fn_name":null},{"line":364,"address":[6756764],"length":1,"stats":{"Line":0},"fn_name":null},{"line":365,"address":[6756811],"length":1,"stats":{"Line":0},"fn_name":null},{"line":366,"address":[6756873],"length":1,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[6756914],"length":1,"stats":{"Line":0},"fn_name":null},{"line":368,"address":[6756976],"length":1,"stats":{"Line":0},"fn_name":null},{"line":372,"address":[6757040],"length":1,"stats":{"Line":0},"fn_name":"fmt_class_unicode<&mut core::fmt::Formatter>"},{"line":376,"address":[6757234,6757340,6757063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":377,"address":[6757239,6757151,6757269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":379,"address":[6757295,6757100,6757342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":381,"address":[6757675,6757730,6758695,6758871,6758876,6757987,6758350],"length":1,"stats":{"Line":0},"fn_name":null},{"line":382,"address":[6757685,6757375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":383,"address":[6757750],"length":1,"stats":{"Line":0},"fn_name":null},{"line":384,"address":[6757428,6758007],"length":1,"stats":{"Line":0},"fn_name":null},{"line":385,"address":[6758063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":387,"address":[6758370],"length":1,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[6758426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[6757488],"length":1,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[6757544,6758715],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":206},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","ast","visitor.rs"],"content":"use std::fmt;\n\nuse ast::{self, Ast};\n\n/// A trait for visiting an abstract syntax tree (AST) in depth first order.\n///\n/// The principle aim of this trait is to enable callers to perform case\n/// analysis on an abstract syntax tree without necessarily using recursion.\n/// In particular, this permits callers to do case analysis with constant stack\n/// usage, which can be important since the size of an abstract syntax tree\n/// may be proportional to end user input.\n///\n/// Typical usage of this trait involves providing an implementation and then\n/// running it using the [`visit`](fn.visit.html) function.\n///\n/// Note that the abstract syntax tree for a regular expression is quite\n/// complex. Unless you specifically need it, you might be able to use the\n/// much simpler\n/// [high-level intermediate representation](../hir/struct.Hir.html)\n/// and its\n/// [corresponding `Visitor` trait](../hir/trait.Visitor.html)\n/// instead.\npub trait Visitor {\n    /// The result of visiting an AST.\n    type Output;\n    /// An error that visiting an AST might return.\n    type Err;\n\n    /// All implementors of `Visitor` must provide a `finish` method, which\n    /// yields the result of visiting the AST or an error.\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n\n    /// This method is called before beginning traversal of the AST.\n    fn start(&mut self) {}\n\n    /// This method is called on an `Ast` before descending into child `Ast`\n    /// nodes.\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on an `Ast` after descending all of its child\n    /// `Ast` nodes.\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called between child nodes of an\n    /// [`Alternation`](struct.Alternation.html).\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on every\n    /// [`ClassSetItem`](enum.ClassSetItem.html)\n    /// before descending into child nodes.\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on every\n    /// [`ClassSetItem`](enum.ClassSetItem.html)\n    /// after descending into child nodes.\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on every\n    /// [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n    /// before descending into child nodes.\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on every\n    /// [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n    /// after descending into child nodes.\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called between the left hand and right hand child nodes\n    /// of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n\n/// Executes an implementation of `Visitor` in constant stack space.\n///\n/// This function will visit every node in the given `Ast` while calling the\n/// appropriate methods provided by the\n/// [`Visitor`](trait.Visitor.html) trait.\n///\n/// The primary use case for this method is when one wants to perform case\n/// analysis over an `Ast` without using a stack size proportional to the depth\n/// of the `Ast`. Namely, this method will instead use constant stack size, but\n/// will use heap space proportional to the size of the `Ast`. This may be\n/// desirable in cases where the size of `Ast` is proportional to end user\n/// input.\n///\n/// If the visitor returns an error at any point, then visiting is stopped and\n/// the error is returned.\npub fn visit<V: Visitor>(ast: &Ast, visitor: V) -> Result<V::Output, V::Err> {\n    HeapVisitor::new().visit(ast, visitor)\n}\n\n/// HeapVisitor visits every item in an `Ast` recursively using constant stack\n/// size and a heap size proportional to the size of the `Ast`.\nstruct HeapVisitor<'a> {\n    /// A stack of `Ast` nodes. This is roughly analogous to the call stack\n    /// used in a typical recursive visitor.\n    stack: Vec<(&'a Ast, Frame<'a>)>,\n    /// Similar to the `Ast` stack above, but is used only for character\n    /// classes. In particular, character classes embed their own mini\n    /// recursive syntax.\n    stack_class: Vec<(ClassInduct<'a>, ClassFrame<'a>)>,\n}\n\n/// Represents a single stack frame while performing structural induction over\n/// an `Ast`.\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a ast::Repetition),\n    /// A stack frame allocated just before descending into a group's child\n    /// node.\n    Group(&'a ast::Group),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n}\n\n/// Represents a single stack frame while performing structural induction over\n/// a character class.\nenum ClassFrame<'a> {\n    /// The stack frame used while visiting every child node of a union of\n    /// character class items.\n    Union {\n        /// The child node we are currently visiting.\n        head: &'a ast::ClassSetItem,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [ast::ClassSetItem],\n    },\n    /// The stack frame used while a binary class operation.\n    Binary { op: &'a ast::ClassSetBinaryOp },\n    /// A stack frame allocated just before descending into a binary operator's\n    /// left hand child node.\n    BinaryLHS {\n        op: &'a ast::ClassSetBinaryOp,\n        lhs: &'a ast::ClassSet,\n        rhs: &'a ast::ClassSet,\n    },\n    /// A stack frame allocated just before descending into a binary operator's\n    /// right hand child node.\n    BinaryRHS { op: &'a ast::ClassSetBinaryOp, rhs: &'a ast::ClassSet },\n}\n\n/// A representation of the inductive step when performing structural induction\n/// over a character class.\n///\n/// Note that there is no analogous explicit type for the inductive step for\n/// `Ast` nodes because the inductive step is just an `Ast`. For character\n/// classes, the inductive step can produce one of two possible child nodes:\n/// an item or a binary operation. (An item cannot be a binary operation\n/// because that would imply binary operations can be unioned in the concrete\n/// syntax, which is not possible.)\nenum ClassInduct<'a> {\n    Item(&'a ast::ClassSetItem),\n    BinaryOp(&'a ast::ClassSetBinaryOp),\n}\n\nimpl<'a> HeapVisitor<'a> {\n    fn new() -> HeapVisitor<'a> {\n        HeapVisitor { stack: vec![], stack_class: vec![] }\n    }\n\n    fn visit<V: Visitor>(\n        &mut self,\n        mut ast: &'a Ast,\n        mut visitor: V,\n    ) -> Result<V::Output, V::Err> {\n        self.stack.clear();\n        self.stack_class.clear();\n\n        visitor.start();\n        loop {\n            visitor.visit_pre(ast)?;\n            if let Some(x) = self.induct(ast, &mut visitor)? {\n                let child = x.child();\n                self.stack.push((ast, x));\n                ast = child;\n                continue;\n            }\n            // No induction means we have a base case, so we can post visit\n            // it now.\n            visitor.visit_post(ast)?;\n\n            // At this point, we now try to pop our call stack until it is\n            // either empty or we hit another inductive case.\n            loop {\n                let (post_ast, frame) = match self.stack.pop() {\n                    None => return visitor.finish(),\n                    Some((post_ast, frame)) => (post_ast, frame),\n                };\n                // If this is a concat/alternate, then we might have additional\n                // inductive steps to process.\n                if let Some(x) = self.pop(frame) {\n                    if let Frame::Alternation { .. } = x {\n                        visitor.visit_alternation_in()?;\n                    }\n                    ast = x.child();\n                    self.stack.push((post_ast, x));\n                    break;\n                }\n                // Otherwise, we've finished visiting all the child nodes for\n                // this AST, so we can post visit it now.\n                visitor.visit_post(post_ast)?;\n            }\n        }\n    }\n\n    /// Build a stack frame for the given AST if one is needed (which occurs if\n    /// and only if there are child nodes in the AST). Otherwise, return None.\n    ///\n    /// If this visits a class, then the underlying visitor implementation may\n    /// return an error which will be passed on here.\n    fn induct<V: Visitor>(\n        &mut self,\n        ast: &'a Ast,\n        visitor: &mut V,\n    ) -> Result<Option<Frame<'a>>, V::Err> {\n        Ok(match *ast {\n            Ast::Class(ast::Class::Bracketed(ref x)) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })\n    }\n\n    /// Pops the given frame. If the frame has an additional inductive step,\n    /// then return it, otherwise return `None`.\n    fn pop(&self, induct: Frame<'a>) -> Option<Frame<'a>> {\n        match induct {\n            Frame::Repetition(_) => None,\n            Frame::Group(_) => None,\n            Frame::Concat { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Concat { head: &tail[0], tail: &tail[1..] })\n                }\n            }\n            Frame::Alternation { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Alternation {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n        }\n    }\n\n    fn visit_class<V: Visitor>(\n        &mut self,\n        ast: &'a ast::ClassBracketed,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {\n        let mut ast = ClassInduct::from_bracketed(ast);\n        loop {\n            self.visit_class_pre(&ast, visitor)?;\n            if let Some(x) = self.induct_class(&ast) {\n                let child = x.child();\n                self.stack_class.push((ast, x));\n                ast = child;\n                continue;\n            }\n            self.visit_class_post(&ast, visitor)?;\n\n            // At this point, we now try to pop our call stack until it is\n            // either empty or we hit another inductive case.\n            loop {\n                let (post_ast, frame) = match self.stack_class.pop() {\n                    None => return Ok(()),\n                    Some((post_ast, frame)) => (post_ast, frame),\n                };\n                // If this is a union or a binary op, then we might have\n                // additional inductive steps to process.\n                if let Some(x) = self.pop_class(frame) {\n                    if let ClassFrame::BinaryRHS { ref op, .. } = x {\n                        visitor.visit_class_set_binary_op_in(op)?;\n                    }\n                    ast = x.child();\n                    self.stack_class.push((post_ast, x));\n                    break;\n                }\n                // Otherwise, we've finished visiting all the child nodes for\n                // this class node, so we can post visit it now.\n                self.visit_class_post(&post_ast, visitor)?;\n            }\n        }\n    }\n\n    /// Call the appropriate `Visitor` methods given an inductive step.\n    fn visit_class_pre<V: Visitor>(\n        &self,\n        ast: &ClassInduct<'a>,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {\n        match *ast {\n            ClassInduct::Item(item) => {\n                visitor.visit_class_set_item_pre(item)?;\n            }\n            ClassInduct::BinaryOp(op) => {\n                visitor.visit_class_set_binary_op_pre(op)?;\n            }\n        }\n        Ok(())\n    }\n\n    /// Call the appropriate `Visitor` methods given an inductive step.\n    fn visit_class_post<V: Visitor>(\n        &self,\n        ast: &ClassInduct<'a>,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {\n        match *ast {\n            ClassInduct::Item(item) => {\n                visitor.visit_class_set_item_post(item)?;\n            }\n            ClassInduct::BinaryOp(op) => {\n                visitor.visit_class_set_binary_op_post(op)?;\n            }\n        }\n        Ok(())\n    }\n\n    /// Build a stack frame for the given class node if one is needed (which\n    /// occurs if and only if there are child nodes). Otherwise, return None.\n    fn induct_class(&self, ast: &ClassInduct<'a>) -> Option<ClassFrame<'a>> {\n        match *ast {\n            ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) => {\n                match x.kind {\n                    ast::ClassSet::Item(ref item) => {\n                        Some(ClassFrame::Union { head: item, tail: &[] })\n                    }\n                    ast::ClassSet::BinaryOp(ref op) => {\n                        Some(ClassFrame::Binary { op: op })\n                    }\n                }\n            }\n            ClassInduct::Item(&ast::ClassSetItem::Union(ref x)) => {\n                if x.items.is_empty() {\n                    None\n                } else {\n                    Some(ClassFrame::Union {\n                        head: &x.items[0],\n                        tail: &x.items[1..],\n                    })\n                }\n            }\n            ClassInduct::BinaryOp(op) => Some(ClassFrame::BinaryLHS {\n                op: op,\n                lhs: &op.lhs,\n                rhs: &op.rhs,\n            }),\n            _ => None,\n        }\n    }\n\n    /// Pops the given frame. If the frame has an additional inductive step,\n    /// then return it, otherwise return `None`.\n    fn pop_class(&self, induct: ClassFrame<'a>) -> Option<ClassFrame<'a>> {\n        match induct {\n            ClassFrame::Union { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(ClassFrame::Union {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n            ClassFrame::Binary { .. } => None,\n            ClassFrame::BinaryLHS { op, rhs, .. } => {\n                Some(ClassFrame::BinaryRHS { op: op, rhs: rhs })\n            }\n            ClassFrame::BinaryRHS { .. } => None,\n        }\n    }\n}\n\nimpl<'a> Frame<'a> {\n    /// Perform the next inductive step on this frame and return the next\n    /// child AST node to visit.\n    fn child(&self) -> &'a Ast {\n        match *self {\n            Frame::Repetition(rep) => &rep.ast,\n            Frame::Group(group) => &group.ast,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }\n    }\n}\n\nimpl<'a> ClassFrame<'a> {\n    /// Perform the next inductive step on this frame and return the next\n    /// child class node to visit.\n    fn child(&self) -> ClassInduct<'a> {\n        match *self {\n            ClassFrame::Union { head, .. } => ClassInduct::Item(head),\n            ClassFrame::Binary { op, .. } => ClassInduct::BinaryOp(op),\n            ClassFrame::BinaryLHS { ref lhs, .. } => {\n                ClassInduct::from_set(lhs)\n            }\n            ClassFrame::BinaryRHS { ref rhs, .. } => {\n                ClassInduct::from_set(rhs)\n            }\n        }\n    }\n}\n\nimpl<'a> ClassInduct<'a> {\n    fn from_bracketed(ast: &'a ast::ClassBracketed) -> ClassInduct<'a> {\n        ClassInduct::from_set(&ast.kind)\n    }\n\n    fn from_set(ast: &'a ast::ClassSet) -> ClassInduct<'a> {\n        match *ast {\n            ast::ClassSet::Item(ref item) => ClassInduct::Item(item),\n            ast::ClassSet::BinaryOp(ref op) => ClassInduct::BinaryOp(op),\n        }\n    }\n}\n\nimpl<'a> fmt::Debug for ClassFrame<'a> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let x = match *self {\n            ClassFrame::Union { .. } => \"Union\",\n            ClassFrame::Binary { .. } => \"Binary\",\n            ClassFrame::BinaryLHS { .. } => \"BinaryLHS\",\n            ClassFrame::BinaryRHS { .. } => \"BinaryRHS\",\n        };\n        write!(f, \"{}\", x)\n    }\n}\n\nimpl<'a> fmt::Debug for ClassInduct<'a> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let x = match *self {\n            ClassInduct::Item(it) => match *it {\n                ast::ClassSetItem::Empty(_) => \"Item(Empty)\",\n                ast::ClassSetItem::Literal(_) => \"Item(Literal)\",\n                ast::ClassSetItem::Range(_) => \"Item(Range)\",\n                ast::ClassSetItem::Ascii(_) => \"Item(Ascii)\",\n                ast::ClassSetItem::Perl(_) => \"Item(Perl)\",\n                ast::ClassSetItem::Unicode(_) => \"Item(Unicode)\",\n                ast::ClassSetItem::Bracketed(_) => \"Item(Bracketed)\",\n                ast::ClassSetItem::Union(_) => \"Item(Union)\",\n            },\n            ClassInduct::BinaryOp(it) => match it.kind {\n                ast::ClassSetBinaryOpKind::Intersection => {\n                    \"BinaryOp(Intersection)\"\n                }\n                ast::ClassSetBinaryOpKind::Difference => {\n                    \"BinaryOp(Difference)\"\n                }\n                ast::ClassSetBinaryOpKind::SymmetricDifference => {\n                    \"BinaryOp(SymmetricDifference)\"\n                }\n            },\n        };\n        write!(f, \"{}\", x)\n    }\n}\n","traces":[{"line":34,"address":[6758887,6758885,6758880],"length":1,"stats":{"Line":36},"fn_name":"start<regex_syntax::ast::print::Writer<&mut core::fmt::Formatter>>"},{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[7014320],"length":1,"stats":{"Line":16},"fn_name":"visit_alternation_in<regex_syntax::hir::translate::TranslatorI>"},{"line":51,"address":[7014328],"length":1,"stats":{"Line":16},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[6758896],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_pre<regex_syntax::ast::print::Writer<&mut core::fmt::Formatter>>"},{"line":81,"address":[6758910],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[6758944],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_post<regex_syntax::ast::print::Writer<&mut core::fmt::Formatter>>"},{"line":91,"address":[6758958],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[7196080],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_in<regex_syntax::ast::parse::NestLimiter<&mut regex_syntax::ast::parse::Parser>>"},{"line":100,"address":[7196096],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[6425120,6425392,6425682,6425187,6425469,6425616],"length":1,"stats":{"Line":18},"fn_name":"visit<regex_syntax::hir::translate::TranslatorI>"},{"line":120,"address":[6425138,6425481,6425416,6425694,6425638,6425202],"length":1,"stats":{"Line":36},"fn_name":null},{"line":202,"address":[7046529,7046496],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":203,"address":[7046541,7046625,7046503],"length":1,"stats":{"Line":18},"fn_name":null},{"line":206,"address":[6428766,6425897,6430702,6428704,6425824,6430624],"length":1,"stats":{"Line":18},"fn_name":"visit<regex_syntax::hir::translate::TranslatorI>"},{"line":211,"address":[6430657,6425847,6428734],"length":1,"stats":{"Line":18},"fn_name":null},{"line":212,"address":[6425917,6428786,6430722],"length":1,"stats":{"Line":18},"fn_name":null},{"line":214,"address":[6425935,6428804,6430740],"length":1,"stats":{"Line":18},"fn_name":null},{"line":215,"address":[6430336,6425951,6430756,6433405,6428820,6428238],"length":1,"stats":{"Line":36},"fn_name":null},{"line":216,"address":[6425953,6430758,6428822],"length":1,"stats":{"Line":18},"fn_name":null},{"line":217,"address":[6429295,6426794,6429075,6426373,6428976,6431185,6431275,6431792,6426283],"length":1,"stats":{"Line":54},"fn_name":null},{"line":218,"address":[6429321,6426826,6431824],"length":1,"stats":{"Line":18},"fn_name":null},{"line":219,"address":[6429358,6431861,6426863],"length":1,"stats":{"Line":23},"fn_name":null},{"line":220,"address":[6429464,6431967,6426969],"length":1,"stats":{"Line":23},"fn_name":null},{"line":221,"address":[6429469,6426974,6431972],"length":1,"stats":{"Line":23},"fn_name":null},{"line":225,"address":[6426979,6426762,6429478,6431760,6429267,6431977],"length":1,"stats":{"Line":36},"fn_name":null},{"line":229,"address":[6428538,6433802,6427274,6429583,6430447,6432369],"length":1,"stats":{"Line":41},"fn_name":null},{"line":230,"address":[6432660,6429585,6432543,6429874,6427276,6427565,6427448,6429757,6432371],"length":1,"stats":{"Line":36},"fn_name":null},{"line":231,"address":[6432662,6427567,6429609,6427300,6429876,6432395],"length":1,"stats":{"Line":36},"fn_name":null},{"line":232,"address":[6427328,6429637,6432423],"length":1,"stats":{"Line":18},"fn_name":null},{"line":236,"address":[6427496,6429928,6429990,6432591,6432770,6427636,6427702,6429805,6432704],"length":1,"stats":{"Line":54},"fn_name":null},{"line":237,"address":[6430199,6428103,6430054,6432834,6427766,6433268],"length":1,"stats":{"Line":34},"fn_name":null},{"line":238,"address":[6430070,6427782,6432850],"length":1,"stats":{"Line":16},"fn_name":null},{"line":240,"address":[6433270,6428105,6430201],"length":1,"stats":{"Line":18},"fn_name":null},{"line":241,"address":[6430235,6428137,6433304],"length":1,"stats":{"Line":18},"fn_name":null},{"line":242,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[6427670,6428243,6430345,6432738,6433410,6429962],"length":1,"stats":{"Line":41},"fn_name":null},{"line":256,"address":[6435504,6433968,6435731,6434196,6437171,6436944],"length":1,"stats":{"Line":18},"fn_name":"induct<regex_syntax::ast::parse::NestLimiter<&mut regex_syntax::ast::parse::Parser>>"},{"line":261,"address":[6434674,6436113,6434782,6436221,6437775,6437057,6435097,6436005,6435410,6436310,6434081,6436536,6437244,6437460,6437864,6435186,6437549,6437352,6436625,6434566,6436849,6438088,6435617,6434871],"length":1,"stats":{"Line":114},"fn_name":null},{"line":262,"address":[6435627,6436978,6435538,6437067,6434002,6434091],"length":1,"stats":{"Line":34},"fn_name":null},{"line":263,"address":[6437214,6434211,6434528,6434123,6437104,6437186,6435659,6435967,6435746],"length":1,"stats":{"Line":33},"fn_name":null},{"line":264,"address":[6434554,6437232,6435993],"length":1,"stats":{"Line":16},"fn_name":null},{"line":266,"address":[6437254,6436015,6434576],"length":1,"stats":{"Line":21},"fn_name":null},{"line":267,"address":[6436123,6437362,6434684],"length":1,"stats":{"Line":23},"fn_name":null},{"line":268,"address":[6437470,6436231,6434792],"length":1,"stats":{"Line":18},"fn_name":null},{"line":269,"address":[6434892,6436331,6437570],"length":1,"stats":{"Line":18},"fn_name":null},{"line":270,"address":[6436346,6434907,6437585],"length":1,"stats":{"Line":18},"fn_name":null},{"line":272,"address":[6437785,6435107,6436546],"length":1,"stats":{"Line":16},"fn_name":null},{"line":273,"address":[6437885,6436646,6437979,6435207,6435301,6436740],"length":1,"stats":{"Line":32},"fn_name":null},{"line":274,"address":[6437900,6436661,6435222],"length":1,"stats":{"Line":16},"fn_name":null},{"line":275,"address":[6435263,6437941,6436702],"length":1,"stats":{"Line":16},"fn_name":null},{"line":277,"address":[6434069,6437045,6435605],"length":1,"stats":{"Line":18},"fn_name":null},{"line":283,"address":[7046656],"length":1,"stats":{"Line":9},"fn_name":"pop"},{"line":284,"address":[7046809,7046778,7047055,7047256,7046792],"length":1,"stats":{"Line":34},"fn_name":null},{"line":285,"address":[7046674,7046785],"length":1,"stats":{"Line":17},"fn_name":null},{"line":286,"address":[7046802],"length":1,"stats":{"Line":9},"fn_name":null},{"line":287,"address":[7046819],"length":1,"stats":{"Line":9},"fn_name":null},{"line":288,"address":[7046843,7046918],"length":1,"stats":{"Line":18},"fn_name":null},{"line":289,"address":[7046911],"length":1,"stats":{"Line":9},"fn_name":null},{"line":291,"address":[7046888,7047298,7047325,7046940],"length":1,"stats":{"Line":18},"fn_name":null},{"line":294,"address":[7046723],"length":1,"stats":{"Line":8},"fn_name":null},{"line":295,"address":[7047109,7047064,7046747],"length":1,"stats":{"Line":24},"fn_name":null},{"line":296,"address":[7047102],"length":1,"stats":{"Line":8},"fn_name":null},{"line":298,"address":[7047159],"length":1,"stats":{"Line":8},"fn_name":null},{"line":299,"address":[7047079,7047271],"length":1,"stats":{"Line":8},"fn_name":null},{"line":300,"address":[7047131],"length":1,"stats":{"Line":8},"fn_name":null},{"line":307,"address":[6443279,6443200,6438241,6438176,6440096,6440175],"length":1,"stats":{"Line":16},"fn_name":"visit_class<regex_syntax::ast::print::Writer<&mut core::fmt::Formatter>>"},{"line":312,"address":[6438207,6443234,6440130],"length":1,"stats":{"Line":16},"fn_name":null},{"line":313,"address":[6445527,6442713,6439904,6438256,6440190,6443294],"length":1,"stats":{"Line":48},"fn_name":null},{"line":314,"address":[6440192,6443296,6438263],"length":1,"stats":{"Line":16},"fn_name":null},{"line":315,"address":[6440594,6438385,6440690,6443604,6443700,6438471],"length":1,"stats":{"Line":43},"fn_name":null},{"line":316,"address":[6440754,6443764,6438529],"length":1,"stats":{"Line":29},"fn_name":null},{"line":317,"address":[6440799,6438574,6443809],"length":1,"stats":{"Line":30},"fn_name":null},{"line":318,"address":[6440981,6438756,6443991],"length":1,"stats":{"Line":30},"fn_name":null},{"line":319,"address":[6438771,6444006,6440996],"length":1,"stats":{"Line":30},"fn_name":null},{"line":321,"address":[6444011,6438446,6441001,6438780,6443666,6440656],"length":1,"stats":{"Line":32},"fn_name":null},{"line":325,"address":[6445819,6441385,6438875,6444298,6443102,6440008],"length":1,"stats":{"Line":40},"fn_name":null},{"line":326,"address":[6441392,6444785,6439173,6439362,6444596,6441872,6438882,6441683,6444305],"length":1,"stats":{"Line":38},"fn_name":null},{"line":327,"address":[6439364,6444328,6444792,6441879,6438905,6441415],"length":1,"stats":{"Line":32},"fn_name":null},{"line":328,"address":[6441443,6438933,6444356],"length":1,"stats":{"Line":22},"fn_name":null},{"line":332,"address":[6439378,6441894,6444876,6444805,6441779,6439445,6444692,6441965,6439269],"length":1,"stats":{"Line":71},"fn_name":null},{"line":333,"address":[6444940,6442480,6445294,6439509,6439669,6442029],"length":1,"stats":{"Line":24},"fn_name":null},{"line":334,"address":[6444978,6439547,6442067],"length":1,"stats":{"Line":0},"fn_name":null},{"line":336,"address":[6439671,6442482,6445296],"length":1,"stats":{"Line":24},"fn_name":null},{"line":337,"address":[6439720,6442529,6445343],"length":1,"stats":{"Line":32},"fn_name":null},{"line":338,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":342,"address":[6442718,6441928,6439417,6439913,6444839,6445532],"length":1,"stats":{"Line":48},"fn_name":null},{"line":348,"address":[6445969,6447680,6446753,6445904,6447721,6446688],"length":1,"stats":{"Line":16},"fn_name":"visit_class_pre<regex_syntax::hir::translate::TranslatorI>"},{"line":353,"address":[6447905,6446337,6446629,6446812,6446028,6447770,6447610,6447997,6447221],"length":1,"stats":{"Line":16},"fn_name":null},{"line":354,"address":[6447777,6446819,6446722,6445938,6446035,6447699],"length":1,"stats":{"Line":32},"fn_name":null},{"line":355,"address":[6447193,6446831,6446047,6446309,6447791,6447878],"length":1,"stats":{"Line":16},"fn_name":null},{"line":357,"address":[6445989,6446773,6447738],"length":1,"stats":{"Line":0},"fn_name":null},{"line":358,"address":[6446342,6446785,6447226,6447752,6446001,6447911],"length":1,"stats":{"Line":0},"fn_name":null},{"line":361,"address":[6446636,6447999,6447617],"length":1,"stats":{"Line":16},"fn_name":null},{"line":365,"address":[6448089,6449408,6448416,6448481,6449473,6448048],"length":1,"stats":{"Line":16},"fn_name":"visit_class_post<regex_syntax::ast::print::Writer<&mut core::fmt::Formatter>>"},{"line":370,"address":[6448540,6448273,6448365,6448949,6450133,6449338,6449841,6449532,6448138],"length":1,"stats":{"Line":16},"fn_name":null},{"line":371,"address":[6448145,6448450,6448067,6448547,6449442,6449539],"length":1,"stats":{"Line":32},"fn_name":null},{"line":372,"address":[6448559,6448159,6448921,6449551,6449813,6448246],"length":1,"stats":{"Line":17},"fn_name":null},{"line":374,"address":[6449493,6448106,6448501],"length":1,"stats":{"Line":0},"fn_name":null},{"line":375,"address":[6448120,6448513,6448279,6448954,6449505,6449846],"length":1,"stats":{"Line":0},"fn_name":null},{"line":378,"address":[6449345,6450140,6448367],"length":1,"stats":{"Line":16},"fn_name":null},{"line":383,"address":[7047328],"length":1,"stats":{"Line":8},"fn_name":"induct_class"},{"line":384,"address":[7047718,7047458,7047993],"length":1,"stats":{"Line":17},"fn_name":null},{"line":385,"address":[7047468,7047354],"length":1,"stats":{"Line":8},"fn_name":null},{"line":386,"address":[7047609],"length":1,"stats":{"Line":0},"fn_name":null},{"line":387,"address":[7047618,7047487],"length":1,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[7047643],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[7047512],"length":1,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[7047537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":395,"address":[7047728],"length":1,"stats":{"Line":8},"fn_name":null},{"line":396,"address":[7047747,7047839],"length":1,"stats":{"Line":8},"fn_name":null},{"line":397,"address":[7047832],"length":1,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[7047895],"length":1,"stats":{"Line":9},"fn_name":null},{"line":400,"address":[7047801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":401,"address":[7047856],"length":1,"stats":{"Line":8},"fn_name":null},{"line":405,"address":[7048000,7048020],"length":1,"stats":{"Line":0},"fn_name":null},{"line":406,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[7048012],"length":1,"stats":{"Line":0},"fn_name":null},{"line":408,"address":[7048016],"length":1,"stats":{"Line":0},"fn_name":null},{"line":410,"address":[7047451],"length":1,"stats":{"Line":8},"fn_name":null},{"line":416,"address":[7048128],"length":1,"stats":{"Line":15},"fn_name":"pop_class"},{"line":417,"address":[7048202,7048449,7048435],"length":1,"stats":{"Line":16},"fn_name":null},{"line":418,"address":[7048214,7048146],"length":1,"stats":{"Line":30},"fn_name":null},{"line":419,"address":[7048313,7048238],"length":1,"stats":{"Line":31},"fn_name":null},{"line":420,"address":[7048306],"length":1,"stats":{"Line":16},"fn_name":null},{"line":422,"address":[7048361],"length":1,"stats":{"Line":16},"fn_name":null},{"line":423,"address":[7048561,7048588,7048283],"length":1,"stats":{"Line":15},"fn_name":null},{"line":424,"address":[7048332],"length":1,"stats":{"Line":15},"fn_name":null},{"line":428,"address":[7048442],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[7048456],"length":1,"stats":{"Line":0},"fn_name":null},{"line":430,"address":[7048480],"length":1,"stats":{"Line":0},"fn_name":null},{"line":432,"address":[7048195],"length":1,"stats":{"Line":0},"fn_name":null},{"line":440,"address":[7048592],"length":1,"stats":{"Line":9},"fn_name":"child"},{"line":441,"address":[7048652,7048679,7048707],"length":1,"stats":{"Line":35},"fn_name":null},{"line":442,"address":[7048601,7048661],"length":1,"stats":{"Line":22},"fn_name":null},{"line":443,"address":[7048686],"length":1,"stats":{"Line":14},"fn_name":null},{"line":444,"address":[7048714],"length":1,"stats":{"Line":9},"fn_name":null},{"line":445,"address":[7048638],"length":1,"stats":{"Line":8},"fn_name":null},{"line":453,"address":[7048752],"length":1,"stats":{"Line":14},"fn_name":"child"},{"line":454,"address":[7048833,7048863,7048893,7048933],"length":1,"stats":{"Line":14},"fn_name":null},{"line":455,"address":[7048761,7048840],"length":1,"stats":{"Line":28},"fn_name":null},{"line":456,"address":[7048870],"length":1,"stats":{"Line":0},"fn_name":null},{"line":457,"address":[7048900],"length":1,"stats":{"Line":0},"fn_name":null},{"line":458,"address":[7048914],"length":1,"stats":{"Line":0},"fn_name":null},{"line":460,"address":[7048798],"length":1,"stats":{"Line":0},"fn_name":null},{"line":461,"address":[7048812],"length":1,"stats":{"Line":0},"fn_name":null},{"line":468,"address":[7048960],"length":1,"stats":{"Line":8},"fn_name":"from_bracketed"},{"line":469,"address":[7048969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":472,"address":[7049008],"length":1,"stats":{"Line":8},"fn_name":"from_set"},{"line":473,"address":[7049060],"length":1,"stats":{"Line":0},"fn_name":null},{"line":474,"address":[7049017,7049068],"length":1,"stats":{"Line":16},"fn_name":null},{"line":475,"address":[7049035],"length":1,"stats":{"Line":0},"fn_name":null},{"line":481,"address":[7049120],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":482,"address":[7049198,7049246,7049223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":483,"address":[7049209,7049143],"length":1,"stats":{"Line":0},"fn_name":null},{"line":484,"address":[7049232],"length":1,"stats":{"Line":0},"fn_name":null},{"line":485,"address":[7049255],"length":1,"stats":{"Line":0},"fn_name":null},{"line":486,"address":[7049184],"length":1,"stats":{"Line":0},"fn_name":null},{"line":488,"address":[7049276],"length":1,"stats":{"Line":0},"fn_name":null},{"line":493,"address":[7049440],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":494,"address":[7049782,7049544],"length":1,"stats":{"Line":0},"fn_name":null},{"line":495,"address":[7049667,7049713,7049759,7049613,7049690,7049736,7049641,7049463,7049551],"length":1,"stats":{"Line":0},"fn_name":null},{"line":496,"address":[7049563,7049627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":497,"address":[7049653],"length":1,"stats":{"Line":0},"fn_name":null},{"line":498,"address":[7049676],"length":1,"stats":{"Line":0},"fn_name":null},{"line":499,"address":[7049699],"length":1,"stats":{"Line":0},"fn_name":null},{"line":500,"address":[7049722],"length":1,"stats":{"Line":0},"fn_name":null},{"line":501,"address":[7049745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":502,"address":[7049768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":503,"address":[7049599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":505,"address":[7049830,7049488,7049853,7049805],"length":1,"stats":{"Line":0},"fn_name":null},{"line":506,"address":[7049500],"length":1,"stats":{"Line":0},"fn_name":null},{"line":507,"address":[7049816],"length":1,"stats":{"Line":0},"fn_name":null},{"line":509,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":510,"address":[7049839],"length":1,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[7049791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":517,"address":[7049880],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":117,"coverable":185},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","error.rs"],"content":"use std::cmp;\nuse std::error;\nuse std::fmt;\nuse std::result;\n\nuse ast;\nuse hir;\n\n/// A type alias for dealing with errors returned by this crate.\npub type Result<T> = result::Result<T, Error>;\n\n/// This error type encompasses any error that can be returned by this crate.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Error {\n    /// An error that occurred while translating concrete syntax into abstract\n    /// syntax (AST).\n    Parse(ast::Error),\n    /// An error that occurred while translating abstract syntax into a high\n    /// level intermediate representation (HIR).\n    Translate(hir::Error),\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}\n\nimpl From<ast::Error> for Error {\n    fn from(err: ast::Error) -> Error {\n        Error::Parse(err)\n    }\n}\n\nimpl From<hir::Error> for Error {\n    fn from(err: hir::Error) -> Error {\n        Error::Translate(err)\n    }\n}\n\nimpl error::Error for Error {\n    // TODO: Remove this method entirely on the next breaking semver release.\n    #[allow(deprecated)]\n    fn description(&self) -> &str {\n        match *self {\n            Error::Parse(ref x) => x.description(),\n            Error::Translate(ref x) => x.description(),\n            _ => unreachable!(),\n        }\n    }\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            Error::Parse(ref x) => x.fmt(f),\n            Error::Translate(ref x) => x.fmt(f),\n            _ => unreachable!(),\n        }\n    }\n}\n\n/// A helper type for formatting nice error messages.\n///\n/// This type is responsible for reporting regex parse errors in a nice human\n/// readable format. Most of its complexity is from interspersing notational\n/// markers pointing out the position where an error occurred.\n#[derive(Debug)]\npub struct Formatter<'e, E: 'e> {\n    /// The original regex pattern in which the error occurred.\n    pattern: &'e str,\n    /// The error kind. It must impl fmt::Display.\n    err: &'e E,\n    /// The primary span of the error.\n    span: &'e ast::Span,\n    /// An auxiliary and optional span, in case the error needs to point to\n    /// two locations (e.g., when reporting a duplicate capture group name).\n    aux_span: Option<&'e ast::Span>,\n}\n\nimpl<'e> From<&'e ast::Error> for Formatter<'e, ast::ErrorKind> {\n    fn from(err: &'e ast::Error) -> Self {\n        Formatter {\n            pattern: err.pattern(),\n            err: err.kind(),\n            span: err.span(),\n            aux_span: err.auxiliary_span(),\n        }\n    }\n}\n\nimpl<'e> From<&'e hir::Error> for Formatter<'e, hir::ErrorKind> {\n    fn from(err: &'e hir::Error) -> Self {\n        Formatter {\n            pattern: err.pattern(),\n            err: err.kind(),\n            span: err.span(),\n            aux_span: None,\n        }\n    }\n}\n\nimpl<'e, E: fmt::Display> fmt::Display for Formatter<'e, E> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let spans = Spans::from_formatter(self);\n        if self.pattern.contains('\\n') {\n            let divider = repeat_char('~', 79);\n\n            writeln!(f, \"regex parse error:\")?;\n            writeln!(f, \"{}\", divider)?;\n            let notated = spans.notate();\n            write!(f, \"{}\", notated)?;\n            writeln!(f, \"{}\", divider)?;\n            // If we have error spans that cover multiple lines, then we just\n            // note the line numbers.\n            if !spans.multi_line.is_empty() {\n                let mut notes = vec![];\n                for span in &spans.multi_line {\n                    notes.push(format!(\n                        \"on line {} (column {}) through line {} (column {})\",\n                        span.start.line,\n                        span.start.column,\n                        span.end.line,\n                        span.end.column - 1\n                    ));\n                }\n                writeln!(f, \"{}\", notes.join(\"\\n\"))?;\n            }\n            write!(f, \"error: {}\", self.err)?;\n        } else {\n            writeln!(f, \"regex parse error:\")?;\n            let notated = Spans::from_formatter(self).notate();\n            write!(f, \"{}\", notated)?;\n            write!(f, \"error: {}\", self.err)?;\n        }\n        Ok(())\n    }\n}\n\n/// This type represents an arbitrary number of error spans in a way that makes\n/// it convenient to notate the regex pattern. (\"Notate\" means \"point out\n/// exactly where the error occurred in the regex pattern.\")\n///\n/// Technically, we can only ever have two spans given our current error\n/// structure. However, after toiling with a specific algorithm for handling\n/// two spans, it became obvious that an algorithm to handle an arbitrary\n/// number of spans was actually much simpler.\nstruct Spans<'p> {\n    /// The original regex pattern string.\n    pattern: &'p str,\n    /// The total width that should be used for line numbers. The width is\n    /// used for left padding the line numbers for alignment.\n    ///\n    /// A value of `0` means line numbers should not be displayed. That is,\n    /// the pattern is itself only one line.\n    line_number_width: usize,\n    /// All error spans that occur on a single line. This sequence always has\n    /// length equivalent to the number of lines in `pattern`, where the index\n    /// of the sequence represents a line number, starting at `0`. The spans\n    /// in each line are sorted in ascending order.\n    by_line: Vec<Vec<ast::Span>>,\n    /// All error spans that occur over one or more lines. That is, the start\n    /// and end position of the span have different line numbers. The spans are\n    /// sorted in ascending order.\n    multi_line: Vec<ast::Span>,\n}\n\nimpl<'p> Spans<'p> {\n    /// Build a sequence of spans from a formatter.\n    fn from_formatter<'e, E: fmt::Display>(\n        fmter: &'p Formatter<'e, E>,\n    ) -> Spans<'p> {\n        let mut line_count = fmter.pattern.lines().count();\n        // If the pattern ends with a `\\n` literal, then our line count is\n        // off by one, since a span can occur immediately after the last `\\n`,\n        // which is consider to be an additional line.\n        if fmter.pattern.ends_with('\\n') {\n            line_count += 1;\n        }\n        let line_number_width =\n            if line_count <= 1 { 0 } else { line_count.to_string().len() };\n        let mut spans = Spans {\n            pattern: &fmter.pattern,\n            line_number_width: line_number_width,\n            by_line: vec![vec![]; line_count],\n            multi_line: vec![],\n        };\n        spans.add(fmter.span.clone());\n        if let Some(span) = fmter.aux_span {\n            spans.add(span.clone());\n        }\n        spans\n    }\n\n    /// Add the given span to this sequence, putting it in the right place.\n    fn add(&mut self, span: ast::Span) {\n        // This is grossly inefficient since we sort after each add, but right\n        // now, we only ever add two spans at most.\n        if span.is_one_line() {\n            let i = span.start.line - 1; // because lines are 1-indexed\n            self.by_line[i].push(span);\n            self.by_line[i].sort();\n        } else {\n            self.multi_line.push(span);\n            self.multi_line.sort();\n        }\n    }\n\n    /// Notate the pattern string with carents (`^`) pointing at each span\n    /// location. This only applies to spans that occur within a single line.\n    fn notate(&self) -> String {\n        let mut notated = String::new();\n        for (i, line) in self.pattern.lines().enumerate() {\n            if self.line_number_width > 0 {\n                notated.push_str(&self.left_pad_line_number(i + 1));\n                notated.push_str(\": \");\n            } else {\n                notated.push_str(\"    \");\n            }\n            notated.push_str(line);\n            notated.push('\\n');\n            if let Some(notes) = self.notate_line(i) {\n                notated.push_str(&notes);\n                notated.push('\\n');\n            }\n        }\n        notated\n    }\n\n    /// Return notes for the line indexed at `i` (zero-based). If there are no\n    /// spans for the given line, then `None` is returned. Otherwise, an\n    /// appropriately space padded string with correctly positioned `^` is\n    /// returned, accounting for line numbers.\n    fn notate_line(&self, i: usize) -> Option<String> {\n        let spans = &self.by_line[i];\n        if spans.is_empty() {\n            return None;\n        }\n        let mut notes = String::new();\n        for _ in 0..self.line_number_padding() {\n            notes.push(' ');\n        }\n        let mut pos = 0;\n        for span in spans {\n            for _ in pos..(span.start.column - 1) {\n                notes.push(' ');\n                pos += 1;\n            }\n            let note_len = span.end.column.saturating_sub(span.start.column);\n            for _ in 0..cmp::max(1, note_len) {\n                notes.push('^');\n                pos += 1;\n            }\n        }\n        Some(notes)\n    }\n\n    /// Left pad the given line number with spaces such that it is aligned with\n    /// other line numbers.\n    fn left_pad_line_number(&self, n: usize) -> String {\n        let n = n.to_string();\n        let pad = self.line_number_width.checked_sub(n.len()).unwrap();\n        let mut result = repeat_char(' ', pad);\n        result.push_str(&n);\n        result\n    }\n\n    /// Return the line number padding beginning at the start of each line of\n    /// the pattern.\n    ///\n    /// If the pattern is only one line, then this returns a fixed padding\n    /// for visual indentation.\n    fn line_number_padding(&self) -> usize {\n        if self.line_number_width == 0 {\n            4\n        } else {\n            2 + self.line_number_width\n        }\n    }\n}\n\nfn repeat_char(c: char, count: usize) -> String {\n    ::std::iter::repeat(c).take(count).collect()\n}\n\n#[cfg(test)]\nmod tests {\n    use ast::parse::Parser;\n\n    fn assert_panic_message(pattern: &str, expected_msg: &str) -> () {\n        let result = Parser::new().parse(pattern);\n        match result {\n            Ok(_) => {\n                panic!(\"regex should not have parsed\");\n            }\n            Err(err) => {\n                assert_eq!(err.to_string(), expected_msg.trim());\n            }\n        }\n    }\n\n    // See: https://github.com/rust-lang/regex/issues/464\n    #[test]\n    fn regression_464() {\n        let err = Parser::new().parse(\"a{\\n\").unwrap_err();\n        // This test checks that the error formatter doesn't panic.\n        assert!(!err.to_string().is_empty());\n    }\n\n    // See: https://github.com/rust-lang/regex/issues/545\n    #[test]\n    fn repetition_quantifier_expects_a_valid_decimal() {\n        assert_panic_message(\n            r\"\\\\u{[^}]*}\",\n            r#\"\nregex parse error:\n    \\\\u{[^}]*}\n        ^\nerror: repetition quantifier expects a valid decimal\n\"#,\n        );\n    }\n}\n","traces":[{"line":31,"address":[6529504],"length":1,"stats":{"Line":8},"fn_name":"from"},{"line":32,"address":[6529514],"length":1,"stats":{"Line":8},"fn_name":null},{"line":37,"address":[6529616],"length":1,"stats":{"Line":4},"fn_name":"from"},{"line":38,"address":[6529623],"length":1,"stats":{"Line":4},"fn_name":null},{"line":45,"address":[6529728],"length":1,"stats":{"Line":0},"fn_name":"description"},{"line":46,"address":[6529855],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[6529805,6529737],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[6529862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[6529936],"length":1,"stats":{"Line":8},"fn_name":"fmt"},{"line":56,"address":[6530054,6530092],"length":1,"stats":{"Line":17},"fn_name":null},{"line":57,"address":[6530023,6529950],"length":1,"stats":{"Line":16},"fn_name":null},{"line":58,"address":[6530061],"length":1,"stats":{"Line":4},"fn_name":null},{"line":83,"address":[6530112],"length":1,"stats":{"Line":8},"fn_name":"from"},{"line":85,"address":[6530129],"length":1,"stats":{"Line":10},"fn_name":null},{"line":86,"address":[6530163],"length":1,"stats":{"Line":11},"fn_name":null},{"line":87,"address":[6530179],"length":1,"stats":{"Line":12},"fn_name":null},{"line":88,"address":[6530195],"length":1,"stats":{"Line":12},"fn_name":null},{"line":94,"address":[6530272],"length":1,"stats":{"Line":4},"fn_name":"from"},{"line":96,"address":[6530289],"length":1,"stats":{"Line":4},"fn_name":null},{"line":97,"address":[6530323],"length":1,"stats":{"Line":4},"fn_name":null},{"line":98,"address":[6530339],"length":1,"stats":{"Line":4},"fn_name":null},{"line":105,"address":[6877392,6877461,6881909,6881840],"length":1,"stats":{"Line":17},"fn_name":"fmt<regex_syntax::hir::ErrorKind>"},{"line":106,"address":[6881863,6877415],"length":1,"stats":{"Line":17},"fn_name":null},{"line":107,"address":[6877484,6886073,6880765,6881932,6885213,6881625],"length":1,"stats":{"Line":34},"fn_name":null},{"line":108,"address":[6877585,6882033],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[6877861,6877947,6877894,6877963,6882062,6877614,6882161,6877713,6882309,6882411,6882342,6882395],"length":1,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[6882421,6882616,6877774,6878168,6882222,6877973],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[6878141,6882589],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[6883047,6878220,6878410,6878665,6882858,6883113,6882668,6878599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[6878872,6882960,6878512,6883320,6878678,6883126],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[6878931,6880438,6884886,6883294,6883379,6878846],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[6878942,6883390],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[6879993,6879170,6879049,6884441,6883409,6883618,6878961,6883497],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[6883784,6879336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[6883652,6879204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[6883659,6879211],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[6883669,6879221],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[6883679,6879231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[6886182,6879248,6881734,6883696],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[6883565,6884446,6884862,6880414,6879117,6879998],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[6880440,6884888,6885148,6880700],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[6885335,6877543,6880887,6880770,6881991,6885218],"length":1,"stats":{"Line":34},"fn_name":null},{"line":133,"address":[6885308,6885381,6880860,6880933],"length":1,"stats":{"Line":34},"fn_name":null},{"line":134,"address":[6881017,6881336,6885844,6885465,6885784,6881396],"length":1,"stats":{"Line":17},"fn_name":null},{"line":135,"address":[6881254,6886027,6881579,6885854,6881406,6885702],"length":1,"stats":{"Line":34},"fn_name":null},{"line":137,"address":[6881627,6886075],"length":1,"stats":{"Line":17},"fn_name":null},{"line":171,"address":[6886346,6887024,6887082,6886288],"length":1,"stats":{"Line":17},"fn_name":"from_formatter<regex_syntax::ast::ErrorKind>"},{"line":174,"address":[6886306,6886361,6887042,6887097],"length":1,"stats":{"Line":34},"fn_name":null},{"line":178,"address":[6887118,6886382],"length":1,"stats":{"Line":17},"fn_name":null},{"line":179,"address":[6887152,6887665,6886929,6886416],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[6886454,6887190],"length":1,"stats":{"Line":17},"fn_name":null},{"line":182,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[6887308,6886572],"length":1,"stats":{"Line":17},"fn_name":null},{"line":186,"address":[6886587,6887323],"length":1,"stats":{"Line":17},"fn_name":null},{"line":187,"address":[6886643,6887379],"length":1,"stats":{"Line":17},"fn_name":null},{"line":189,"address":[6886765,6887501],"length":1,"stats":{"Line":17},"fn_name":null},{"line":190,"address":[6886914,6887569,6886833,6887650],"length":1,"stats":{"Line":25},"fn_name":null},{"line":191,"address":[6887616,6886880],"length":1,"stats":{"Line":8},"fn_name":null},{"line":193,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[6530416],"length":1,"stats":{"Line":10},"fn_name":"add"},{"line":200,"address":[6530796,6530748,6530436],"length":1,"stats":{"Line":20},"fn_name":null},{"line":201,"address":[6530806,6530836,6530540],"length":1,"stats":{"Line":10},"fn_name":null},{"line":202,"address":[6530593],"length":1,"stats":{"Line":10},"fn_name":null},{"line":203,"address":[6530682],"length":1,"stats":{"Line":10},"fn_name":null},{"line":205,"address":[6530469],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[6530755],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[6530896,6530848],"length":1,"stats":{"Line":10},"fn_name":"notate"},{"line":213,"address":[6530866],"length":1,"stats":{"Line":10},"fn_name":null},{"line":214,"address":[6531096,6530916,6531767,6530978],"length":1,"stats":{"Line":30},"fn_name":null},{"line":215,"address":[6531506,6531295],"length":1,"stats":{"Line":10},"fn_name":null},{"line":216,"address":[6531349,6531859],"length":1,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[6531482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[6531317],"length":1,"stats":{"Line":10},"fn_name":null},{"line":221,"address":[6531525],"length":1,"stats":{"Line":10},"fn_name":null},{"line":222,"address":[6531542],"length":1,"stats":{"Line":10},"fn_name":null},{"line":223,"address":[6531757,6531567],"length":1,"stats":{"Line":20},"fn_name":null},{"line":224,"address":[6531663],"length":1,"stats":{"Line":10},"fn_name":null},{"line":225,"address":[6531731],"length":1,"stats":{"Line":10},"fn_name":null},{"line":228,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":235,"address":[6532044,6531952],"length":1,"stats":{"Line":10},"fn_name":"notate_line"},{"line":236,"address":[6531985,6532067],"length":1,"stats":{"Line":20},"fn_name":null},{"line":237,"address":[6532075],"length":1,"stats":{"Line":10},"fn_name":null},{"line":238,"address":[6532127],"length":1,"stats":{"Line":0},"fn_name":null},{"line":240,"address":[6532104],"length":1,"stats":{"Line":10},"fn_name":null},{"line":241,"address":[6532426,6532158,6532271,6532472],"length":1,"stats":{"Line":30},"fn_name":null},{"line":242,"address":[6532465],"length":1,"stats":{"Line":10},"fn_name":null},{"line":244,"address":[6532379],"length":1,"stats":{"Line":10},"fn_name":null},{"line":245,"address":[6533227,6532391,6532485,6532667],"length":1,"stats":{"Line":30},"fn_name":null},{"line":246,"address":[6533025,6533341,6532935,6532701],"length":1,"stats":{"Line":20},"fn_name":null},{"line":247,"address":[6532974],"length":1,"stats":{"Line":10},"fn_name":null},{"line":248,"address":[6532981,6533373],"length":1,"stats":{"Line":10},"fn_name":null},{"line":250,"address":[6533035,6532915],"length":1,"stats":{"Line":20},"fn_name":null},{"line":251,"address":[6533232,6533043,6533316],"length":1,"stats":{"Line":20},"fn_name":null},{"line":252,"address":[6533271],"length":1,"stats":{"Line":10},"fn_name":null},{"line":253,"address":[6533403,6533278,6533433],"length":1,"stats":{"Line":10},"fn_name":null},{"line":256,"address":[6532571],"length":1,"stats":{"Line":10},"fn_name":null},{"line":261,"address":[6533499,6533440],"length":1,"stats":{"Line":0},"fn_name":"left_pad_line_number"},{"line":262,"address":[6533460],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[6533519,6533588],"length":1,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[6533634],"length":1,"stats":{"Line":0},"fn_name":null},{"line":265,"address":[6533663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":266,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[6533792],"length":1,"stats":{"Line":10},"fn_name":"line_number_padding"},{"line":275,"address":[6533801,6533853],"length":1,"stats":{"Line":20},"fn_name":null},{"line":276,"address":[6533844],"length":1,"stats":{"Line":10},"fn_name":null},{"line":278,"address":[6533860,6533818,6533905,6533875],"length":1,"stats":{"Line":0},"fn_name":null},{"line":283,"address":[6533920],"length":1,"stats":{"Line":0},"fn_name":"repeat_char"},{"line":284,"address":[6533941],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":69,"coverable":108},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","interval.rs"],"content":"use std::char;\nuse std::cmp;\nuse std::fmt::Debug;\nuse std::slice;\nuse std::u8;\n\nuse unicode;\n\n// This module contains an *internal* implementation of interval sets.\n//\n// The primary invariant that interval sets guards is canonical ordering. That\n// is, every interval set contains an ordered sequence of intervals where\n// no two intervals are overlapping or adjacent. While this invariant is\n// occasionally broken within the implementation, it should be impossible for\n// callers to observe it.\n//\n// Since case folding (as implemented below) breaks that invariant, we roll\n// that into this API even though it is a little out of place in an otherwise\n// generic interval set. (Hence the reason why the `unicode` module is imported\n// here.)\n//\n// Some of the implementation complexity here is a result of me wanting to\n// preserve the sequential representation without using additional memory.\n// In many cases, we do use linear extra memory, but it is at most 2x and it\n// is amortized. If we relaxed the memory requirements, this implementation\n// could become much simpler. The extra memory is honestly probably OK, but\n// character classes (especially of the Unicode variety) can become quite\n// large, and it would be nice to keep regex compilation snappy even in debug\n// builds. (In the past, I have been careless with this area of code and it has\n// caused slow regex compilations in debug mode, so this isn't entirely\n// unwarranted.)\n//\n// Tests on this are relegated to the public API of HIR in src/hir.rs.\n\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct IntervalSet<I> {\n    ranges: Vec<I>,\n}\n\nimpl<I: Interval> IntervalSet<I> {\n    /// Create a new set from a sequence of intervals. Each interval is\n    /// specified as a pair of bounds, where both bounds are inclusive.\n    ///\n    /// The given ranges do not need to be in any specific order, and ranges\n    /// may overlap.\n    pub fn new<T: IntoIterator<Item = I>>(intervals: T) -> IntervalSet<I> {\n        let mut set = IntervalSet { ranges: intervals.into_iter().collect() };\n        set.canonicalize();\n        set\n    }\n\n    /// Add a new interval to this set.\n    pub fn push(&mut self, interval: I) {\n        // TODO: This could be faster. e.g., Push the interval such that\n        // it preserves canonicalization.\n        self.ranges.push(interval);\n        self.canonicalize();\n    }\n\n    /// Return an iterator over all intervals in this set.\n    ///\n    /// The iterator yields intervals in ascending order.\n    pub fn iter(&self) -> IntervalSetIter<I> {\n        IntervalSetIter(self.ranges.iter())\n    }\n\n    /// Return an immutable slice of intervals in this set.\n    ///\n    /// The sequence returned is in canonical ordering.\n    pub fn intervals(&self) -> &[I] {\n        &self.ranges\n    }\n\n    /// Expand this interval set such that it contains all case folded\n    /// characters. For example, if this class consists of the range `a-z`,\n    /// then applying case folding will result in the class containing both the\n    /// ranges `a-z` and `A-Z`.\n    ///\n    /// This returns an error if the necessary case mapping data is not\n    /// available.\n    pub fn case_fold_simple(&mut self) -> Result<(), unicode::CaseFoldError> {\n        let len = self.ranges.len();\n        for i in 0..len {\n            let range = self.ranges[i];\n            if let Err(err) = range.case_fold_simple(&mut self.ranges) {\n                self.canonicalize();\n                return Err(err);\n            }\n        }\n        self.canonicalize();\n        Ok(())\n    }\n\n    /// Union this set with the given set, in place.\n    pub fn union(&mut self, other: &IntervalSet<I>) {\n        // This could almost certainly be done more efficiently.\n        self.ranges.extend(&other.ranges);\n        self.canonicalize();\n    }\n\n    /// Intersect this set with the given set, in place.\n    pub fn intersect(&mut self, other: &IntervalSet<I>) {\n        if self.ranges.is_empty() {\n            return;\n        }\n        if other.ranges.is_empty() {\n            self.ranges.clear();\n            return;\n        }\n\n        // There should be a way to do this in-place with constant memory,\n        // but I couldn't figure out a simple way to do it. So just append\n        // the intersection to the end of this range, and then drain it before\n        // we're done.\n        let drain_end = self.ranges.len();\n\n        let mut ita = (0..drain_end).into_iter();\n        let mut itb = (0..other.ranges.len()).into_iter();\n        let mut a = ita.next().unwrap();\n        let mut b = itb.next().unwrap();\n        loop {\n            if let Some(ab) = self.ranges[a].intersect(&other.ranges[b]) {\n                self.ranges.push(ab);\n            }\n            let (it, aorb) =\n                if self.ranges[a].upper() < other.ranges[b].upper() {\n                    (&mut ita, &mut a)\n                } else {\n                    (&mut itb, &mut b)\n                };\n            match it.next() {\n                Some(v) => *aorb = v,\n                None => break,\n            }\n        }\n        self.ranges.drain(..drain_end);\n    }\n\n    /// Subtract the given set from this set, in place.\n    pub fn difference(&mut self, other: &IntervalSet<I>) {\n        if self.ranges.is_empty() || other.ranges.is_empty() {\n            return;\n        }\n\n        // This algorithm is (to me) surprisingly complex. A search of the\n        // interwebs indicate that this is a potentially interesting problem.\n        // Folks seem to suggest interval or segment trees, but I'd like to\n        // avoid the overhead (both runtime and conceptual) of that.\n        //\n        // The following is basically my Shitty First Draft. Therefore, in\n        // order to grok it, you probably need to read each line carefully.\n        // Simplifications are most welcome!\n        //\n        // Remember, we can assume the canonical format invariant here, which\n        // says that all ranges are sorted, not overlapping and not adjacent in\n        // each class.\n        let drain_end = self.ranges.len();\n        let (mut a, mut b) = (0, 0);\n        'LOOP: while a < drain_end && b < other.ranges.len() {\n            // Basically, the easy cases are when neither range overlaps with\n            // each other. If the `b` range is less than our current `a`\n            // range, then we can skip it and move on.\n            if other.ranges[b].upper() < self.ranges[a].lower() {\n                b += 1;\n                continue;\n            }\n            // ... similarly for the `a` range. If it's less than the smallest\n            // `b` range, then we can add it as-is.\n            if self.ranges[a].upper() < other.ranges[b].lower() {\n                let range = self.ranges[a];\n                self.ranges.push(range);\n                a += 1;\n                continue;\n            }\n            // Otherwise, we have overlapping ranges.\n            assert!(!self.ranges[a].is_intersection_empty(&other.ranges[b]));\n\n            // This part is tricky and was non-obvious to me without looking\n            // at explicit examples (see the tests). The trickiness stems from\n            // two things: 1) subtracting a range from another range could\n            // yield two ranges and 2) after subtracting a range, it's possible\n            // that future ranges can have an impact. The loop below advances\n            // the `b` ranges until they can't possible impact the current\n            // range.\n            //\n            // For example, if our `a` range is `a-t` and our next three `b`\n            // ranges are `a-c`, `g-i`, `r-t` and `x-z`, then we need to apply\n            // subtraction three times before moving on to the next `a` range.\n            let mut range = self.ranges[a];\n            while b < other.ranges.len()\n                && !range.is_intersection_empty(&other.ranges[b])\n            {\n                let old_range = range;\n                range = match range.difference(&other.ranges[b]) {\n                    (None, None) => {\n                        // We lost the entire range, so move on to the next\n                        // without adding this one.\n                        a += 1;\n                        continue 'LOOP;\n                    }\n                    (Some(range1), None) | (None, Some(range1)) => range1,\n                    (Some(range1), Some(range2)) => {\n                        self.ranges.push(range1);\n                        range2\n                    }\n                };\n                // It's possible that the `b` range has more to contribute\n                // here. In particular, if it is greater than the original\n                // range, then it might impact the next `a` range *and* it\n                // has impacted the current `a` range as much as possible,\n                // so we can quit. We don't bump `b` so that the next `a`\n                // range can apply it.\n                if other.ranges[b].upper() > old_range.upper() {\n                    break;\n                }\n                // Otherwise, the next `b` range might apply to the current\n                // `a` range.\n                b += 1;\n            }\n            self.ranges.push(range);\n            a += 1;\n        }\n        while a < drain_end {\n            let range = self.ranges[a];\n            self.ranges.push(range);\n            a += 1;\n        }\n        self.ranges.drain(..drain_end);\n    }\n\n    /// Compute the symmetric difference of the two sets, in place.\n    ///\n    /// This computes the symmetric difference of two interval sets. This\n    /// removes all elements in this set that are also in the given set,\n    /// but also adds all elements from the given set that aren't in this\n    /// set. That is, the set will contain all elements in either set,\n    /// but will not contain any elements that are in both sets.\n    pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {\n        // TODO(burntsushi): Fix this so that it amortizes allocation.\n        let mut intersection = self.clone();\n        intersection.intersect(other);\n        self.union(other);\n        self.difference(&intersection);\n    }\n\n    /// Negate this interval set.\n    ///\n    /// For all `x` where `x` is any element, if `x` was in this set, then it\n    /// will not be in this set after negation.\n    pub fn negate(&mut self) {\n        if self.ranges.is_empty() {\n            let (min, max) = (I::Bound::min_value(), I::Bound::max_value());\n            self.ranges.push(I::create(min, max));\n            return;\n        }\n\n        // There should be a way to do this in-place with constant memory,\n        // but I couldn't figure out a simple way to do it. So just append\n        // the negation to the end of this range, and then drain it before\n        // we're done.\n        let drain_end = self.ranges.len();\n\n        // We do checked arithmetic below because of the canonical ordering\n        // invariant.\n        if self.ranges[0].lower() > I::Bound::min_value() {\n            let upper = self.ranges[0].lower().decrement();\n            self.ranges.push(I::create(I::Bound::min_value(), upper));\n        }\n        for i in 1..drain_end {\n            let lower = self.ranges[i - 1].upper().increment();\n            let upper = self.ranges[i].lower().decrement();\n            self.ranges.push(I::create(lower, upper));\n        }\n        if self.ranges[drain_end - 1].upper() < I::Bound::max_value() {\n            let lower = self.ranges[drain_end - 1].upper().increment();\n            self.ranges.push(I::create(lower, I::Bound::max_value()));\n        }\n        self.ranges.drain(..drain_end);\n    }\n\n    /// Converts this set into a canonical ordering.\n    fn canonicalize(&mut self) {\n        if self.is_canonical() {\n            return;\n        }\n        self.ranges.sort();\n        assert!(!self.ranges.is_empty());\n\n        // Is there a way to do this in-place with constant memory? I couldn't\n        // figure out a way to do it. So just append the canonicalization to\n        // the end of this range, and then drain it before we're done.\n        let drain_end = self.ranges.len();\n        for oldi in 0..drain_end {\n            // If we've added at least one new range, then check if we can\n            // merge this range in the previously added range.\n            if self.ranges.len() > drain_end {\n                let (last, rest) = self.ranges.split_last_mut().unwrap();\n                if let Some(union) = last.union(&rest[oldi]) {\n                    *last = union;\n                    continue;\n                }\n            }\n            let range = self.ranges[oldi];\n            self.ranges.push(range);\n        }\n        self.ranges.drain(..drain_end);\n    }\n\n    /// Returns true if and only if this class is in a canonical ordering.\n    fn is_canonical(&self) -> bool {\n        for pair in self.ranges.windows(2) {\n            if pair[0] >= pair[1] {\n                return false;\n            }\n            if pair[0].is_contiguous(&pair[1]) {\n                return false;\n            }\n        }\n        true\n    }\n}\n\n/// An iterator over intervals.\n#[derive(Debug)]\npub struct IntervalSetIter<'a, I: 'a>(slice::Iter<'a, I>);\n\nimpl<'a, I> Iterator for IntervalSetIter<'a, I> {\n    type Item = &'a I;\n\n    fn next(&mut self) -> Option<&'a I> {\n        self.0.next()\n    }\n}\n\npub trait Interval:\n    Clone + Copy + Debug + Default + Eq + PartialEq + PartialOrd + Ord\n{\n    type Bound: Bound;\n\n    fn lower(&self) -> Self::Bound;\n    fn upper(&self) -> Self::Bound;\n    fn set_lower(&mut self, bound: Self::Bound);\n    fn set_upper(&mut self, bound: Self::Bound);\n    fn case_fold_simple(\n        &self,\n        intervals: &mut Vec<Self>,\n    ) -> Result<(), unicode::CaseFoldError>;\n\n    /// Create a new interval.\n    fn create(lower: Self::Bound, upper: Self::Bound) -> Self {\n        let mut int = Self::default();\n        if lower <= upper {\n            int.set_lower(lower);\n            int.set_upper(upper);\n        } else {\n            int.set_lower(upper);\n            int.set_upper(lower);\n        }\n        int\n    }\n\n    /// Union the given overlapping range into this range.\n    ///\n    /// If the two ranges aren't contiguous, then this returns `None`.\n    fn union(&self, other: &Self) -> Option<Self> {\n        if !self.is_contiguous(other) {\n            return None;\n        }\n        let lower = cmp::min(self.lower(), other.lower());\n        let upper = cmp::max(self.upper(), other.upper());\n        Some(Self::create(lower, upper))\n    }\n\n    /// Intersect this range with the given range and return the result.\n    ///\n    /// If the intersection is empty, then this returns `None`.\n    fn intersect(&self, other: &Self) -> Option<Self> {\n        let lower = cmp::max(self.lower(), other.lower());\n        let upper = cmp::min(self.upper(), other.upper());\n        if lower <= upper {\n            Some(Self::create(lower, upper))\n        } else {\n            None\n        }\n    }\n\n    /// Subtract the given range from this range and return the resulting\n    /// ranges.\n    ///\n    /// If subtraction would result in an empty range, then no ranges are\n    /// returned.\n    fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {\n        if self.is_subset(other) {\n            return (None, None);\n        }\n        if self.is_intersection_empty(other) {\n            return (Some(self.clone()), None);\n        }\n        let add_lower = other.lower() > self.lower();\n        let add_upper = other.upper() < self.upper();\n        // We know this because !self.is_subset(other) and the ranges have\n        // a non-empty intersection.\n        assert!(add_lower || add_upper);\n        let mut ret = (None, None);\n        if add_lower {\n            let upper = other.lower().decrement();\n            ret.0 = Some(Self::create(self.lower(), upper));\n        }\n        if add_upper {\n            let lower = other.upper().increment();\n            let range = Self::create(lower, self.upper());\n            if ret.0.is_none() {\n                ret.0 = Some(range);\n            } else {\n                ret.1 = Some(range);\n            }\n        }\n        ret\n    }\n\n    /// Compute the symmetric difference the given range from this range. This\n    /// returns the union of the two ranges minus its intersection.\n    fn symmetric_difference(\n        &self,\n        other: &Self,\n    ) -> (Option<Self>, Option<Self>) {\n        let union = match self.union(other) {\n            None => return (Some(self.clone()), Some(other.clone())),\n            Some(union) => union,\n        };\n        let intersection = match self.intersect(other) {\n            None => return (Some(self.clone()), Some(other.clone())),\n            Some(intersection) => intersection,\n        };\n        union.difference(&intersection)\n    }\n\n    /// Returns true if and only if the two ranges are contiguous. Two ranges\n    /// are contiguous if and only if the ranges are either overlapping or\n    /// adjacent.\n    fn is_contiguous(&self, other: &Self) -> bool {\n        let lower1 = self.lower().as_u32();\n        let upper1 = self.upper().as_u32();\n        let lower2 = other.lower().as_u32();\n        let upper2 = other.upper().as_u32();\n        cmp::max(lower1, lower2) <= cmp::min(upper1, upper2).saturating_add(1)\n    }\n\n    /// Returns true if and only if the intersection of this range and the\n    /// other range is empty.\n    fn is_intersection_empty(&self, other: &Self) -> bool {\n        let (lower1, upper1) = (self.lower(), self.upper());\n        let (lower2, upper2) = (other.lower(), other.upper());\n        cmp::max(lower1, lower2) > cmp::min(upper1, upper2)\n    }\n\n    /// Returns true if and only if this range is a subset of the other range.\n    fn is_subset(&self, other: &Self) -> bool {\n        let (lower1, upper1) = (self.lower(), self.upper());\n        let (lower2, upper2) = (other.lower(), other.upper());\n        (lower2 <= lower1 && lower1 <= upper2)\n            && (lower2 <= upper1 && upper1 <= upper2)\n    }\n}\n\npub trait Bound:\n    Copy + Clone + Debug + Eq + PartialEq + PartialOrd + Ord\n{\n    fn min_value() -> Self;\n    fn max_value() -> Self;\n    fn as_u32(self) -> u32;\n    fn increment(self) -> Self;\n    fn decrement(self) -> Self;\n}\n\nimpl Bound for u8 {\n    fn min_value() -> Self {\n        u8::MIN\n    }\n    fn max_value() -> Self {\n        u8::MAX\n    }\n    fn as_u32(self) -> u32 {\n        self as u32\n    }\n    fn increment(self) -> Self {\n        self.checked_add(1).unwrap()\n    }\n    fn decrement(self) -> Self {\n        self.checked_sub(1).unwrap()\n    }\n}\n\nimpl Bound for char {\n    fn min_value() -> Self {\n        '\\x00'\n    }\n    fn max_value() -> Self {\n        '\\u{10FFFF}'\n    }\n    fn as_u32(self) -> u32 {\n        self as u32\n    }\n\n    fn increment(self) -> Self {\n        match self {\n            '\\u{D7FF}' => '\\u{E000}',\n            c => char::from_u32((c as u32).checked_add(1).unwrap()).unwrap(),\n        }\n    }\n\n    fn decrement(self) -> Self {\n        match self {\n            '\\u{E000}' => '\\u{D7FF}',\n            c => char::from_u32((c as u32).checked_sub(1).unwrap()).unwrap(),\n        }\n    }\n}\n\n// Tests for interval sets are written in src/hir.rs against the public API.\n","traces":[{"line":46,"address":[6703328,6703440,6703264,6703504],"length":1,"stats":{"Line":18},"fn_name":"new<regex_syntax::hir::ClassUnicodeRange,alloc::vec::Vec<regex_syntax::hir::ClassUnicodeRange>>"},{"line":47,"address":[6703271,6703447,6703516,6703340],"length":1,"stats":{"Line":36},"fn_name":null},{"line":48,"address":[6703378,6703554],"length":1,"stats":{"Line":18},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[6703616,6703664],"length":1,"stats":{"Line":16},"fn_name":"push<regex_syntax::hir::ClassUnicodeRange>"},{"line":56,"address":[6703633,6703682],"length":1,"stats":{"Line":16},"fn_name":null},{"line":57,"address":[6703653,6703709],"length":1,"stats":{"Line":16},"fn_name":null},{"line":63,"address":[6703728,6703824],"length":1,"stats":{"Line":16},"fn_name":"iter<regex_syntax::hir::ClassBytesRange>"},{"line":64,"address":[6703833,6703737],"length":1,"stats":{"Line":16},"fn_name":null},{"line":70,"address":[6703968,6703920],"length":1,"stats":{"Line":18},"fn_name":"intervals<regex_syntax::hir::ClassBytesRange>"},{"line":71,"address":[6703977,6703929],"length":1,"stats":{"Line":18},"fn_name":null},{"line":81,"address":[6704016,6704352],"length":1,"stats":{"Line":16},"fn_name":"case_fold_simple<regex_syntax::hir::ClassBytesRange>"},{"line":82,"address":[6704364,6704028],"length":1,"stats":{"Line":16},"fn_name":null},{"line":83,"address":[6704394,6704055,6704174,6704292,6704513,6704633],"length":1,"stats":{"Line":33},"fn_name":null},{"line":84,"address":[6704556,6704217],"length":1,"stats":{"Line":16},"fn_name":null},{"line":85,"address":[6704258,6704599],"length":1,"stats":{"Line":17},"fn_name":null},{"line":86,"address":[6704643,6704302],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[6704649,6704308],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[6704163,6704502],"length":1,"stats":{"Line":17},"fn_name":null},{"line":91,"address":[6704330,6704671],"length":1,"stats":{"Line":17},"fn_name":null},{"line":95,"address":[6704688,6704736],"length":1,"stats":{"Line":8},"fn_name":"union<regex_syntax::hir::ClassUnicodeRange>"},{"line":97,"address":[6704750,6704702],"length":1,"stats":{"Line":8},"fn_name":null},{"line":98,"address":[6704722,6704770],"length":1,"stats":{"Line":8},"fn_name":null},{"line":102,"address":[6704784,6705808],"length":1,"stats":{"Line":0},"fn_name":"intersect<regex_syntax::hir::ClassBytesRange>"},{"line":103,"address":[6705831,6704807],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[6704863,6705887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[6704877,6705872,6704848,6705901],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[6705941,6704917],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[6704926,6705950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[6704888,6705912],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[6704928,6705952],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[6706023,6704999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[6705079,6706103],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[6705137,6706161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[6706219,6705195,6706772,6705775],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[6705411,6706233,6706410,6705209],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[6706397,6705396],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[6706621,6705622],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[6706589,6705590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[6706555,6705556],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[6705654,6705749,6706747,6706653],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[6705687,6705751,6706685,6706749],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[6705780,6705714,6706712,6706777],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[6706800,6709200],"length":1,"stats":{"Line":0},"fn_name":"difference<regex_syntax::hir::ClassUnicodeRange>"},{"line":141,"address":[6706823,6709223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[6709379,6706979],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[6706952,6709352],"length":1,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[6706989,6709389],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[6707021,6711238,6708788,6709421],"length":1,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[6709551,6707151],"length":1,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[6707348,6709748,6709014,6711468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[6707398,6709798],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[6709718,6709811,6707318,6707411],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[6707590,6709990],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[6707653,6710053],"length":1,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[6711498,6709044,6707664,6710068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[6710118,6707714],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[6709942,6707734,6710138,6707542,6710252,6707848],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[6707883,6707821,6710225,6710287],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[6708739,6708001,6710463,6708059,6711189,6707902,6710306,6710405],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[6710434,6707974,6708030,6710378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[6710481,6708077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[6710670,6708484,6710961,6710870,6710900,6708515,6710930,6710517,6708113,6708230,6708424,6708454],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[6708175,6710625],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[6709104,6710793,6711558,6708347],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[6710837,6708391],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[6710672,6710872,6708426,6708456,6710902,6708396,6708232,6710842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":202,"address":[6710693,6708260],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[6710759,6708328],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[6710936,6708490],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[6708551,6710997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[6708691,6711137],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[6709074,6711104,6711528,6711181,6708658,6708731],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[6711147,6708701],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[6711194,6708744,6711588,6709134],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[6708990,6709531,6708801,6711444,6707131,6711251],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[6711330,6708880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[6708937,6711387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[6709194,6708948,6711402,6711648,6711618,6709164],"length":1,"stats":{"Line":0},"fn_name":"symmetric_difference<regex_syntax::hir::ClassUnicodeRange>"},{"line":228,"address":[6711449,6708827,6708995,6711277],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[6711808,6711695,6711855,6711648],"length":1,"stats":{"Line":0},"fn_name":"symmetric_difference<regex_syntax::hir::ClassUnicodeRange>"},{"line":240,"address":[6711662,6711822],"length":1,"stats":{"Line":0},"fn_name":null},{"line":241,"address":[6711876,6711716],"length":1,"stats":{"Line":0},"fn_name":null},{"line":242,"address":[6711732,6711892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[6711762,6711922],"length":1,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[6713520,6711968],"length":1,"stats":{"Line":16},"fn_name":"negate<regex_syntax::hir::ClassBytesRange>"},{"line":251,"address":[6711983,6713535],"length":1,"stats":{"Line":16},"fn_name":null},{"line":252,"address":[6712061,6713613],"length":1,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[6713711,6712153],"length":1,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[6713761,6712226],"length":1,"stats":{"Line":0},"fn_name":null},{"line":261,"address":[6712031,6713583],"length":1,"stats":{"Line":16},"fn_name":null},{"line":265,"address":[6712255,6712546,6714066,6713790],"length":1,"stats":{"Line":32},"fn_name":null},{"line":266,"address":[6712373,6713908],"length":1,"stats":{"Line":16},"fn_name":null},{"line":267,"address":[6712459,6713991],"length":1,"stats":{"Line":16},"fn_name":null},{"line":269,"address":[6712548,6712752,6713055,6714563,6714068,6714272],"length":1,"stats":{"Line":34},"fn_name":null},{"line":270,"address":[6714920,6714314,6713427,6712794],"length":1,"stats":{"Line":17},"fn_name":null},{"line":271,"address":[6712926,6714449],"length":1,"stats":{"Line":17},"fn_name":null},{"line":272,"address":[6714530,6713001],"length":1,"stats":{"Line":18},"fn_name":null},{"line":274,"address":[6713357,6714850,6712712,6713457,6714591,6714232,6713083,6714950],"length":1,"stats":{"Line":51},"fn_name":null},{"line":275,"address":[6713183,6714691,6715010,6713487,6713517,6714980],"length":1,"stats":{"Line":17},"fn_name":null},{"line":276,"address":[6714799,6713294],"length":1,"stats":{"Line":17},"fn_name":null},{"line":278,"address":[6714868,6713375],"length":1,"stats":{"Line":17},"fn_name":null},{"line":282,"address":[6715024,6715920],"length":1,"stats":{"Line":18},"fn_name":"canonicalize<regex_syntax::hir::ClassBytesRange>"},{"line":283,"address":[6715943,6715044],"length":1,"stats":{"Line":18},"fn_name":null},{"line":284,"address":[6715992,6715090],"length":1,"stats":{"Line":18},"fn_name":null},{"line":286,"address":[6715971,6715110,6716012,6715069],"length":1,"stats":{"Line":32},"fn_name":null},{"line":287,"address":[6715175,6715121,6716026,6716083],"length":1,"stats":{"Line":16},"fn_name":null},{"line":292,"address":[6715151,6716059],"length":1,"stats":{"Line":16},"fn_name":null},{"line":293,"address":[6715205,6715854,6716113,6715386,6716748,6716297],"length":1,"stats":{"Line":32},"fn_name":null},{"line":296,"address":[6716623,6715733,6716339,6715425],"length":1,"stats":{"Line":32},"fn_name":null},{"line":297,"address":[6715469,6716386],"length":1,"stats":{"Line":16},"fn_name":null},{"line":298,"address":[6715735,6715906,6716514,6716625,6716800,6715597,6716772,6715878],"length":1,"stats":{"Line":40},"fn_name":"is_canonical<regex_syntax::hir::ClassUnicodeRange>"},{"line":299,"address":[6715768,6716658],"length":1,"stats":{"Line":16},"fn_name":null},{"line":300,"address":[6715773,6716663],"length":1,"stats":{"Line":16},"fn_name":null},{"line":303,"address":[6715790,6716683],"length":1,"stats":{"Line":16},"fn_name":null},{"line":304,"address":[6716737,6715839],"length":1,"stats":{"Line":16},"fn_name":null},{"line":306,"address":[6716753,6715859,6715348,6716259],"length":1,"stats":{"Line":32},"fn_name":null},{"line":310,"address":[6717376,6716800],"length":1,"stats":{"Line":10},"fn_name":"is_canonical<regex_syntax::hir::ClassUnicodeRange>"},{"line":311,"address":[6717248,6716968,6717544,6716815,6717824,6717391],"length":1,"stats":{"Line":39},"fn_name":null},{"line":312,"address":[6717260,6717038,6717614,6717836],"length":1,"stats":{"Line":21},"fn_name":null},{"line":313,"address":[6717157,6717181,6717733,6717757],"length":1,"stats":{"Line":33},"fn_name":null},{"line":315,"address":[6717139,6717715,6717183,6717759,6717315,6717891],"length":1,"stats":{"Line":42},"fn_name":null},{"line":316,"address":[6717253,6717829],"length":1,"stats":{"Line":16},"fn_name":null},{"line":319,"address":[6716958,6717534],"length":1,"stats":{"Line":18},"fn_name":null},{"line":330,"address":[6717984,6717952],"length":1,"stats":{"Line":16},"fn_name":"next<regex_syntax::hir::ClassUnicodeRange>"},{"line":331,"address":[6717961,6717993],"length":1,"stats":{"Line":16},"fn_name":null},{"line":350,"address":[6417760,6417616],"length":1,"stats":{"Line":18},"fn_name":"create<regex_syntax::hir::ClassBytesRange>"},{"line":351,"address":[6417630,6417772],"length":1,"stats":{"Line":18},"fn_name":null},{"line":352,"address":[6417736,6417643,6417719,6417858,6417874,6417785],"length":1,"stats":{"Line":36},"fn_name":null},{"line":353,"address":[6417830,6417689],"length":1,"stats":{"Line":18},"fn_name":null},{"line":354,"address":[6417704,6417844],"length":1,"stats":{"Line":18},"fn_name":null},{"line":356,"address":[6417814,6417672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":357,"address":[6417860,6417721],"length":1,"stats":{"Line":0},"fn_name":null},{"line":359,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":365,"address":[6418128,6417904],"length":1,"stats":{"Line":16},"fn_name":"union<regex_syntax::hir::ClassUnicodeRange>"},{"line":366,"address":[6417928,6418152],"length":1,"stats":{"Line":16},"fn_name":null},{"line":367,"address":[6417964,6418188],"length":1,"stats":{"Line":16},"fn_name":null},{"line":369,"address":[6417990,6418220,6418177,6417953],"length":1,"stats":{"Line":32},"fn_name":null},{"line":370,"address":[6418262,6418026],"length":1,"stats":{"Line":16},"fn_name":null},{"line":371,"address":[6418317,6418079],"length":1,"stats":{"Line":16},"fn_name":null},{"line":377,"address":[6418576,6418368],"length":1,"stats":{"Line":0},"fn_name":"intersect<regex_syntax::hir::ClassUnicodeRange>"},{"line":378,"address":[6418600,6418392],"length":1,"stats":{"Line":0},"fn_name":null},{"line":379,"address":[6418652,6418438],"length":1,"stats":{"Line":0},"fn_name":null},{"line":380,"address":[6418516,6418699,6418733,6418479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":381,"address":[6418518,6418735],"length":1,"stats":{"Line":0},"fn_name":null},{"line":383,"address":[6418508,6418728],"length":1,"stats":{"Line":0},"fn_name":null},{"line":392,"address":[6419712,6418816],"length":1,"stats":{"Line":0},"fn_name":"difference<regex_syntax::hir::ClassBytesRange>"},{"line":393,"address":[6419743,6418849],"length":1,"stats":{"Line":0},"fn_name":null},{"line":394,"address":[6419806,6418891],"length":1,"stats":{"Line":0},"fn_name":null},{"line":396,"address":[6418972,6419794,6419871,6418879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":397,"address":[6419901,6418999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[6419882,6418983,6419088,6419977],"length":1,"stats":{"Line":0},"fn_name":null},{"line":400,"address":[6420031,6419133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":403,"address":[6420101,6420239,6419191,6419288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":404,"address":[6420150,6419231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[6419281,6419318,6420269,6420232],"length":1,"stats":{"Line":0},"fn_name":null},{"line":406,"address":[6419325,6420276],"length":1,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[6419363,6420311],"length":1,"stats":{"Line":0},"fn_name":null},{"line":409,"address":[6419445,6419677,6420396,6420625],"length":1,"stats":{"Line":0},"fn_name":null},{"line":410,"address":[6420412,6419461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":411,"address":[6419499,6420447],"length":1,"stats":{"Line":0},"fn_name":null},{"line":412,"address":[6420492,6419550,6419634,6420573],"length":1,"stats":{"Line":0},"fn_name":null},{"line":413,"address":[6420579,6419640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":415,"address":[6420527,6419582],"length":1,"stats":{"Line":0},"fn_name":null},{"line":418,"address":[6419679,6420627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":423,"address":[6421264,6420672],"length":1,"stats":{"Line":0},"fn_name":"symmetric_difference<regex_syntax::hir::ClassBytesRange>"},{"line":427,"address":[6420858,6420689,6421413,6421290],"length":1,"stats":{"Line":0},"fn_name":null},{"line":428,"address":[6420865,6420915,6421333,6420741,6421452,6421420],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[6421354,6420755],"length":1,"stats":{"Line":0},"fn_name":null},{"line":431,"address":[6420785,6421606,6421384,6421130],"length":1,"stats":{"Line":0},"fn_name":null},{"line":432,"address":[6421532,6421137,6421016,6421613],"length":1,"stats":{"Line":0},"fn_name":null},{"line":433,"address":[6421030,6421553],"length":1,"stats":{"Line":0},"fn_name":null},{"line":435,"address":[6421060,6421588],"length":1,"stats":{"Line":0},"fn_name":null},{"line":441,"address":[6421744,6421984],"length":1,"stats":{"Line":21},"fn_name":"is_contiguous<regex_syntax::hir::ClassBytesRange>"},{"line":442,"address":[6421768,6422008],"length":1,"stats":{"Line":21},"fn_name":null},{"line":443,"address":[6421803,6422040],"length":1,"stats":{"Line":21},"fn_name":null},{"line":444,"address":[6422072,6421838],"length":1,"stats":{"Line":21},"fn_name":null},{"line":445,"address":[6422104,6421873],"length":1,"stats":{"Line":21},"fn_name":null},{"line":446,"address":[6421911,6422139],"length":1,"stats":{"Line":21},"fn_name":null},{"line":451,"address":[6422224,6422448],"length":1,"stats":{"Line":9},"fn_name":"is_intersection_empty<regex_syntax::hir::ClassUnicodeRange>"},{"line":452,"address":[6422248,6422472],"length":1,"stats":{"Line":9},"fn_name":null},{"line":453,"address":[6422543,6422316],"length":1,"stats":{"Line":9},"fn_name":null},{"line":454,"address":[6422379,6422605],"length":1,"stats":{"Line":9},"fn_name":null},{"line":458,"address":[6422688,6423040],"length":1,"stats":{"Line":0},"fn_name":"is_subset<regex_syntax::hir::ClassUnicodeRange>"},{"line":459,"address":[6422712,6423064],"length":1,"stats":{"Line":0},"fn_name":null},{"line":460,"address":[6422772,6423124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":461,"address":[6422900,6422827,6422999,6423179,6423351,6423252],"length":1,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[6423316,6423371,6422862,6422964,6423214,6423019],"length":1,"stats":{"Line":0},"fn_name":null},{"line":477,"address":[7019760],"length":1,"stats":{"Line":8},"fn_name":"min_value"},{"line":478,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":480,"address":[7019776],"length":1,"stats":{"Line":9},"fn_name":"max_value"},{"line":481,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":483,"address":[7019792],"length":1,"stats":{"Line":13},"fn_name":"as_u32"},{"line":484,"address":[7019800],"length":1,"stats":{"Line":13},"fn_name":null},{"line":486,"address":[7019824],"length":1,"stats":{"Line":8},"fn_name":"increment"},{"line":487,"address":[7019833],"length":1,"stats":{"Line":8},"fn_name":null},{"line":489,"address":[7019920],"length":1,"stats":{"Line":8},"fn_name":"decrement"},{"line":490,"address":[7019929],"length":1,"stats":{"Line":8},"fn_name":null},{"line":495,"address":[7020016],"length":1,"stats":{"Line":8},"fn_name":"min_value"},{"line":496,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":498,"address":[7020032],"length":1,"stats":{"Line":8},"fn_name":"max_value"},{"line":499,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":501,"address":[7020048],"length":1,"stats":{"Line":8},"fn_name":"as_u32"},{"line":502,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":505,"address":[7020064],"length":1,"stats":{"Line":8},"fn_name":"increment"},{"line":506,"address":[7020189,7020122],"length":1,"stats":{"Line":8},"fn_name":null},{"line":507,"address":[7020114,7020072],"length":1,"stats":{"Line":8},"fn_name":null},{"line":508,"address":[7020088,7020139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":512,"address":[7020208],"length":1,"stats":{"Line":8},"fn_name":"decrement"},{"line":513,"address":[7020266,7020333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":514,"address":[7020216,7020258],"length":1,"stats":{"Line":8},"fn_name":null},{"line":515,"address":[7020283,7020232],"length":1,"stats":{"Line":16},"fn_name":null}],"covered":98,"coverable":214},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","literal","mod.rs"],"content":"/*!\nProvides routines for extracting literal prefixes and suffixes from an `Hir`.\n*/\n\nuse std::cmp;\nuse std::fmt;\nuse std::iter;\nuse std::mem;\nuse std::ops;\n\nuse hir::{self, Hir, HirKind};\n\n/// A set of literal byte strings extracted from a regular expression.\n///\n/// Every member of the set is a `Literal`, which is represented by a\n/// `Vec<u8>`. (Notably, it may contain invalid UTF-8.) Every member is\n/// said to be either *complete* or *cut*. A complete literal means that\n/// it extends until the beginning (or end) of the regular expression. In\n/// some circumstances, this can be used to indicate a match in the regular\n/// expression.\n///\n/// A key aspect of literal extraction is knowing when to stop. It is not\n/// feasible to blindly extract all literals from a regular expression, even if\n/// there are finitely many. For example, the regular expression `[0-9]{10}`\n/// has `10^10` distinct literals. For this reason, literal extraction is\n/// bounded to some low number by default using heuristics, but the limits can\n/// be tweaked.\n///\n/// **WARNING**: Literal extraction uses stack space proportional to the size\n/// of the `Hir` expression. At some point, this drawback will be eliminated.\n/// To protect yourself, set a reasonable\n/// [`nest_limit` on your `Parser`](../../struct.ParserBuilder.html#method.nest_limit).\n/// This is done for you by default.\n#[derive(Clone, Eq, PartialEq)]\npub struct Literals {\n    lits: Vec<Literal>,\n    limit_size: usize,\n    limit_class: usize,\n}\n\n/// A single member of a set of literals extracted from a regular expression.\n///\n/// This type has `Deref` and `DerefMut` impls to `Vec<u8>` so that all slice\n/// and `Vec` operations are available.\n#[derive(Clone, Eq, Ord)]\npub struct Literal {\n    v: Vec<u8>,\n    cut: bool,\n}\n\nimpl Literals {\n    /// Returns a new empty set of literals using default limits.\n    pub fn empty() -> Literals {\n        Literals { lits: vec![], limit_size: 250, limit_class: 10 }\n    }\n\n    /// Returns a set of literal prefixes extracted from the given `Hir`.\n    pub fn prefixes(expr: &Hir) -> Literals {\n        let mut lits = Literals::empty();\n        lits.union_prefixes(expr);\n        lits\n    }\n\n    /// Returns a set of literal suffixes extracted from the given `Hir`.\n    pub fn suffixes(expr: &Hir) -> Literals {\n        let mut lits = Literals::empty();\n        lits.union_suffixes(expr);\n        lits\n    }\n\n    /// Get the approximate size limit (in bytes) of this set.\n    pub fn limit_size(&self) -> usize {\n        self.limit_size\n    }\n\n    /// Set the approximate size limit (in bytes) of this set.\n    ///\n    /// If extracting a literal would put the set over this limit, then\n    /// extraction stops.\n    ///\n    /// The new limits will only apply to additions to this set. Existing\n    /// members remain unchanged, even if the set exceeds the new limit.\n    pub fn set_limit_size(&mut self, size: usize) -> &mut Literals {\n        self.limit_size = size;\n        self\n    }\n\n    /// Get the character class size limit for this set.\n    pub fn limit_class(&self) -> usize {\n        self.limit_class\n    }\n\n    /// Limits the size of character(or byte) classes considered.\n    ///\n    /// A value of `0` prevents all character classes from being considered.\n    ///\n    /// This limit also applies to case insensitive literals, since each\n    /// character in the case insensitive literal is converted to a class, and\n    /// then case folded.\n    ///\n    /// The new limits will only apply to additions to this set. Existing\n    /// members remain unchanged, even if the set exceeds the new limit.\n    pub fn set_limit_class(&mut self, size: usize) -> &mut Literals {\n        self.limit_class = size;\n        self\n    }\n\n    /// Returns the set of literals as a slice. Its order is unspecified.\n    pub fn literals(&self) -> &[Literal] {\n        &self.lits\n    }\n\n    /// Returns the length of the smallest literal.\n    ///\n    /// Returns None is there are no literals in the set.\n    pub fn min_len(&self) -> Option<usize> {\n        let mut min = None;\n        for lit in &self.lits {\n            match min {\n                None => min = Some(lit.len()),\n                Some(m) if lit.len() < m => min = Some(lit.len()),\n                _ => {}\n            }\n        }\n        min\n    }\n\n    /// Returns true if all members in this set are complete.\n    pub fn all_complete(&self) -> bool {\n        !self.lits.is_empty() && self.lits.iter().all(|l| !l.is_cut())\n    }\n\n    /// Returns true if any member in this set is complete.\n    pub fn any_complete(&self) -> bool {\n        self.lits.iter().any(|lit| !lit.is_cut())\n    }\n\n    /// Returns true if this set contains an empty literal.\n    pub fn contains_empty(&self) -> bool {\n        self.lits.iter().any(|lit| lit.is_empty())\n    }\n\n    /// Returns true if this set is empty or if all of its members is empty.\n    pub fn is_empty(&self) -> bool {\n        self.lits.is_empty() || self.lits.iter().all(|lit| lit.is_empty())\n    }\n\n    /// Returns a new empty set of literals using this set's limits.\n    pub fn to_empty(&self) -> Literals {\n        let mut lits = Literals::empty();\n        lits.set_limit_size(self.limit_size).set_limit_class(self.limit_class);\n        lits\n    }\n\n    /// Returns the longest common prefix of all members in this set.\n    pub fn longest_common_prefix(&self) -> &[u8] {\n        if self.is_empty() {\n            return &[];\n        }\n        let lit0 = &*self.lits[0];\n        let mut len = lit0.len();\n        for lit in &self.lits[1..] {\n            len = cmp::min(\n                len,\n                lit.iter().zip(lit0).take_while(|&(a, b)| a == b).count(),\n            );\n        }\n        &self.lits[0][..len]\n    }\n\n    /// Returns the longest common suffix of all members in this set.\n    pub fn longest_common_suffix(&self) -> &[u8] {\n        if self.is_empty() {\n            return &[];\n        }\n        let lit0 = &*self.lits[0];\n        let mut len = lit0.len();\n        for lit in &self.lits[1..] {\n            len = cmp::min(\n                len,\n                lit.iter()\n                    .rev()\n                    .zip(lit0.iter().rev())\n                    .take_while(|&(a, b)| a == b)\n                    .count(),\n            );\n        }\n        &self.lits[0][self.lits[0].len() - len..]\n    }\n\n    /// Returns a new set of literals with the given number of bytes trimmed\n    /// from the suffix of each literal.\n    ///\n    /// If any literal would be cut out completely by trimming, then None is\n    /// returned.\n    ///\n    /// Any duplicates that are created as a result of this transformation are\n    /// removed.\n    pub fn trim_suffix(&self, num_bytes: usize) -> Option<Literals> {\n        if self.min_len().map(|len| len <= num_bytes).unwrap_or(true) {\n            return None;\n        }\n        let mut new = self.to_empty();\n        for mut lit in self.lits.iter().cloned() {\n            let new_len = lit.len() - num_bytes;\n            lit.truncate(new_len);\n            lit.cut();\n            new.lits.push(lit);\n        }\n        new.lits.sort();\n        new.lits.dedup();\n        Some(new)\n    }\n\n    /// Returns a new set of prefixes of this set of literals that are\n    /// guaranteed to be unambiguous.\n    ///\n    /// Any substring match with a member of the set is returned is guaranteed\n    /// to never overlap with a substring match of another member of the set\n    /// at the same starting position.\n    ///\n    /// Given any two members of the returned set, neither is a substring of\n    /// the other.\n    pub fn unambiguous_prefixes(&self) -> Literals {\n        if self.lits.is_empty() {\n            return self.to_empty();\n        }\n        let mut old: Vec<Literal> = self.lits.iter().cloned().collect();\n        let mut new = self.to_empty();\n        'OUTER: while let Some(mut candidate) = old.pop() {\n            if candidate.is_empty() {\n                continue;\n            }\n            if new.lits.is_empty() {\n                new.lits.push(candidate);\n                continue;\n            }\n            for lit2 in &mut new.lits {\n                if lit2.is_empty() {\n                    continue;\n                }\n                if &candidate == lit2 {\n                    // If the literal is already in the set, then we can\n                    // just drop it. But make sure that cut literals are\n                    // infectious!\n                    candidate.cut = candidate.cut || lit2.cut;\n                    lit2.cut = candidate.cut;\n                    continue 'OUTER;\n                }\n                if candidate.len() < lit2.len() {\n                    if let Some(i) = position(&candidate, &lit2) {\n                        candidate.cut();\n                        let mut lit3 = lit2.clone();\n                        lit3.truncate(i);\n                        lit3.cut();\n                        old.push(lit3);\n                        lit2.clear();\n                    }\n                } else {\n                    if let Some(i) = position(&lit2, &candidate) {\n                        lit2.cut();\n                        let mut new_candidate = candidate.clone();\n                        new_candidate.truncate(i);\n                        new_candidate.cut();\n                        old.push(new_candidate);\n                        candidate.clear();\n                    }\n                }\n                // Oops, the candidate is already represented in the set.\n                if candidate.is_empty() {\n                    continue 'OUTER;\n                }\n            }\n            new.lits.push(candidate);\n        }\n        new.lits.retain(|lit| !lit.is_empty());\n        new.lits.sort();\n        new.lits.dedup();\n        new\n    }\n\n    /// Returns a new set of suffixes of this set of literals that are\n    /// guaranteed to be unambiguous.\n    ///\n    /// Any substring match with a member of the set is returned is guaranteed\n    /// to never overlap with a substring match of another member of the set\n    /// at the same ending position.\n    ///\n    /// Given any two members of the returned set, neither is a substring of\n    /// the other.\n    pub fn unambiguous_suffixes(&self) -> Literals {\n        // This is a touch wasteful...\n        let mut lits = self.clone();\n        lits.reverse();\n        let mut unamb = lits.unambiguous_prefixes();\n        unamb.reverse();\n        unamb\n    }\n\n    /// Unions the prefixes from the given expression to this set.\n    ///\n    /// If prefixes could not be added (for example, this set would exceed its\n    /// size limits or the set of prefixes from `expr` includes the empty\n    /// string), then false is returned.\n    ///\n    /// Note that prefix literals extracted from `expr` are said to be complete\n    /// if and only if the literal extends from the beginning of `expr` to the\n    /// end of `expr`.\n    pub fn union_prefixes(&mut self, expr: &Hir) -> bool {\n        let mut lits = self.to_empty();\n        prefixes(expr, &mut lits);\n        !lits.is_empty() && !lits.contains_empty() && self.union(lits)\n    }\n\n    /// Unions the suffixes from the given expression to this set.\n    ///\n    /// If suffixes could not be added (for example, this set would exceed its\n    /// size limits or the set of suffixes from `expr` includes the empty\n    /// string), then false is returned.\n    ///\n    /// Note that prefix literals extracted from `expr` are said to be complete\n    /// if and only if the literal extends from the end of `expr` to the\n    /// beginning of `expr`.\n    pub fn union_suffixes(&mut self, expr: &Hir) -> bool {\n        let mut lits = self.to_empty();\n        suffixes(expr, &mut lits);\n        lits.reverse();\n        !lits.is_empty() && !lits.contains_empty() && self.union(lits)\n    }\n\n    /// Unions this set with another set.\n    ///\n    /// If the union would cause the set to exceed its limits, then the union\n    /// is skipped and it returns false. Otherwise, if the union succeeds, it\n    /// returns true.\n    pub fn union(&mut self, lits: Literals) -> bool {\n        if self.num_bytes() + lits.num_bytes() > self.limit_size {\n            return false;\n        }\n        if lits.is_empty() {\n            self.lits.push(Literal::empty());\n        } else {\n            self.lits.extend(lits.lits);\n        }\n        true\n    }\n\n    /// Extends this set with another set.\n    ///\n    /// The set of literals is extended via a cross product.\n    ///\n    /// If a cross product would cause this set to exceed its limits, then the\n    /// cross product is skipped and it returns false. Otherwise, if the cross\n    /// product succeeds, it returns true.\n    pub fn cross_product(&mut self, lits: &Literals) -> bool {\n        if lits.is_empty() {\n            return true;\n        }\n        // Check that we make sure we stay in our limits.\n        let mut size_after;\n        if self.is_empty() || !self.any_complete() {\n            size_after = self.num_bytes();\n            for lits_lit in lits.literals() {\n                size_after += lits_lit.len();\n            }\n        } else {\n            size_after = self.lits.iter().fold(0, |accum, lit| {\n                accum + if lit.is_cut() { lit.len() } else { 0 }\n            });\n            for lits_lit in lits.literals() {\n                for self_lit in self.literals() {\n                    if !self_lit.is_cut() {\n                        size_after += self_lit.len() + lits_lit.len();\n                    }\n                }\n            }\n        }\n        if size_after > self.limit_size {\n            return false;\n        }\n\n        let mut base = self.remove_complete();\n        if base.is_empty() {\n            base = vec![Literal::empty()];\n        }\n        for lits_lit in lits.literals() {\n            for mut self_lit in base.clone() {\n                self_lit.extend(&**lits_lit);\n                self_lit.cut = lits_lit.cut;\n                self.lits.push(self_lit);\n            }\n        }\n        true\n    }\n\n    /// Extends each literal in this set with the bytes given.\n    ///\n    /// If the set is empty, then the given literal is added to the set.\n    ///\n    /// If adding any number of bytes to all members of this set causes a limit\n    /// to be exceeded, then no bytes are added and false is returned. If a\n    /// prefix of `bytes` can be fit into this set, then it is used and all\n    /// resulting literals are cut.\n    pub fn cross_add(&mut self, bytes: &[u8]) -> bool {\n        // N.B. This could be implemented by simply calling cross_product with\n        // a literal set containing just `bytes`, but we can be smarter about\n        // taking shorter prefixes of `bytes` if they'll fit.\n        if bytes.is_empty() {\n            return true;\n        }\n        if self.lits.is_empty() {\n            let i = cmp::min(self.limit_size, bytes.len());\n            self.lits.push(Literal::new(bytes[..i].to_owned()));\n            self.lits[0].cut = i < bytes.len();\n            return !self.lits[0].is_cut();\n        }\n        let size = self.num_bytes();\n        if size + self.lits.len() >= self.limit_size {\n            return false;\n        }\n        let mut i = 1;\n        while size + (i * self.lits.len()) <= self.limit_size\n            && i < bytes.len()\n        {\n            i += 1;\n        }\n        for lit in &mut self.lits {\n            if !lit.is_cut() {\n                lit.extend(&bytes[..i]);\n                if i < bytes.len() {\n                    lit.cut();\n                }\n            }\n        }\n        true\n    }\n\n    /// Adds the given literal to this set.\n    ///\n    /// Returns false if adding this literal would cause the class to be too\n    /// big.\n    pub fn add(&mut self, lit: Literal) -> bool {\n        if self.num_bytes() + lit.len() > self.limit_size {\n            return false;\n        }\n        self.lits.push(lit);\n        true\n    }\n\n    /// Extends each literal in this set with the character class given.\n    ///\n    /// Returns false if the character class was too big to add.\n    pub fn add_char_class(&mut self, cls: &hir::ClassUnicode) -> bool {\n        self._add_char_class(cls, false)\n    }\n\n    /// Extends each literal in this set with the character class given,\n    /// writing the bytes of each character in reverse.\n    ///\n    /// Returns false if the character class was too big to add.\n    fn add_char_class_reverse(&mut self, cls: &hir::ClassUnicode) -> bool {\n        self._add_char_class(cls, true)\n    }\n\n    fn _add_char_class(\n        &mut self,\n        cls: &hir::ClassUnicode,\n        reverse: bool,\n    ) -> bool {\n        use std::char;\n\n        if self.class_exceeds_limits(cls_char_count(cls)) {\n            return false;\n        }\n        let mut base = self.remove_complete();\n        if base.is_empty() {\n            base = vec![Literal::empty()];\n        }\n        for r in cls.iter() {\n            let (s, e) = (r.start as u32, r.end as u32 + 1);\n            for c in (s..e).filter_map(char::from_u32) {\n                for mut lit in base.clone() {\n                    let mut bytes = c.to_string().into_bytes();\n                    if reverse {\n                        bytes.reverse();\n                    }\n                    lit.extend(&bytes);\n                    self.lits.push(lit);\n                }\n            }\n        }\n        true\n    }\n\n    /// Extends each literal in this set with the byte class given.\n    ///\n    /// Returns false if the byte class was too big to add.\n    pub fn add_byte_class(&mut self, cls: &hir::ClassBytes) -> bool {\n        if self.class_exceeds_limits(cls_byte_count(cls)) {\n            return false;\n        }\n        let mut base = self.remove_complete();\n        if base.is_empty() {\n            base = vec![Literal::empty()];\n        }\n        for r in cls.iter() {\n            let (s, e) = (r.start as u32, r.end as u32 + 1);\n            for b in (s..e).map(|b| b as u8) {\n                for mut lit in base.clone() {\n                    lit.push(b);\n                    self.lits.push(lit);\n                }\n            }\n        }\n        true\n    }\n\n    /// Cuts every member of this set. When a member is cut, it can never\n    /// be extended.\n    pub fn cut(&mut self) {\n        for lit in &mut self.lits {\n            lit.cut();\n        }\n    }\n\n    /// Reverses all members in place.\n    pub fn reverse(&mut self) {\n        for lit in &mut self.lits {\n            lit.reverse();\n        }\n    }\n\n    /// Clears this set of all members.\n    pub fn clear(&mut self) {\n        self.lits.clear();\n    }\n\n    /// Pops all complete literals out of this set.\n    fn remove_complete(&mut self) -> Vec<Literal> {\n        let mut base = vec![];\n        for lit in mem::replace(&mut self.lits, vec![]) {\n            if lit.is_cut() {\n                self.lits.push(lit);\n            } else {\n                base.push(lit);\n            }\n        }\n        base\n    }\n\n    /// Returns the total number of bytes in this set.\n    fn num_bytes(&self) -> usize {\n        self.lits.iter().fold(0, |accum, lit| accum + lit.len())\n    }\n\n    /// Returns true if a character class with the given size would cause this\n    /// set to exceed its limits.\n    ///\n    /// The size given should correspond to the number of items in the class.\n    fn class_exceeds_limits(&self, size: usize) -> bool {\n        if size > self.limit_class {\n            return true;\n        }\n        // This is an approximation since codepoints in a char class can encode\n        // to 1-4 bytes.\n        let new_byte_count = if self.lits.is_empty() {\n            size\n        } else {\n            self.lits.iter().fold(0, |accum, lit| {\n                accum\n                    + if lit.is_cut() {\n                        // If the literal is cut, then we'll never add\n                        // anything to it, so don't count it.\n                        0\n                    } else {\n                        (lit.len() + 1) * size\n                    }\n            })\n        };\n        new_byte_count > self.limit_size\n    }\n}\n\nfn prefixes(expr: &Hir, lits: &mut Literals) {\n    match *expr.kind() {\n        HirKind::Literal(hir::Literal::Unicode(c)) => {\n            let mut buf = [0; 4];\n            lits.cross_add(c.encode_utf8(&mut buf).as_bytes());\n        }\n        HirKind::Literal(hir::Literal::Byte(b)) => {\n            lits.cross_add(&[b]);\n        }\n        HirKind::Class(hir::Class::Unicode(ref cls)) => {\n            if !lits.add_char_class(cls) {\n                lits.cut();\n            }\n        }\n        HirKind::Class(hir::Class::Bytes(ref cls)) => {\n            if !lits.add_byte_class(cls) {\n                lits.cut();\n            }\n        }\n        HirKind::Group(hir::Group { ref hir, .. }) => {\n            prefixes(&**hir, lits);\n        }\n        HirKind::Repetition(ref x) => match x.kind {\n            hir::RepetitionKind::ZeroOrOne => {\n                repeat_zero_or_one_literals(&x.hir, lits, prefixes);\n            }\n            hir::RepetitionKind::ZeroOrMore => {\n                repeat_zero_or_more_literals(&x.hir, lits, prefixes);\n            }\n            hir::RepetitionKind::OneOrMore => {\n                repeat_one_or_more_literals(&x.hir, lits, prefixes);\n            }\n            hir::RepetitionKind::Range(ref rng) => {\n                let (min, max) = match *rng {\n                    hir::RepetitionRange::Exactly(m) => (m, Some(m)),\n                    hir::RepetitionRange::AtLeast(m) => (m, None),\n                    hir::RepetitionRange::Bounded(m, n) => (m, Some(n)),\n                };\n                repeat_range_literals(\n                    &x.hir, min, max, x.greedy, lits, prefixes,\n                )\n            }\n        },\n        HirKind::Concat(ref es) if es.is_empty() => {}\n        HirKind::Concat(ref es) if es.len() == 1 => prefixes(&es[0], lits),\n        HirKind::Concat(ref es) => {\n            for e in es {\n                if let HirKind::Anchor(hir::Anchor::StartText) = *e.kind() {\n                    if !lits.is_empty() {\n                        lits.cut();\n                        break;\n                    }\n                    lits.add(Literal::empty());\n                    continue;\n                }\n                let mut lits2 = lits.to_empty();\n                prefixes(e, &mut lits2);\n                if !lits.cross_product(&lits2) || !lits2.any_complete() {\n                    // If this expression couldn't yield any literal that\n                    // could be extended, then we need to quit. Since we're\n                    // short-circuiting, we also need to freeze every member.\n                    lits.cut();\n                    break;\n                }\n            }\n        }\n        HirKind::Alternation(ref es) => {\n            alternate_literals(es, lits, prefixes);\n        }\n        _ => lits.cut(),\n    }\n}\n\nfn suffixes(expr: &Hir, lits: &mut Literals) {\n    match *expr.kind() {\n        HirKind::Literal(hir::Literal::Unicode(c)) => {\n            let mut buf = [0u8; 4];\n            let i = c.encode_utf8(&mut buf).len();\n            let buf = &mut buf[..i];\n            buf.reverse();\n            lits.cross_add(buf);\n        }\n        HirKind::Literal(hir::Literal::Byte(b)) => {\n            lits.cross_add(&[b]);\n        }\n        HirKind::Class(hir::Class::Unicode(ref cls)) => {\n            if !lits.add_char_class_reverse(cls) {\n                lits.cut();\n            }\n        }\n        HirKind::Class(hir::Class::Bytes(ref cls)) => {\n            if !lits.add_byte_class(cls) {\n                lits.cut();\n            }\n        }\n        HirKind::Group(hir::Group { ref hir, .. }) => {\n            suffixes(&**hir, lits);\n        }\n        HirKind::Repetition(ref x) => match x.kind {\n            hir::RepetitionKind::ZeroOrOne => {\n                repeat_zero_or_one_literals(&x.hir, lits, suffixes);\n            }\n            hir::RepetitionKind::ZeroOrMore => {\n                repeat_zero_or_more_literals(&x.hir, lits, suffixes);\n            }\n            hir::RepetitionKind::OneOrMore => {\n                repeat_one_or_more_literals(&x.hir, lits, suffixes);\n            }\n            hir::RepetitionKind::Range(ref rng) => {\n                let (min, max) = match *rng {\n                    hir::RepetitionRange::Exactly(m) => (m, Some(m)),\n                    hir::RepetitionRange::AtLeast(m) => (m, None),\n                    hir::RepetitionRange::Bounded(m, n) => (m, Some(n)),\n                };\n                repeat_range_literals(\n                    &x.hir, min, max, x.greedy, lits, suffixes,\n                )\n            }\n        },\n        HirKind::Concat(ref es) if es.is_empty() => {}\n        HirKind::Concat(ref es) if es.len() == 1 => suffixes(&es[0], lits),\n        HirKind::Concat(ref es) => {\n            for e in es.iter().rev() {\n                if let HirKind::Anchor(hir::Anchor::EndText) = *e.kind() {\n                    if !lits.is_empty() {\n                        lits.cut();\n                        break;\n                    }\n                    lits.add(Literal::empty());\n                    continue;\n                }\n                let mut lits2 = lits.to_empty();\n                suffixes(e, &mut lits2);\n                if !lits.cross_product(&lits2) || !lits2.any_complete() {\n                    // If this expression couldn't yield any literal that\n                    // could be extended, then we need to quit. Since we're\n                    // short-circuiting, we also need to freeze every member.\n                    lits.cut();\n                    break;\n                }\n            }\n        }\n        HirKind::Alternation(ref es) => {\n            alternate_literals(es, lits, suffixes);\n        }\n        _ => lits.cut(),\n    }\n}\n\nfn repeat_zero_or_one_literals<F: FnMut(&Hir, &mut Literals)>(\n    e: &Hir,\n    lits: &mut Literals,\n    mut f: F,\n) {\n    let (mut lits2, mut lits3) = (lits.clone(), lits.to_empty());\n    lits3.set_limit_size(lits.limit_size() / 2);\n    f(e, &mut lits3);\n\n    if lits3.is_empty() || !lits2.cross_product(&lits3) {\n        lits.cut();\n        return;\n    }\n    lits2.add(Literal::empty());\n    if !lits.union(lits2) {\n        lits.cut();\n    }\n}\n\nfn repeat_zero_or_more_literals<F: FnMut(&Hir, &mut Literals)>(\n    e: &Hir,\n    lits: &mut Literals,\n    mut f: F,\n) {\n    let (mut lits2, mut lits3) = (lits.clone(), lits.to_empty());\n    lits3.set_limit_size(lits.limit_size() / 2);\n    f(e, &mut lits3);\n\n    if lits3.is_empty() || !lits2.cross_product(&lits3) {\n        lits.cut();\n        return;\n    }\n    lits2.cut();\n    lits2.add(Literal::empty());\n    if !lits.union(lits2) {\n        lits.cut();\n    }\n}\n\nfn repeat_one_or_more_literals<F: FnMut(&Hir, &mut Literals)>(\n    e: &Hir,\n    lits: &mut Literals,\n    mut f: F,\n) {\n    f(e, lits);\n    lits.cut();\n}\n\nfn repeat_range_literals<F: FnMut(&Hir, &mut Literals)>(\n    e: &Hir,\n    min: u32,\n    max: Option<u32>,\n    greedy: bool,\n    lits: &mut Literals,\n    mut f: F,\n) {\n    if min == 0 {\n        // This is a bit conservative. If `max` is set, then we could\n        // treat this as a finite set of alternations. For now, we\n        // just treat it as `e*`.\n        f(\n            &Hir::repetition(hir::Repetition {\n                kind: hir::RepetitionKind::ZeroOrMore,\n                greedy: greedy,\n                hir: Box::new(e.clone()),\n            }),\n            lits,\n        );\n    } else {\n        if min > 0 {\n            let n = cmp::min(lits.limit_size, min as usize);\n            let es = iter::repeat(e.clone()).take(n).collect();\n            f(&Hir::concat(es), lits);\n            if n < min as usize || lits.contains_empty() {\n                lits.cut();\n            }\n        }\n        if max.map_or(true, |max| min < max) {\n            lits.cut();\n        }\n    }\n}\n\nfn alternate_literals<F: FnMut(&Hir, &mut Literals)>(\n    es: &[Hir],\n    lits: &mut Literals,\n    mut f: F,\n) {\n    let mut lits2 = lits.to_empty();\n    for e in es {\n        let mut lits3 = lits.to_empty();\n        lits3.set_limit_size(lits.limit_size() / 5);\n        f(e, &mut lits3);\n        if lits3.is_empty() || !lits2.union(lits3) {\n            // If we couldn't find suffixes for *any* of the\n            // alternates, then the entire alternation has to be thrown\n            // away and any existing members must be frozen. Similarly,\n            // if the union couldn't complete, stop and freeze.\n            lits.cut();\n            return;\n        }\n    }\n    if !lits.cross_product(&lits2) {\n        lits.cut();\n    }\n}\n\nimpl fmt::Debug for Literals {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.debug_struct(\"Literals\")\n            .field(\"lits\", &self.lits)\n            .field(\"limit_size\", &self.limit_size)\n            .field(\"limit_class\", &self.limit_class)\n            .finish()\n    }\n}\n\nimpl Literal {\n    /// Returns a new complete literal with the bytes given.\n    pub fn new(bytes: Vec<u8>) -> Literal {\n        Literal { v: bytes, cut: false }\n    }\n\n    /// Returns a new complete empty literal.\n    pub fn empty() -> Literal {\n        Literal { v: vec![], cut: false }\n    }\n\n    /// Returns true if this literal was \"cut.\"\n    pub fn is_cut(&self) -> bool {\n        self.cut\n    }\n\n    /// Cuts this literal.\n    pub fn cut(&mut self) {\n        self.cut = true;\n    }\n}\n\nimpl PartialEq for Literal {\n    fn eq(&self, other: &Literal) -> bool {\n        self.v == other.v\n    }\n}\n\nimpl PartialOrd for Literal {\n    fn partial_cmp(&self, other: &Literal) -> Option<cmp::Ordering> {\n        self.v.partial_cmp(&other.v)\n    }\n}\n\nimpl fmt::Debug for Literal {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        if self.is_cut() {\n            write!(f, \"Cut({})\", escape_unicode(&self.v))\n        } else {\n            write!(f, \"Complete({})\", escape_unicode(&self.v))\n        }\n    }\n}\n\nimpl AsRef<[u8]> for Literal {\n    fn as_ref(&self) -> &[u8] {\n        &self.v\n    }\n}\n\nimpl ops::Deref for Literal {\n    type Target = Vec<u8>;\n    fn deref(&self) -> &Vec<u8> {\n        &self.v\n    }\n}\n\nimpl ops::DerefMut for Literal {\n    fn deref_mut(&mut self) -> &mut Vec<u8> {\n        &mut self.v\n    }\n}\n\nfn position(needle: &[u8], mut haystack: &[u8]) -> Option<usize> {\n    let mut i = 0;\n    while haystack.len() >= needle.len() {\n        if needle == &haystack[..needle.len()] {\n            return Some(i);\n        }\n        i += 1;\n        haystack = &haystack[1..];\n    }\n    None\n}\n\nfn escape_unicode(bytes: &[u8]) -> String {\n    let show = match ::std::str::from_utf8(bytes) {\n        Ok(v) => v.to_string(),\n        Err(_) => escape_bytes(bytes),\n    };\n    let mut space_escaped = String::new();\n    for c in show.chars() {\n        if c.is_whitespace() {\n            let escaped = if c as u32 <= 0x7F {\n                escape_byte(c as u8)\n            } else {\n                if c as u32 <= 0xFFFF {\n                    format!(r\"\\u{{{:04x}}}\", c as u32)\n                } else {\n                    format!(r\"\\U{{{:08x}}}\", c as u32)\n                }\n            };\n            space_escaped.push_str(&escaped);\n        } else {\n            space_escaped.push(c);\n        }\n    }\n    space_escaped\n}\n\nfn escape_bytes(bytes: &[u8]) -> String {\n    let mut s = String::new();\n    for &b in bytes {\n        s.push_str(&escape_byte(b));\n    }\n    s\n}\n\nfn escape_byte(byte: u8) -> String {\n    use std::ascii::escape_default;\n\n    let escaped: Vec<u8> = escape_default(byte).collect();\n    String::from_utf8_lossy(&escaped).into_owned()\n}\n\nfn cls_char_count(cls: &hir::ClassUnicode) -> usize {\n    cls.iter().map(|&r| 1 + (r.end as u32) - (r.start as u32)).sum::<u32>()\n        as usize\n}\n\nfn cls_byte_count(cls: &hir::ClassBytes) -> usize {\n    cls.iter().map(|&r| 1 + (r.end as u32) - (r.start as u32)).sum::<u32>()\n        as usize\n}\n\n#[cfg(test)]\nmod tests {\n    use std::fmt;\n\n    use super::{escape_bytes, Literal, Literals};\n    use hir::Hir;\n    use ParserBuilder;\n\n    // To make test failures easier to read.\n    #[derive(Debug, Eq, PartialEq)]\n    struct Bytes(Vec<ULiteral>);\n    #[derive(Debug, Eq, PartialEq)]\n    struct Unicode(Vec<ULiteral>);\n\n    fn escape_lits(blits: &[Literal]) -> Vec<ULiteral> {\n        let mut ulits = vec![];\n        for blit in blits {\n            ulits\n                .push(ULiteral { v: escape_bytes(&blit), cut: blit.is_cut() });\n        }\n        ulits\n    }\n\n    fn create_lits<I: IntoIterator<Item = Literal>>(it: I) -> Literals {\n        Literals {\n            lits: it.into_iter().collect(),\n            limit_size: 0,\n            limit_class: 0,\n        }\n    }\n\n    // Needs to be pub for 1.3?\n    #[derive(Clone, Eq, PartialEq)]\n    pub struct ULiteral {\n        v: String,\n        cut: bool,\n    }\n\n    impl ULiteral {\n        fn is_cut(&self) -> bool {\n            self.cut\n        }\n    }\n\n    impl fmt::Debug for ULiteral {\n        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n            if self.is_cut() {\n                write!(f, \"Cut({})\", self.v)\n            } else {\n                write!(f, \"Complete({})\", self.v)\n            }\n        }\n    }\n\n    impl PartialEq<Literal> for ULiteral {\n        fn eq(&self, other: &Literal) -> bool {\n            self.v.as_bytes() == &*other.v && self.is_cut() == other.is_cut()\n        }\n    }\n\n    impl PartialEq<ULiteral> for Literal {\n        fn eq(&self, other: &ULiteral) -> bool {\n            &*self.v == other.v.as_bytes() && self.is_cut() == other.is_cut()\n        }\n    }\n\n    #[allow(non_snake_case)]\n    fn C(s: &'static str) -> ULiteral {\n        ULiteral { v: s.to_owned(), cut: true }\n    }\n    #[allow(non_snake_case)]\n    fn M(s: &'static str) -> ULiteral {\n        ULiteral { v: s.to_owned(), cut: false }\n    }\n\n    fn prefixes(lits: &mut Literals, expr: &Hir) {\n        lits.union_prefixes(expr);\n    }\n\n    fn suffixes(lits: &mut Literals, expr: &Hir) {\n        lits.union_suffixes(expr);\n    }\n\n    macro_rules! assert_lit_eq {\n        ($which:ident, $got_lits:expr, $($expected_lit:expr),*) => {{\n            let expected: Vec<ULiteral> = vec![$($expected_lit),*];\n            let lits = $got_lits;\n            assert_eq!(\n                $which(expected.clone()),\n                $which(escape_lits(lits.literals())));\n            assert_eq!(\n                !expected.is_empty() && expected.iter().all(|l| !l.is_cut()),\n                lits.all_complete());\n            assert_eq!(\n                expected.iter().any(|l| !l.is_cut()),\n                lits.any_complete());\n        }};\n    }\n\n    macro_rules! test_lit {\n        ($name:ident, $which:ident, $re:expr) => {\n            test_lit!($name, $which, $re,);\n        };\n        ($name:ident, $which:ident, $re:expr, $($lit:expr),*) => {\n            #[test]\n            fn $name() {\n                let expr = ParserBuilder::new()\n                    .build()\n                    .parse($re)\n                    .unwrap();\n                let lits = Literals::$which(&expr);\n                assert_lit_eq!(Unicode, lits, $($lit),*);\n\n                let expr = ParserBuilder::new()\n                    .allow_invalid_utf8(true)\n                    .unicode(false)\n                    .build()\n                    .parse($re)\n                    .unwrap();\n                let lits = Literals::$which(&expr);\n                assert_lit_eq!(Bytes, lits, $($lit),*);\n            }\n        };\n    }\n\n    // ************************************************************************\n    // Tests for prefix literal extraction.\n    // ************************************************************************\n\n    // Elementary tests.\n    test_lit!(pfx_one_lit1, prefixes, \"a\", M(\"a\"));\n    test_lit!(pfx_one_lit2, prefixes, \"abc\", M(\"abc\"));\n    test_lit!(pfx_one_lit3, prefixes, \"(?u)☃\", M(\"\\\\xe2\\\\x98\\\\x83\"));\n    #[cfg(feature = \"unicode-case\")]\n    test_lit!(pfx_one_lit4, prefixes, \"(?ui)☃\", M(\"\\\\xe2\\\\x98\\\\x83\"));\n    test_lit!(pfx_class1, prefixes, \"[1-4]\", M(\"1\"), M(\"2\"), M(\"3\"), M(\"4\"));\n    test_lit!(\n        pfx_class2,\n        prefixes,\n        \"(?u)[☃Ⅰ]\",\n        M(\"\\\\xe2\\\\x85\\\\xa0\"),\n        M(\"\\\\xe2\\\\x98\\\\x83\")\n    );\n    #[cfg(feature = \"unicode-case\")]\n    test_lit!(\n        pfx_class3,\n        prefixes,\n        \"(?ui)[☃Ⅰ]\",\n        M(\"\\\\xe2\\\\x85\\\\xa0\"),\n        M(\"\\\\xe2\\\\x85\\\\xb0\"),\n        M(\"\\\\xe2\\\\x98\\\\x83\")\n    );\n    test_lit!(pfx_one_lit_casei1, prefixes, \"(?i-u)a\", M(\"A\"), M(\"a\"));\n    test_lit!(\n        pfx_one_lit_casei2,\n        prefixes,\n        \"(?i-u)abc\",\n        M(\"ABC\"),\n        M(\"aBC\"),\n        M(\"AbC\"),\n        M(\"abC\"),\n        M(\"ABc\"),\n        M(\"aBc\"),\n        M(\"Abc\"),\n        M(\"abc\")\n    );\n    test_lit!(pfx_group1, prefixes, \"(a)\", M(\"a\"));\n    test_lit!(pfx_rep_zero_or_one1, prefixes, \"a?\");\n    test_lit!(pfx_rep_zero_or_one2, prefixes, \"(?:abc)?\");\n    test_lit!(pfx_rep_zero_or_more1, prefixes, \"a*\");\n    test_lit!(pfx_rep_zero_or_more2, prefixes, \"(?:abc)*\");\n    test_lit!(pfx_rep_one_or_more1, prefixes, \"a+\", C(\"a\"));\n    test_lit!(pfx_rep_one_or_more2, prefixes, \"(?:abc)+\", C(\"abc\"));\n    test_lit!(pfx_rep_nested_one_or_more, prefixes, \"(?:a+)+\", C(\"a\"));\n    test_lit!(pfx_rep_range1, prefixes, \"a{0}\");\n    test_lit!(pfx_rep_range2, prefixes, \"a{0,}\");\n    test_lit!(pfx_rep_range3, prefixes, \"a{0,1}\");\n    test_lit!(pfx_rep_range4, prefixes, \"a{1}\", M(\"a\"));\n    test_lit!(pfx_rep_range5, prefixes, \"a{2}\", M(\"aa\"));\n    test_lit!(pfx_rep_range6, prefixes, \"a{1,2}\", C(\"a\"));\n    test_lit!(pfx_rep_range7, prefixes, \"a{2,3}\", C(\"aa\"));\n\n    // Test regexes with concatenations.\n    test_lit!(pfx_cat1, prefixes, \"(?:a)(?:b)\", M(\"ab\"));\n    test_lit!(pfx_cat2, prefixes, \"[ab]z\", M(\"az\"), M(\"bz\"));\n    test_lit!(\n        pfx_cat3,\n        prefixes,\n        \"(?i-u)[ab]z\",\n        M(\"AZ\"),\n        M(\"BZ\"),\n        M(\"aZ\"),\n        M(\"bZ\"),\n        M(\"Az\"),\n        M(\"Bz\"),\n        M(\"az\"),\n        M(\"bz\")\n    );\n    test_lit!(\n        pfx_cat4,\n        prefixes,\n        \"[ab][yz]\",\n        M(\"ay\"),\n        M(\"by\"),\n        M(\"az\"),\n        M(\"bz\")\n    );\n    test_lit!(pfx_cat5, prefixes, \"a*b\", C(\"a\"), M(\"b\"));\n    test_lit!(pfx_cat6, prefixes, \"a*b*c\", C(\"a\"), C(\"b\"), M(\"c\"));\n    test_lit!(pfx_cat7, prefixes, \"a*b*c+\", C(\"a\"), C(\"b\"), C(\"c\"));\n    test_lit!(pfx_cat8, prefixes, \"a*b+c\", C(\"a\"), C(\"b\"));\n    test_lit!(pfx_cat9, prefixes, \"a*b+c*\", C(\"a\"), C(\"b\"));\n    test_lit!(pfx_cat10, prefixes, \"ab*\", C(\"ab\"), M(\"a\"));\n    test_lit!(pfx_cat11, prefixes, \"ab*c\", C(\"ab\"), M(\"ac\"));\n    test_lit!(pfx_cat12, prefixes, \"ab+\", C(\"ab\"));\n    test_lit!(pfx_cat13, prefixes, \"ab+c\", C(\"ab\"));\n    test_lit!(pfx_cat14, prefixes, \"a^\", C(\"a\"));\n    test_lit!(pfx_cat15, prefixes, \"$a\");\n    test_lit!(pfx_cat16, prefixes, r\"ab*c\", C(\"ab\"), M(\"ac\"));\n    test_lit!(pfx_cat17, prefixes, r\"ab+c\", C(\"ab\"));\n    test_lit!(pfx_cat18, prefixes, r\"z*azb\", C(\"z\"), M(\"azb\"));\n    test_lit!(pfx_cat19, prefixes, \"a.z\", C(\"a\"));\n\n    // Test regexes with alternations.\n    test_lit!(pfx_alt1, prefixes, \"a|b\", M(\"a\"), M(\"b\"));\n    test_lit!(pfx_alt2, prefixes, \"[1-3]|b\", M(\"1\"), M(\"2\"), M(\"3\"), M(\"b\"));\n    test_lit!(pfx_alt3, prefixes, \"y(?:a|b)z\", M(\"yaz\"), M(\"ybz\"));\n    test_lit!(pfx_alt4, prefixes, \"a|b*\");\n    test_lit!(pfx_alt5, prefixes, \"a|b+\", M(\"a\"), C(\"b\"));\n    test_lit!(pfx_alt6, prefixes, \"a|(?:b|c*)\");\n    test_lit!(\n        pfx_alt7,\n        prefixes,\n        \"(a|b)*c|(a|ab)*c\",\n        C(\"a\"),\n        C(\"b\"),\n        M(\"c\"),\n        C(\"a\"),\n        C(\"ab\"),\n        M(\"c\")\n    );\n    test_lit!(pfx_alt8, prefixes, \"a*b|c\", C(\"a\"), M(\"b\"), M(\"c\"));\n\n    // Test regexes with empty assertions.\n    test_lit!(pfx_empty1, prefixes, \"^a\", M(\"a\"));\n    test_lit!(pfx_empty2, prefixes, \"a${2}\", C(\"a\"));\n    test_lit!(pfx_empty3, prefixes, \"^abc\", M(\"abc\"));\n    test_lit!(pfx_empty4, prefixes, \"(?:^abc)|(?:^z)\", M(\"abc\"), M(\"z\"));\n\n    // Make sure some curious regexes have no prefixes.\n    test_lit!(pfx_nothing1, prefixes, \".\");\n    test_lit!(pfx_nothing2, prefixes, \"(?s).\");\n    test_lit!(pfx_nothing3, prefixes, \"^\");\n    test_lit!(pfx_nothing4, prefixes, \"$\");\n    test_lit!(pfx_nothing6, prefixes, \"(?m)$\");\n    test_lit!(pfx_nothing7, prefixes, r\"\\b\");\n    test_lit!(pfx_nothing8, prefixes, r\"\\B\");\n\n    // Test a few regexes that defeat any prefix literal detection.\n    test_lit!(pfx_defeated1, prefixes, \".a\");\n    test_lit!(pfx_defeated2, prefixes, \"(?s).a\");\n    test_lit!(pfx_defeated3, prefixes, \"a*b*c*\");\n    test_lit!(pfx_defeated4, prefixes, \"a|.\");\n    test_lit!(pfx_defeated5, prefixes, \".|a\");\n    test_lit!(pfx_defeated6, prefixes, \"a|^\");\n    test_lit!(pfx_defeated7, prefixes, \".(?:a(?:b)(?:c))\");\n    test_lit!(pfx_defeated8, prefixes, \"$a\");\n    test_lit!(pfx_defeated9, prefixes, \"(?m)$a\");\n    test_lit!(pfx_defeated10, prefixes, r\"\\ba\");\n    test_lit!(pfx_defeated11, prefixes, r\"\\Ba\");\n    test_lit!(pfx_defeated12, prefixes, \"^*a\");\n    test_lit!(pfx_defeated13, prefixes, \"^+a\");\n\n    test_lit!(\n        pfx_crazy1,\n        prefixes,\n        r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n        C(\"Mo\\\\'am\"),\n        C(\"Mu\\\\'am\"),\n        C(\"Moam\"),\n        C(\"Muam\")\n    );\n\n    // ************************************************************************\n    // Tests for quiting prefix literal search.\n    // ************************************************************************\n\n    macro_rules! test_exhausted {\n        ($name:ident, $which:ident, $re:expr) => {\n            test_exhausted!($name, $which, $re,);\n        };\n        ($name:ident, $which:ident, $re:expr, $($lit:expr),*) => {\n            #[test]\n            fn $name() {\n                let expr = ParserBuilder::new()\n                    .build()\n                    .parse($re)\n                    .unwrap();\n                let mut lits = Literals::empty();\n                lits.set_limit_size(20).set_limit_class(10);\n                $which(&mut lits, &expr);\n                assert_lit_eq!(Unicode, lits, $($lit),*);\n\n                let expr = ParserBuilder::new()\n                    .allow_invalid_utf8(true)\n                    .unicode(false)\n                    .build()\n                    .parse($re)\n                    .unwrap();\n                let mut lits = Literals::empty();\n                lits.set_limit_size(20).set_limit_class(10);\n                $which(&mut lits, &expr);\n                assert_lit_eq!(Bytes, lits, $($lit),*);\n            }\n        };\n    }\n\n    // These test use a much lower limit than the default so that we can\n    // write test cases of reasonable size.\n    test_exhausted!(pfx_exhausted1, prefixes, \"[a-z]\");\n    test_exhausted!(pfx_exhausted2, prefixes, \"[a-z]*A\");\n    test_exhausted!(pfx_exhausted3, prefixes, \"A[a-z]Z\", C(\"A\"));\n    test_exhausted!(\n        pfx_exhausted4,\n        prefixes,\n        \"(?i-u)foobar\",\n        C(\"FO\"),\n        C(\"fO\"),\n        C(\"Fo\"),\n        C(\"fo\")\n    );\n    test_exhausted!(\n        pfx_exhausted5,\n        prefixes,\n        \"(?:ab){100}\",\n        C(\"abababababababababab\")\n    );\n    test_exhausted!(\n        pfx_exhausted6,\n        prefixes,\n        \"(?:(?:ab){100})*cd\",\n        C(\"ababababab\"),\n        M(\"cd\")\n    );\n    test_exhausted!(\n        pfx_exhausted7,\n        prefixes,\n        \"z(?:(?:ab){100})*cd\",\n        C(\"zababababab\"),\n        M(\"zcd\")\n    );\n    test_exhausted!(\n        pfx_exhausted8,\n        prefixes,\n        \"aaaaaaaaaaaaaaaaaaaaz\",\n        C(\"aaaaaaaaaaaaaaaaaaaa\")\n    );\n\n    // ************************************************************************\n    // Tests for suffix literal extraction.\n    // ************************************************************************\n\n    // Elementary tests.\n    test_lit!(sfx_one_lit1, suffixes, \"a\", M(\"a\"));\n    test_lit!(sfx_one_lit2, suffixes, \"abc\", M(\"abc\"));\n    test_lit!(sfx_one_lit3, suffixes, \"(?u)☃\", M(\"\\\\xe2\\\\x98\\\\x83\"));\n    #[cfg(feature = \"unicode-case\")]\n    test_lit!(sfx_one_lit4, suffixes, \"(?ui)☃\", M(\"\\\\xe2\\\\x98\\\\x83\"));\n    test_lit!(sfx_class1, suffixes, \"[1-4]\", M(\"1\"), M(\"2\"), M(\"3\"), M(\"4\"));\n    test_lit!(\n        sfx_class2,\n        suffixes,\n        \"(?u)[☃Ⅰ]\",\n        M(\"\\\\xe2\\\\x85\\\\xa0\"),\n        M(\"\\\\xe2\\\\x98\\\\x83\")\n    );\n    #[cfg(feature = \"unicode-case\")]\n    test_lit!(\n        sfx_class3,\n        suffixes,\n        \"(?ui)[☃Ⅰ]\",\n        M(\"\\\\xe2\\\\x85\\\\xa0\"),\n        M(\"\\\\xe2\\\\x85\\\\xb0\"),\n        M(\"\\\\xe2\\\\x98\\\\x83\")\n    );\n    test_lit!(sfx_one_lit_casei1, suffixes, \"(?i-u)a\", M(\"A\"), M(\"a\"));\n    test_lit!(\n        sfx_one_lit_casei2,\n        suffixes,\n        \"(?i-u)abc\",\n        M(\"ABC\"),\n        M(\"ABc\"),\n        M(\"AbC\"),\n        M(\"Abc\"),\n        M(\"aBC\"),\n        M(\"aBc\"),\n        M(\"abC\"),\n        M(\"abc\")\n    );\n    test_lit!(sfx_group1, suffixes, \"(a)\", M(\"a\"));\n    test_lit!(sfx_rep_zero_or_one1, suffixes, \"a?\");\n    test_lit!(sfx_rep_zero_or_one2, suffixes, \"(?:abc)?\");\n    test_lit!(sfx_rep_zero_or_more1, suffixes, \"a*\");\n    test_lit!(sfx_rep_zero_or_more2, suffixes, \"(?:abc)*\");\n    test_lit!(sfx_rep_one_or_more1, suffixes, \"a+\", C(\"a\"));\n    test_lit!(sfx_rep_one_or_more2, suffixes, \"(?:abc)+\", C(\"abc\"));\n    test_lit!(sfx_rep_nested_one_or_more, suffixes, \"(?:a+)+\", C(\"a\"));\n    test_lit!(sfx_rep_range1, suffixes, \"a{0}\");\n    test_lit!(sfx_rep_range2, suffixes, \"a{0,}\");\n    test_lit!(sfx_rep_range3, suffixes, \"a{0,1}\");\n    test_lit!(sfx_rep_range4, suffixes, \"a{1}\", M(\"a\"));\n    test_lit!(sfx_rep_range5, suffixes, \"a{2}\", M(\"aa\"));\n    test_lit!(sfx_rep_range6, suffixes, \"a{1,2}\", C(\"a\"));\n    test_lit!(sfx_rep_range7, suffixes, \"a{2,3}\", C(\"aa\"));\n\n    // Test regexes with concatenations.\n    test_lit!(sfx_cat1, suffixes, \"(?:a)(?:b)\", M(\"ab\"));\n    test_lit!(sfx_cat2, suffixes, \"[ab]z\", M(\"az\"), M(\"bz\"));\n    test_lit!(\n        sfx_cat3,\n        suffixes,\n        \"(?i-u)[ab]z\",\n        M(\"AZ\"),\n        M(\"Az\"),\n        M(\"BZ\"),\n        M(\"Bz\"),\n        M(\"aZ\"),\n        M(\"az\"),\n        M(\"bZ\"),\n        M(\"bz\")\n    );\n    test_lit!(\n        sfx_cat4,\n        suffixes,\n        \"[ab][yz]\",\n        M(\"ay\"),\n        M(\"az\"),\n        M(\"by\"),\n        M(\"bz\")\n    );\n    test_lit!(sfx_cat5, suffixes, \"a*b\", C(\"ab\"), M(\"b\"));\n    test_lit!(sfx_cat6, suffixes, \"a*b*c\", C(\"bc\"), C(\"ac\"), M(\"c\"));\n    test_lit!(sfx_cat7, suffixes, \"a*b*c+\", C(\"c\"));\n    test_lit!(sfx_cat8, suffixes, \"a*b+c\", C(\"bc\"));\n    test_lit!(sfx_cat9, suffixes, \"a*b+c*\", C(\"c\"), C(\"b\"));\n    test_lit!(sfx_cat10, suffixes, \"ab*\", C(\"b\"), M(\"a\"));\n    test_lit!(sfx_cat11, suffixes, \"ab*c\", C(\"bc\"), M(\"ac\"));\n    test_lit!(sfx_cat12, suffixes, \"ab+\", C(\"b\"));\n    test_lit!(sfx_cat13, suffixes, \"ab+c\", C(\"bc\"));\n    test_lit!(sfx_cat14, suffixes, \"a^\");\n    test_lit!(sfx_cat15, suffixes, \"$a\", C(\"a\"));\n    test_lit!(sfx_cat16, suffixes, r\"ab*c\", C(\"bc\"), M(\"ac\"));\n    test_lit!(sfx_cat17, suffixes, r\"ab+c\", C(\"bc\"));\n    test_lit!(sfx_cat18, suffixes, r\"z*azb\", C(\"zazb\"), M(\"azb\"));\n    test_lit!(sfx_cat19, suffixes, \"a.z\", C(\"z\"));\n\n    // Test regexes with alternations.\n    test_lit!(sfx_alt1, suffixes, \"a|b\", M(\"a\"), M(\"b\"));\n    test_lit!(sfx_alt2, suffixes, \"[1-3]|b\", M(\"1\"), M(\"2\"), M(\"3\"), M(\"b\"));\n    test_lit!(sfx_alt3, suffixes, \"y(?:a|b)z\", M(\"yaz\"), M(\"ybz\"));\n    test_lit!(sfx_alt4, suffixes, \"a|b*\");\n    test_lit!(sfx_alt5, suffixes, \"a|b+\", M(\"a\"), C(\"b\"));\n    test_lit!(sfx_alt6, suffixes, \"a|(?:b|c*)\");\n    test_lit!(\n        sfx_alt7,\n        suffixes,\n        \"(a|b)*c|(a|ab)*c\",\n        C(\"ac\"),\n        C(\"bc\"),\n        M(\"c\"),\n        C(\"ac\"),\n        C(\"abc\"),\n        M(\"c\")\n    );\n    test_lit!(sfx_alt8, suffixes, \"a*b|c\", C(\"ab\"), M(\"b\"), M(\"c\"));\n\n    // Test regexes with empty assertions.\n    test_lit!(sfx_empty1, suffixes, \"a$\", M(\"a\"));\n    test_lit!(sfx_empty2, suffixes, \"${2}a\", C(\"a\"));\n\n    // Make sure some curious regexes have no suffixes.\n    test_lit!(sfx_nothing1, suffixes, \".\");\n    test_lit!(sfx_nothing2, suffixes, \"(?s).\");\n    test_lit!(sfx_nothing3, suffixes, \"^\");\n    test_lit!(sfx_nothing4, suffixes, \"$\");\n    test_lit!(sfx_nothing6, suffixes, \"(?m)$\");\n    test_lit!(sfx_nothing7, suffixes, r\"\\b\");\n    test_lit!(sfx_nothing8, suffixes, r\"\\B\");\n\n    // Test a few regexes that defeat any suffix literal detection.\n    test_lit!(sfx_defeated1, suffixes, \"a.\");\n    test_lit!(sfx_defeated2, suffixes, \"(?s)a.\");\n    test_lit!(sfx_defeated3, suffixes, \"a*b*c*\");\n    test_lit!(sfx_defeated4, suffixes, \"a|.\");\n    test_lit!(sfx_defeated5, suffixes, \".|a\");\n    test_lit!(sfx_defeated6, suffixes, \"a|^\");\n    test_lit!(sfx_defeated7, suffixes, \"(?:a(?:b)(?:c)).\");\n    test_lit!(sfx_defeated8, suffixes, \"a^\");\n    test_lit!(sfx_defeated9, suffixes, \"(?m)a$\");\n    test_lit!(sfx_defeated10, suffixes, r\"a\\b\");\n    test_lit!(sfx_defeated11, suffixes, r\"a\\B\");\n    test_lit!(sfx_defeated12, suffixes, \"a^*\");\n    test_lit!(sfx_defeated13, suffixes, \"a^+\");\n\n    // These test use a much lower limit than the default so that we can\n    // write test cases of reasonable size.\n    test_exhausted!(sfx_exhausted1, suffixes, \"[a-z]\");\n    test_exhausted!(sfx_exhausted2, suffixes, \"A[a-z]*\");\n    test_exhausted!(sfx_exhausted3, suffixes, \"A[a-z]Z\", C(\"Z\"));\n    test_exhausted!(\n        sfx_exhausted4,\n        suffixes,\n        \"(?i-u)foobar\",\n        C(\"AR\"),\n        C(\"Ar\"),\n        C(\"aR\"),\n        C(\"ar\")\n    );\n    test_exhausted!(\n        sfx_exhausted5,\n        suffixes,\n        \"(?:ab){100}\",\n        C(\"abababababababababab\")\n    );\n    test_exhausted!(\n        sfx_exhausted6,\n        suffixes,\n        \"cd(?:(?:ab){100})*\",\n        C(\"ababababab\"),\n        M(\"cd\")\n    );\n    test_exhausted!(\n        sfx_exhausted7,\n        suffixes,\n        \"cd(?:(?:ab){100})*z\",\n        C(\"abababababz\"),\n        M(\"cdz\")\n    );\n    test_exhausted!(\n        sfx_exhausted8,\n        suffixes,\n        \"zaaaaaaaaaaaaaaaaaaaa\",\n        C(\"aaaaaaaaaaaaaaaaaaaa\")\n    );\n\n    // ************************************************************************\n    // Tests for generating unambiguous literal sets.\n    // ************************************************************************\n\n    macro_rules! test_unamb {\n        ($name:ident, $given:expr, $expected:expr) => {\n            #[test]\n            fn $name() {\n                let given: Vec<Literal> = $given\n                    .into_iter()\n                    .map(|ul| {\n                        let cut = ul.is_cut();\n                        Literal { v: ul.v.into_bytes(), cut: cut }\n                    })\n                    .collect();\n                let lits = create_lits(given);\n                let got = lits.unambiguous_prefixes();\n                assert_eq!($expected, escape_lits(got.literals()));\n            }\n        };\n    }\n\n    test_unamb!(unambiguous1, vec![M(\"z\"), M(\"azb\")], vec![C(\"a\"), C(\"z\")]);\n    test_unamb!(\n        unambiguous2,\n        vec![M(\"zaaaaaa\"), M(\"aa\")],\n        vec![C(\"aa\"), C(\"z\")]\n    );\n    test_unamb!(\n        unambiguous3,\n        vec![M(\"Sherlock\"), M(\"Watson\")],\n        vec![M(\"Sherlock\"), M(\"Watson\")]\n    );\n    test_unamb!(unambiguous4, vec![M(\"abc\"), M(\"bc\")], vec![C(\"a\"), C(\"bc\")]);\n    test_unamb!(unambiguous5, vec![M(\"bc\"), M(\"abc\")], vec![C(\"a\"), C(\"bc\")]);\n    test_unamb!(unambiguous6, vec![M(\"a\"), M(\"aa\")], vec![C(\"a\")]);\n    test_unamb!(unambiguous7, vec![M(\"aa\"), M(\"a\")], vec![C(\"a\")]);\n    test_unamb!(unambiguous8, vec![M(\"ab\"), M(\"a\")], vec![C(\"a\")]);\n    test_unamb!(\n        unambiguous9,\n        vec![M(\"ac\"), M(\"bc\"), M(\"c\"), M(\"ac\"), M(\"abc\"), M(\"c\")],\n        vec![C(\"a\"), C(\"b\"), C(\"c\")]\n    );\n    test_unamb!(\n        unambiguous10,\n        vec![M(\"Mo'\"), M(\"Mu'\"), M(\"Mo\"), M(\"Mu\")],\n        vec![C(\"Mo\"), C(\"Mu\")]\n    );\n    test_unamb!(\n        unambiguous11,\n        vec![M(\"zazb\"), M(\"azb\")],\n        vec![C(\"a\"), C(\"z\")]\n    );\n    test_unamb!(unambiguous12, vec![M(\"foo\"), C(\"foo\")], vec![C(\"foo\")]);\n    test_unamb!(\n        unambiguous13,\n        vec![M(\"ABCX\"), M(\"CDAX\"), M(\"BCX\")],\n        vec![C(\"A\"), C(\"BCX\"), C(\"CD\")]\n    );\n    test_unamb!(\n        unambiguous14,\n        vec![M(\"IMGX\"), M(\"MVIX\"), M(\"MGX\"), M(\"DSX\")],\n        vec![M(\"DSX\"), C(\"I\"), C(\"MGX\"), C(\"MV\")]\n    );\n    test_unamb!(\n        unambiguous15,\n        vec![M(\"IMG_\"), M(\"MG_\"), M(\"CIMG\")],\n        vec![C(\"C\"), C(\"I\"), C(\"MG_\")]\n    );\n\n    // ************************************************************************\n    // Tests for suffix trimming.\n    // ************************************************************************\n    macro_rules! test_trim {\n        ($name:ident, $trim:expr, $given:expr, $expected:expr) => {\n            #[test]\n            fn $name() {\n                let given: Vec<Literal> = $given\n                    .into_iter()\n                    .map(|ul| {\n                        let cut = ul.is_cut();\n                        Literal { v: ul.v.into_bytes(), cut: cut }\n                    })\n                    .collect();\n                let lits = create_lits(given);\n                let got = lits.trim_suffix($trim).unwrap();\n                assert_eq!($expected, escape_lits(got.literals()));\n            }\n        };\n    }\n\n    test_trim!(trim1, 1, vec![M(\"ab\"), M(\"yz\")], vec![C(\"a\"), C(\"y\")]);\n    test_trim!(trim2, 1, vec![M(\"abc\"), M(\"abd\")], vec![C(\"ab\")]);\n    test_trim!(trim3, 2, vec![M(\"abc\"), M(\"abd\")], vec![C(\"a\")]);\n    test_trim!(trim4, 2, vec![M(\"abc\"), M(\"ghij\")], vec![C(\"a\"), C(\"gh\")]);\n\n    // ************************************************************************\n    // Tests for longest common prefix.\n    // ************************************************************************\n\n    macro_rules! test_lcp {\n        ($name:ident, $given:expr, $expected:expr) => {\n            #[test]\n            fn $name() {\n                let given: Vec<Literal> = $given\n                    .into_iter()\n                    .map(|s: &str| Literal {\n                        v: s.to_owned().into_bytes(),\n                        cut: false,\n                    })\n                    .collect();\n                let lits = create_lits(given);\n                let got = lits.longest_common_prefix();\n                assert_eq!($expected, escape_bytes(got));\n            }\n        };\n    }\n\n    test_lcp!(lcp1, vec![\"a\"], \"a\");\n    test_lcp!(lcp2, vec![], \"\");\n    test_lcp!(lcp3, vec![\"a\", \"b\"], \"\");\n    test_lcp!(lcp4, vec![\"ab\", \"ab\"], \"ab\");\n    test_lcp!(lcp5, vec![\"ab\", \"a\"], \"a\");\n    test_lcp!(lcp6, vec![\"a\", \"ab\"], \"a\");\n    test_lcp!(lcp7, vec![\"ab\", \"b\"], \"\");\n    test_lcp!(lcp8, vec![\"b\", \"ab\"], \"\");\n    test_lcp!(lcp9, vec![\"foobar\", \"foobaz\"], \"fooba\");\n    test_lcp!(lcp10, vec![\"foobar\", \"foobaz\", \"a\"], \"\");\n    test_lcp!(lcp11, vec![\"a\", \"foobar\", \"foobaz\"], \"\");\n    test_lcp!(lcp12, vec![\"foo\", \"flub\", \"flab\", \"floo\"], \"f\");\n\n    // ************************************************************************\n    // Tests for longest common suffix.\n    // ************************************************************************\n\n    macro_rules! test_lcs {\n        ($name:ident, $given:expr, $expected:expr) => {\n            #[test]\n            fn $name() {\n                let given: Vec<Literal> = $given\n                    .into_iter()\n                    .map(|s: &str| Literal {\n                        v: s.to_owned().into_bytes(),\n                        cut: false,\n                    })\n                    .collect();\n                let lits = create_lits(given);\n                let got = lits.longest_common_suffix();\n                assert_eq!($expected, escape_bytes(got));\n            }\n        };\n    }\n\n    test_lcs!(lcs1, vec![\"a\"], \"a\");\n    test_lcs!(lcs2, vec![], \"\");\n    test_lcs!(lcs3, vec![\"a\", \"b\"], \"\");\n    test_lcs!(lcs4, vec![\"ab\", \"ab\"], \"ab\");\n    test_lcs!(lcs5, vec![\"ab\", \"a\"], \"\");\n    test_lcs!(lcs6, vec![\"a\", \"ab\"], \"\");\n    test_lcs!(lcs7, vec![\"ab\", \"b\"], \"b\");\n    test_lcs!(lcs8, vec![\"b\", \"ab\"], \"b\");\n    test_lcs!(lcs9, vec![\"barfoo\", \"bazfoo\"], \"foo\");\n    test_lcs!(lcs10, vec![\"barfoo\", \"bazfoo\", \"a\"], \"\");\n    test_lcs!(lcs11, vec![\"a\", \"barfoo\", \"bazfoo\"], \"\");\n    test_lcs!(lcs12, vec![\"flub\", \"bub\", \"boob\", \"dub\"], \"b\");\n}\n","traces":[{"line":53,"address":[6656800],"length":1,"stats":{"Line":15},"fn_name":"empty"},{"line":54,"address":[6656807],"length":1,"stats":{"Line":15},"fn_name":null},{"line":58,"address":[6656896,6656931],"length":1,"stats":{"Line":0},"fn_name":"prefixes"},{"line":59,"address":[6656923],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[6656943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[6657043,6657008],"length":1,"stats":{"Line":0},"fn_name":"suffixes"},{"line":66,"address":[6657035],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[6657055],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[6657120],"length":1,"stats":{"Line":9},"fn_name":"limit_size"},{"line":73,"address":[6657125],"length":1,"stats":{"Line":9},"fn_name":null},{"line":83,"address":[6657136],"length":1,"stats":{"Line":9},"fn_name":"set_limit_size"},{"line":84,"address":[6657149],"length":1,"stats":{"Line":9},"fn_name":null},{"line":85,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[6657168],"length":1,"stats":{"Line":0},"fn_name":"limit_class"},{"line":90,"address":[6657173],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[6657184],"length":1,"stats":{"Line":9},"fn_name":"set_limit_class"},{"line":104,"address":[6657197],"length":1,"stats":{"Line":9},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[6657216],"length":1,"stats":{"Line":13},"fn_name":"literals"},{"line":110,"address":[6657225],"length":1,"stats":{"Line":13},"fn_name":null},{"line":116,"address":[6657264],"length":1,"stats":{"Line":0},"fn_name":"min_len"},{"line":117,"address":[6657279],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[6657727,6657722,6657288,6657386],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[6657543,6657455],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[6657420,6657465],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[6657548],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[6657728],"length":1,"stats":{"Line":14},"fn_name":"all_complete"},{"line":130,"address":[6657818,6657737],"length":1,"stats":{"Line":46},"fn_name":null},{"line":134,"address":[6657888],"length":1,"stats":{"Line":9},"fn_name":"any_complete"},{"line":135,"address":[6657897],"length":1,"stats":{"Line":27},"fn_name":null},{"line":139,"address":[6657984],"length":1,"stats":{"Line":9},"fn_name":"contains_empty"},{"line":140,"address":[6657993],"length":1,"stats":{"Line":27},"fn_name":null},{"line":144,"address":[6658080],"length":1,"stats":{"Line":9},"fn_name":"is_empty"},{"line":145,"address":[6658089,6658170],"length":1,"stats":{"Line":41},"fn_name":null},{"line":149,"address":[6658275,6658240],"length":1,"stats":{"Line":9},"fn_name":"to_empty"},{"line":150,"address":[6658267],"length":1,"stats":{"Line":9},"fn_name":null},{"line":151,"address":[6658292],"length":1,"stats":{"Line":9},"fn_name":null},{"line":152,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[6658384],"length":1,"stats":{"Line":14},"fn_name":"longest_common_prefix"},{"line":157,"address":[6658407],"length":1,"stats":{"Line":14},"fn_name":null},{"line":158,"address":[6658474],"length":1,"stats":{"Line":14},"fn_name":null},{"line":160,"address":[6658452,6658533],"length":1,"stats":{"Line":18},"fn_name":null},{"line":161,"address":[6658563],"length":1,"stats":{"Line":9},"fn_name":null},{"line":162,"address":[6658977,6658762,6658595],"length":1,"stats":{"Line":17},"fn_name":null},{"line":163,"address":[6658953],"length":1,"stats":{"Line":8},"fn_name":null},{"line":164,"address":[6658796],"length":1,"stats":{"Line":8},"fn_name":null},{"line":165,"address":[6658809],"length":1,"stats":{"Line":24},"fn_name":null},{"line":168,"address":[6658740,6658987],"length":1,"stats":{"Line":18},"fn_name":null},{"line":172,"address":[6659088],"length":1,"stats":{"Line":14},"fn_name":"longest_common_suffix"},{"line":173,"address":[6659111],"length":1,"stats":{"Line":14},"fn_name":null},{"line":174,"address":[6659178],"length":1,"stats":{"Line":14},"fn_name":null},{"line":176,"address":[6659237,6659156],"length":1,"stats":{"Line":18},"fn_name":null},{"line":177,"address":[6659267],"length":1,"stats":{"Line":9},"fn_name":null},{"line":178,"address":[6659299,6659854,6659493],"length":1,"stats":{"Line":17},"fn_name":null},{"line":179,"address":[6659830],"length":1,"stats":{"Line":8},"fn_name":null},{"line":180,"address":[6659527],"length":1,"stats":{"Line":8},"fn_name":null},{"line":181,"address":[6659543,6659739],"length":1,"stats":{"Line":16},"fn_name":null},{"line":182,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":183,"address":[6659671],"length":1,"stats":{"Line":8},"fn_name":null},{"line":184,"address":[6844144,6844158],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":185,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[6659468,6659867,6660083,6660053],"length":1,"stats":{"Line":18},"fn_name":null},{"line":199,"address":[6660189,6660096],"length":1,"stats":{"Line":0},"fn_name":"trim_suffix"},{"line":200,"address":[6660122,6660204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[6660330],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[6660298],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[6661027,6660438,6660353],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[6660816,6661286,6660752],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[6660880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[6660925],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[6660944],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[6661032,6660784],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[6661053],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[6661072],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[6661415,6661328],"length":1,"stats":{"Line":0},"fn_name":"unambiguous_prefixes"},{"line":225,"address":[6661437,6661346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[6661518,6661494],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[6661451,6661536],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[6661626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[6661653,6661721,6663657,6661771,6661674],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[6661876,6661811],"length":1,"stats":{"Line":0},"fn_name":null},{"line":232,"address":[6663861,6661908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[6661920,6661882],"length":1,"stats":{"Line":0},"fn_name":null},{"line":235,"address":[6661961],"length":1,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[6662028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[6662041,6663639,6661926,6662203],"length":1,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[6662237],"length":1,"stats":{"Line":0},"fn_name":null},{"line":240,"address":[6662353],"length":1,"stats":{"Line":0},"fn_name":null},{"line":242,"address":[6662311,6662365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[6662398],"length":1,"stats":{"Line":0},"fn_name":null},{"line":247,"address":[6662460],"length":1,"stats":{"Line":0},"fn_name":null},{"line":248,"address":[6662480],"length":1,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[6663583,6663144,6662371,6662485],"length":1,"stats":{"Line":0},"fn_name":null},{"line":251,"address":[6662617],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[6662892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[6662919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[6662950],"length":1,"stats":{"Line":0},"fn_name":null},{"line":255,"address":[6663004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":256,"address":[6663023],"length":1,"stats":{"Line":0},"fn_name":null},{"line":257,"address":[6663090],"length":1,"stats":{"Line":0},"fn_name":null},{"line":260,"address":[6662587,6663149],"length":1,"stats":{"Line":0},"fn_name":null},{"line":261,"address":[6663349],"length":1,"stats":{"Line":0},"fn_name":null},{"line":262,"address":[6663389],"length":1,"stats":{"Line":0},"fn_name":null},{"line":263,"address":[6663404],"length":1,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[6663449],"length":1,"stats":{"Line":0},"fn_name":null},{"line":265,"address":[6663468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":266,"address":[6663535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":270,"address":[6663585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[6663644],"length":1,"stats":{"Line":0},"fn_name":null},{"line":274,"address":[6662133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":276,"address":[6663662],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[6663681],"length":1,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[6663731],"length":1,"stats":{"Line":0},"fn_name":null},{"line":279,"address":[6663758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":291,"address":[6664112,6664149],"length":1,"stats":{"Line":0},"fn_name":"unambiguous_suffixes"},{"line":293,"address":[6664124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[6664161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":295,"address":[6664177],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[6664211],"length":1,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[6664288,6664361],"length":1,"stats":{"Line":9},"fn_name":"union_prefixes"},{"line":310,"address":[6664311],"length":1,"stats":{"Line":9},"fn_name":null},{"line":311,"address":[6664386],"length":1,"stats":{"Line":9},"fn_name":null},{"line":312,"address":[6664393,6664509],"length":1,"stats":{"Line":18},"fn_name":null},{"line":324,"address":[6664704,6664777],"length":1,"stats":{"Line":9},"fn_name":"union_suffixes"},{"line":325,"address":[6664727],"length":1,"stats":{"Line":9},"fn_name":null},{"line":326,"address":[6664802],"length":1,"stats":{"Line":14},"fn_name":null},{"line":327,"address":[6664809],"length":1,"stats":{"Line":9},"fn_name":null},{"line":328,"address":[6664941,6664825],"length":1,"stats":{"Line":23},"fn_name":null},{"line":336,"address":[6665183,6665136],"length":1,"stats":{"Line":9},"fn_name":"union"},{"line":337,"address":[6665151,6665203,6665520],"length":1,"stats":{"Line":18},"fn_name":null},{"line":338,"address":[6665281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":340,"address":[6665323,6665422,6665261],"length":1,"stats":{"Line":18},"fn_name":null},{"line":341,"address":[6665382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[6665329],"length":1,"stats":{"Line":9},"fn_name":null},{"line":345,"address":[6665426],"length":1,"stats":{"Line":9},"fn_name":null},{"line":355,"address":[6665552,6665625],"length":1,"stats":{"Line":9},"fn_name":"cross_product"},{"line":356,"address":[6665575,6665647],"length":1,"stats":{"Line":18},"fn_name":null},{"line":357,"address":[6665676],"length":1,"stats":{"Line":9},"fn_name":null},{"line":360,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":361,"address":[6665661,6666009,6666379,6665704],"length":1,"stats":{"Line":35},"fn_name":null},{"line":362,"address":[6665833],"length":1,"stats":{"Line":9},"fn_name":null},{"line":363,"address":[6666139,6666014,6665870],"length":1,"stats":{"Line":18},"fn_name":null},{"line":364,"address":[6666048,6668035],"length":1,"stats":{"Line":9},"fn_name":null},{"line":367,"address":[6665795,6666160],"length":1,"stats":{"Line":24},"fn_name":null},{"line":368,"address":[6844339,6844478,6844448],"length":1,"stats":{"Line":8},"fn_name":null},{"line":370,"address":[6666240,6666573,6666384],"length":1,"stats":{"Line":16},"fn_name":null},{"line":371,"address":[6666578,6666797,6666434],"length":1,"stats":{"Line":16},"fn_name":null},{"line":372,"address":[6666612],"length":1,"stats":{"Line":8},"fn_name":null},{"line":373,"address":[6668065,6666662],"length":1,"stats":{"Line":8},"fn_name":null},{"line":378,"address":[6666802],"length":1,"stats":{"Line":9},"fn_name":null},{"line":379,"address":[6666847],"length":1,"stats":{"Line":8},"fn_name":null},{"line":382,"address":[6666824],"length":1,"stats":{"Line":9},"fn_name":null},{"line":383,"address":[6667947,6666860,6666912],"length":1,"stats":{"Line":27},"fn_name":null},{"line":384,"address":[6667827,6666924],"length":1,"stats":{"Line":9},"fn_name":null},{"line":386,"address":[6667216,6667041,6667817],"length":1,"stats":{"Line":18},"fn_name":null},{"line":387,"address":[6667250,6667812,6667419],"length":1,"stats":{"Line":27},"fn_name":null},{"line":388,"address":[6667618,6667672],"length":1,"stats":{"Line":18},"fn_name":null},{"line":389,"address":[6667719],"length":1,"stats":{"Line":9},"fn_name":null},{"line":390,"address":[6667729],"length":1,"stats":{"Line":9},"fn_name":null},{"line":393,"address":[6667189],"length":1,"stats":{"Line":9},"fn_name":null},{"line":404,"address":[6668240],"length":1,"stats":{"Line":9},"fn_name":"cross_add"},{"line":408,"address":[6668279],"length":1,"stats":{"Line":9},"fn_name":null},{"line":409,"address":[6668353],"length":1,"stats":{"Line":0},"fn_name":null},{"line":411,"address":[6668335,6668388],"length":1,"stats":{"Line":18},"fn_name":null},{"line":412,"address":[6668436],"length":1,"stats":{"Line":9},"fn_name":null},{"line":413,"address":[6668542],"length":1,"stats":{"Line":9},"fn_name":null},{"line":414,"address":[6668697],"length":1,"stats":{"Line":9},"fn_name":null},{"line":415,"address":[6668808],"length":1,"stats":{"Line":9},"fn_name":null},{"line":417,"address":[6668402],"length":1,"stats":{"Line":0},"fn_name":null},{"line":418,"address":[6669634,6668880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":419,"address":[6668972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":421,"address":[6668958],"length":1,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[6669664,6669212,6669087,6668985,6668970,6669296],"length":1,"stats":{"Line":0},"fn_name":null},{"line":423,"address":[6669209,6669045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":425,"address":[6669252,6669724,6669754],"length":1,"stats":{"Line":0},"fn_name":null},{"line":427,"address":[6669306,6669629,6669231,6669387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":428,"address":[6669421,6669627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[6669459],"length":1,"stats":{"Line":0},"fn_name":null},{"line":430,"address":[6669557,6669625],"length":1,"stats":{"Line":0},"fn_name":null},{"line":431,"address":[6669619],"length":1,"stats":{"Line":0},"fn_name":null},{"line":435,"address":[6669374],"length":1,"stats":{"Line":0},"fn_name":null},{"line":442,"address":[6669760,6669804],"length":1,"stats":{"Line":9},"fn_name":"add"},{"line":443,"address":[6669772,6670044,6669816],"length":1,"stats":{"Line":18},"fn_name":null},{"line":444,"address":[6669952],"length":1,"stats":{"Line":0},"fn_name":null},{"line":446,"address":[6669904],"length":1,"stats":{"Line":9},"fn_name":null},{"line":447,"address":[6669990],"length":1,"stats":{"Line":9},"fn_name":null},{"line":453,"address":[6670080],"length":1,"stats":{"Line":8},"fn_name":"add_char_class"},{"line":454,"address":[6670096],"length":1,"stats":{"Line":8},"fn_name":null},{"line":461,"address":[6670128],"length":1,"stats":{"Line":8},"fn_name":"add_char_class_reverse"},{"line":462,"address":[6670142],"length":1,"stats":{"Line":8},"fn_name":null},{"line":465,"address":[6670261,6670176],"length":1,"stats":{"Line":8},"fn_name":"_add_char_class"},{"line":472,"address":[6670289,6670210],"length":1,"stats":{"Line":16},"fn_name":null},{"line":473,"address":[6670331],"length":1,"stats":{"Line":8},"fn_name":null},{"line":475,"address":[6670308],"length":1,"stats":{"Line":8},"fn_name":null},{"line":476,"address":[6670359,6670411,6671829],"length":1,"stats":{"Line":16},"fn_name":null},{"line":477,"address":[6671709,6670423],"length":1,"stats":{"Line":8},"fn_name":null},{"line":479,"address":[6670715,6670987,6670540],"length":1,"stats":{"Line":16},"fn_name":null},{"line":480,"address":[6670749,6671972],"length":1,"stats":{"Line":8},"fn_name":null},{"line":481,"address":[6671699,6670992,6670829],"length":1,"stats":{"Line":16},"fn_name":null},{"line":482,"address":[6671022,6671186,6671694],"length":1,"stats":{"Line":24},"fn_name":null},{"line":483,"address":[6671454,6671401],"length":1,"stats":{"Line":16},"fn_name":null},{"line":484,"address":[6671465,6671542],"length":1,"stats":{"Line":16},"fn_name":null},{"line":485,"address":[6671473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":487,"address":[6671544],"length":1,"stats":{"Line":8},"fn_name":null},{"line":488,"address":[6671592],"length":1,"stats":{"Line":8},"fn_name":null},{"line":492,"address":[6670688],"length":1,"stats":{"Line":8},"fn_name":null},{"line":498,"address":[6672064,6672128],"length":1,"stats":{"Line":8},"fn_name":"add_byte_class"},{"line":499,"address":[6672087,6672153],"length":1,"stats":{"Line":16},"fn_name":null},{"line":500,"address":[6672189],"length":1,"stats":{"Line":8},"fn_name":null},{"line":502,"address":[6672172],"length":1,"stats":{"Line":8},"fn_name":null},{"line":503,"address":[6673508,6672211,6672254],"length":1,"stats":{"Line":16},"fn_name":null},{"line":504,"address":[6673394,6672266],"length":1,"stats":{"Line":8},"fn_name":null},{"line":506,"address":[6672828,6672380,6672546],"length":1,"stats":{"Line":16},"fn_name":null},{"line":507,"address":[6673651,6672580],"length":1,"stats":{"Line":8},"fn_name":null},{"line":508,"address":[6673384,6672833,6672662],"length":1,"stats":{"Line":32},"fn_name":null},{"line":509,"address":[6673379,6672863,6673028],"length":1,"stats":{"Line":24},"fn_name":null},{"line":510,"address":[6673227,6673281],"length":1,"stats":{"Line":16},"fn_name":null},{"line":511,"address":[6673299],"length":1,"stats":{"Line":8},"fn_name":null},{"line":515,"address":[6672525],"length":1,"stats":{"Line":8},"fn_name":null},{"line":520,"address":[6673728],"length":1,"stats":{"Line":9},"fn_name":"cut"},{"line":521,"address":[6673847,6673737,6673814,6673845],"length":1,"stats":{"Line":18},"fn_name":null},{"line":522,"address":[6673836],"length":1,"stats":{"Line":9},"fn_name":null},{"line":527,"address":[6673856],"length":1,"stats":{"Line":9},"fn_name":"reverse"},{"line":528,"address":[6674019,6674017,6673944,6673865],"length":1,"stats":{"Line":18},"fn_name":null},{"line":529,"address":[6673966],"length":1,"stats":{"Line":9},"fn_name":null},{"line":534,"address":[6674032],"length":1,"stats":{"Line":0},"fn_name":"clear"},{"line":535,"address":[6674037],"length":1,"stats":{"Line":0},"fn_name":null},{"line":539,"address":[6674048,6674105],"length":1,"stats":{"Line":9},"fn_name":"remove_complete"},{"line":540,"address":[6674066],"length":1,"stats":{"Line":9},"fn_name":null},{"line":541,"address":[6674125,6674714,6674185,6674304],"length":1,"stats":{"Line":36},"fn_name":null},{"line":542,"address":[6674503,6674560,6674694],"length":1,"stats":{"Line":26},"fn_name":null},{"line":543,"address":[6674630],"length":1,"stats":{"Line":8},"fn_name":null},{"line":545,"address":[6674566],"length":1,"stats":{"Line":9},"fn_name":null},{"line":548,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":552,"address":[6674864],"length":1,"stats":{"Line":9},"fn_name":"num_bytes"},{"line":553,"address":[6674873],"length":1,"stats":{"Line":27},"fn_name":null},{"line":560,"address":[6674960],"length":1,"stats":{"Line":8},"fn_name":"class_exceeds_limits"},{"line":561,"address":[6674974],"length":1,"stats":{"Line":8},"fn_name":null},{"line":562,"address":[6675010],"length":1,"stats":{"Line":8},"fn_name":null},{"line":566,"address":[6675075,6674995,6675033,6675141],"length":1,"stats":{"Line":24},"fn_name":null},{"line":567,"address":[6675065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":569,"address":[6675087,6675044],"length":1,"stats":{"Line":0},"fn_name":null},{"line":570,"address":[6844898,6844928,6844812],"length":1,"stats":{"Line":8},"fn_name":"repeat_zero_or_one_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":571,"address":[6844664,6844724],"length":1,"stats":{"Line":0},"fn_name":null},{"line":574,"address":[6844715],"length":1,"stats":{"Line":0},"fn_name":null},{"line":576,"address":[6844838,6844731,6844702],"length":1,"stats":{"Line":0},"fn_name":null},{"line":580,"address":[6675143],"length":1,"stats":{"Line":8},"fn_name":null},{"line":584,"address":[6675184,6675231],"length":1,"stats":{"Line":9},"fn_name":"prefixes"},{"line":585,"address":[6675646,6677263,6675215,6675928,6675870,6675706,6675788,6676707,6676467,6676538,6676842],"length":1,"stats":{"Line":69},"fn_name":null},{"line":586,"address":[6675254,6675331,6675445],"length":1,"stats":{"Line":27},"fn_name":null},{"line":587,"address":[6675455],"length":1,"stats":{"Line":9},"fn_name":null},{"line":588,"address":[6675510,6675640],"length":1,"stats":{"Line":18},"fn_name":null},{"line":590,"address":[6675659],"length":1,"stats":{"Line":0},"fn_name":null},{"line":591,"address":[6675669],"length":1,"stats":{"Line":0},"fn_name":null},{"line":593,"address":[6675384,6675719],"length":1,"stats":{"Line":16},"fn_name":null},{"line":594,"address":[6675786,6675747],"length":1,"stats":{"Line":16},"fn_name":null},{"line":595,"address":[6675780],"length":1,"stats":{"Line":8},"fn_name":null},{"line":598,"address":[6675801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":599,"address":[6675868,6675829],"length":1,"stats":{"Line":16},"fn_name":null},{"line":600,"address":[6675862],"length":1,"stats":{"Line":8},"fn_name":null},{"line":603,"address":[6675883],"length":1,"stats":{"Line":9},"fn_name":null},{"line":604,"address":[6675911],"length":1,"stats":{"Line":9},"fn_name":null},{"line":606,"address":[6676131,6676465,6676157,6675941,6676082,6676105],"length":1,"stats":{"Line":41},"fn_name":null},{"line":607,"address":[6675961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":608,"address":[6676089],"length":1,"stats":{"Line":8},"fn_name":null},{"line":611,"address":[6676115],"length":1,"stats":{"Line":9},"fn_name":null},{"line":614,"address":[6676141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":616,"address":[6676020],"length":1,"stats":{"Line":8},"fn_name":null},{"line":617,"address":[6676378,6676240,6676315],"length":1,"stats":{"Line":24},"fn_name":null},{"line":618,"address":[6676252,6676037],"length":1,"stats":{"Line":16},"fn_name":null},{"line":619,"address":[6676322],"length":1,"stats":{"Line":8},"fn_name":null},{"line":620,"address":[6676167],"length":1,"stats":{"Line":8},"fn_name":null},{"line":623,"address":[6676425],"length":1,"stats":{"Line":8},"fn_name":null},{"line":627,"address":[6676480],"length":1,"stats":{"Line":9},"fn_name":null},{"line":628,"address":[6676702,6676551],"length":1,"stats":{"Line":9},"fn_name":null},{"line":629,"address":[6676654],"length":1,"stats":{"Line":9},"fn_name":null},{"line":630,"address":[6676717,6677196,6676668],"length":1,"stats":{"Line":27},"fn_name":null},{"line":631,"address":[6676821,6676852,6676892],"length":1,"stats":{"Line":27},"fn_name":null},{"line":632,"address":[6676912],"length":1,"stats":{"Line":9},"fn_name":null},{"line":633,"address":[6676956],"length":1,"stats":{"Line":0},"fn_name":null},{"line":634,"address":[6676962],"length":1,"stats":{"Line":0},"fn_name":null},{"line":636,"address":[6676932,6676974],"length":1,"stats":{"Line":18},"fn_name":null},{"line":637,"address":[6676988],"length":1,"stats":{"Line":9},"fn_name":null},{"line":639,"address":[6676863],"length":1,"stats":{"Line":9},"fn_name":null},{"line":640,"address":[6677006],"length":1,"stats":{"Line":9},"fn_name":null},{"line":641,"address":[6677063,6677013],"length":1,"stats":{"Line":17},"fn_name":null},{"line":645,"address":[6677158],"length":1,"stats":{"Line":8},"fn_name":null},{"line":646,"address":[6677191],"length":1,"stats":{"Line":8},"fn_name":null},{"line":650,"address":[6677209],"length":1,"stats":{"Line":9},"fn_name":null},{"line":651,"address":[6677223],"length":1,"stats":{"Line":9},"fn_name":null},{"line":653,"address":[6675312],"length":1,"stats":{"Line":9},"fn_name":null},{"line":657,"address":[6677296,6677343],"length":1,"stats":{"Line":14},"fn_name":"suffixes"},{"line":658,"address":[6678130,6677327,6679588,6677897,6678714,6677837,6678785,6677984,6678954,6678072,6679167],"length":1,"stats":{"Line":83},"fn_name":null},{"line":659,"address":[6677557,6677366,6677443],"length":1,"stats":{"Line":32},"fn_name":null},{"line":660,"address":[6677567],"length":1,"stats":{"Line":9},"fn_name":null},{"line":661,"address":[6677622],"length":1,"stats":{"Line":9},"fn_name":null},{"line":662,"address":[6677698],"length":1,"stats":{"Line":9},"fn_name":null},{"line":663,"address":[6677795],"length":1,"stats":{"Line":9},"fn_name":null},{"line":664,"address":[6677831],"length":1,"stats":{"Line":9},"fn_name":null},{"line":666,"address":[6677850],"length":1,"stats":{"Line":0},"fn_name":null},{"line":667,"address":[6677860],"length":1,"stats":{"Line":0},"fn_name":null},{"line":669,"address":[6677910,6677496],"length":1,"stats":{"Line":16},"fn_name":null},{"line":670,"address":[6677938,6677982],"length":1,"stats":{"Line":16},"fn_name":null},{"line":671,"address":[6677976],"length":1,"stats":{"Line":8},"fn_name":null},{"line":674,"address":[6677997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":675,"address":[6678025,6678070],"length":1,"stats":{"Line":16},"fn_name":null},{"line":676,"address":[6678064],"length":1,"stats":{"Line":8},"fn_name":null},{"line":679,"address":[6678085],"length":1,"stats":{"Line":9},"fn_name":null},{"line":680,"address":[6678113],"length":1,"stats":{"Line":9},"fn_name":null},{"line":682,"address":[6678363,6678392,6678143,6678308,6678712,6678334],"length":1,"stats":{"Line":46},"fn_name":null},{"line":683,"address":[6678163],"length":1,"stats":{"Line":8},"fn_name":null},{"line":684,"address":[6678318],"length":1,"stats":{"Line":8},"fn_name":null},{"line":687,"address":[6678347],"length":1,"stats":{"Line":9},"fn_name":null},{"line":690,"address":[6678376],"length":1,"stats":{"Line":8},"fn_name":null},{"line":692,"address":[6678234],"length":1,"stats":{"Line":8},"fn_name":null},{"line":693,"address":[6678622,6678478,6678556],"length":1,"stats":{"Line":24},"fn_name":null},{"line":694,"address":[6678493,6678254],"length":1,"stats":{"Line":16},"fn_name":null},{"line":695,"address":[6678566],"length":1,"stats":{"Line":8},"fn_name":null},{"line":696,"address":[6678405],"length":1,"stats":{"Line":8},"fn_name":null},{"line":699,"address":[6678672],"length":1,"stats":{"Line":8},"fn_name":null},{"line":703,"address":[6678727],"length":1,"stats":{"Line":9},"fn_name":null},{"line":704,"address":[6678949,6678798],"length":1,"stats":{"Line":9},"fn_name":null},{"line":705,"address":[6678901],"length":1,"stats":{"Line":9},"fn_name":null},{"line":706,"address":[6679521,6678969,6678915],"length":1,"stats":{"Line":27},"fn_name":null},{"line":707,"address":[6679177,6679217,6679146],"length":1,"stats":{"Line":27},"fn_name":null},{"line":708,"address":[6679237],"length":1,"stats":{"Line":8},"fn_name":null},{"line":709,"address":[6679281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":710,"address":[6679287],"length":1,"stats":{"Line":0},"fn_name":null},{"line":712,"address":[6679257,6679299],"length":1,"stats":{"Line":16},"fn_name":null},{"line":713,"address":[6679313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":715,"address":[6679188],"length":1,"stats":{"Line":9},"fn_name":null},{"line":716,"address":[6679331],"length":1,"stats":{"Line":9},"fn_name":null},{"line":717,"address":[6679338,6679388],"length":1,"stats":{"Line":18},"fn_name":null},{"line":721,"address":[6679483],"length":1,"stats":{"Line":9},"fn_name":null},{"line":722,"address":[6679516],"length":1,"stats":{"Line":9},"fn_name":null},{"line":726,"address":[6679534],"length":1,"stats":{"Line":8},"fn_name":null},{"line":727,"address":[6679548],"length":1,"stats":{"Line":8},"fn_name":null},{"line":729,"address":[6677424],"length":1,"stats":{"Line":11},"fn_name":null},{"line":733,"address":[6844987,6844928,6845883,6845824],"length":1,"stats":{"Line":8},"fn_name":"repeat_zero_or_one_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":738,"address":[6846130,6845234,6845924,6844951,6845028,6845898,6845002,6845847],"length":1,"stats":{"Line":48},"fn_name":null},{"line":739,"address":[6845213,6845290,6846109,6846186],"length":1,"stats":{"Line":32},"fn_name":null},{"line":740,"address":[6845317,6846213],"length":1,"stats":{"Line":16},"fn_name":null},{"line":742,"address":[6845370,6846266],"length":1,"stats":{"Line":16},"fn_name":null},{"line":743,"address":[6845488,6846384],"length":1,"stats":{"Line":16},"fn_name":null},{"line":746,"address":[6846365,6845469,6846458,6845562],"length":1,"stats":{"Line":32},"fn_name":null},{"line":747,"address":[6845689,6845586,6846482,6846585],"length":1,"stats":{"Line":16},"fn_name":null},{"line":748,"address":[6845673,6846569],"length":1,"stats":{"Line":0},"fn_name":null},{"line":752,"address":[6847632,6846779,6846720,6847691],"length":1,"stats":{"Line":18},"fn_name":"repeat_zero_or_more_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":757,"address":[6846794,6846820,6847938,6847706,6847026,6847732,6847655,6846743],"length":1,"stats":{"Line":54},"fn_name":null},{"line":758,"address":[6847917,6847005,6847082,6847994],"length":1,"stats":{"Line":36},"fn_name":null},{"line":759,"address":[6848021,6847109],"length":1,"stats":{"Line":18},"fn_name":null},{"line":761,"address":[6848074,6847162],"length":1,"stats":{"Line":18},"fn_name":null},{"line":762,"address":[6848189,6847277],"length":1,"stats":{"Line":18},"fn_name":null},{"line":765,"address":[6848173,6847261],"length":1,"stats":{"Line":16},"fn_name":null},{"line":766,"address":[6848263,6847351],"length":1,"stats":{"Line":16},"fn_name":null},{"line":767,"address":[6847497,6848306,6848409,6847394],"length":1,"stats":{"Line":16},"fn_name":null},{"line":768,"address":[6848393,6847481],"length":1,"stats":{"Line":0},"fn_name":null},{"line":772,"address":[6848714,6848544,6848656,6848602],"length":1,"stats":{"Line":16},"fn_name":"repeat_one_or_more_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":777,"address":[6848558,6848670],"length":1,"stats":{"Line":16},"fn_name":null},{"line":778,"address":[6848726,6848614],"length":1,"stats":{"Line":16},"fn_name":null},{"line":781,"address":[6848768,6849728,6848853,6849813],"length":1,"stats":{"Line":16},"fn_name":"repeat_range_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":789,"address":[6849781,6849647,6849150,6850110,6850607,6848821],"length":1,"stats":{"Line":48},"fn_name":null},{"line":794,"address":[6848977,6849937],"length":1,"stats":{"Line":16},"fn_name":null},{"line":795,"address":[6849844,6848884],"length":1,"stats":{"Line":16},"fn_name":null},{"line":797,"address":[6848908,6849868],"length":1,"stats":{"Line":16},"fn_name":null},{"line":802,"address":[6850115,6848868,6849155,6849828,6850526,6849566],"length":1,"stats":{"Line":32},"fn_name":null},{"line":803,"address":[6849165,6850125],"length":1,"stats":{"Line":16},"fn_name":null},{"line":804,"address":[6850177,6849217],"length":1,"stats":{"Line":16},"fn_name":null},{"line":805,"address":[6849310,6850270],"length":1,"stats":{"Line":16},"fn_name":null},{"line":806,"address":[6850524,6849468,6850428,6849564],"length":1,"stats":{"Line":32},"fn_name":null},{"line":807,"address":[6849548,6850508],"length":1,"stats":{"Line":16},"fn_name":null},{"line":810,"address":[6849645,6850605,6850700,6850732,6850533,6850688,6849573,6850720],"length":1,"stats":{"Line":64},"fn_name":"{{closure}}<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":811,"address":[6849629,6850589],"length":1,"stats":{"Line":16},"fn_name":null},{"line":816,"address":[6851772,6850828,6850752,6851696],"length":1,"stats":{"Line":17},"fn_name":"alternate_literals<fn(&regex_syntax::hir::Hir, &mut regex_syntax::hir::literal::Literals)>"},{"line":821,"address":[6850783,6851727],"length":1,"stats":{"Line":17},"fn_name":null},{"line":822,"address":[6850917,6851787,6850843,6851861,6850881,6851475,6851007,6851825,6851951,6852419],"length":1,"stats":{"Line":69},"fn_name":null},{"line":823,"address":[6851985,6851041],"length":1,"stats":{"Line":17},"fn_name":null},{"line":824,"address":[6852022,6851078],"length":1,"stats":{"Line":17},"fn_name":null},{"line":825,"address":[6852105,6851161],"length":1,"stats":{"Line":17},"fn_name":null},{"line":826,"address":[6851217,6852161],"length":1,"stats":{"Line":17},"fn_name":null},{"line":831,"address":[6851401,6852345],"length":1,"stats":{"Line":16},"fn_name":null},{"line":835,"address":[6851923,6852452,6852428,6851508,6850979,6851484],"length":1,"stats":{"Line":36},"fn_name":null},{"line":836,"address":[6851492,6852436],"length":1,"stats":{"Line":0},"fn_name":null},{"line":841,"address":[6679632],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":842,"address":[6679856,6679653,6679780],"length":1,"stats":{"Line":0},"fn_name":null},{"line":843,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":844,"address":[6679768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":845,"address":[6679844],"length":1,"stats":{"Line":0},"fn_name":null},{"line":852,"address":[6679936],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":857,"address":[6680016],"length":1,"stats":{"Line":9},"fn_name":"empty"},{"line":858,"address":[6680023],"length":1,"stats":{"Line":9},"fn_name":null},{"line":862,"address":[6680096],"length":1,"stats":{"Line":9},"fn_name":"is_cut"},{"line":863,"address":[6680101],"length":1,"stats":{"Line":9},"fn_name":null},{"line":867,"address":[6680112],"length":1,"stats":{"Line":9},"fn_name":"cut"},{"line":868,"address":[6680117],"length":1,"stats":{"Line":9},"fn_name":null},{"line":873,"address":[6680128],"length":1,"stats":{"Line":0},"fn_name":"eq"},{"line":874,"address":[6680142],"length":1,"stats":{"Line":0},"fn_name":null},{"line":879,"address":[6680176],"length":1,"stats":{"Line":0},"fn_name":"partial_cmp"},{"line":880,"address":[6680190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":885,"address":[6680269,6680224],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":886,"address":[6680257,6680826,6680596,6680288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":887,"address":[6680541,6680335],"length":1,"stats":{"Line":0},"fn_name":null},{"line":889,"address":[6680771,6680601,6680294],"length":1,"stats":{"Line":0},"fn_name":null},{"line":895,"address":[6680896],"length":1,"stats":{"Line":8},"fn_name":"as_ref"},{"line":896,"address":[6680905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":902,"address":[6680944],"length":1,"stats":{"Line":9},"fn_name":"deref"},{"line":903,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":908,"address":[6680960],"length":1,"stats":{"Line":9},"fn_name":"deref_mut"},{"line":909,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":913,"address":[6680976],"length":1,"stats":{"Line":0},"fn_name":"position"},{"line":914,"address":[6681003],"length":1,"stats":{"Line":0},"fn_name":null},{"line":915,"address":[6681396,6681015],"length":1,"stats":{"Line":0},"fn_name":null},{"line":916,"address":[6681086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":917,"address":[6681278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":919,"address":[6681401,6681249,6681431,6681336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":920,"address":[6681344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":922,"address":[6681072],"length":1,"stats":{"Line":0},"fn_name":null},{"line":925,"address":[6681440,6681517],"length":1,"stats":{"Line":0},"fn_name":"escape_unicode"},{"line":926,"address":[6681631,6681578,6681466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":927,"address":[6681580,6681532],"length":1,"stats":{"Line":0},"fn_name":null},{"line":928,"address":[6681547],"length":1,"stats":{"Line":0},"fn_name":null},{"line":930,"address":[6681643],"length":1,"stats":{"Line":0},"fn_name":null},{"line":931,"address":[6681716,6682631,6681658,6681752,6681888],"length":1,"stats":{"Line":0},"fn_name":null},{"line":932,"address":[6681918,6682627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":933,"address":[6681971,6682012,6682537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":934,"address":[6682005],"length":1,"stats":{"Line":0},"fn_name":null},{"line":936,"address":[6681980,6682375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":937,"address":[6682119],"length":1,"stats":{"Line":0},"fn_name":null},{"line":939,"address":[6682017,6682385],"length":1,"stats":{"Line":0},"fn_name":null},{"line":942,"address":[6682547],"length":1,"stats":{"Line":0},"fn_name":null},{"line":944,"address":[6681957],"length":1,"stats":{"Line":0},"fn_name":null},{"line":950,"address":[6682720,6682773],"length":1,"stats":{"Line":0},"fn_name":"escape_bytes"},{"line":951,"address":[6682766],"length":1,"stats":{"Line":0},"fn_name":null},{"line":952,"address":[6682920,6682854,6682788,6682946,6683045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":953,"address":[6682943,6682960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":958,"address":[6683133,6683088],"length":1,"stats":{"Line":0},"fn_name":"escape_byte"},{"line":961,"address":[6683145,6683103],"length":1,"stats":{"Line":0},"fn_name":null},{"line":962,"address":[6683224,6683161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":965,"address":[6683296],"length":1,"stats":{"Line":8},"fn_name":"cls_char_count"},{"line":966,"address":[6683305],"length":1,"stats":{"Line":24},"fn_name":null},{"line":970,"address":[6683392],"length":1,"stats":{"Line":8},"fn_name":"cls_byte_count"},{"line":971,"address":[6683401],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1014,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1015,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1020,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1021,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1022,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1024,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1030,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1031,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1036,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1037,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":287,"coverable":457},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","mod.rs"],"content":"/*!\nDefines a high-level intermediate representation for regular expressions.\n*/\nuse std::char;\nuse std::cmp;\nuse std::error;\nuse std::fmt;\nuse std::result;\nuse std::u8;\n\nuse ast::Span;\nuse hir::interval::{Interval, IntervalSet, IntervalSetIter};\nuse unicode;\n\npub use hir::visitor::{visit, Visitor};\npub use unicode::CaseFoldError;\n\nmod interval;\npub mod literal;\npub mod print;\npub mod translate;\nmod visitor;\n\n/// An error that can occur while translating an `Ast` to a `Hir`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n\nimpl Error {\n    /// Return the type of this error.\n    pub fn kind(&self) -> &ErrorKind {\n        &self.kind\n    }\n\n    /// The original pattern string in which this error occurred.\n    ///\n    /// Every span reported by this error is reported in terms of this string.\n    pub fn pattern(&self) -> &str {\n        &self.pattern\n    }\n\n    /// Return the span at which this error occurred.\n    pub fn span(&self) -> &Span {\n        &self.span\n    }\n}\n\n/// The type of an error that occurred while building an `Hir`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// This error occurs when a Unicode feature is used when Unicode\n    /// support is disabled. For example `(?-u:\\pL)` would trigger this error.\n    UnicodeNotAllowed,\n    /// This error occurs when translating a pattern that could match a byte\n    /// sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.\n    InvalidUtf8,\n    /// This occurs when an unrecognized Unicode property name could not\n    /// be found.\n    UnicodePropertyNotFound,\n    /// This occurs when an unrecognized Unicode property value could not\n    /// be found.\n    UnicodePropertyValueNotFound,\n    /// This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n    /// `\\d`) could not be found. This can occur when the `unicode-perl`\n    /// crate feature is not enabled.\n    UnicodePerlClassNotFound,\n    /// This occurs when the Unicode simple case mapping tables are not\n    /// available, and the regular expression required Unicode aware case\n    /// insensitivity.\n    UnicodeCaseUnavailable,\n    /// This occurs when the translator attempts to construct a character class\n    /// that is empty.\n    ///\n    /// Note that this restriction in the translator may be removed in the\n    /// future.\n    EmptyClassNotAllowed,\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}\n\nimpl ErrorKind {\n    // TODO: Remove this method entirely on the next breaking semver release.\n    #[allow(deprecated)]\n    fn description(&self) -> &str {\n        use self::ErrorKind::*;\n        match *self {\n            UnicodeNotAllowed => \"Unicode not allowed here\",\n            InvalidUtf8 => \"pattern can match invalid UTF-8\",\n            UnicodePropertyNotFound => \"Unicode property not found\",\n            UnicodePropertyValueNotFound => \"Unicode property value not found\",\n            UnicodePerlClassNotFound => {\n                \"Unicode-aware Perl class not found \\\n                 (make sure the unicode-perl feature is enabled)\"\n            }\n            UnicodeCaseUnavailable => {\n                \"Unicode-aware case insensitivity matching is not available \\\n                 (make sure the unicode-case feature is enabled)\"\n            }\n            EmptyClassNotAllowed => \"empty character classes are not allowed\",\n            __Nonexhaustive => unreachable!(),\n        }\n    }\n}\n\nimpl error::Error for Error {\n    // TODO: Remove this method entirely on the next breaking semver release.\n    #[allow(deprecated)]\n    fn description(&self) -> &str {\n        self.kind.description()\n    }\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        ::error::Formatter::from(self).fmt(f)\n    }\n}\n\nimpl fmt::Display for ErrorKind {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // TODO: Remove this on the next breaking semver release.\n        #[allow(deprecated)]\n        f.write_str(self.description())\n    }\n}\n\n/// A high-level intermediate representation (HIR) for a regular expression.\n///\n/// The HIR of a regular expression represents an intermediate step between its\n/// abstract syntax (a structured description of the concrete syntax) and\n/// compiled byte codes. The purpose of HIR is to make regular expressions\n/// easier to analyze. In particular, the AST is much more complex than the\n/// HIR. For example, while an AST supports arbitrarily nested character\n/// classes, the HIR will flatten all nested classes into a single set. The HIR\n/// will also \"compile away\" every flag present in the concrete syntax. For\n/// example, users of HIR expressions never need to worry about case folding;\n/// it is handled automatically by the translator (e.g., by translating `(?i)A`\n/// to `[aA]`).\n///\n/// If the HIR was produced by a translator that disallows invalid UTF-8, then\n/// the HIR is guaranteed to match UTF-8 exclusively.\n///\n/// This type defines its own destructor that uses constant stack space and\n/// heap space proportional to the size of the HIR.\n///\n/// The specific type of an HIR expression can be accessed via its `kind`\n/// or `into_kind` methods. This extra level of indirection exists for two\n/// reasons:\n///\n/// 1. Construction of an HIR expression *must* use the constructor methods\n///    on this `Hir` type instead of building the `HirKind` values directly.\n///    This permits construction to enforce invariants like \"concatenations\n///    always consist of two or more sub-expressions.\"\n/// 2. Every HIR expression contains attributes that are defined inductively,\n///    and can be computed cheaply during the construction process. For\n///    example, one such attribute is whether the expression must match at the\n///    beginning of the text.\n///\n/// Also, an `Hir`'s `fmt::Display` implementation prints an HIR as a regular\n/// expression pattern string, and uses constant stack space and heap space\n/// proportional to the size of the `Hir`.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    info: HirInfo,\n}\n\n/// The kind of an arbitrary `Hir` expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A single literal character that matches exactly this character.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    Class(Class),\n    /// An anchor assertion. An anchor assertion match always has zero length.\n    Anchor(Anchor),\n    /// A word boundary assertion, which may or may not be Unicode aware. A\n    /// word boundary assertion match always has zero length.\n    WordBoundary(WordBoundary),\n    /// A repetition operation applied to a child expression.\n    Repetition(Repetition),\n    /// A possibly capturing group, which contains a child expression.\n    Group(Group),\n    /// A concatenation of expressions. A concatenation always has at least two\n    /// child expressions.\n    ///\n    /// A concatenation matches only if each of its child expression matches\n    /// one after the other.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions. An alternation always has at least two\n    /// child expressions.\n    ///\n    /// An alternation matches only if at least one of its child expression\n    /// matches. If multiple expressions match, then the leftmost is preferred.\n    Alternation(Vec<Hir>),\n}\n\nimpl Hir {\n    /// Returns a reference to the underlying HIR kind.\n    pub fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n\n    /// Consumes ownership of this HIR expression and returns its underlying\n    /// `HirKind`.\n    pub fn into_kind(mut self) -> HirKind {\n        use std::mem;\n        mem::replace(&mut self.kind, HirKind::Empty)\n    }\n\n    /// Returns an empty HIR expression.\n    ///\n    /// An empty HIR expression always matches, including the empty string.\n    pub fn empty() -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(true);\n        info.set_all_assertions(true);\n        info.set_anchored_start(false);\n        info.set_anchored_end(false);\n        info.set_line_anchored_start(false);\n        info.set_line_anchored_end(false);\n        info.set_any_anchored_start(false);\n        info.set_any_anchored_end(false);\n        info.set_match_empty(true);\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        Hir { kind: HirKind::Empty, info: info }\n    }\n\n    /// Creates a literal HIR expression.\n    ///\n    /// If the given literal has a `Byte` variant with an ASCII byte, then this\n    /// method panics. This enforces the invariant that `Byte` variants are\n    /// only used to express matching of invalid UTF-8.\n    pub fn literal(lit: Literal) -> Hir {\n        if let Literal::Byte(b) = lit {\n            assert!(b > 0x7F);\n        }\n\n        let mut info = HirInfo::new();\n        info.set_always_utf8(lit.is_unicode());\n        info.set_all_assertions(false);\n        info.set_anchored_start(false);\n        info.set_anchored_end(false);\n        info.set_line_anchored_start(false);\n        info.set_line_anchored_end(false);\n        info.set_any_anchored_start(false);\n        info.set_any_anchored_end(false);\n        info.set_match_empty(false);\n        info.set_literal(true);\n        info.set_alternation_literal(true);\n        Hir { kind: HirKind::Literal(lit), info: info }\n    }\n\n    /// Creates a class HIR expression.\n    pub fn class(class: Class) -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(class.is_always_utf8());\n        info.set_all_assertions(false);\n        info.set_anchored_start(false);\n        info.set_anchored_end(false);\n        info.set_line_anchored_start(false);\n        info.set_line_anchored_end(false);\n        info.set_any_anchored_start(false);\n        info.set_any_anchored_end(false);\n        info.set_match_empty(false);\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        Hir { kind: HirKind::Class(class), info: info }\n    }\n\n    /// Creates an anchor assertion HIR expression.\n    pub fn anchor(anchor: Anchor) -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(true);\n        info.set_all_assertions(true);\n        info.set_anchored_start(false);\n        info.set_anchored_end(false);\n        info.set_line_anchored_start(false);\n        info.set_line_anchored_end(false);\n        info.set_any_anchored_start(false);\n        info.set_any_anchored_end(false);\n        info.set_match_empty(true);\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        if let Anchor::StartText = anchor {\n            info.set_anchored_start(true);\n            info.set_line_anchored_start(true);\n            info.set_any_anchored_start(true);\n        }\n        if let Anchor::EndText = anchor {\n            info.set_anchored_end(true);\n            info.set_line_anchored_end(true);\n            info.set_any_anchored_end(true);\n        }\n        if let Anchor::StartLine = anchor {\n            info.set_line_anchored_start(true);\n        }\n        if let Anchor::EndLine = anchor {\n            info.set_line_anchored_end(true);\n        }\n        Hir { kind: HirKind::Anchor(anchor), info: info }\n    }\n\n    /// Creates a word boundary assertion HIR expression.\n    pub fn word_boundary(word_boundary: WordBoundary) -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(true);\n        info.set_all_assertions(true);\n        info.set_anchored_start(false);\n        info.set_anchored_end(false);\n        info.set_line_anchored_start(false);\n        info.set_line_anchored_end(false);\n        info.set_any_anchored_start(false);\n        info.set_any_anchored_end(false);\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        // A negated word boundary matches the empty string, but a normal\n        // word boundary does not!\n        info.set_match_empty(word_boundary.is_negated());\n        // Negated ASCII word boundaries can match invalid UTF-8.\n        if let WordBoundary::AsciiNegate = word_boundary {\n            info.set_always_utf8(false);\n        }\n        Hir { kind: HirKind::WordBoundary(word_boundary), info: info }\n    }\n\n    /// Creates a repetition HIR expression.\n    pub fn repetition(rep: Repetition) -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(rep.hir.is_always_utf8());\n        info.set_all_assertions(rep.hir.is_all_assertions());\n        // If this operator can match the empty string, then it can never\n        // be anchored.\n        info.set_anchored_start(\n            !rep.is_match_empty() && rep.hir.is_anchored_start(),\n        );\n        info.set_anchored_end(\n            !rep.is_match_empty() && rep.hir.is_anchored_end(),\n        );\n        info.set_line_anchored_start(\n            !rep.is_match_empty() && rep.hir.is_anchored_start(),\n        );\n        info.set_line_anchored_end(\n            !rep.is_match_empty() && rep.hir.is_anchored_end(),\n        );\n        info.set_any_anchored_start(rep.hir.is_any_anchored_start());\n        info.set_any_anchored_end(rep.hir.is_any_anchored_end());\n        info.set_match_empty(rep.is_match_empty() || rep.hir.is_match_empty());\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        Hir { kind: HirKind::Repetition(rep), info: info }\n    }\n\n    /// Creates a group HIR expression.\n    pub fn group(group: Group) -> Hir {\n        let mut info = HirInfo::new();\n        info.set_always_utf8(group.hir.is_always_utf8());\n        info.set_all_assertions(group.hir.is_all_assertions());\n        info.set_anchored_start(group.hir.is_anchored_start());\n        info.set_anchored_end(group.hir.is_anchored_end());\n        info.set_line_anchored_start(group.hir.is_line_anchored_start());\n        info.set_line_anchored_end(group.hir.is_line_anchored_end());\n        info.set_any_anchored_start(group.hir.is_any_anchored_start());\n        info.set_any_anchored_end(group.hir.is_any_anchored_end());\n        info.set_match_empty(group.hir.is_match_empty());\n        info.set_literal(false);\n        info.set_alternation_literal(false);\n        Hir { kind: HirKind::Group(group), info: info }\n    }\n\n    /// Returns the concatenation of the given expressions.\n    ///\n    /// This flattens the concatenation as appropriate.\n    pub fn concat(mut exprs: Vec<Hir>) -> Hir {\n        match exprs.len() {\n            0 => Hir::empty(),\n            1 => exprs.pop().unwrap(),\n            _ => {\n                let mut info = HirInfo::new();\n                info.set_always_utf8(true);\n                info.set_all_assertions(true);\n                info.set_any_anchored_start(false);\n                info.set_any_anchored_end(false);\n                info.set_match_empty(true);\n                info.set_literal(true);\n                info.set_alternation_literal(true);\n\n                // Some attributes require analyzing all sub-expressions.\n                for e in &exprs {\n                    let x = info.is_always_utf8() && e.is_always_utf8();\n                    info.set_always_utf8(x);\n\n                    let x = info.is_all_assertions() && e.is_all_assertions();\n                    info.set_all_assertions(x);\n\n                    let x = info.is_any_anchored_start()\n                        || e.is_any_anchored_start();\n                    info.set_any_anchored_start(x);\n\n                    let x =\n                        info.is_any_anchored_end() || e.is_any_anchored_end();\n                    info.set_any_anchored_end(x);\n\n                    let x = info.is_match_empty() && e.is_match_empty();\n                    info.set_match_empty(x);\n\n                    let x = info.is_literal() && e.is_literal();\n                    info.set_literal(x);\n\n                    let x = info.is_alternation_literal()\n                        && e.is_alternation_literal();\n                    info.set_alternation_literal(x);\n                }\n                // Anchored attributes require something slightly more\n                // sophisticated. Normally, WLOG, to determine whether an\n                // expression is anchored to the start, we'd only need to check\n                // the first expression of a concatenation. However,\n                // expressions like `$\\b^` are still anchored to the start,\n                // but the first expression in the concatenation *isn't*\n                // anchored to the start. So the \"first\" expression to look at\n                // is actually one that is either not an assertion or is\n                // specifically the StartText assertion.\n                info.set_anchored_start(\n                    exprs\n                        .iter()\n                        .take_while(|e| {\n                            e.is_anchored_start() || e.is_all_assertions()\n                        })\n                        .any(|e| e.is_anchored_start()),\n                );\n                // Similarly for the end anchor, but in reverse.\n                info.set_anchored_end(\n                    exprs\n                        .iter()\n                        .rev()\n                        .take_while(|e| {\n                            e.is_anchored_end() || e.is_all_assertions()\n                        })\n                        .any(|e| e.is_anchored_end()),\n                );\n                // Repeat the process for line anchors.\n                info.set_line_anchored_start(\n                    exprs\n                        .iter()\n                        .take_while(|e| {\n                            e.is_line_anchored_start() || e.is_all_assertions()\n                        })\n                        .any(|e| e.is_line_anchored_start()),\n                );\n                info.set_line_anchored_end(\n                    exprs\n                        .iter()\n                        .rev()\n                        .take_while(|e| {\n                            e.is_line_anchored_end() || e.is_all_assertions()\n                        })\n                        .any(|e| e.is_line_anchored_end()),\n                );\n                Hir { kind: HirKind::Concat(exprs), info: info }\n            }\n        }\n    }\n\n    /// Returns the alternation of the given expressions.\n    ///\n    /// This flattens the alternation as appropriate.\n    pub fn alternation(mut exprs: Vec<Hir>) -> Hir {\n        match exprs.len() {\n            0 => Hir::empty(),\n            1 => exprs.pop().unwrap(),\n            _ => {\n                let mut info = HirInfo::new();\n                info.set_always_utf8(true);\n                info.set_all_assertions(true);\n                info.set_anchored_start(true);\n                info.set_anchored_end(true);\n                info.set_line_anchored_start(true);\n                info.set_line_anchored_end(true);\n                info.set_any_anchored_start(false);\n                info.set_any_anchored_end(false);\n                info.set_match_empty(false);\n                info.set_literal(false);\n                info.set_alternation_literal(true);\n\n                // Some attributes require analyzing all sub-expressions.\n                for e in &exprs {\n                    let x = info.is_always_utf8() && e.is_always_utf8();\n                    info.set_always_utf8(x);\n\n                    let x = info.is_all_assertions() && e.is_all_assertions();\n                    info.set_all_assertions(x);\n\n                    let x = info.is_anchored_start() && e.is_anchored_start();\n                    info.set_anchored_start(x);\n\n                    let x = info.is_anchored_end() && e.is_anchored_end();\n                    info.set_anchored_end(x);\n\n                    let x = info.is_line_anchored_start()\n                        && e.is_line_anchored_start();\n                    info.set_line_anchored_start(x);\n\n                    let x = info.is_line_anchored_end()\n                        && e.is_line_anchored_end();\n                    info.set_line_anchored_end(x);\n\n                    let x = info.is_any_anchored_start()\n                        || e.is_any_anchored_start();\n                    info.set_any_anchored_start(x);\n\n                    let x =\n                        info.is_any_anchored_end() || e.is_any_anchored_end();\n                    info.set_any_anchored_end(x);\n\n                    let x = info.is_match_empty() || e.is_match_empty();\n                    info.set_match_empty(x);\n\n                    let x = info.is_alternation_literal() && e.is_literal();\n                    info.set_alternation_literal(x);\n                }\n                Hir { kind: HirKind::Alternation(exprs), info: info }\n            }\n        }\n    }\n\n    /// Build an HIR expression for `.`.\n    ///\n    /// A `.` expression matches any character except for `\\n`. To build an\n    /// expression that matches any character, including `\\n`, use the `any`\n    /// method.\n    ///\n    /// If `bytes` is `true`, then this assumes characters are limited to a\n    /// single byte.\n    pub fn dot(bytes: bool) -> Hir {\n        if bytes {\n            let mut cls = ClassBytes::empty();\n            cls.push(ClassBytesRange::new(b'\\0', b'\\x09'));\n            cls.push(ClassBytesRange::new(b'\\x0B', b'\\xFF'));\n            Hir::class(Class::Bytes(cls))\n        } else {\n            let mut cls = ClassUnicode::empty();\n            cls.push(ClassUnicodeRange::new('\\0', '\\x09'));\n            cls.push(ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'));\n            Hir::class(Class::Unicode(cls))\n        }\n    }\n\n    /// Build an HIR expression for `(?s).`.\n    ///\n    /// A `(?s).` expression matches any character, including `\\n`. To build an\n    /// expression that matches any character except for `\\n`, then use the\n    /// `dot` method.\n    ///\n    /// If `bytes` is `true`, then this assumes characters are limited to a\n    /// single byte.\n    pub fn any(bytes: bool) -> Hir {\n        if bytes {\n            let mut cls = ClassBytes::empty();\n            cls.push(ClassBytesRange::new(b'\\0', b'\\xFF'));\n            Hir::class(Class::Bytes(cls))\n        } else {\n            let mut cls = ClassUnicode::empty();\n            cls.push(ClassUnicodeRange::new('\\0', '\\u{10FFFF}'));\n            Hir::class(Class::Unicode(cls))\n        }\n    }\n\n    /// Return true if and only if this HIR will always match valid UTF-8.\n    ///\n    /// When this returns false, then it is possible for this HIR expression\n    /// to match invalid UTF-8.\n    pub fn is_always_utf8(&self) -> bool {\n        self.info.is_always_utf8()\n    }\n\n    /// Returns true if and only if this entire HIR expression is made up of\n    /// zero-width assertions.\n    ///\n    /// This includes expressions like `^$\\b\\A\\z` and even `((\\b)+())*^`, but\n    /// not `^a`.\n    pub fn is_all_assertions(&self) -> bool {\n        self.info.is_all_assertions()\n    }\n\n    /// Return true if and only if this HIR is required to match from the\n    /// beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,\n    /// `^foo|^bar` but not `^foo|bar`.\n    pub fn is_anchored_start(&self) -> bool {\n        self.info.is_anchored_start()\n    }\n\n    /// Return true if and only if this HIR is required to match at the end\n    /// of text. This includes expressions like `foo$`, `(foo|bar)$`,\n    /// `foo$|bar$` but not `foo$|bar`.\n    pub fn is_anchored_end(&self) -> bool {\n        self.info.is_anchored_end()\n    }\n\n    /// Return true if and only if this HIR is required to match from the\n    /// beginning of text or the beginning of a line. This includes expressions\n    /// like `^foo`, `(?m)^foo`, `^(foo|bar)`, `^(foo|bar)`, `(?m)^foo|^bar`\n    /// but not `^foo|bar` or `(?m)^foo|bar`.\n    ///\n    /// Note that if `is_anchored_start` is `true`, then\n    /// `is_line_anchored_start` will also be `true`. The reverse implication\n    /// is not true. For example, `(?m)^foo` is line anchored, but not\n    /// `is_anchored_start`.\n    pub fn is_line_anchored_start(&self) -> bool {\n        self.info.is_line_anchored_start()\n    }\n\n    /// Return true if and only if this HIR is required to match at the\n    /// end of text or the end of a line. This includes expressions like\n    /// `foo$`, `(?m)foo$`, `(foo|bar)$`, `(?m)(foo|bar)$`, `foo$|bar$`,\n    /// `(?m)(foo|bar)$`, but not `foo$|bar` or `(?m)foo$|bar`.\n    ///\n    /// Note that if `is_anchored_end` is `true`, then\n    /// `is_line_anchored_end` will also be `true`. The reverse implication\n    /// is not true. For example, `(?m)foo$` is line anchored, but not\n    /// `is_anchored_end`.\n    pub fn is_line_anchored_end(&self) -> bool {\n        self.info.is_line_anchored_end()\n    }\n\n    /// Return true if and only if this HIR contains any sub-expression that\n    /// is required to match at the beginning of text. Specifically, this\n    /// returns true if the `^` symbol (when multiline mode is disabled) or the\n    /// `\\A` escape appear anywhere in the regex.\n    pub fn is_any_anchored_start(&self) -> bool {\n        self.info.is_any_anchored_start()\n    }\n\n    /// Return true if and only if this HIR contains any sub-expression that is\n    /// required to match at the end of text. Specifically, this returns true\n    /// if the `$` symbol (when multiline mode is disabled) or the `\\z` escape\n    /// appear anywhere in the regex.\n    pub fn is_any_anchored_end(&self) -> bool {\n        self.info.is_any_anchored_end()\n    }\n\n    /// Return true if and only if the empty string is part of the language\n    /// matched by this regular expression.\n    ///\n    /// This includes `a*`, `a?b*`, `a{0}`, `()`, `()+`, `^$`, `a|b?`, `\\B`,\n    /// but not `a`, `a+` or `\\b`.\n    pub fn is_match_empty(&self) -> bool {\n        self.info.is_match_empty()\n    }\n\n    /// Return true if and only if this HIR is a simple literal. This is only\n    /// true when this HIR expression is either itself a `Literal` or a\n    /// concatenation of only `Literal`s.\n    ///\n    /// For example, `f` and `foo` are literals, but `f+`, `(foo)`, `foo()`,\n    /// `` are not (even though that contain sub-expressions that are literals).\n    pub fn is_literal(&self) -> bool {\n        self.info.is_literal()\n    }\n\n    /// Return true if and only if this HIR is either a simple literal or an\n    /// alternation of simple literals. This is only\n    /// true when this HIR expression is either itself a `Literal` or a\n    /// concatenation of only `Literal`s or an alternation of only `Literal`s.\n    ///\n    /// For example, `f`, `foo`, `a|b|c`, and `foo|bar|baz` are alternation\n    /// literals, but `f+`, `(foo)`, `foo()`, ``\n    /// are not (even though that contain sub-expressions that are literals).\n    pub fn is_alternation_literal(&self) -> bool {\n        self.info.is_alternation_literal()\n    }\n}\n\nimpl HirKind {\n    /// Return true if and only if this HIR is the empty regular expression.\n    ///\n    /// Note that this is not defined inductively. That is, it only tests if\n    /// this kind is the `Empty` variant. To get the inductive definition,\n    /// use the `is_match_empty` method on [`Hir`](struct.Hir.html).\n    pub fn is_empty(&self) -> bool {\n        match *self {\n            HirKind::Empty => true,\n            _ => false,\n        }\n    }\n\n    /// Returns true if and only if this kind has any (including possibly\n    /// empty) subexpressions.\n    pub fn has_subexprs(&self) -> bool {\n        match *self {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Anchor(_)\n            | HirKind::WordBoundary(_) => false,\n            HirKind::Group(_)\n            | HirKind::Repetition(_)\n            | HirKind::Concat(_)\n            | HirKind::Alternation(_) => true,\n        }\n    }\n}\n\n/// Print a display representation of this Hir.\n///\n/// The result of this is a valid regular expression pattern string.\n///\n/// This implementation uses constant stack space and heap space proportional\n/// to the size of the `Hir`.\nimpl fmt::Display for Hir {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        use hir::print::Printer;\n        Printer::new().print(self, f)\n    }\n}\n\n/// The high-level intermediate representation of a literal.\n///\n/// A literal corresponds to a single character, where a character is either\n/// defined by a Unicode scalar value or an arbitrary byte. Unicode characters\n/// are preferred whenever possible. In particular, a `Byte` variant is only\n/// ever produced when it could match invalid UTF-8.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Literal {\n    /// A single character represented by a Unicode scalar value.\n    Unicode(char),\n    /// A single character represented by an arbitrary byte.\n    Byte(u8),\n}\n\nimpl Literal {\n    /// Returns true if and only if this literal corresponds to a Unicode\n    /// scalar value.\n    pub fn is_unicode(&self) -> bool {\n        match *self {\n            Literal::Unicode(_) => true,\n            Literal::Byte(b) if b <= 0x7F => true,\n            Literal::Byte(_) => false,\n        }\n    }\n}\n\n/// The high-level intermediate representation of a character class.\n///\n/// A character class corresponds to a set of characters. A character is either\n/// defined by a Unicode scalar value or a byte. Unicode characters are used\n/// by default, while bytes are used when Unicode mode (via the `u` flag) is\n/// disabled.\n///\n/// A character class, regardless of its character type, is represented by a\n/// sequence of non-overlapping non-adjacent ranges of characters.\n///\n/// Note that unlike [`Literal`](enum.Literal.html), a `Bytes` variant may\n/// be produced even when it exclusively matches valid UTF-8. This is because\n/// a `Bytes` variant represents an intention by the author of the regular\n/// expression to disable Unicode mode, which in turn impacts the semantics of\n/// case insensitive matching. For example, `(?i)k` and `(?i-u)k` will not\n/// match the same set of strings.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Class {\n    /// A set of characters represented by Unicode scalar values.\n    Unicode(ClassUnicode),\n    /// A set of characters represented by arbitrary bytes (one byte per\n    /// character).\n    Bytes(ClassBytes),\n}\n\nimpl Class {\n    /// Apply Unicode simple case folding to this character class, in place.\n    /// The character class will be expanded to include all simple case folded\n    /// character variants.\n    ///\n    /// If this is a byte oriented character class, then this will be limited\n    /// to the ASCII ranges `A-Z` and `a-z`.\n    pub fn case_fold_simple(&mut self) {\n        match *self {\n            Class::Unicode(ref mut x) => x.case_fold_simple(),\n            Class::Bytes(ref mut x) => x.case_fold_simple(),\n        }\n    }\n\n    /// Negate this character class in place.\n    ///\n    /// After completion, this character class will contain precisely the\n    /// characters that weren't previously in the class.\n    pub fn negate(&mut self) {\n        match *self {\n            Class::Unicode(ref mut x) => x.negate(),\n            Class::Bytes(ref mut x) => x.negate(),\n        }\n    }\n\n    /// Returns true if and only if this character class will only ever match\n    /// valid UTF-8.\n    ///\n    /// A character class can match invalid UTF-8 only when the following\n    /// conditions are met:\n    ///\n    /// 1. The translator was configured to permit generating an expression\n    ///    that can match invalid UTF-8. (By default, this is disabled.)\n    /// 2. Unicode mode (via the `u` flag) was disabled either in the concrete\n    ///    syntax or in the parser builder. By default, Unicode mode is\n    ///    enabled.\n    pub fn is_always_utf8(&self) -> bool {\n        match *self {\n            Class::Unicode(_) => true,\n            Class::Bytes(ref x) => x.is_all_ascii(),\n        }\n    }\n}\n\n/// A set of characters represented by Unicode scalar values.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n\nimpl ClassUnicode {\n    /// Create a new class from a sequence of ranges.\n    ///\n    /// The given ranges do not need to be in any specific order, and ranges\n    /// may overlap.\n    pub fn new<I>(ranges: I) -> ClassUnicode\n    where\n        I: IntoIterator<Item = ClassUnicodeRange>,\n    {\n        ClassUnicode { set: IntervalSet::new(ranges) }\n    }\n\n    /// Create a new class with no ranges.\n    pub fn empty() -> ClassUnicode {\n        ClassUnicode::new(vec![])\n    }\n\n    /// Add a new range to this set.\n    pub fn push(&mut self, range: ClassUnicodeRange) {\n        self.set.push(range);\n    }\n\n    /// Return an iterator over all ranges in this class.\n    ///\n    /// The iterator yields ranges in ascending order.\n    pub fn iter(&self) -> ClassUnicodeIter {\n        ClassUnicodeIter(self.set.iter())\n    }\n\n    /// Return the underlying ranges as a slice.\n    pub fn ranges(&self) -> &[ClassUnicodeRange] {\n        self.set.intervals()\n    }\n\n    /// Expand this character class such that it contains all case folded\n    /// characters, according to Unicode's \"simple\" mapping. For example, if\n    /// this class consists of the range `a-z`, then applying case folding will\n    /// result in the class containing both the ranges `a-z` and `A-Z`.\n    ///\n    /// # Panics\n    ///\n    /// This routine panics when the case mapping data necessary for this\n    /// routine to complete is unavailable. This occurs when the `unicode-case`\n    /// feature is not enabled.\n    ///\n    /// Callers should prefer using `try_case_fold_simple` instead, which will\n    /// return an error instead of panicking.\n    pub fn case_fold_simple(&mut self) {\n        self.set\n            .case_fold_simple()\n            .expect(\"unicode-case feature must be enabled\");\n    }\n\n    /// Expand this character class such that it contains all case folded\n    /// characters, according to Unicode's \"simple\" mapping. For example, if\n    /// this class consists of the range `a-z`, then applying case folding will\n    /// result in the class containing both the ranges `a-z` and `A-Z`.\n    ///\n    /// # Error\n    ///\n    /// This routine returns an error when the case mapping data necessary\n    /// for this routine to complete is unavailable. This occurs when the\n    /// `unicode-case` feature is not enabled.\n    pub fn try_case_fold_simple(\n        &mut self,\n    ) -> result::Result<(), CaseFoldError> {\n        self.set.case_fold_simple()\n    }\n\n    /// Negate this character class.\n    ///\n    /// For all `c` where `c` is a Unicode scalar value, if `c` was in this\n    /// set, then it will not be in this set after negation.\n    pub fn negate(&mut self) {\n        self.set.negate();\n    }\n\n    /// Union this character class with the given character class, in place.\n    pub fn union(&mut self, other: &ClassUnicode) {\n        self.set.union(&other.set);\n    }\n\n    /// Intersect this character class with the given character class, in\n    /// place.\n    pub fn intersect(&mut self, other: &ClassUnicode) {\n        self.set.intersect(&other.set);\n    }\n\n    /// Subtract the given character class from this character class, in place.\n    pub fn difference(&mut self, other: &ClassUnicode) {\n        self.set.difference(&other.set);\n    }\n\n    /// Compute the symmetric difference of the given character classes, in\n    /// place.\n    ///\n    /// This computes the symmetric difference of two character classes. This\n    /// removes all elements in this class that are also in the given class,\n    /// but all adds all elements from the given class that aren't in this\n    /// class. That is, the class will contain all elements in either class,\n    /// but will not contain any elements that are in both classes.\n    pub fn symmetric_difference(&mut self, other: &ClassUnicode) {\n        self.set.symmetric_difference(&other.set);\n    }\n\n    /// Returns true if and only if this character class will either match\n    /// nothing or only ASCII bytes. Stated differently, this returns false\n    /// if and only if this class contains a non-ASCII codepoint.\n    pub fn is_all_ascii(&self) -> bool {\n        self.set.intervals().last().map_or(true, |r| r.end <= '\\x7F')\n    }\n}\n\n/// An iterator over all ranges in a Unicode character class.\n///\n/// The lifetime `'a` refers to the lifetime of the underlying class.\n#[derive(Debug)]\npub struct ClassUnicodeIter<'a>(IntervalSetIter<'a, ClassUnicodeRange>);\n\nimpl<'a> Iterator for ClassUnicodeIter<'a> {\n    type Item = &'a ClassUnicodeRange;\n\n    fn next(&mut self) -> Option<&'a ClassUnicodeRange> {\n        self.0.next()\n    }\n}\n\n/// A single range of characters represented by Unicode scalar values.\n///\n/// The range is closed. That is, the start and end of the range are included\n/// in the range.\n#[derive(Clone, Copy, Default, Eq, PartialEq, PartialOrd, Ord)]\npub struct ClassUnicodeRange {\n    start: char,\n    end: char,\n}\n\nimpl fmt::Debug for ClassUnicodeRange {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let start = if !self.start.is_whitespace() && !self.start.is_control()\n        {\n            self.start.to_string()\n        } else {\n            format!(\"0x{:X}\", self.start as u32)\n        };\n        let end = if !self.end.is_whitespace() && !self.end.is_control() {\n            self.end.to_string()\n        } else {\n            format!(\"0x{:X}\", self.end as u32)\n        };\n        f.debug_struct(\"ClassUnicodeRange\")\n            .field(\"start\", &start)\n            .field(\"end\", &end)\n            .finish()\n    }\n}\n\nimpl Interval for ClassUnicodeRange {\n    type Bound = char;\n\n    #[inline]\n    fn lower(&self) -> char {\n        self.start\n    }\n    #[inline]\n    fn upper(&self) -> char {\n        self.end\n    }\n    #[inline]\n    fn set_lower(&mut self, bound: char) {\n        self.start = bound;\n    }\n    #[inline]\n    fn set_upper(&mut self, bound: char) {\n        self.end = bound;\n    }\n\n    /// Apply simple case folding to this Unicode scalar value range.\n    ///\n    /// Additional ranges are appended to the given vector. Canonical ordering\n    /// is *not* maintained in the given vector.\n    fn case_fold_simple(\n        &self,\n        ranges: &mut Vec<ClassUnicodeRange>,\n    ) -> Result<(), unicode::CaseFoldError> {\n        if !unicode::contains_simple_case_mapping(self.start, self.end)? {\n            return Ok(());\n        }\n        let start = self.start as u32;\n        let end = (self.end as u32).saturating_add(1);\n        let mut next_simple_cp = None;\n        for cp in (start..end).filter_map(char::from_u32) {\n            if next_simple_cp.map_or(false, |next| cp < next) {\n                continue;\n            }\n            let it = match unicode::simple_fold(cp)? {\n                Ok(it) => it,\n                Err(next) => {\n                    next_simple_cp = next;\n                    continue;\n                }\n            };\n            for cp_folded in it {\n                ranges.push(ClassUnicodeRange::new(cp_folded, cp_folded));\n            }\n        }\n        Ok(())\n    }\n}\n\nimpl ClassUnicodeRange {\n    /// Create a new Unicode scalar value range for a character class.\n    ///\n    /// The returned range is always in a canonical form. That is, the range\n    /// returned always satisfies the invariant that `start <= end`.\n    pub fn new(start: char, end: char) -> ClassUnicodeRange {\n        ClassUnicodeRange::create(start, end)\n    }\n\n    /// Return the start of this range.\n    ///\n    /// The start of a range is always less than or equal to the end of the\n    /// range.\n    pub fn start(&self) -> char {\n        self.start\n    }\n\n    /// Return the end of this range.\n    ///\n    /// The end of a range is always greater than or equal to the start of the\n    /// range.\n    pub fn end(&self) -> char {\n        self.end\n    }\n}\n\n/// A set of characters represented by arbitrary bytes (where one byte\n/// corresponds to one character).\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n\nimpl ClassBytes {\n    /// Create a new class from a sequence of ranges.\n    ///\n    /// The given ranges do not need to be in any specific order, and ranges\n    /// may overlap.\n    pub fn new<I>(ranges: I) -> ClassBytes\n    where\n        I: IntoIterator<Item = ClassBytesRange>,\n    {\n        ClassBytes { set: IntervalSet::new(ranges) }\n    }\n\n    /// Create a new class with no ranges.\n    pub fn empty() -> ClassBytes {\n        ClassBytes::new(vec![])\n    }\n\n    /// Add a new range to this set.\n    pub fn push(&mut self, range: ClassBytesRange) {\n        self.set.push(range);\n    }\n\n    /// Return an iterator over all ranges in this class.\n    ///\n    /// The iterator yields ranges in ascending order.\n    pub fn iter(&self) -> ClassBytesIter {\n        ClassBytesIter(self.set.iter())\n    }\n\n    /// Return the underlying ranges as a slice.\n    pub fn ranges(&self) -> &[ClassBytesRange] {\n        self.set.intervals()\n    }\n\n    /// Expand this character class such that it contains all case folded\n    /// characters. For example, if this class consists of the range `a-z`,\n    /// then applying case folding will result in the class containing both the\n    /// ranges `a-z` and `A-Z`.\n    ///\n    /// Note that this only applies ASCII case folding, which is limited to the\n    /// characters `a-z` and `A-Z`.\n    pub fn case_fold_simple(&mut self) {\n        self.set.case_fold_simple().expect(\"ASCII case folding never fails\");\n    }\n\n    /// Negate this byte class.\n    ///\n    /// For all `b` where `b` is a any byte, if `b` was in this set, then it\n    /// will not be in this set after negation.\n    pub fn negate(&mut self) {\n        self.set.negate();\n    }\n\n    /// Union this byte class with the given byte class, in place.\n    pub fn union(&mut self, other: &ClassBytes) {\n        self.set.union(&other.set);\n    }\n\n    /// Intersect this byte class with the given byte class, in place.\n    pub fn intersect(&mut self, other: &ClassBytes) {\n        self.set.intersect(&other.set);\n    }\n\n    /// Subtract the given byte class from this byte class, in place.\n    pub fn difference(&mut self, other: &ClassBytes) {\n        self.set.difference(&other.set);\n    }\n\n    /// Compute the symmetric difference of the given byte classes, in place.\n    ///\n    /// This computes the symmetric difference of two byte classes. This\n    /// removes all elements in this class that are also in the given class,\n    /// but all adds all elements from the given class that aren't in this\n    /// class. That is, the class will contain all elements in either class,\n    /// but will not contain any elements that are in both classes.\n    pub fn symmetric_difference(&mut self, other: &ClassBytes) {\n        self.set.symmetric_difference(&other.set);\n    }\n\n    /// Returns true if and only if this character class will either match\n    /// nothing or only ASCII bytes. Stated differently, this returns false\n    /// if and only if this class contains a non-ASCII byte.\n    pub fn is_all_ascii(&self) -> bool {\n        self.set.intervals().last().map_or(true, |r| r.end <= 0x7F)\n    }\n}\n\n/// An iterator over all ranges in a byte character class.\n///\n/// The lifetime `'a` refers to the lifetime of the underlying class.\n#[derive(Debug)]\npub struct ClassBytesIter<'a>(IntervalSetIter<'a, ClassBytesRange>);\n\nimpl<'a> Iterator for ClassBytesIter<'a> {\n    type Item = &'a ClassBytesRange;\n\n    fn next(&mut self) -> Option<&'a ClassBytesRange> {\n        self.0.next()\n    }\n}\n\n/// A single range of characters represented by arbitrary bytes.\n///\n/// The range is closed. That is, the start and end of the range are included\n/// in the range.\n#[derive(Clone, Copy, Default, Eq, PartialEq, PartialOrd, Ord)]\npub struct ClassBytesRange {\n    start: u8,\n    end: u8,\n}\n\nimpl Interval for ClassBytesRange {\n    type Bound = u8;\n\n    #[inline]\n    fn lower(&self) -> u8 {\n        self.start\n    }\n    #[inline]\n    fn upper(&self) -> u8 {\n        self.end\n    }\n    #[inline]\n    fn set_lower(&mut self, bound: u8) {\n        self.start = bound;\n    }\n    #[inline]\n    fn set_upper(&mut self, bound: u8) {\n        self.end = bound;\n    }\n\n    /// Apply simple case folding to this byte range. Only ASCII case mappings\n    /// (for a-z) are applied.\n    ///\n    /// Additional ranges are appended to the given vector. Canonical ordering\n    /// is *not* maintained in the given vector.\n    fn case_fold_simple(\n        &self,\n        ranges: &mut Vec<ClassBytesRange>,\n    ) -> Result<(), unicode::CaseFoldError> {\n        if !ClassBytesRange::new(b'a', b'z').is_intersection_empty(self) {\n            let lower = cmp::max(self.start, b'a');\n            let upper = cmp::min(self.end, b'z');\n            ranges.push(ClassBytesRange::new(lower - 32, upper - 32));\n        }\n        if !ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self) {\n            let lower = cmp::max(self.start, b'A');\n            let upper = cmp::min(self.end, b'Z');\n            ranges.push(ClassBytesRange::new(lower + 32, upper + 32));\n        }\n        Ok(())\n    }\n}\n\nimpl ClassBytesRange {\n    /// Create a new byte range for a character class.\n    ///\n    /// The returned range is always in a canonical form. That is, the range\n    /// returned always satisfies the invariant that `start <= end`.\n    pub fn new(start: u8, end: u8) -> ClassBytesRange {\n        ClassBytesRange::create(start, end)\n    }\n\n    /// Return the start of this range.\n    ///\n    /// The start of a range is always less than or equal to the end of the\n    /// range.\n    pub fn start(&self) -> u8 {\n        self.start\n    }\n\n    /// Return the end of this range.\n    ///\n    /// The end of a range is always greater than or equal to the start of the\n    /// range.\n    pub fn end(&self) -> u8 {\n        self.end\n    }\n}\n\nimpl fmt::Debug for ClassBytesRange {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let mut debug = f.debug_struct(\"ClassBytesRange\");\n        if self.start <= 0x7F {\n            debug.field(\"start\", &(self.start as char));\n        } else {\n            debug.field(\"start\", &self.start);\n        }\n        if self.end <= 0x7F {\n            debug.field(\"end\", &(self.end as char));\n        } else {\n            debug.field(\"end\", &self.end);\n        }\n        debug.finish()\n    }\n}\n\n/// The high-level intermediate representation for an anchor assertion.\n///\n/// A matching anchor assertion is always zero-length.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Anchor {\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLine,\n    /// Match the end of a line or the end of text. Specifically,\n    /// this matches at the end position of the input, or at the position\n    /// immediately preceding a `\\n` character.\n    EndLine,\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    StartText,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    EndText,\n}\n\n/// The high-level intermediate representation for a word-boundary assertion.\n///\n/// A matching word boundary assertion is always zero-length.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum WordBoundary {\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    Unicode,\n    /// Match a Unicode-aware negation of a word boundary.\n    UnicodeNegate,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    Ascii,\n    /// Match an ASCII-only negation of a word boundary.\n    AsciiNegate,\n}\n\nimpl WordBoundary {\n    /// Returns true if and only if this word boundary assertion is negated.\n    pub fn is_negated(&self) -> bool {\n        match *self {\n            WordBoundary::Unicode | WordBoundary::Ascii => false,\n            WordBoundary::UnicodeNegate | WordBoundary::AsciiNegate => true,\n        }\n    }\n}\n\n/// The high-level intermediate representation for a group.\n///\n/// This represents one of three possible group types:\n///\n/// 1. A non-capturing group (e.g., `(?:expr)`).\n/// 2. A capturing group (e.g., `(expr)`).\n/// 3. A named capturing group (e.g., `(?P<name>expr)`).\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Group {\n    /// The kind of this group. If it is a capturing group, then the kind\n    /// contains the capture group index (and the name, if it is a named\n    /// group).\n    pub kind: GroupKind,\n    /// The expression inside the capturing group, which may be empty.\n    pub hir: Box<Hir>,\n}\n\n/// The kind of group.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum GroupKind {\n    /// A normal unnamed capturing group.\n    ///\n    /// The value is the capture index of the group.\n    CaptureIndex(u32),\n    /// A named capturing group.\n    CaptureName {\n        /// The name of the group.\n        name: String,\n        /// The capture index of the group.\n        index: u32,\n    },\n    /// A non-capturing group.\n    NonCapturing,\n}\n\n/// The high-level intermediate representation of a repetition operator.\n///\n/// A repetition operator permits the repetition of an arbitrary\n/// sub-expression.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The kind of this repetition operator.\n    pub kind: RepetitionKind,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub hir: Box<Hir>,\n}\n\nimpl Repetition {\n    /// Returns true if and only if this repetition operator makes it possible\n    /// to match the empty string.\n    ///\n    /// Note that this is not defined inductively. For example, while `a*`\n    /// will report `true`, `()+` will not, even though `()` matches the empty\n    /// string and one or more occurrences of something that matches the empty\n    /// string will always match the empty string. In order to get the\n    /// inductive definition, see the corresponding method on\n    /// [`Hir`](struct.Hir.html).\n    pub fn is_match_empty(&self) -> bool {\n        match self.kind {\n            RepetitionKind::ZeroOrOne => true,\n            RepetitionKind::ZeroOrMore => true,\n            RepetitionKind::OneOrMore => false,\n            RepetitionKind::Range(RepetitionRange::Exactly(m)) => m == 0,\n            RepetitionKind::Range(RepetitionRange::AtLeast(m)) => m == 0,\n            RepetitionKind::Range(RepetitionRange::Bounded(m, _)) => m == 0,\n        }\n    }\n}\n\n/// The kind of a repetition operator.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum RepetitionKind {\n    /// Matches a sub-expression zero or one times.\n    ZeroOrOne,\n    /// Matches a sub-expression zero or more times.\n    ZeroOrMore,\n    /// Matches a sub-expression one or more times.\n    OneOrMore,\n    /// Matches a sub-expression within a bounded range of times.\n    Range(RepetitionRange),\n}\n\n/// The kind of a counted repetition operator.\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum RepetitionRange {\n    /// Matches a sub-expression exactly this many times.\n    Exactly(u32),\n    /// Matches a sub-expression at least this many times.\n    AtLeast(u32),\n    /// Matches a sub-expression at least `m` times and at most `n` times.\n    Bounded(u32, u32),\n}\n\n/// A custom `Drop` impl is used for `HirKind` such that it uses constant stack\n/// space but heap space proportional to the depth of the total `Hir`.\nimpl Drop for Hir {\n    fn drop(&mut self) {\n        use std::mem;\n\n        match *self.kind() {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Anchor(_)\n            | HirKind::WordBoundary(_) => return,\n            HirKind::Group(ref x) if !x.hir.kind.has_subexprs() => return,\n            HirKind::Repetition(ref x) if !x.hir.kind.has_subexprs() => return,\n            HirKind::Concat(ref x) if x.is_empty() => return,\n            HirKind::Alternation(ref x) if x.is_empty() => return,\n            _ => {}\n        }\n\n        let mut stack = vec![mem::replace(self, Hir::empty())];\n        while let Some(mut expr) = stack.pop() {\n            match expr.kind {\n                HirKind::Empty\n                | HirKind::Literal(_)\n                | HirKind::Class(_)\n                | HirKind::Anchor(_)\n                | HirKind::WordBoundary(_) => {}\n                HirKind::Group(ref mut x) => {\n                    stack.push(mem::replace(&mut x.hir, Hir::empty()));\n                }\n                HirKind::Repetition(ref mut x) => {\n                    stack.push(mem::replace(&mut x.hir, Hir::empty()));\n                }\n                HirKind::Concat(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n                HirKind::Alternation(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n            }\n        }\n    }\n}\n\n/// A type that documents various attributes of an HIR expression.\n///\n/// These attributes are typically defined inductively on the HIR.\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct HirInfo {\n    /// Represent yes/no questions by a bitfield to conserve space, since\n    /// this is included in every HIR expression.\n    ///\n    /// If more attributes need to be added, it is OK to increase the size of\n    /// this as appropriate.\n    bools: u16,\n}\n\n// A simple macro for defining bitfield accessors/mutators.\nmacro_rules! define_bool {\n    ($bit:expr, $is_fn_name:ident, $set_fn_name:ident) => {\n        fn $is_fn_name(&self) -> bool {\n            self.bools & (0b1 << $bit) > 0\n        }\n\n        fn $set_fn_name(&mut self, yes: bool) {\n            if yes {\n                self.bools |= 1 << $bit;\n            } else {\n                self.bools &= !(1 << $bit);\n            }\n        }\n    };\n}\n\nimpl HirInfo {\n    fn new() -> HirInfo {\n        HirInfo { bools: 0 }\n    }\n\n    define_bool!(0, is_always_utf8, set_always_utf8);\n    define_bool!(1, is_all_assertions, set_all_assertions);\n    define_bool!(2, is_anchored_start, set_anchored_start);\n    define_bool!(3, is_anchored_end, set_anchored_end);\n    define_bool!(4, is_line_anchored_start, set_line_anchored_start);\n    define_bool!(5, is_line_anchored_end, set_line_anchored_end);\n    define_bool!(6, is_any_anchored_start, set_any_anchored_start);\n    define_bool!(7, is_any_anchored_end, set_any_anchored_end);\n    define_bool!(8, is_match_empty, set_match_empty);\n    define_bool!(9, is_literal, set_literal);\n    define_bool!(10, is_alternation_literal, set_alternation_literal);\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    fn uclass(ranges: &[(char, char)]) -> ClassUnicode {\n        let ranges: Vec<ClassUnicodeRange> = ranges\n            .iter()\n            .map(|&(s, e)| ClassUnicodeRange::new(s, e))\n            .collect();\n        ClassUnicode::new(ranges)\n    }\n\n    fn bclass(ranges: &[(u8, u8)]) -> ClassBytes {\n        let ranges: Vec<ClassBytesRange> =\n            ranges.iter().map(|&(s, e)| ClassBytesRange::new(s, e)).collect();\n        ClassBytes::new(ranges)\n    }\n\n    fn uranges(cls: &ClassUnicode) -> Vec<(char, char)> {\n        cls.iter().map(|x| (x.start(), x.end())).collect()\n    }\n\n    #[cfg(feature = \"unicode-case\")]\n    fn ucasefold(cls: &ClassUnicode) -> ClassUnicode {\n        let mut cls_ = cls.clone();\n        cls_.case_fold_simple();\n        cls_\n    }\n\n    fn uunion(cls1: &ClassUnicode, cls2: &ClassUnicode) -> ClassUnicode {\n        let mut cls_ = cls1.clone();\n        cls_.union(cls2);\n        cls_\n    }\n\n    fn uintersect(cls1: &ClassUnicode, cls2: &ClassUnicode) -> ClassUnicode {\n        let mut cls_ = cls1.clone();\n        cls_.intersect(cls2);\n        cls_\n    }\n\n    fn udifference(cls1: &ClassUnicode, cls2: &ClassUnicode) -> ClassUnicode {\n        let mut cls_ = cls1.clone();\n        cls_.difference(cls2);\n        cls_\n    }\n\n    fn usymdifference(\n        cls1: &ClassUnicode,\n        cls2: &ClassUnicode,\n    ) -> ClassUnicode {\n        let mut cls_ = cls1.clone();\n        cls_.symmetric_difference(cls2);\n        cls_\n    }\n\n    fn unegate(cls: &ClassUnicode) -> ClassUnicode {\n        let mut cls_ = cls.clone();\n        cls_.negate();\n        cls_\n    }\n\n    fn branges(cls: &ClassBytes) -> Vec<(u8, u8)> {\n        cls.iter().map(|x| (x.start(), x.end())).collect()\n    }\n\n    fn bcasefold(cls: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls.clone();\n        cls_.case_fold_simple();\n        cls_\n    }\n\n    fn bunion(cls1: &ClassBytes, cls2: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls1.clone();\n        cls_.union(cls2);\n        cls_\n    }\n\n    fn bintersect(cls1: &ClassBytes, cls2: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls1.clone();\n        cls_.intersect(cls2);\n        cls_\n    }\n\n    fn bdifference(cls1: &ClassBytes, cls2: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls1.clone();\n        cls_.difference(cls2);\n        cls_\n    }\n\n    fn bsymdifference(cls1: &ClassBytes, cls2: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls1.clone();\n        cls_.symmetric_difference(cls2);\n        cls_\n    }\n\n    fn bnegate(cls: &ClassBytes) -> ClassBytes {\n        let mut cls_ = cls.clone();\n        cls_.negate();\n        cls_\n    }\n\n    #[test]\n    fn class_range_canonical_unicode() {\n        let range = ClassUnicodeRange::new('\\u{00FF}', '\\0');\n        assert_eq!('\\0', range.start());\n        assert_eq!('\\u{00FF}', range.end());\n    }\n\n    #[test]\n    fn class_range_canonical_bytes() {\n        let range = ClassBytesRange::new(b'\\xFF', b'\\0');\n        assert_eq!(b'\\0', range.start());\n        assert_eq!(b'\\xFF', range.end());\n    }\n\n    #[test]\n    fn class_canonicalize_unicode() {\n        let cls = uclass(&[('a', 'c'), ('x', 'z')]);\n        let expected = vec![('a', 'c'), ('x', 'z')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[('x', 'z'), ('a', 'c')]);\n        let expected = vec![('a', 'c'), ('x', 'z')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[('x', 'z'), ('w', 'y')]);\n        let expected = vec![('w', 'z')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[\n            ('c', 'f'),\n            ('a', 'g'),\n            ('d', 'j'),\n            ('a', 'c'),\n            ('m', 'p'),\n            ('l', 's'),\n        ]);\n        let expected = vec![('a', 'j'), ('l', 's')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[('x', 'z'), ('u', 'w')]);\n        let expected = vec![('u', 'z')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[('\\x00', '\\u{10FFFF}'), ('\\x00', '\\u{10FFFF}')]);\n        let expected = vec![('\\x00', '\\u{10FFFF}')];\n        assert_eq!(expected, uranges(&cls));\n\n        let cls = uclass(&[('a', 'a'), ('b', 'b')]);\n        let expected = vec![('a', 'b')];\n        assert_eq!(expected, uranges(&cls));\n    }\n\n    #[test]\n    fn class_canonicalize_bytes() {\n        let cls = bclass(&[(b'a', b'c'), (b'x', b'z')]);\n        let expected = vec![(b'a', b'c'), (b'x', b'z')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[(b'x', b'z'), (b'a', b'c')]);\n        let expected = vec![(b'a', b'c'), (b'x', b'z')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[(b'x', b'z'), (b'w', b'y')]);\n        let expected = vec![(b'w', b'z')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[\n            (b'c', b'f'),\n            (b'a', b'g'),\n            (b'd', b'j'),\n            (b'a', b'c'),\n            (b'm', b'p'),\n            (b'l', b's'),\n        ]);\n        let expected = vec![(b'a', b'j'), (b'l', b's')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[(b'x', b'z'), (b'u', b'w')]);\n        let expected = vec![(b'u', b'z')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[(b'\\x00', b'\\xFF'), (b'\\x00', b'\\xFF')]);\n        let expected = vec![(b'\\x00', b'\\xFF')];\n        assert_eq!(expected, branges(&cls));\n\n        let cls = bclass(&[(b'a', b'a'), (b'b', b'b')]);\n        let expected = vec![(b'a', b'b')];\n        assert_eq!(expected, branges(&cls));\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn class_case_fold_unicode() {\n        let cls = uclass(&[\n            ('C', 'F'),\n            ('A', 'G'),\n            ('D', 'J'),\n            ('A', 'C'),\n            ('M', 'P'),\n            ('L', 'S'),\n            ('c', 'f'),\n        ]);\n        let expected = uclass(&[\n            ('A', 'J'),\n            ('L', 'S'),\n            ('a', 'j'),\n            ('l', 's'),\n            ('\\u{17F}', '\\u{17F}'),\n        ]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('A', 'Z')]);\n        let expected = uclass(&[\n            ('A', 'Z'),\n            ('a', 'z'),\n            ('\\u{17F}', '\\u{17F}'),\n            ('\\u{212A}', '\\u{212A}'),\n        ]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('a', 'z')]);\n        let expected = uclass(&[\n            ('A', 'Z'),\n            ('a', 'z'),\n            ('\\u{17F}', '\\u{17F}'),\n            ('\\u{212A}', '\\u{212A}'),\n        ]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('A', 'A'), ('_', '_')]);\n        let expected = uclass(&[('A', 'A'), ('_', '_'), ('a', 'a')]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('A', 'A'), ('=', '=')]);\n        let expected = uclass(&[('=', '='), ('A', 'A'), ('a', 'a')]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('\\x00', '\\x10')]);\n        assert_eq!(cls, ucasefold(&cls));\n\n        let cls = uclass(&[('k', 'k')]);\n        let expected =\n            uclass(&[('K', 'K'), ('k', 'k'), ('\\u{212A}', '\\u{212A}')]);\n        assert_eq!(expected, ucasefold(&cls));\n\n        let cls = uclass(&[('@', '@')]);\n        assert_eq!(cls, ucasefold(&cls));\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn class_case_fold_unicode_disabled() {\n        let mut cls = uclass(&[\n            ('C', 'F'),\n            ('A', 'G'),\n            ('D', 'J'),\n            ('A', 'C'),\n            ('M', 'P'),\n            ('L', 'S'),\n            ('c', 'f'),\n        ]);\n        assert!(cls.try_case_fold_simple().is_err());\n    }\n\n    #[test]\n    #[should_panic]\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn class_case_fold_unicode_disabled_panics() {\n        let mut cls = uclass(&[\n            ('C', 'F'),\n            ('A', 'G'),\n            ('D', 'J'),\n            ('A', 'C'),\n            ('M', 'P'),\n            ('L', 'S'),\n            ('c', 'f'),\n        ]);\n        cls.case_fold_simple();\n    }\n\n    #[test]\n    fn class_case_fold_bytes() {\n        let cls = bclass(&[\n            (b'C', b'F'),\n            (b'A', b'G'),\n            (b'D', b'J'),\n            (b'A', b'C'),\n            (b'M', b'P'),\n            (b'L', b'S'),\n            (b'c', b'f'),\n        ]);\n        let expected =\n            bclass(&[(b'A', b'J'), (b'L', b'S'), (b'a', b'j'), (b'l', b's')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'A', b'Z')]);\n        let expected = bclass(&[(b'A', b'Z'), (b'a', b'z')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'a', b'z')]);\n        let expected = bclass(&[(b'A', b'Z'), (b'a', b'z')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'A', b'A'), (b'_', b'_')]);\n        let expected = bclass(&[(b'A', b'A'), (b'_', b'_'), (b'a', b'a')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'A', b'A'), (b'=', b'=')]);\n        let expected = bclass(&[(b'=', b'='), (b'A', b'A'), (b'a', b'a')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'\\x00', b'\\x10')]);\n        assert_eq!(cls, bcasefold(&cls));\n\n        let cls = bclass(&[(b'k', b'k')]);\n        let expected = bclass(&[(b'K', b'K'), (b'k', b'k')]);\n        assert_eq!(expected, bcasefold(&cls));\n\n        let cls = bclass(&[(b'@', b'@')]);\n        assert_eq!(cls, bcasefold(&cls));\n    }\n\n    #[test]\n    fn class_negate_unicode() {\n        let cls = uclass(&[('a', 'a')]);\n        let expected = uclass(&[('\\x00', '\\x60'), ('\\x62', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('a', 'a'), ('b', 'b')]);\n        let expected = uclass(&[('\\x00', '\\x60'), ('\\x63', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('a', 'c'), ('x', 'z')]);\n        let expected = uclass(&[\n            ('\\x00', '\\x60'),\n            ('\\x64', '\\x77'),\n            ('\\x7B', '\\u{10FFFF}'),\n        ]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\x00', 'a')]);\n        let expected = uclass(&[('\\x62', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('a', '\\u{10FFFF}')]);\n        let expected = uclass(&[('\\x00', '\\x60')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\x00', '\\u{10FFFF}')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[]);\n        let expected = uclass(&[('\\x00', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls =\n            uclass(&[('\\x00', '\\u{10FFFD}'), ('\\u{10FFFF}', '\\u{10FFFF}')]);\n        let expected = uclass(&[('\\u{10FFFE}', '\\u{10FFFE}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\x00', '\\u{D7FF}')]);\n        let expected = uclass(&[('\\u{E000}', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\x00', '\\u{D7FE}')]);\n        let expected = uclass(&[('\\u{D7FF}', '\\u{10FFFF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\u{E000}', '\\u{10FFFF}')]);\n        let expected = uclass(&[('\\x00', '\\u{D7FF}')]);\n        assert_eq!(expected, unegate(&cls));\n\n        let cls = uclass(&[('\\u{E001}', '\\u{10FFFF}')]);\n        let expected = uclass(&[('\\x00', '\\u{E000}')]);\n        assert_eq!(expected, unegate(&cls));\n    }\n\n    #[test]\n    fn class_negate_bytes() {\n        let cls = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[(b'\\x00', b'\\x60'), (b'\\x62', b'\\xFF')]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'a', b'a'), (b'b', b'b')]);\n        let expected = bclass(&[(b'\\x00', b'\\x60'), (b'\\x63', b'\\xFF')]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'a', b'c'), (b'x', b'z')]);\n        let expected = bclass(&[\n            (b'\\x00', b'\\x60'),\n            (b'\\x64', b'\\x77'),\n            (b'\\x7B', b'\\xFF'),\n        ]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'\\x00', b'a')]);\n        let expected = bclass(&[(b'\\x62', b'\\xFF')]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'a', b'\\xFF')]);\n        let expected = bclass(&[(b'\\x00', b'\\x60')]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'\\x00', b'\\xFF')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[]);\n        let expected = bclass(&[(b'\\x00', b'\\xFF')]);\n        assert_eq!(expected, bnegate(&cls));\n\n        let cls = bclass(&[(b'\\x00', b'\\xFD'), (b'\\xFF', b'\\xFF')]);\n        let expected = bclass(&[(b'\\xFE', b'\\xFE')]);\n        assert_eq!(expected, bnegate(&cls));\n    }\n\n    #[test]\n    fn class_union_unicode() {\n        let cls1 = uclass(&[('a', 'g'), ('m', 't'), ('A', 'C')]);\n        let cls2 = uclass(&[('a', 'z')]);\n        let expected = uclass(&[('a', 'z'), ('A', 'C')]);\n        assert_eq!(expected, uunion(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_union_bytes() {\n        let cls1 = bclass(&[(b'a', b'g'), (b'm', b't'), (b'A', b'C')]);\n        let cls2 = bclass(&[(b'a', b'z')]);\n        let expected = bclass(&[(b'a', b'z'), (b'A', b'C')]);\n        assert_eq!(expected, bunion(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_intersect_unicode() {\n        let cls1 = uclass(&[]);\n        let cls2 = uclass(&[('a', 'a')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'a')]);\n        let cls2 = uclass(&[('a', 'a')]);\n        let expected = uclass(&[('a', 'a')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'a')]);\n        let cls2 = uclass(&[('b', 'b')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'a')]);\n        let cls2 = uclass(&[('a', 'c')]);\n        let expected = uclass(&[('a', 'a')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b')]);\n        let cls2 = uclass(&[('a', 'c')]);\n        let expected = uclass(&[('a', 'b')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b')]);\n        let cls2 = uclass(&[('b', 'c')]);\n        let expected = uclass(&[('b', 'b')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b')]);\n        let cls2 = uclass(&[('c', 'd')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('b', 'c')]);\n        let cls2 = uclass(&[('a', 'd')]);\n        let expected = uclass(&[('b', 'c')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        let cls2 = uclass(&[('a', 'h')]);\n        let expected = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        let cls2 = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        let expected = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('g', 'h')]);\n        let cls2 = uclass(&[('d', 'e'), ('k', 'l')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('d', 'e'), ('g', 'h')]);\n        let cls2 = uclass(&[('h', 'h')]);\n        let expected = uclass(&[('h', 'h')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('e', 'f'), ('i', 'j')]);\n        let cls2 = uclass(&[('c', 'd'), ('g', 'h'), ('k', 'l')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'b'), ('c', 'd'), ('e', 'f')]);\n        let cls2 = uclass(&[('b', 'c'), ('d', 'e'), ('f', 'g')]);\n        let expected = uclass(&[('b', 'f')]);\n        assert_eq!(expected, uintersect(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_intersect_bytes() {\n        let cls1 = bclass(&[]);\n        let cls2 = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'a')]);\n        let cls2 = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[(b'a', b'a')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'a')]);\n        let cls2 = bclass(&[(b'b', b'b')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'a')]);\n        let cls2 = bclass(&[(b'a', b'c')]);\n        let expected = bclass(&[(b'a', b'a')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b')]);\n        let cls2 = bclass(&[(b'a', b'c')]);\n        let expected = bclass(&[(b'a', b'b')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b')]);\n        let cls2 = bclass(&[(b'b', b'c')]);\n        let expected = bclass(&[(b'b', b'b')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b')]);\n        let cls2 = bclass(&[(b'c', b'd')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'b', b'c')]);\n        let cls2 = bclass(&[(b'a', b'd')]);\n        let expected = bclass(&[(b'b', b'c')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        let cls2 = bclass(&[(b'a', b'h')]);\n        let expected = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        let cls2 = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        let expected = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'g', b'h')]);\n        let cls2 = bclass(&[(b'd', b'e'), (b'k', b'l')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'd', b'e'), (b'g', b'h')]);\n        let cls2 = bclass(&[(b'h', b'h')]);\n        let expected = bclass(&[(b'h', b'h')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'e', b'f'), (b'i', b'j')]);\n        let cls2 = bclass(&[(b'c', b'd'), (b'g', b'h'), (b'k', b'l')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'b'), (b'c', b'd'), (b'e', b'f')]);\n        let cls2 = bclass(&[(b'b', b'c'), (b'd', b'e'), (b'f', b'g')]);\n        let expected = bclass(&[(b'b', b'f')]);\n        assert_eq!(expected, bintersect(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_difference_unicode() {\n        let cls1 = uclass(&[('a', 'a')]);\n        let cls2 = uclass(&[('a', 'a')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'a')]);\n        let cls2 = uclass(&[]);\n        let expected = uclass(&[('a', 'a')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[]);\n        let cls2 = uclass(&[('a', 'a')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'z')]);\n        let cls2 = uclass(&[('a', 'a')]);\n        let expected = uclass(&[('b', 'z')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'z')]);\n        let cls2 = uclass(&[('z', 'z')]);\n        let expected = uclass(&[('a', 'y')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'z')]);\n        let cls2 = uclass(&[('m', 'm')]);\n        let expected = uclass(&[('a', 'l'), ('n', 'z')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'c'), ('g', 'i'), ('r', 't')]);\n        let cls2 = uclass(&[('a', 'z')]);\n        let expected = uclass(&[]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'c'), ('g', 'i'), ('r', 't')]);\n        let cls2 = uclass(&[('d', 'v')]);\n        let expected = uclass(&[('a', 'c')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'c'), ('g', 'i'), ('r', 't')]);\n        let cls2 = uclass(&[('b', 'g'), ('s', 'u')]);\n        let expected = uclass(&[('a', 'a'), ('h', 'i'), ('r', 'r')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'c'), ('g', 'i'), ('r', 't')]);\n        let cls2 = uclass(&[('b', 'd'), ('e', 'g'), ('s', 'u')]);\n        let expected = uclass(&[('a', 'a'), ('h', 'i'), ('r', 'r')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('x', 'z')]);\n        let cls2 = uclass(&[('a', 'c'), ('e', 'g'), ('s', 'u')]);\n        let expected = uclass(&[('x', 'z')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n\n        let cls1 = uclass(&[('a', 'z')]);\n        let cls2 = uclass(&[('a', 'c'), ('e', 'g'), ('s', 'u')]);\n        let expected = uclass(&[('d', 'd'), ('h', 'r'), ('v', 'z')]);\n        assert_eq!(expected, udifference(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_difference_bytes() {\n        let cls1 = bclass(&[(b'a', b'a')]);\n        let cls2 = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'a')]);\n        let cls2 = bclass(&[]);\n        let expected = bclass(&[(b'a', b'a')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[]);\n        let cls2 = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'z')]);\n        let cls2 = bclass(&[(b'a', b'a')]);\n        let expected = bclass(&[(b'b', b'z')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'z')]);\n        let cls2 = bclass(&[(b'z', b'z')]);\n        let expected = bclass(&[(b'a', b'y')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'z')]);\n        let cls2 = bclass(&[(b'm', b'm')]);\n        let expected = bclass(&[(b'a', b'l'), (b'n', b'z')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'c'), (b'g', b'i'), (b'r', b't')]);\n        let cls2 = bclass(&[(b'a', b'z')]);\n        let expected = bclass(&[]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'c'), (b'g', b'i'), (b'r', b't')]);\n        let cls2 = bclass(&[(b'd', b'v')]);\n        let expected = bclass(&[(b'a', b'c')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'c'), (b'g', b'i'), (b'r', b't')]);\n        let cls2 = bclass(&[(b'b', b'g'), (b's', b'u')]);\n        let expected = bclass(&[(b'a', b'a'), (b'h', b'i'), (b'r', b'r')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'c'), (b'g', b'i'), (b'r', b't')]);\n        let cls2 = bclass(&[(b'b', b'd'), (b'e', b'g'), (b's', b'u')]);\n        let expected = bclass(&[(b'a', b'a'), (b'h', b'i'), (b'r', b'r')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'x', b'z')]);\n        let cls2 = bclass(&[(b'a', b'c'), (b'e', b'g'), (b's', b'u')]);\n        let expected = bclass(&[(b'x', b'z')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n\n        let cls1 = bclass(&[(b'a', b'z')]);\n        let cls2 = bclass(&[(b'a', b'c'), (b'e', b'g'), (b's', b'u')]);\n        let expected = bclass(&[(b'd', b'd'), (b'h', b'r'), (b'v', b'z')]);\n        assert_eq!(expected, bdifference(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_symmetric_difference_unicode() {\n        let cls1 = uclass(&[('a', 'm')]);\n        let cls2 = uclass(&[('g', 't')]);\n        let expected = uclass(&[('a', 'f'), ('n', 't')]);\n        assert_eq!(expected, usymdifference(&cls1, &cls2));\n    }\n\n    #[test]\n    fn class_symmetric_difference_bytes() {\n        let cls1 = bclass(&[(b'a', b'm')]);\n        let cls2 = bclass(&[(b'g', b't')]);\n        let expected = bclass(&[(b'a', b'f'), (b'n', b't')]);\n        assert_eq!(expected, bsymdifference(&cls1, &cls2));\n    }\n\n    #[test]\n    #[should_panic]\n    fn hir_byte_literal_non_ascii() {\n        Hir::literal(Literal::Byte(b'a'));\n    }\n\n    // We use a thread with an explicit stack size to test that our destructor\n    // for Hir can handle arbitrarily sized expressions in constant stack\n    // space. In case we run on a platform without threads (WASM?), we limit\n    // this test to Windows/Unix.\n    #[test]\n    #[cfg(any(unix, windows))]\n    fn no_stack_overflow_on_drop() {\n        use std::thread;\n\n        let run = || {\n            let mut expr = Hir::empty();\n            for _ in 0..100 {\n                expr = Hir::group(Group {\n                    kind: GroupKind::NonCapturing,\n                    hir: Box::new(expr),\n                });\n                expr = Hir::repetition(Repetition {\n                    kind: RepetitionKind::ZeroOrOne,\n                    greedy: true,\n                    hir: Box::new(expr),\n                });\n\n                expr = Hir {\n                    kind: HirKind::Concat(vec![expr]),\n                    info: HirInfo::new(),\n                };\n                expr = Hir {\n                    kind: HirKind::Alternation(vec![expr]),\n                    info: HirInfo::new(),\n                };\n            }\n            assert!(!expr.kind.is_empty());\n        };\n\n        // We run our test on a thread with a small stack size so we can\n        // force the issue more easily.\n        thread::Builder::new()\n            .stack_size(1 << 10)\n            .spawn(run)\n            .unwrap()\n            .join()\n            .unwrap();\n    }\n}\n","traces":[{"line":38,"address":[6764016],"length":1,"stats":{"Line":4},"fn_name":"kind"},{"line":39,"address":[6764021],"length":1,"stats":{"Line":4},"fn_name":null},{"line":45,"address":[6764048],"length":1,"stats":{"Line":4},"fn_name":"pattern"},{"line":46,"address":[6764057],"length":1,"stats":{"Line":4},"fn_name":null},{"line":50,"address":[6764096],"length":1,"stats":{"Line":4},"fn_name":"span"},{"line":51,"address":[6764101],"length":1,"stats":{"Line":4},"fn_name":null},{"line":96,"address":[6764128],"length":1,"stats":{"Line":4},"fn_name":"description"},{"line":98,"address":[6764247,6764339,6764221,6764198,6764270,6764293,6764316],"length":1,"stats":{"Line":2},"fn_name":null},{"line":99,"address":[6764207,6764137],"length":1,"stats":{"Line":5},"fn_name":null},{"line":100,"address":[6764233],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[6764256],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[6764279],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[6764302],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[6764325],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[6764348],"length":1,"stats":{"Line":3},"fn_name":null},{"line":120,"address":[6764384],"length":1,"stats":{"Line":0},"fn_name":"description"},{"line":121,"address":[6764393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[6764432],"length":1,"stats":{"Line":4},"fn_name":"fmt"},{"line":127,"address":[6764446],"length":1,"stats":{"Line":4},"fn_name":null},{"line":132,"address":[6764512],"length":1,"stats":{"Line":4},"fn_name":"fmt"},{"line":135,"address":[6764531],"length":1,"stats":{"Line":4},"fn_name":null},{"line":219,"address":[6764592],"length":1,"stats":{"Line":9},"fn_name":"kind"},{"line":220,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[6764608,6764646],"length":1,"stats":{"Line":0},"fn_name":"into_kind"},{"line":227,"address":[6764615],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[6764720],"length":1,"stats":{"Line":10},"fn_name":"empty"},{"line":234,"address":[6764737],"length":1,"stats":{"Line":10},"fn_name":null},{"line":235,"address":[6764747],"length":1,"stats":{"Line":10},"fn_name":null},{"line":236,"address":[6764762],"length":1,"stats":{"Line":10},"fn_name":null},{"line":237,"address":[6764779],"length":1,"stats":{"Line":10},"fn_name":null},{"line":238,"address":[6764791],"length":1,"stats":{"Line":10},"fn_name":null},{"line":239,"address":[6764803],"length":1,"stats":{"Line":10},"fn_name":null},{"line":240,"address":[6764815],"length":1,"stats":{"Line":10},"fn_name":null},{"line":241,"address":[6764827],"length":1,"stats":{"Line":10},"fn_name":null},{"line":242,"address":[6764839],"length":1,"stats":{"Line":10},"fn_name":null},{"line":243,"address":[6764849],"length":1,"stats":{"Line":10},"fn_name":null},{"line":244,"address":[6764866],"length":1,"stats":{"Line":10},"fn_name":null},{"line":245,"address":[6764878],"length":1,"stats":{"Line":10},"fn_name":null},{"line":254,"address":[6764960],"length":1,"stats":{"Line":9},"fn_name":"literal"},{"line":255,"address":[6764982,6765033],"length":1,"stats":{"Line":12},"fn_name":null},{"line":256,"address":[6765022,6765035],"length":1,"stats":{"Line":3},"fn_name":null},{"line":259,"address":[6765065],"length":1,"stats":{"Line":9},"fn_name":null},{"line":260,"address":[6765075],"length":1,"stats":{"Line":9},"fn_name":null},{"line":261,"address":[6765114],"length":1,"stats":{"Line":9},"fn_name":null},{"line":262,"address":[6765126],"length":1,"stats":{"Line":9},"fn_name":null},{"line":263,"address":[6765138],"length":1,"stats":{"Line":9},"fn_name":null},{"line":264,"address":[6765150],"length":1,"stats":{"Line":9},"fn_name":null},{"line":265,"address":[6765162],"length":1,"stats":{"Line":9},"fn_name":null},{"line":266,"address":[6765174],"length":1,"stats":{"Line":9},"fn_name":null},{"line":267,"address":[6765186],"length":1,"stats":{"Line":9},"fn_name":null},{"line":268,"address":[6765198],"length":1,"stats":{"Line":9},"fn_name":null},{"line":269,"address":[6765208],"length":1,"stats":{"Line":9},"fn_name":null},{"line":270,"address":[6765223],"length":1,"stats":{"Line":9},"fn_name":null},{"line":271,"address":[6765238],"length":1,"stats":{"Line":9},"fn_name":null},{"line":275,"address":[6765328,6765365],"length":1,"stats":{"Line":8},"fn_name":"class"},{"line":276,"address":[6765382,6765353],"length":1,"stats":{"Line":16},"fn_name":null},{"line":277,"address":[6765424,6765387],"length":1,"stats":{"Line":16},"fn_name":null},{"line":278,"address":[6765451],"length":1,"stats":{"Line":8},"fn_name":null},{"line":279,"address":[6765465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":280,"address":[6765479],"length":1,"stats":{"Line":8},"fn_name":null},{"line":281,"address":[6765493],"length":1,"stats":{"Line":8},"fn_name":null},{"line":282,"address":[6765507],"length":1,"stats":{"Line":8},"fn_name":null},{"line":283,"address":[6765521],"length":1,"stats":{"Line":8},"fn_name":null},{"line":284,"address":[6765535],"length":1,"stats":{"Line":8},"fn_name":null},{"line":285,"address":[6765549],"length":1,"stats":{"Line":8},"fn_name":null},{"line":286,"address":[6765563],"length":1,"stats":{"Line":13},"fn_name":null},{"line":287,"address":[6765577],"length":1,"stats":{"Line":13},"fn_name":null},{"line":288,"address":[6765589],"length":1,"stats":{"Line":13},"fn_name":null},{"line":292,"address":[6765760],"length":1,"stats":{"Line":9},"fn_name":"anchor"},{"line":293,"address":[6765782],"length":1,"stats":{"Line":9},"fn_name":null},{"line":294,"address":[6765792],"length":1,"stats":{"Line":9},"fn_name":null},{"line":295,"address":[6765807],"length":1,"stats":{"Line":9},"fn_name":null},{"line":296,"address":[6765824],"length":1,"stats":{"Line":9},"fn_name":null},{"line":297,"address":[6765836],"length":1,"stats":{"Line":9},"fn_name":null},{"line":298,"address":[6765848],"length":1,"stats":{"Line":9},"fn_name":null},{"line":299,"address":[6765860],"length":1,"stats":{"Line":9},"fn_name":null},{"line":300,"address":[6765872],"length":1,"stats":{"Line":9},"fn_name":null},{"line":301,"address":[6765884],"length":1,"stats":{"Line":9},"fn_name":null},{"line":302,"address":[6765894],"length":1,"stats":{"Line":9},"fn_name":null},{"line":303,"address":[6765911],"length":1,"stats":{"Line":9},"fn_name":null},{"line":304,"address":[6765923],"length":1,"stats":{"Line":9},"fn_name":null},{"line":305,"address":[6765933,6765993],"length":1,"stats":{"Line":18},"fn_name":null},{"line":306,"address":[6765948],"length":1,"stats":{"Line":9},"fn_name":null},{"line":307,"address":[6765963],"length":1,"stats":{"Line":9},"fn_name":null},{"line":308,"address":[6765978],"length":1,"stats":{"Line":9},"fn_name":null},{"line":310,"address":[6766055,6765995],"length":1,"stats":{"Line":17},"fn_name":null},{"line":311,"address":[6766010],"length":1,"stats":{"Line":8},"fn_name":null},{"line":312,"address":[6766025],"length":1,"stats":{"Line":8},"fn_name":null},{"line":313,"address":[6766040],"length":1,"stats":{"Line":8},"fn_name":null},{"line":315,"address":[6766087,6766057],"length":1,"stats":{"Line":17},"fn_name":null},{"line":316,"address":[6766072],"length":1,"stats":{"Line":8},"fn_name":null},{"line":318,"address":[6766119,6766089],"length":1,"stats":{"Line":17},"fn_name":null},{"line":319,"address":[6766104],"length":1,"stats":{"Line":8},"fn_name":null},{"line":321,"address":[6766121],"length":1,"stats":{"Line":9},"fn_name":null},{"line":325,"address":[6766192],"length":1,"stats":{"Line":8},"fn_name":"word_boundary"},{"line":326,"address":[6766214],"length":1,"stats":{"Line":8},"fn_name":null},{"line":327,"address":[6766224],"length":1,"stats":{"Line":8},"fn_name":null},{"line":328,"address":[6766239],"length":1,"stats":{"Line":8},"fn_name":null},{"line":329,"address":[6766256],"length":1,"stats":{"Line":8},"fn_name":null},{"line":330,"address":[6766268],"length":1,"stats":{"Line":8},"fn_name":null},{"line":331,"address":[6766280],"length":1,"stats":{"Line":8},"fn_name":null},{"line":332,"address":[6766292],"length":1,"stats":{"Line":8},"fn_name":null},{"line":333,"address":[6766304],"length":1,"stats":{"Line":8},"fn_name":null},{"line":334,"address":[6766316],"length":1,"stats":{"Line":8},"fn_name":null},{"line":335,"address":[6766328],"length":1,"stats":{"Line":8},"fn_name":null},{"line":336,"address":[6766340],"length":1,"stats":{"Line":8},"fn_name":null},{"line":339,"address":[6766350],"length":1,"stats":{"Line":8},"fn_name":null},{"line":341,"address":[6766387,6766414],"length":1,"stats":{"Line":11},"fn_name":null},{"line":342,"address":[6766404],"length":1,"stats":{"Line":3},"fn_name":null},{"line":344,"address":[6766416],"length":1,"stats":{"Line":8},"fn_name":null},{"line":348,"address":[6766533,6766496],"length":1,"stats":{"Line":13},"fn_name":"repetition"},{"line":349,"address":[6766553,6766521],"length":1,"stats":{"Line":26},"fn_name":null},{"line":350,"address":[6766563,6766598],"length":1,"stats":{"Line":26},"fn_name":null},{"line":351,"address":[6766623],"length":1,"stats":{"Line":13},"fn_name":null},{"line":354,"address":[6766722],"length":1,"stats":{"Line":13},"fn_name":null},{"line":355,"address":[6766743,6766665],"length":1,"stats":{"Line":26},"fn_name":null},{"line":357,"address":[6766818],"length":1,"stats":{"Line":13},"fn_name":null},{"line":358,"address":[6766761,6766839],"length":1,"stats":{"Line":26},"fn_name":null},{"line":360,"address":[6766914],"length":1,"stats":{"Line":13},"fn_name":null},{"line":361,"address":[6766935,6766857],"length":1,"stats":{"Line":26},"fn_name":null},{"line":363,"address":[6767010],"length":1,"stats":{"Line":13},"fn_name":null},{"line":364,"address":[6767031,6766953],"length":1,"stats":{"Line":26},"fn_name":null},{"line":366,"address":[6767054],"length":1,"stats":{"Line":13},"fn_name":null},{"line":367,"address":[6767101],"length":1,"stats":{"Line":13},"fn_name":null},{"line":368,"address":[6767143],"length":1,"stats":{"Line":13},"fn_name":null},{"line":369,"address":[6767244],"length":1,"stats":{"Line":13},"fn_name":null},{"line":370,"address":[6767258],"length":1,"stats":{"Line":13},"fn_name":null},{"line":371,"address":[6767270],"length":1,"stats":{"Line":13},"fn_name":null},{"line":375,"address":[6767424,6767461],"length":1,"stats":{"Line":14},"fn_name":"group"},{"line":376,"address":[6767449,6767481],"length":1,"stats":{"Line":28},"fn_name":null},{"line":377,"address":[6767491,6767527],"length":1,"stats":{"Line":28},"fn_name":null},{"line":378,"address":[6767552],"length":1,"stats":{"Line":14},"fn_name":null},{"line":379,"address":[6767600],"length":1,"stats":{"Line":14},"fn_name":null},{"line":380,"address":[6767648],"length":1,"stats":{"Line":14},"fn_name":null},{"line":381,"address":[6767696],"length":1,"stats":{"Line":14},"fn_name":null},{"line":382,"address":[6767744],"length":1,"stats":{"Line":14},"fn_name":null},{"line":383,"address":[6767792],"length":1,"stats":{"Line":14},"fn_name":null},{"line":384,"address":[6767840],"length":1,"stats":{"Line":14},"fn_name":null},{"line":385,"address":[6767888],"length":1,"stats":{"Line":14},"fn_name":null},{"line":386,"address":[6767938],"length":1,"stats":{"Line":14},"fn_name":null},{"line":387,"address":[6767952],"length":1,"stats":{"Line":14},"fn_name":null},{"line":388,"address":[6767959],"length":1,"stats":{"Line":14},"fn_name":null},{"line":394,"address":[6768216,6768144],"length":1,"stats":{"Line":9},"fn_name":"concat"},{"line":395,"address":[6768384,6768154],"length":1,"stats":{"Line":17},"fn_name":null},{"line":396,"address":[6770436,6768301,6768239],"length":1,"stats":{"Line":9},"fn_name":null},{"line":397,"address":[6768323],"length":1,"stats":{"Line":8},"fn_name":null},{"line":398,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[6768286,6768397],"length":1,"stats":{"Line":18},"fn_name":null},{"line":400,"address":[6768418],"length":1,"stats":{"Line":9},"fn_name":null},{"line":401,"address":[6768438],"length":1,"stats":{"Line":9},"fn_name":null},{"line":402,"address":[6768455],"length":1,"stats":{"Line":9},"fn_name":null},{"line":403,"address":[6768472],"length":1,"stats":{"Line":9},"fn_name":null},{"line":404,"address":[6768492],"length":1,"stats":{"Line":9},"fn_name":null},{"line":405,"address":[6768512],"length":1,"stats":{"Line":9},"fn_name":null},{"line":406,"address":[6768532],"length":1,"stats":{"Line":9},"fn_name":null},{"line":409,"address":[6769573,6768539,6768712],"length":1,"stats":{"Line":18},"fn_name":null},{"line":410,"address":[6768852,6768762],"length":1,"stats":{"Line":18},"fn_name":null},{"line":411,"address":[6768822],"length":1,"stats":{"Line":9},"fn_name":null},{"line":413,"address":[6768969,6768879],"length":1,"stats":{"Line":18},"fn_name":null},{"line":414,"address":[6768939],"length":1,"stats":{"Line":9},"fn_name":null},{"line":416,"address":[6769086,6768996],"length":1,"stats":{"Line":18},"fn_name":null},{"line":417,"address":[6769030],"length":1,"stats":{"Line":9},"fn_name":null},{"line":418,"address":[6769056],"length":1,"stats":{"Line":9},"fn_name":null},{"line":420,"address":[6769203,6769113],"length":1,"stats":{"Line":18},"fn_name":null},{"line":421,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[6769173],"length":1,"stats":{"Line":9},"fn_name":null},{"line":424,"address":[6769320,6769230],"length":1,"stats":{"Line":18},"fn_name":null},{"line":425,"address":[6769290],"length":1,"stats":{"Line":9},"fn_name":null},{"line":427,"address":[6769347,6769437],"length":1,"stats":{"Line":18},"fn_name":null},{"line":428,"address":[6769407],"length":1,"stats":{"Line":9},"fn_name":null},{"line":430,"address":[6769554,6769464],"length":1,"stats":{"Line":18},"fn_name":null},{"line":431,"address":[6769498],"length":1,"stats":{"Line":9},"fn_name":null},{"line":432,"address":[6769524],"length":1,"stats":{"Line":9},"fn_name":null},{"line":443,"address":[6769689],"length":1,"stats":{"Line":9},"fn_name":null},{"line":444,"address":[6768674,6769578],"length":1,"stats":{"Line":18},"fn_name":null},{"line":445,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":446,"address":[6423392],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":447,"address":[6423406,6423478],"length":1,"stats":{"Line":18},"fn_name":null},{"line":449,"address":[6423518,6423504],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}"},{"line":452,"address":[6769883],"length":1,"stats":{"Line":9},"fn_name":null},{"line":453,"address":[6769712],"length":1,"stats":{"Line":9},"fn_name":null},{"line":454,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":455,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":456,"address":[6423552],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":457,"address":[6423638,6423566],"length":1,"stats":{"Line":18},"fn_name":null},{"line":459,"address":[6423664,6423678],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":462,"address":[6770022],"length":1,"stats":{"Line":9},"fn_name":null},{"line":463,"address":[6769906],"length":1,"stats":{"Line":9},"fn_name":null},{"line":464,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":465,"address":[6423712],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":466,"address":[6423726,6423798],"length":1,"stats":{"Line":18},"fn_name":null},{"line":468,"address":[6423824,6423838],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}"},{"line":470,"address":[6770192],"length":1,"stats":{"Line":9},"fn_name":null},{"line":471,"address":[6770045],"length":1,"stats":{"Line":9},"fn_name":null},{"line":472,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":473,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":474,"address":[6423872],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":475,"address":[6423958,6423886],"length":1,"stats":{"Line":18},"fn_name":null},{"line":477,"address":[6423998,6423984],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":479,"address":[6770215],"length":1,"stats":{"Line":9},"fn_name":null},{"line":487,"address":[6770464,6770524],"length":1,"stats":{"Line":8},"fn_name":"alternation"},{"line":488,"address":[6770665,6770474,6771170],"length":1,"stats":{"Line":16},"fn_name":null},{"line":489,"address":[6770597,6770544,6772283],"length":1,"stats":{"Line":8},"fn_name":null},{"line":490,"address":[6770616],"length":1,"stats":{"Line":0},"fn_name":null},{"line":491,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":492,"address":[6770585,6770675],"length":1,"stats":{"Line":16},"fn_name":null},{"line":493,"address":[6770696],"length":1,"stats":{"Line":8},"fn_name":null},{"line":494,"address":[6770716],"length":1,"stats":{"Line":8},"fn_name":null},{"line":495,"address":[6770736],"length":1,"stats":{"Line":8},"fn_name":null},{"line":496,"address":[6770756],"length":1,"stats":{"Line":8},"fn_name":null},{"line":497,"address":[6770776],"length":1,"stats":{"Line":8},"fn_name":null},{"line":498,"address":[6770796],"length":1,"stats":{"Line":8},"fn_name":null},{"line":499,"address":[6770813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":500,"address":[6770830],"length":1,"stats":{"Line":8},"fn_name":null},{"line":501,"address":[6770847],"length":1,"stats":{"Line":8},"fn_name":null},{"line":502,"address":[6770864],"length":1,"stats":{"Line":8},"fn_name":null},{"line":503,"address":[6770884],"length":1,"stats":{"Line":8},"fn_name":null},{"line":506,"address":[6770891,6771175,6772234],"length":1,"stats":{"Line":16},"fn_name":null},{"line":507,"address":[6771300,6771222],"length":1,"stats":{"Line":16},"fn_name":null},{"line":508,"address":[6771273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":510,"address":[6771402,6771324],"length":1,"stats":{"Line":16},"fn_name":null},{"line":511,"address":[6771375],"length":1,"stats":{"Line":8},"fn_name":null},{"line":513,"address":[6771504,6771426],"length":1,"stats":{"Line":16},"fn_name":null},{"line":514,"address":[6771477],"length":1,"stats":{"Line":8},"fn_name":null},{"line":516,"address":[6771606,6771528],"length":1,"stats":{"Line":16},"fn_name":null},{"line":517,"address":[6771579],"length":1,"stats":{"Line":8},"fn_name":null},{"line":519,"address":[6771630,6771708],"length":1,"stats":{"Line":16},"fn_name":null},{"line":520,"address":[6771661],"length":1,"stats":{"Line":8},"fn_name":null},{"line":521,"address":[6771681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":523,"address":[6771810,6771732],"length":1,"stats":{"Line":16},"fn_name":null},{"line":524,"address":[6771763],"length":1,"stats":{"Line":8},"fn_name":null},{"line":525,"address":[6771783],"length":1,"stats":{"Line":8},"fn_name":null},{"line":527,"address":[6771834,6771912],"length":1,"stats":{"Line":16},"fn_name":null},{"line":528,"address":[6771865],"length":1,"stats":{"Line":8},"fn_name":null},{"line":529,"address":[6771885],"length":1,"stats":{"Line":8},"fn_name":null},{"line":531,"address":[6771936,6772014],"length":1,"stats":{"Line":16},"fn_name":null},{"line":532,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":533,"address":[6771987],"length":1,"stats":{"Line":8},"fn_name":null},{"line":535,"address":[6772116,6772038],"length":1,"stats":{"Line":16},"fn_name":null},{"line":536,"address":[6772089],"length":1,"stats":{"Line":8},"fn_name":null},{"line":538,"address":[6772140,6772218],"length":1,"stats":{"Line":16},"fn_name":null},{"line":539,"address":[6772191],"length":1,"stats":{"Line":8},"fn_name":null},{"line":541,"address":[6771008],"length":1,"stats":{"Line":8},"fn_name":null},{"line":554,"address":[6772320,6772377],"length":1,"stats":{"Line":8},"fn_name":"dot"},{"line":555,"address":[6772343,6772679],"length":1,"stats":{"Line":11},"fn_name":null},{"line":556,"address":[6772419],"length":1,"stats":{"Line":3},"fn_name":null},{"line":557,"address":[6772438],"length":1,"stats":{"Line":3},"fn_name":null},{"line":558,"address":[6772508],"length":1,"stats":{"Line":3},"fn_name":null},{"line":559,"address":[6772581],"length":1,"stats":{"Line":3},"fn_name":null},{"line":561,"address":[6772392],"length":1,"stats":{"Line":8},"fn_name":null},{"line":562,"address":[6772684],"length":1,"stats":{"Line":8},"fn_name":null},{"line":563,"address":[6772737],"length":1,"stats":{"Line":8},"fn_name":null},{"line":564,"address":[6772793],"length":1,"stats":{"Line":8},"fn_name":null},{"line":576,"address":[6773097,6773040],"length":1,"stats":{"Line":8},"fn_name":"any"},{"line":577,"address":[6773063,6773311],"length":1,"stats":{"Line":16},"fn_name":null},{"line":578,"address":[6773136],"length":1,"stats":{"Line":8},"fn_name":null},{"line":579,"address":[6773155],"length":1,"stats":{"Line":8},"fn_name":null},{"line":580,"address":[6773225],"length":1,"stats":{"Line":8},"fn_name":null},{"line":582,"address":[6773112],"length":1,"stats":{"Line":8},"fn_name":null},{"line":583,"address":[6773316],"length":1,"stats":{"Line":8},"fn_name":null},{"line":584,"address":[6773364],"length":1,"stats":{"Line":8},"fn_name":null},{"line":592,"address":[6773616],"length":1,"stats":{"Line":14},"fn_name":"is_always_utf8"},{"line":593,"address":[6773625],"length":1,"stats":{"Line":14},"fn_name":null},{"line":601,"address":[6773664],"length":1,"stats":{"Line":14},"fn_name":"is_all_assertions"},{"line":602,"address":[6773673],"length":1,"stats":{"Line":14},"fn_name":null},{"line":608,"address":[6773712],"length":1,"stats":{"Line":14},"fn_name":"is_anchored_start"},{"line":609,"address":[6773721],"length":1,"stats":{"Line":14},"fn_name":null},{"line":615,"address":[6773760],"length":1,"stats":{"Line":14},"fn_name":"is_anchored_end"},{"line":616,"address":[6773769],"length":1,"stats":{"Line":14},"fn_name":null},{"line":628,"address":[6773808],"length":1,"stats":{"Line":14},"fn_name":"is_line_anchored_start"},{"line":629,"address":[6773817],"length":1,"stats":{"Line":14},"fn_name":null},{"line":641,"address":[6773856],"length":1,"stats":{"Line":14},"fn_name":"is_line_anchored_end"},{"line":642,"address":[6773865],"length":1,"stats":{"Line":14},"fn_name":null},{"line":649,"address":[6773904],"length":1,"stats":{"Line":14},"fn_name":"is_any_anchored_start"},{"line":650,"address":[6773913],"length":1,"stats":{"Line":14},"fn_name":null},{"line":657,"address":[6773952],"length":1,"stats":{"Line":14},"fn_name":"is_any_anchored_end"},{"line":658,"address":[6773961],"length":1,"stats":{"Line":14},"fn_name":null},{"line":666,"address":[6774000],"length":1,"stats":{"Line":14},"fn_name":"is_match_empty"},{"line":667,"address":[6774009],"length":1,"stats":{"Line":14},"fn_name":null},{"line":676,"address":[6774048],"length":1,"stats":{"Line":9},"fn_name":"is_literal"},{"line":677,"address":[6774057],"length":1,"stats":{"Line":9},"fn_name":null},{"line":688,"address":[6774096],"length":1,"stats":{"Line":9},"fn_name":"is_alternation_literal"},{"line":689,"address":[6774105],"length":1,"stats":{"Line":9},"fn_name":null},{"line":699,"address":[6774144],"length":1,"stats":{"Line":9},"fn_name":"is_empty"},{"line":700,"address":[6774169],"length":1,"stats":{"Line":9},"fn_name":null},{"line":701,"address":[6774171,6774153],"length":1,"stats":{"Line":17},"fn_name":null},{"line":702,"address":[6774164],"length":1,"stats":{"Line":9},"fn_name":null},{"line":708,"address":[6774192],"length":1,"stats":{"Line":9},"fn_name":"has_subexprs"},{"line":709,"address":[6774216,6774223],"length":1,"stats":{"Line":9},"fn_name":null},{"line":710,"address":[6774201],"length":1,"stats":{"Line":9},"fn_name":null},{"line":711,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":712,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":713,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":714,"address":[6774218],"length":1,"stats":{"Line":9},"fn_name":null},{"line":715,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":716,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":717,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":718,"address":[6774225],"length":1,"stats":{"Line":8},"fn_name":null},{"line":730,"address":[6774256],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":732,"address":[6774280],"length":1,"stats":{"Line":0},"fn_name":null},{"line":753,"address":[6774336],"length":1,"stats":{"Line":9},"fn_name":"is_unicode"},{"line":754,"address":[6774363,6774413,6774370],"length":1,"stats":{"Line":9},"fn_name":null},{"line":755,"address":[6774345,6774365],"length":1,"stats":{"Line":18},"fn_name":null},{"line":756,"address":[6774376],"length":1,"stats":{"Line":3},"fn_name":null},{"line":757,"address":[6774415],"length":1,"stats":{"Line":3},"fn_name":null},{"line":794,"address":[6774448],"length":1,"stats":{"Line":0},"fn_name":"case_fold_simple"},{"line":795,"address":[6774523,6774497],"length":1,"stats":{"Line":0},"fn_name":null},{"line":796,"address":[6774457,6774503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":797,"address":[6774475],"length":1,"stats":{"Line":0},"fn_name":null},{"line":805,"address":[6774544],"length":1,"stats":{"Line":0},"fn_name":"negate"},{"line":806,"address":[6774593,6774619],"length":1,"stats":{"Line":0},"fn_name":null},{"line":807,"address":[6774553,6774599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":808,"address":[6774571],"length":1,"stats":{"Line":0},"fn_name":null},{"line":823,"address":[6774640],"length":1,"stats":{"Line":8},"fn_name":"is_always_utf8"},{"line":824,"address":[6774704,6774697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":825,"address":[6774649,6774699],"length":1,"stats":{"Line":16},"fn_name":null},{"line":826,"address":[6774669],"length":1,"stats":{"Line":10},"fn_name":null},{"line":842,"address":[6424032],"length":1,"stats":{"Line":8},"fn_name":"new<alloc::vec::Vec<regex_syntax::hir::ClassUnicodeRange>>"},{"line":846,"address":[6424039],"length":1,"stats":{"Line":8},"fn_name":null},{"line":850,"address":[6774736],"length":1,"stats":{"Line":8},"fn_name":"empty"},{"line":851,"address":[6774743],"length":1,"stats":{"Line":8},"fn_name":null},{"line":855,"address":[6774800],"length":1,"stats":{"Line":8},"fn_name":"push"},{"line":856,"address":[6774817],"length":1,"stats":{"Line":8},"fn_name":null},{"line":862,"address":[6774832],"length":1,"stats":{"Line":8},"fn_name":"iter"},{"line":863,"address":[6774841],"length":1,"stats":{"Line":8},"fn_name":null},{"line":867,"address":[6774896],"length":1,"stats":{"Line":8},"fn_name":"ranges"},{"line":868,"address":[6774905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":884,"address":[6774944],"length":1,"stats":{"Line":0},"fn_name":"case_fold_simple"},{"line":885,"address":[6774953],"length":1,"stats":{"Line":0},"fn_name":null},{"line":900,"address":[6775040],"length":1,"stats":{"Line":8},"fn_name":"try_case_fold_simple"},{"line":903,"address":[6775049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":910,"address":[6775072],"length":1,"stats":{"Line":8},"fn_name":"negate"},{"line":911,"address":[6775077],"length":1,"stats":{"Line":8},"fn_name":null},{"line":915,"address":[6775088],"length":1,"stats":{"Line":8},"fn_name":"union"},{"line":916,"address":[6775102],"length":1,"stats":{"Line":8},"fn_name":null},{"line":921,"address":[6775120],"length":1,"stats":{"Line":0},"fn_name":"intersect"},{"line":922,"address":[6775134],"length":1,"stats":{"Line":0},"fn_name":null},{"line":926,"address":[6775152],"length":1,"stats":{"Line":0},"fn_name":"difference"},{"line":927,"address":[6775166],"length":1,"stats":{"Line":0},"fn_name":null},{"line":938,"address":[6775184],"length":1,"stats":{"Line":0},"fn_name":"symmetric_difference"},{"line":939,"address":[6775198],"length":1,"stats":{"Line":0},"fn_name":null},{"line":945,"address":[6775216],"length":1,"stats":{"Line":0},"fn_name":"is_all_ascii"},{"line":946,"address":[6424144,6424153],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":959,"address":[6775296],"length":1,"stats":{"Line":8},"fn_name":"next"},{"line":960,"address":[6775305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":975,"address":[6775432,6775328],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":976,"address":[6775451,6775581,6775351],"length":1,"stats":{"Line":0},"fn_name":null},{"line":978,"address":[6775565],"length":1,"stats":{"Line":0},"fn_name":null},{"line":980,"address":[6775591,6775478],"length":1,"stats":{"Line":0},"fn_name":null},{"line":982,"address":[6775987,6775735,6775842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":983,"address":[6775965],"length":1,"stats":{"Line":0},"fn_name":null},{"line":985,"address":[6775997,6775850],"length":1,"stats":{"Line":0},"fn_name":null},{"line":987,"address":[6776136,6776242],"length":1,"stats":{"Line":0},"fn_name":null},{"line":988,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":989,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":998,"address":[6776400],"length":1,"stats":{"Line":8},"fn_name":"lower"},{"line":999,"address":[6776405],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1002,"address":[6776416],"length":1,"stats":{"Line":8},"fn_name":"upper"},{"line":1003,"address":[6776421],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1006,"address":[6776432],"length":1,"stats":{"Line":8},"fn_name":"set_lower"},{"line":1007,"address":[6776444],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1010,"address":[6776464],"length":1,"stats":{"Line":8},"fn_name":"set_upper"},{"line":1011,"address":[6776476],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1018,"address":[6776496],"length":1,"stats":{"Line":8},"fn_name":"case_fold_simple"},{"line":1022,"address":[6776519,6776635],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1023,"address":[6776695],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1025,"address":[6776656],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1026,"address":[6776665],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1027,"address":[6776702],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1028,"address":[6776834,6776714,6777234],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1029,"address":[6424188,6424176],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":1030,"address":[6776918],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1032,"address":[6776899,6777047,6777092,6776925],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1033,"address":[6777032,6777094],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1034,"address":[6777072],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1035,"address":[6777083],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1036,"address":[6777087],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1039,"address":[6777306,6777239,6777304,6777139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1040,"address":[6777269],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1043,"address":[6776824],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1052,"address":[6777312],"length":1,"stats":{"Line":8},"fn_name":"new"},{"line":1053,"address":[6777324],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1060,"address":[6777360],"length":1,"stats":{"Line":15},"fn_name":"start"},{"line":1061,"address":[6777365],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1068,"address":[6777376],"length":1,"stats":{"Line":15},"fn_name":"end"},{"line":1069,"address":[6777381],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1085,"address":[6424208],"length":1,"stats":{"Line":10},"fn_name":"new<alloc::vec::Vec<regex_syntax::hir::ClassBytesRange>>"},{"line":1089,"address":[6424215],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1093,"address":[6777392],"length":1,"stats":{"Line":8},"fn_name":"empty"},{"line":1094,"address":[6777399],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1098,"address":[6777456],"length":1,"stats":{"Line":8},"fn_name":"push"},{"line":1099,"address":[6777474],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1105,"address":[6777504],"length":1,"stats":{"Line":8},"fn_name":"iter"},{"line":1106,"address":[6777513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1110,"address":[6777568],"length":1,"stats":{"Line":8},"fn_name":"ranges"},{"line":1111,"address":[6777577],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1121,"address":[6777616],"length":1,"stats":{"Line":8},"fn_name":"case_fold_simple"},{"line":1122,"address":[6777625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1129,"address":[6777712],"length":1,"stats":{"Line":8},"fn_name":"negate"},{"line":1130,"address":[6777717],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1134,"address":[6777728],"length":1,"stats":{"Line":0},"fn_name":"union"},{"line":1135,"address":[6777742],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1139,"address":[6777760],"length":1,"stats":{"Line":0},"fn_name":"intersect"},{"line":1140,"address":[6777774],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1144,"address":[6777792],"length":1,"stats":{"Line":0},"fn_name":"difference"},{"line":1145,"address":[6777806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1155,"address":[6777824],"length":1,"stats":{"Line":0},"fn_name":"symmetric_difference"},{"line":1156,"address":[6777838],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1162,"address":[6777856],"length":1,"stats":{"Line":10},"fn_name":"is_all_ascii"},{"line":1163,"address":[6424329,6424320],"length":1,"stats":{"Line":30},"fn_name":"{{closure}}"},{"line":1176,"address":[6777936],"length":1,"stats":{"Line":8},"fn_name":"next"},{"line":1177,"address":[6777945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1195,"address":[6777968],"length":1,"stats":{"Line":13},"fn_name":"lower"},{"line":1196,"address":[6777973],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1199,"address":[6777984],"length":1,"stats":{"Line":13},"fn_name":"upper"},{"line":1200,"address":[6777989],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1203,"address":[6778000],"length":1,"stats":{"Line":10},"fn_name":"set_lower"},{"line":1204,"address":[6778013],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1207,"address":[6778032],"length":1,"stats":{"Line":10},"fn_name":"set_upper"},{"line":1208,"address":[6778045],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1216,"address":[6778064],"length":1,"stats":{"Line":9},"fn_name":"case_fold_simple"},{"line":1220,"address":[6778078,6778306],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1221,"address":[6778159],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1222,"address":[6778186],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1223,"address":[6778536,6778213],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1225,"address":[6778308,6778522],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1226,"address":[6778375],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1227,"address":[6778402],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1228,"address":[6778429,6778596],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1230,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1239,"address":[6778656],"length":1,"stats":{"Line":10},"fn_name":"new"},{"line":1240,"address":[6778667],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1247,"address":[6778704],"length":1,"stats":{"Line":8},"fn_name":"start"},{"line":1248,"address":[6778709],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1255,"address":[6778720],"length":1,"stats":{"Line":8},"fn_name":"end"},{"line":1256,"address":[6778725],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1261,"address":[6778736],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":1262,"address":[6778757],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1263,"address":[6778789,6778936],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1264,"address":[6778879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1266,"address":[6778813],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1268,"address":[6778945,6779101],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1269,"address":[6779043],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1271,"address":[6778970],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1273,"address":[6779105],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1319,"address":[6779136],"length":1,"stats":{"Line":8},"fn_name":"is_negated"},{"line":1320,"address":[6779181,6779174],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1321,"address":[6779176,6779145],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1322,"address":[6779183],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1392,"address":[6779216],"length":1,"stats":{"Line":13},"fn_name":"is_match_empty"},{"line":1393,"address":[6779352,6779345,6779359,6779386,6779336],"length":1,"stats":{"Line":45},"fn_name":null},{"line":1394,"address":[6779225,6779340],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1395,"address":[6779347],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1396,"address":[6779354],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1397,"address":[6779283,6779366],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1398,"address":[6779393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1399,"address":[6779316],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1431,"address":[7000672,7000705],"length":1,"stats":{"Line":9},"fn_name":"drop"},{"line":1434,"address":[7000692],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1435,"address":[7000725],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1436,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1437,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1438,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1439,"address":[7000810,7000820],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1440,"address":[7000827],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1441,"address":[7000894],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1442,"address":[7000966],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1443,"address":[7001030],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1444,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1447,"address":[7000775,7001790,7001089],"length":1,"stats":{"Line":19},"fn_name":null},{"line":1448,"address":[7001180,7001226,7001276,7001769],"length":1,"stats":{"Line":39},"fn_name":null},{"line":1449,"address":[7001748,7001658,7001549,7001417,7001722],"length":1,"stats":{"Line":47},"fn_name":null},{"line":1450,"address":[7001340],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1451,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1452,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1453,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1454,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1455,"address":[7001424],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1456,"address":[7001525,7001440],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1458,"address":[7001554],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1459,"address":[7001570],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1461,"address":[7001660],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1462,"address":[7001676],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1464,"address":[7001376],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1465,"address":[7001724,7001392],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1488,"address":[6800368,6800848,6800560,6801152,6801376,6800656,6800464,6800752,6800944,6801264,6801040],"length":1,"stats":{"Line":144},"fn_name":"is_always_utf8"},{"line":1489,"address":[6800757,6801269,6800853,6800949,6800661,6800373,6800469,6801157,6801381,6800565,6801045],"length":1,"stats":{"Line":144},"fn_name":null},{"line":1492,"address":[6801296,6800592,6800688,6800976,6800880,6800784,6801072,6800400,6801184,6800496,6801408],"length":1,"stats":{"Line":99},"fn_name":"set_always_utf8"},{"line":1493,"address":[6801018,6800994,6800802,6801115,6800826,6800922,6800538,6801090,6800418,6801202,6800634,6801426,6800514,6801227,6800610,6800706,6801339,6800442,6801314,6801451,6800898,6800730],"length":1,"stats":{"Line":202},"fn_name":null},{"line":1494,"address":[6800832,6800928,6801024,6800640,6800448,6801121,6801345,6800544,6801233,6801457,6800736],"length":1,"stats":{"Line":96},"fn_name":null},{"line":1496,"address":[6800528,6800432,6800720,6800912,6801216,6800816,6801328,6801008,6801440,6800624,6801104],"length":1,"stats":{"Line":98},"fn_name":null},{"line":1503,"address":[6779440],"length":1,"stats":{"Line":9},"fn_name":"new"}],"covered":410,"coverable":496},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","print.rs"],"content":"/*!\nThis module provides a regular expression printer for `Hir`.\n*/\n\nuse std::fmt;\n\nuse hir::visitor::{self, Visitor};\nuse hir::{self, Hir, HirKind};\nuse is_meta_character;\n\n/// A builder for constructing a printer.\n///\n/// Note that since a printer doesn't have any configuration knobs, this type\n/// remains unexported.\n#[derive(Clone, Debug)]\nstruct PrinterBuilder {\n    _priv: (),\n}\n\nimpl Default for PrinterBuilder {\n    fn default() -> PrinterBuilder {\n        PrinterBuilder::new()\n    }\n}\n\nimpl PrinterBuilder {\n    fn new() -> PrinterBuilder {\n        PrinterBuilder { _priv: () }\n    }\n\n    fn build(&self) -> Printer {\n        Printer { _priv: () }\n    }\n}\n\n/// A printer for a regular expression's high-level intermediate\n/// representation.\n///\n/// A printer converts a high-level intermediate representation (HIR) to a\n/// regular expression pattern string. This particular printer uses constant\n/// stack space and heap space proportional to the size of the HIR.\n///\n/// Since this printer is only using the HIR, the pattern it prints will likely\n/// not resemble the original pattern at all. For example, a pattern like\n/// `\\pL` will have its entire class written out.\n///\n/// The purpose of this printer is to provide a means to mutate an HIR and then\n/// build a regular expression from the result of that mutation. (A regex\n/// library could provide a constructor from this HIR explicitly, but that\n/// creates an unnecessary public coupling between the regex library and this\n/// specific HIR representation.)\n#[derive(Debug)]\npub struct Printer {\n    _priv: (),\n}\n\nimpl Printer {\n    /// Create a new printer.\n    pub fn new() -> Printer {\n        PrinterBuilder::new().build()\n    }\n\n    /// Print the given `Ast` to the given writer. The writer must implement\n    /// `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n    /// here are a `fmt::Formatter` (which is available in `fmt::Display`\n    /// implementations) or a `&mut String`.\n    pub fn print<W: fmt::Write>(&mut self, hir: &Hir, wtr: W) -> fmt::Result {\n        visitor::visit(hir, Writer { printer: self, wtr: wtr })\n    }\n}\n\n#[derive(Debug)]\nstruct Writer<'p, W> {\n    printer: &'p mut Printer,\n    wtr: W,\n}\n\nimpl<'p, W: fmt::Write> Visitor for Writer<'p, W> {\n    type Output = ();\n    type Err = fmt::Error;\n\n    fn finish(self) -> fmt::Result {\n        Ok(())\n    }\n\n    fn visit_pre(&mut self, hir: &Hir) -> fmt::Result {\n        match *hir.kind() {\n            HirKind::Empty\n            | HirKind::Repetition(_)\n            | HirKind::Concat(_)\n            | HirKind::Alternation(_) => {}\n            HirKind::Literal(hir::Literal::Unicode(c)) => {\n                self.write_literal_char(c)?;\n            }\n            HirKind::Literal(hir::Literal::Byte(b)) => {\n                self.write_literal_byte(b)?;\n            }\n            HirKind::Class(hir::Class::Unicode(ref cls)) => {\n                self.wtr.write_str(\"[\")?;\n                for range in cls.iter() {\n                    if range.start() == range.end() {\n                        self.write_literal_char(range.start())?;\n                    } else {\n                        self.write_literal_char(range.start())?;\n                        self.wtr.write_str(\"-\")?;\n                        self.write_literal_char(range.end())?;\n                    }\n                }\n                self.wtr.write_str(\"]\")?;\n            }\n            HirKind::Class(hir::Class::Bytes(ref cls)) => {\n                self.wtr.write_str(\"(?-u:[\")?;\n                for range in cls.iter() {\n                    if range.start() == range.end() {\n                        self.write_literal_class_byte(range.start())?;\n                    } else {\n                        self.write_literal_class_byte(range.start())?;\n                        self.wtr.write_str(\"-\")?;\n                        self.write_literal_class_byte(range.end())?;\n                    }\n                }\n                self.wtr.write_str(\"])\")?;\n            }\n            HirKind::Anchor(hir::Anchor::StartLine) => {\n                self.wtr.write_str(\"(?m:^)\")?;\n            }\n            HirKind::Anchor(hir::Anchor::EndLine) => {\n                self.wtr.write_str(\"(?m:$)\")?;\n            }\n            HirKind::Anchor(hir::Anchor::StartText) => {\n                self.wtr.write_str(r\"\\A\")?;\n            }\n            HirKind::Anchor(hir::Anchor::EndText) => {\n                self.wtr.write_str(r\"\\z\")?;\n            }\n            HirKind::WordBoundary(hir::WordBoundary::Unicode) => {\n                self.wtr.write_str(r\"\\b\")?;\n            }\n            HirKind::WordBoundary(hir::WordBoundary::UnicodeNegate) => {\n                self.wtr.write_str(r\"\\B\")?;\n            }\n            HirKind::WordBoundary(hir::WordBoundary::Ascii) => {\n                self.wtr.write_str(r\"(?-u:\\b)\")?;\n            }\n            HirKind::WordBoundary(hir::WordBoundary::AsciiNegate) => {\n                self.wtr.write_str(r\"(?-u:\\B)\")?;\n            }\n            HirKind::Group(ref x) => match x.kind {\n                hir::GroupKind::CaptureIndex(_) => {\n                    self.wtr.write_str(\"(\")?;\n                }\n                hir::GroupKind::CaptureName { ref name, .. } => {\n                    write!(self.wtr, \"(?P<{}>\", name)?;\n                }\n                hir::GroupKind::NonCapturing => {\n                    self.wtr.write_str(\"(?:\")?;\n                }\n            },\n        }\n        Ok(())\n    }\n\n    fn visit_post(&mut self, hir: &Hir) -> fmt::Result {\n        match *hir.kind() {\n            // Handled during visit_pre\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Anchor(_)\n            | HirKind::WordBoundary(_)\n            | HirKind::Concat(_)\n            | HirKind::Alternation(_) => {}\n            HirKind::Repetition(ref x) => {\n                match x.kind {\n                    hir::RepetitionKind::ZeroOrOne => {\n                        self.wtr.write_str(\"?\")?;\n                    }\n                    hir::RepetitionKind::ZeroOrMore => {\n                        self.wtr.write_str(\"*\")?;\n                    }\n                    hir::RepetitionKind::OneOrMore => {\n                        self.wtr.write_str(\"+\")?;\n                    }\n                    hir::RepetitionKind::Range(ref x) => match *x {\n                        hir::RepetitionRange::Exactly(m) => {\n                            write!(self.wtr, \"{{{}}}\", m)?;\n                        }\n                        hir::RepetitionRange::AtLeast(m) => {\n                            write!(self.wtr, \"{{{},}}\", m)?;\n                        }\n                        hir::RepetitionRange::Bounded(m, n) => {\n                            write!(self.wtr, \"{{{},{}}}\", m, n)?;\n                        }\n                    },\n                }\n                if !x.greedy {\n                    self.wtr.write_str(\"?\")?;\n                }\n            }\n            HirKind::Group(_) => {\n                self.wtr.write_str(\")\")?;\n            }\n        }\n        Ok(())\n    }\n\n    fn visit_alternation_in(&mut self) -> fmt::Result {\n        self.wtr.write_str(\"|\")\n    }\n}\n\nimpl<'p, W: fmt::Write> Writer<'p, W> {\n    fn write_literal_char(&mut self, c: char) -> fmt::Result {\n        if is_meta_character(c) {\n            self.wtr.write_str(\"\\\\\")?;\n        }\n        self.wtr.write_char(c)\n    }\n\n    fn write_literal_byte(&mut self, b: u8) -> fmt::Result {\n        let c = b as char;\n        if c <= 0x7F as char && !c.is_control() && !c.is_whitespace() {\n            self.write_literal_char(c)\n        } else {\n            write!(self.wtr, \"(?-u:\\\\x{:02X})\", b)\n        }\n    }\n\n    fn write_literal_class_byte(&mut self, b: u8) -> fmt::Result {\n        let c = b as char;\n        if c <= 0x7F as char && !c.is_control() && !c.is_whitespace() {\n            self.write_literal_char(c)\n        } else {\n            write!(self.wtr, \"\\\\x{:02X}\", b)\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::Printer;\n    use ParserBuilder;\n\n    fn roundtrip(given: &str, expected: &str) {\n        roundtrip_with(|b| b, given, expected);\n    }\n\n    fn roundtrip_bytes(given: &str, expected: &str) {\n        roundtrip_with(|b| b.allow_invalid_utf8(true), given, expected);\n    }\n\n    fn roundtrip_with<F>(mut f: F, given: &str, expected: &str)\n    where\n        F: FnMut(&mut ParserBuilder) -> &mut ParserBuilder,\n    {\n        let mut builder = ParserBuilder::new();\n        f(&mut builder);\n        let hir = builder.build().parse(given).unwrap();\n\n        let mut printer = Printer::new();\n        let mut dst = String::new();\n        printer.print(&hir, &mut dst).unwrap();\n\n        // Check that the result is actually valid.\n        builder.build().parse(&dst).unwrap();\n\n        assert_eq!(expected, dst);\n    }\n\n    #[test]\n    fn print_literal() {\n        roundtrip(\"a\", \"a\");\n        roundtrip(r\"\\xff\", \"\\u{FF}\");\n        roundtrip_bytes(r\"\\xff\", \"\\u{FF}\");\n        roundtrip_bytes(r\"(?-u)\\xff\", r\"(?-u:\\xFF)\");\n        roundtrip(\"☃\", \"☃\");\n    }\n\n    #[test]\n    fn print_class() {\n        roundtrip(r\"[a]\", r\"[a]\");\n        roundtrip(r\"[a-z]\", r\"[a-z]\");\n        roundtrip(r\"[a-z--b-c--x-y]\", r\"[ad-wz]\");\n        roundtrip(r\"[^\\x01-\\u{10FFFF}]\", \"[\\u{0}]\");\n        roundtrip(r\"[-]\", r\"[\\-]\");\n        roundtrip(r\"[☃-⛄]\", r\"[☃-⛄]\");\n\n        roundtrip(r\"(?-u)[a]\", r\"(?-u:[a])\");\n        roundtrip(r\"(?-u)[a-z]\", r\"(?-u:[a-z])\");\n        roundtrip_bytes(r\"(?-u)[a-\\xFF]\", r\"(?-u:[a-\\xFF])\");\n\n        // The following test that the printer escapes meta characters\n        // in character classes.\n        roundtrip(r\"[\\[]\", r\"[\\[]\");\n        roundtrip(r\"[Z-_]\", r\"[Z-_]\");\n        roundtrip(r\"[Z-_--Z]\", r\"[\\[-_]\");\n\n        // The following test that the printer escapes meta characters\n        // in byte oriented character classes.\n        roundtrip_bytes(r\"(?-u)[\\[]\", r\"(?-u:[\\[])\");\n        roundtrip_bytes(r\"(?-u)[Z-_]\", r\"(?-u:[Z-_])\");\n        roundtrip_bytes(r\"(?-u)[Z-_--Z]\", r\"(?-u:[\\[-_])\");\n    }\n\n    #[test]\n    fn print_anchor() {\n        roundtrip(r\"^\", r\"\\A\");\n        roundtrip(r\"$\", r\"\\z\");\n        roundtrip(r\"(?m)^\", r\"(?m:^)\");\n        roundtrip(r\"(?m)$\", r\"(?m:$)\");\n    }\n\n    #[test]\n    fn print_word_boundary() {\n        roundtrip(r\"\\b\", r\"\\b\");\n        roundtrip(r\"\\B\", r\"\\B\");\n        roundtrip(r\"(?-u)\\b\", r\"(?-u:\\b)\");\n        roundtrip_bytes(r\"(?-u)\\B\", r\"(?-u:\\B)\");\n    }\n\n    #[test]\n    fn print_repetition() {\n        roundtrip(\"a?\", \"a?\");\n        roundtrip(\"a??\", \"a??\");\n        roundtrip(\"(?U)a?\", \"a??\");\n\n        roundtrip(\"a*\", \"a*\");\n        roundtrip(\"a*?\", \"a*?\");\n        roundtrip(\"(?U)a*\", \"a*?\");\n\n        roundtrip(\"a+\", \"a+\");\n        roundtrip(\"a+?\", \"a+?\");\n        roundtrip(\"(?U)a+\", \"a+?\");\n\n        roundtrip(\"a{1}\", \"a{1}\");\n        roundtrip(\"a{1,}\", \"a{1,}\");\n        roundtrip(\"a{1,5}\", \"a{1,5}\");\n        roundtrip(\"a{1}?\", \"a{1}?\");\n        roundtrip(\"a{1,}?\", \"a{1,}?\");\n        roundtrip(\"a{1,5}?\", \"a{1,5}?\");\n        roundtrip(\"(?U)a{1}\", \"a{1}?\");\n        roundtrip(\"(?U)a{1,}\", \"a{1,}?\");\n        roundtrip(\"(?U)a{1,5}\", \"a{1,5}?\");\n    }\n\n    #[test]\n    fn print_group() {\n        roundtrip(\"()\", \"()\");\n        roundtrip(\"(?P<foo>)\", \"(?P<foo>)\");\n        roundtrip(\"(?:)\", \"(?:)\");\n\n        roundtrip(\"(a)\", \"(a)\");\n        roundtrip(\"(?P<foo>a)\", \"(?P<foo>a)\");\n        roundtrip(\"(?:a)\", \"(?:a)\");\n\n        roundtrip(\"((((a))))\", \"((((a))))\");\n    }\n\n    #[test]\n    fn print_alternation() {\n        roundtrip(\"|\", \"|\");\n        roundtrip(\"||\", \"||\");\n\n        roundtrip(\"a|b\", \"a|b\");\n        roundtrip(\"a|b|c\", \"a|b|c\");\n        roundtrip(\"foo|bar|quux\", \"foo|bar|quux\");\n    }\n}\n","traces":[{"line":21,"address":[7220288],"length":1,"stats":{"Line":0},"fn_name":"default"},{"line":22,"address":[7220289],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[7220304],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[7220320],"length":1,"stats":{"Line":0},"fn_name":"build"},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[7220336],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":60,"address":[7220337],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[7212784],"length":1,"stats":{"Line":0},"fn_name":"print<&mut core::fmt::Formatter>"},{"line":68,"address":[7212803],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[7212864],"length":1,"stats":{"Line":0},"fn_name":"finish<&mut core::fmt::Formatter>"},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[7212896],"length":1,"stats":{"Line":0},"fn_name":"visit_pre<&mut core::fmt::Formatter>"},{"line":87,"address":[7215794,7216419,7216544,7212927,7217123,7215669,7216294,7216044,7215919,7215544,7213226,7213324,7213472,7213019,7214553,7216169],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[7212952],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[7213239,7212997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[7213257,7213329,7213359],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[7213386],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[7213404,7213477],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[7213029,7213517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[7213547,7213670],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[7213646,7213868,7213716,7214496],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[7213902,7214466,7214092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[7214097,7213999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[7214142,7213973,7214255],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[7214222,7214290,7214358],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[7214401,7214468,7214343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[7214508,7214558,7213832],"length":1,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[7214601],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[7214631,7214748],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[7214730,7215490,7214925,7214788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[7214959,7215110,7215460],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[7215026,7215115],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[7215009,7215157,7215264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[7215234,7215296,7215358],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[7215462,7215346,7215398],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[7214892,7215549,7215499],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[7213057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[7215592,7215674],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[7215717,7215799],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[7215924,7215842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[7215967,7216049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[7213103],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[7216092,7216174],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[7216217,7216299],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[7216424,7216342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":146,"address":[7216467,7216549],"length":1,"stats":{"Line":0},"fn_name":null},{"line":148,"address":[7213149,7217014,7216719,7217093,7216625],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[7213169],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[7216642,7216724],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[7216769],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[7217016,7216791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[7217095,7216592,7217048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[7217125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[7217152],"length":1,"stats":{"Line":0},"fn_name":"visit_post<&mut core::fmt::Formatter>"},{"line":164,"address":[7219077,7217183,7217317,7219131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":166,"address":[7217208],"length":1,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[7217332],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[7218932,7217756,7217600,7217500,7217887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[7217352],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[7217517,7217605,7217635],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[7217761,7217673],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[7217804,7217892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[7218652,7218902,7218360,7217423,7218095],"length":1,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[7217443,7218112],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[7218130,7218365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[7218410],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[7218428,7218657],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[7217935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[7217963,7218700,7218904],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[7219047,7218942],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[7218970,7219049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[7217281,7219086,7219133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[7219161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[7219184],"length":1,"stats":{"Line":0},"fn_name":"visit_alternation_in<&mut core::fmt::Formatter>"},{"line":208,"address":[7219200],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[7219248],"length":1,"stats":{"Line":0},"fn_name":"write_literal_char<&mut core::fmt::Formatter>"},{"line":214,"address":[7219377,7219266],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[7219403,7219379,7219306],"length":1,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[7219422],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[7219456],"length":1,"stats":{"Line":0},"fn_name":"write_literal_byte<&mut core::fmt::Formatter>"},{"line":221,"address":[7219476],"length":1,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[7219840,7219488,7219714],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[7219702],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[7219620,7219721],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[7219872],"length":1,"stats":{"Line":0},"fn_name":"write_literal_class_byte<&mut core::fmt::Formatter>"},{"line":230,"address":[7219892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[7219904,7220130,7220253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":232,"address":[7220118],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[7220137,7220036],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":109},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","translate.rs"],"content":"/*!\nDefines a translator that converts an `Ast` to an `Hir`.\n*/\n\nuse std::cell::{Cell, RefCell};\nuse std::result;\n\nuse ast::{self, Ast, Span, Visitor};\nuse hir::{self, Error, ErrorKind, Hir};\nuse unicode::{self, ClassQuery};\n\ntype Result<T> = result::Result<T, Error>;\n\n/// A builder for constructing an AST->HIR translator.\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    allow_invalid_utf8: bool,\n    flags: Flags,\n}\n\nimpl Default for TranslatorBuilder {\n    fn default() -> TranslatorBuilder {\n        TranslatorBuilder::new()\n    }\n}\n\nimpl TranslatorBuilder {\n    /// Create a new translator builder with a default c onfiguration.\n    pub fn new() -> TranslatorBuilder {\n        TranslatorBuilder {\n            allow_invalid_utf8: false,\n            flags: Flags::default(),\n        }\n    }\n\n    /// Build a translator using the current configuration.\n    pub fn build(&self) -> Translator {\n        Translator {\n            stack: RefCell::new(vec![]),\n            flags: Cell::new(self.flags),\n            allow_invalid_utf8: self.allow_invalid_utf8,\n        }\n    }\n\n    /// When enabled, translation will permit the construction of a regular\n    /// expression that may match invalid UTF-8.\n    ///\n    /// When disabled (the default), the translator is guaranteed to produce\n    /// an expression that will only ever match valid UTF-8 (otherwise, the\n    /// translator will return an error).\n    ///\n    /// Perhaps surprisingly, when invalid UTF-8 isn't allowed, a negated ASCII\n    /// word boundary (uttered as `(?-u:\\B)` in the concrete syntax) will cause\n    /// the parser to return an error. Namely, a negated ASCII word boundary\n    /// can result in matching positions that aren't valid UTF-8 boundaries.\n    pub fn allow_invalid_utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.allow_invalid_utf8 = yes;\n        self\n    }\n\n    /// Enable or disable the case insensitive flag (`i`) by default.\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.flags.case_insensitive = if yes { Some(true) } else { None };\n        self\n    }\n\n    /// Enable or disable the multi-line matching flag (`m`) by default.\n    pub fn multi_line(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.flags.multi_line = if yes { Some(true) } else { None };\n        self\n    }\n\n    /// Enable or disable the \"dot matches any character\" flag (`s`) by\n    /// default.\n    pub fn dot_matches_new_line(\n        &mut self,\n        yes: bool,\n    ) -> &mut TranslatorBuilder {\n        self.flags.dot_matches_new_line = if yes { Some(true) } else { None };\n        self\n    }\n\n    /// Enable or disable the \"swap greed\" flag (`U`) by default.\n    pub fn swap_greed(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.flags.swap_greed = if yes { Some(true) } else { None };\n        self\n    }\n\n    /// Enable or disable the Unicode flag (`u`) by default.\n    pub fn unicode(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.flags.unicode = if yes { None } else { Some(false) };\n        self\n    }\n}\n\n/// A translator maps abstract syntax to a high level intermediate\n/// representation.\n///\n/// A translator may be benefit from reuse. That is, a translator can translate\n/// many abstract syntax trees.\n///\n/// A `Translator` can be configured in more detail via a\n/// [`TranslatorBuilder`](struct.TranslatorBuilder.html).\n#[derive(Clone, Debug)]\npub struct Translator {\n    /// Our call stack, but on the heap.\n    stack: RefCell<Vec<HirFrame>>,\n    /// The current flag settings.\n    flags: Cell<Flags>,\n    /// Whether we're allowed to produce HIR that can match arbitrary bytes.\n    allow_invalid_utf8: bool,\n}\n\nimpl Translator {\n    /// Create a new translator using the default configuration.\n    pub fn new() -> Translator {\n        TranslatorBuilder::new().build()\n    }\n\n    /// Translate the given abstract syntax tree (AST) into a high level\n    /// intermediate representation (HIR).\n    ///\n    /// If there was a problem doing the translation, then an HIR-specific\n    /// error is returned.\n    ///\n    /// The original pattern string used to produce the `Ast` *must* also be\n    /// provided. The translator does not use the pattern string during any\n    /// correct translation, but is used for error reporting.\n    pub fn translate(&mut self, pattern: &str, ast: &Ast) -> Result<Hir> {\n        ast::visit(ast, TranslatorI::new(self, pattern))\n    }\n}\n\n/// An HirFrame is a single stack frame, represented explicitly, which is\n/// created for each item in the Ast that we traverse.\n///\n/// Note that technically, this type doesn't represent our entire stack\n/// frame. In particular, the Ast visitor represents any state associated with\n/// traversing the Ast itself.\n#[derive(Clone, Debug)]\nenum HirFrame {\n    /// An arbitrary HIR expression. These get pushed whenever we hit a base\n    /// case in the Ast. They get popped after an inductive (i.e., recursive)\n    /// step is complete.\n    Expr(Hir),\n    /// A Unicode character class. This frame is mutated as we descend into\n    /// the Ast of a character class (which is itself its own mini recursive\n    /// structure).\n    ClassUnicode(hir::ClassUnicode),\n    /// A byte-oriented character class. This frame is mutated as we descend\n    /// into the Ast of a character class (which is itself its own mini\n    /// recursive structure).\n    ///\n    /// Byte character classes are created when Unicode mode (`u`) is disabled.\n    /// If `allow_invalid_utf8` is disabled (the default), then a byte\n    /// character is only permitted to match ASCII text.\n    ClassBytes(hir::ClassBytes),\n    /// This is pushed on to the stack upon first seeing any kind of group,\n    /// indicated by parentheses (including non-capturing groups). It is popped\n    /// upon leaving a group.\n    Group {\n        /// The old active flags when this group was opened.\n        ///\n        /// If this group sets flags, then the new active flags are set to the\n        /// result of merging the old flags with the flags introduced by this\n        /// group. If the group doesn't set any flags, then this is simply\n        /// equivalent to whatever flags were set when the group was opened.\n        ///\n        /// When this group is popped, the active flags should be restored to\n        /// the flags set here.\n        ///\n        /// The \"active\" flags correspond to whatever flags are set in the\n        /// Translator.\n        old_flags: Flags,\n    },\n    /// This is pushed whenever a concatenation is observed. After visiting\n    /// every sub-expression in the concatenation, the translator's stack is\n    /// popped until it sees a Concat frame.\n    Concat,\n    /// This is pushed whenever an alternation is observed. After visiting\n    /// every sub-expression in the alternation, the translator's stack is\n    /// popped until it sees an Alternation frame.\n    Alternation,\n}\n\nimpl HirFrame {\n    /// Assert that the current stack frame is an Hir expression and return it.\n    fn unwrap_expr(self) -> Hir {\n        match self {\n            HirFrame::Expr(expr) => expr,\n            _ => panic!(\"tried to unwrap expr from HirFrame, got: {:?}\", self),\n        }\n    }\n\n    /// Assert that the current stack frame is a Unicode class expression and\n    /// return it.\n    fn unwrap_class_unicode(self) -> hir::ClassUnicode {\n        match self {\n            HirFrame::ClassUnicode(cls) => cls,\n            _ => panic!(\n                \"tried to unwrap Unicode class \\\n                 from HirFrame, got: {:?}\",\n                self\n            ),\n        }\n    }\n\n    /// Assert that the current stack frame is a byte class expression and\n    /// return it.\n    fn unwrap_class_bytes(self) -> hir::ClassBytes {\n        match self {\n            HirFrame::ClassBytes(cls) => cls,\n            _ => panic!(\n                \"tried to unwrap byte class \\\n                 from HirFrame, got: {:?}\",\n                self\n            ),\n        }\n    }\n\n    /// Assert that the current stack frame is a group indicator and return\n    /// its corresponding flags (the flags that were active at the time the\n    /// group was entered).\n    fn unwrap_group(self) -> Flags {\n        match self {\n            HirFrame::Group { old_flags } => old_flags,\n            _ => {\n                panic!(\"tried to unwrap group from HirFrame, got: {:?}\", self)\n            }\n        }\n    }\n}\n\nimpl<'t, 'p> Visitor for TranslatorI<'t, 'p> {\n    type Output = Hir;\n    type Err = Error;\n\n    fn finish(self) -> Result<Hir> {\n        // ... otherwise, we should have exactly one HIR on the stack.\n        assert_eq!(self.trans().stack.borrow().len(), 1);\n        Ok(self.pop().unwrap().unwrap_expr())\n    }\n\n    fn visit_pre(&mut self, ast: &Ast) -> Result<()> {\n        match *ast {\n            Ast::Class(ast::Class::Bracketed(_)) => {\n                if self.flags().unicode() {\n                    let cls = hir::ClassUnicode::empty();\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let cls = hir::ClassBytes::empty();\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            Ast::Group(ref x) => {\n                let old_flags = x\n                    .flags()\n                    .map(|ast| self.set_flags(ast))\n                    .unwrap_or_else(|| self.flags());\n                self.push(HirFrame::Group { old_flags });\n            }\n            Ast::Concat(ref x) if x.asts.is_empty() => {}\n            Ast::Concat(_) => {\n                self.push(HirFrame::Concat);\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => {}\n            Ast::Alternation(_) => {\n                self.push(HirFrame::Alternation);\n            }\n            _ => {}\n        }\n        Ok(())\n    }\n\n    fn visit_post(&mut self, ast: &Ast) -> Result<()> {\n        match *ast {\n            Ast::Empty(_) => {\n                self.push(HirFrame::Expr(Hir::empty()));\n            }\n            Ast::Flags(ref x) => {\n                self.set_flags(&x.flags);\n                // Flags in the AST are generally considered directives and\n                // not actual sub-expressions. However, they can be used in\n                // the concrete syntax like `((?i))`, and we need some kind of\n                // indication of an expression there, and Empty is the correct\n                // choice.\n                //\n                // There can also be things like `(?i)+`, but we rule those out\n                // in the parser. In the future, we might allow them for\n                // consistency sake.\n                self.push(HirFrame::Expr(Hir::empty()));\n            }\n            Ast::Literal(ref x) => {\n                self.push(HirFrame::Expr(self.hir_literal(x)?));\n            }\n            Ast::Dot(span) => {\n                self.push(HirFrame::Expr(self.hir_dot(span)?));\n            }\n            Ast::Assertion(ref x) => {\n                self.push(HirFrame::Expr(self.hir_assertion(x)?));\n            }\n            Ast::Class(ast::Class::Perl(ref x)) => {\n                if self.flags().unicode() {\n                    let cls = self.hir_perl_unicode_class(x)?;\n                    let hcls = hir::Class::Unicode(cls);\n                    self.push(HirFrame::Expr(Hir::class(hcls)));\n                } else {\n                    let cls = self.hir_perl_byte_class(x);\n                    let hcls = hir::Class::Bytes(cls);\n                    self.push(HirFrame::Expr(Hir::class(hcls)));\n                }\n            }\n            Ast::Class(ast::Class::Unicode(ref x)) => {\n                let cls = hir::Class::Unicode(self.hir_unicode_class(x)?);\n                self.push(HirFrame::Expr(Hir::class(cls)));\n            }\n            Ast::Class(ast::Class::Bracketed(ref ast)) => {\n                if self.flags().unicode() {\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?;\n                    if cls.iter().next().is_none() {\n                        return Err(self.error(\n                            ast.span,\n                            ErrorKind::EmptyClassNotAllowed,\n                        ));\n                    }\n                    let expr = Hir::class(hir::Class::Unicode(cls));\n                    self.push(HirFrame::Expr(expr));\n                } else {\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?;\n                    if cls.iter().next().is_none() {\n                        return Err(self.error(\n                            ast.span,\n                            ErrorKind::EmptyClassNotAllowed,\n                        ));\n                    }\n\n                    let expr = Hir::class(hir::Class::Bytes(cls));\n                    self.push(HirFrame::Expr(expr));\n                }\n            }\n            Ast::Repetition(ref x) => {\n                let expr = self.pop().unwrap().unwrap_expr();\n                self.push(HirFrame::Expr(self.hir_repetition(x, expr)));\n            }\n            Ast::Group(ref x) => {\n                let expr = self.pop().unwrap().unwrap_expr();\n                let old_flags = self.pop().unwrap().unwrap_group();\n                self.trans().flags.set(old_flags);\n                self.push(HirFrame::Expr(self.hir_group(x, expr)));\n            }\n            Ast::Concat(_) => {\n                let mut exprs = vec![];\n                while let Some(HirFrame::Expr(expr)) = self.pop() {\n                    if !expr.kind().is_empty() {\n                        exprs.push(expr);\n                    }\n                }\n                exprs.reverse();\n                self.push(HirFrame::Expr(Hir::concat(exprs)));\n            }\n            Ast::Alternation(_) => {\n                let mut exprs = vec![];\n                while let Some(HirFrame::Expr(expr)) = self.pop() {\n                    exprs.push(expr);\n                }\n                exprs.reverse();\n                self.push(HirFrame::Expr(Hir::alternation(exprs)));\n            }\n        }\n        Ok(())\n    }\n\n    fn visit_class_set_item_pre(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<()> {\n        match *ast {\n            ast::ClassSetItem::Bracketed(_) => {\n                if self.flags().unicode() {\n                    let cls = hir::ClassUnicode::empty();\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let cls = hir::ClassBytes::empty();\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            // We needn't handle the Union case here since the visitor will\n            // do it for us.\n            _ => {}\n        }\n        Ok(())\n    }\n\n    fn visit_class_set_item_post(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<()> {\n        match *ast {\n            ast::ClassSetItem::Empty(_) => {}\n            ast::ClassSetItem::Literal(ref x) => {\n                if self.flags().unicode() {\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    cls.push(hir::ClassUnicodeRange::new(x.c, x.c));\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    let byte = self.class_literal_byte(x)?;\n                    cls.push(hir::ClassBytesRange::new(byte, byte));\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            ast::ClassSetItem::Range(ref x) => {\n                if self.flags().unicode() {\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    cls.push(hir::ClassUnicodeRange::new(x.start.c, x.end.c));\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    let start = self.class_literal_byte(&x.start)?;\n                    let end = self.class_literal_byte(&x.end)?;\n                    cls.push(hir::ClassBytesRange::new(start, end));\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            ast::ClassSetItem::Ascii(ref x) => {\n                if self.flags().unicode() {\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    for &(s, e) in ascii_class(&x.kind) {\n                        cls.push(hir::ClassUnicodeRange::new(s, e));\n                    }\n                    self.unicode_fold_and_negate(\n                        &x.span, x.negated, &mut cls,\n                    )?;\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    for &(s, e) in ascii_class(&x.kind) {\n                        cls.push(hir::ClassBytesRange::new(s as u8, e as u8));\n                    }\n                    self.bytes_fold_and_negate(&x.span, x.negated, &mut cls)?;\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            ast::ClassSetItem::Unicode(ref x) => {\n                let xcls = self.hir_unicode_class(x)?;\n                let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                cls.union(&xcls);\n                self.push(HirFrame::ClassUnicode(cls));\n            }\n            ast::ClassSetItem::Perl(ref x) => {\n                if self.flags().unicode() {\n                    let xcls = self.hir_perl_unicode_class(x)?;\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    cls.union(&xcls);\n                    self.push(HirFrame::ClassUnicode(cls));\n                } else {\n                    let xcls = self.hir_perl_byte_class(x);\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    cls.union(&xcls);\n                    self.push(HirFrame::ClassBytes(cls));\n                }\n            }\n            ast::ClassSetItem::Bracketed(ref ast) => {\n                if self.flags().unicode() {\n                    let mut cls1 = self.pop().unwrap().unwrap_class_unicode();\n                    self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?;\n\n                    let mut cls2 = self.pop().unwrap().unwrap_class_unicode();\n                    cls2.union(&cls1);\n                    self.push(HirFrame::ClassUnicode(cls2));\n                } else {\n                    let mut cls1 = self.pop().unwrap().unwrap_class_bytes();\n                    self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?;\n\n                    let mut cls2 = self.pop().unwrap().unwrap_class_bytes();\n                    cls2.union(&cls1);\n                    self.push(HirFrame::ClassBytes(cls2));\n                }\n            }\n            // This is handled automatically by the visitor.\n            ast::ClassSetItem::Union(_) => {}\n        }\n        Ok(())\n    }\n\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {\n        if self.flags().unicode() {\n            let cls = hir::ClassUnicode::empty();\n            self.push(HirFrame::ClassUnicode(cls));\n        } else {\n            let cls = hir::ClassBytes::empty();\n            self.push(HirFrame::ClassBytes(cls));\n        }\n        Ok(())\n    }\n\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {\n        if self.flags().unicode() {\n            let cls = hir::ClassUnicode::empty();\n            self.push(HirFrame::ClassUnicode(cls));\n        } else {\n            let cls = hir::ClassBytes::empty();\n            self.push(HirFrame::ClassBytes(cls));\n        }\n        Ok(())\n    }\n\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {\n        use ast::ClassSetBinaryOpKind::*;\n\n        if self.flags().unicode() {\n            let mut rhs = self.pop().unwrap().unwrap_class_unicode();\n            let mut lhs = self.pop().unwrap().unwrap_class_unicode();\n            let mut cls = self.pop().unwrap().unwrap_class_unicode();\n            if self.flags().case_insensitive() {\n                rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?;\n                lhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.lhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?;\n            }\n            match op.kind {\n                Intersection => lhs.intersect(&rhs),\n                Difference => lhs.difference(&rhs),\n                SymmetricDifference => lhs.symmetric_difference(&rhs),\n            }\n            cls.union(&lhs);\n            self.push(HirFrame::ClassUnicode(cls));\n        } else {\n            let mut rhs = self.pop().unwrap().unwrap_class_bytes();\n            let mut lhs = self.pop().unwrap().unwrap_class_bytes();\n            let mut cls = self.pop().unwrap().unwrap_class_bytes();\n            if self.flags().case_insensitive() {\n                rhs.case_fold_simple();\n                lhs.case_fold_simple();\n            }\n            match op.kind {\n                Intersection => lhs.intersect(&rhs),\n                Difference => lhs.difference(&rhs),\n                SymmetricDifference => lhs.symmetric_difference(&rhs),\n            }\n            cls.union(&lhs);\n            self.push(HirFrame::ClassBytes(cls));\n        }\n        Ok(())\n    }\n}\n\n/// The internal implementation of a translator.\n///\n/// This type is responsible for carrying around the original pattern string,\n/// which is not tied to the internal state of a translator.\n///\n/// A TranslatorI exists for the time it takes to translate a single Ast.\n#[derive(Clone, Debug)]\nstruct TranslatorI<'t, 'p> {\n    trans: &'t Translator,\n    pattern: &'p str,\n}\n\nimpl<'t, 'p> TranslatorI<'t, 'p> {\n    /// Build a new internal translator.\n    fn new(trans: &'t Translator, pattern: &'p str) -> TranslatorI<'t, 'p> {\n        TranslatorI { trans: trans, pattern: pattern }\n    }\n\n    /// Return a reference to the underlying translator.\n    fn trans(&self) -> &Translator {\n        &self.trans\n    }\n\n    /// Push the given frame on to the call stack.\n    fn push(&self, frame: HirFrame) {\n        self.trans().stack.borrow_mut().push(frame);\n    }\n\n    /// Pop the top of the call stack. If the call stack is empty, return None.\n    fn pop(&self) -> Option<HirFrame> {\n        self.trans().stack.borrow_mut().pop()\n    }\n\n    /// Create a new error with the given span and error type.\n    fn error(&self, span: Span, kind: ErrorKind) -> Error {\n        Error { kind: kind, pattern: self.pattern.to_string(), span: span }\n    }\n\n    /// Return a copy of the active flags.\n    fn flags(&self) -> Flags {\n        self.trans().flags.get()\n    }\n\n    /// Set the flags of this translator from the flags set in the given AST.\n    /// Then, return the old flags.\n    fn set_flags(&self, ast_flags: &ast::Flags) -> Flags {\n        let old_flags = self.flags();\n        let mut new_flags = Flags::from_ast(ast_flags);\n        new_flags.merge(&old_flags);\n        self.trans().flags.set(new_flags);\n        old_flags\n    }\n\n    fn hir_literal(&self, lit: &ast::Literal) -> Result<Hir> {\n        let ch = match self.literal_to_char(lit)? {\n            byte @ hir::Literal::Byte(_) => return Ok(Hir::literal(byte)),\n            hir::Literal::Unicode(ch) => ch,\n        };\n        if self.flags().case_insensitive() {\n            self.hir_from_char_case_insensitive(lit.span, ch)\n        } else {\n            self.hir_from_char(lit.span, ch)\n        }\n    }\n\n    /// Convert an Ast literal to its scalar representation.\n    ///\n    /// When Unicode mode is enabled, then this always succeeds and returns a\n    /// `char` (Unicode scalar value).\n    ///\n    /// When Unicode mode is disabled, then a raw byte is returned. If that\n    /// byte is not ASCII and invalid UTF-8 is not allowed, then this returns\n    /// an error.\n    fn literal_to_char(&self, lit: &ast::Literal) -> Result<hir::Literal> {\n        if self.flags().unicode() {\n            return Ok(hir::Literal::Unicode(lit.c));\n        }\n        let byte = match lit.byte() {\n            None => return Ok(hir::Literal::Unicode(lit.c)),\n            Some(byte) => byte,\n        };\n        if byte <= 0x7F {\n            return Ok(hir::Literal::Unicode(byte as char));\n        }\n        if !self.trans().allow_invalid_utf8 {\n            return Err(self.error(lit.span, ErrorKind::InvalidUtf8));\n        }\n        Ok(hir::Literal::Byte(byte))\n    }\n\n    fn hir_from_char(&self, span: Span, c: char) -> Result<Hir> {\n        if !self.flags().unicode() && c.len_utf8() > 1 {\n            return Err(self.error(span, ErrorKind::UnicodeNotAllowed));\n        }\n        Ok(Hir::literal(hir::Literal::Unicode(c)))\n    }\n\n    fn hir_from_char_case_insensitive(\n        &self,\n        span: Span,\n        c: char,\n    ) -> Result<Hir> {\n        if self.flags().unicode() {\n            // If case folding won't do anything, then don't bother trying.\n            let map =\n                unicode::contains_simple_case_mapping(c, c).map_err(|_| {\n                    self.error(span, ErrorKind::UnicodeCaseUnavailable)\n                })?;\n            if !map {\n                return self.hir_from_char(span, c);\n            }\n            let mut cls =\n                hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(\n                    c, c,\n                )]);\n            cls.try_case_fold_simple().map_err(|_| {\n                self.error(span, ErrorKind::UnicodeCaseUnavailable)\n            })?;\n            Ok(Hir::class(hir::Class::Unicode(cls)))\n        } else {\n            if c.len_utf8() > 1 {\n                return Err(self.error(span, ErrorKind::UnicodeNotAllowed));\n            }\n            // If case folding won't do anything, then don't bother trying.\n            match c {\n                'A'..='Z' | 'a'..='z' => {}\n                _ => return self.hir_from_char(span, c),\n            }\n            let mut cls =\n                hir::ClassBytes::new(vec![hir::ClassBytesRange::new(\n                    c as u8, c as u8,\n                )]);\n            cls.case_fold_simple();\n            Ok(Hir::class(hir::Class::Bytes(cls)))\n        }\n    }\n\n    fn hir_dot(&self, span: Span) -> Result<Hir> {\n        let unicode = self.flags().unicode();\n        if !unicode && !self.trans().allow_invalid_utf8 {\n            return Err(self.error(span, ErrorKind::InvalidUtf8));\n        }\n        Ok(if self.flags().dot_matches_new_line() {\n            Hir::any(!unicode)\n        } else {\n            Hir::dot(!unicode)\n        })\n    }\n\n    fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {\n        let unicode = self.flags().unicode();\n        let multi_line = self.flags().multi_line();\n        Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::anchor(if multi_line {\n                hir::Anchor::StartLine\n            } else {\n                hir::Anchor::StartText\n            }),\n            ast::AssertionKind::EndLine => Hir::anchor(if multi_line {\n                hir::Anchor::EndLine\n            } else {\n                hir::Anchor::EndText\n            }),\n            ast::AssertionKind::StartText => {\n                Hir::anchor(hir::Anchor::StartText)\n            }\n            ast::AssertionKind::EndText => Hir::anchor(hir::Anchor::EndText),\n            ast::AssertionKind::WordBoundary => {\n                Hir::word_boundary(if unicode {\n                    hir::WordBoundary::Unicode\n                } else {\n                    hir::WordBoundary::Ascii\n                })\n            }\n            ast::AssertionKind::NotWordBoundary => {\n                Hir::word_boundary(if unicode {\n                    hir::WordBoundary::UnicodeNegate\n                } else {\n                    // It is possible for negated ASCII word boundaries to\n                    // match at invalid UTF-8 boundaries, even when searching\n                    // valid UTF-8.\n                    if !self.trans().allow_invalid_utf8 {\n                        return Err(\n                            self.error(asst.span, ErrorKind::InvalidUtf8)\n                        );\n                    }\n                    hir::WordBoundary::AsciiNegate\n                })\n            }\n        })\n    }\n\n    fn hir_group(&self, group: &ast::Group, expr: Hir) -> Hir {\n        let kind = match group.kind {\n            ast::GroupKind::CaptureIndex(idx) => {\n                hir::GroupKind::CaptureIndex(idx)\n            }\n            ast::GroupKind::CaptureName(ref capname) => {\n                hir::GroupKind::CaptureName {\n                    name: capname.name.clone(),\n                    index: capname.index,\n                }\n            }\n            ast::GroupKind::NonCapturing(_) => hir::GroupKind::NonCapturing,\n        };\n        Hir::group(hir::Group { kind: kind, hir: Box::new(expr) })\n    }\n\n    fn hir_repetition(&self, rep: &ast::Repetition, expr: Hir) -> Hir {\n        let kind = match rep.op.kind {\n            ast::RepetitionKind::ZeroOrOne => hir::RepetitionKind::ZeroOrOne,\n            ast::RepetitionKind::ZeroOrMore => hir::RepetitionKind::ZeroOrMore,\n            ast::RepetitionKind::OneOrMore => hir::RepetitionKind::OneOrMore,\n            ast::RepetitionKind::Range(ast::RepetitionRange::Exactly(m)) => {\n                hir::RepetitionKind::Range(hir::RepetitionRange::Exactly(m))\n            }\n            ast::RepetitionKind::Range(ast::RepetitionRange::AtLeast(m)) => {\n                hir::RepetitionKind::Range(hir::RepetitionRange::AtLeast(m))\n            }\n            ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(\n                m,\n                n,\n            )) => {\n                hir::RepetitionKind::Range(hir::RepetitionRange::Bounded(m, n))\n            }\n        };\n        let greedy =\n            if self.flags().swap_greed() { !rep.greedy } else { rep.greedy };\n        Hir::repetition(hir::Repetition {\n            kind: kind,\n            greedy: greedy,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_unicode_class(\n        &self,\n        ast_class: &ast::ClassUnicode,\n    ) -> Result<hir::ClassUnicode> {\n        use ast::ClassUnicodeKind::*;\n\n        if !self.flags().unicode() {\n            return Err(\n                self.error(ast_class.span, ErrorKind::UnicodeNotAllowed)\n            );\n        }\n        let query = match ast_class.kind {\n            OneLetter(name) => ClassQuery::OneLetter(name),\n            Named(ref name) => ClassQuery::Binary(name),\n            NamedValue { ref name, ref value, .. } => ClassQuery::ByValue {\n                property_name: name,\n                property_value: value,\n            },\n        };\n        let mut result = self.convert_unicode_class_error(\n            &ast_class.span,\n            unicode::class(query),\n        );\n        if let Ok(ref mut class) = result {\n            self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?;\n        }\n        result\n    }\n\n    fn hir_perl_unicode_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassUnicode> {\n        use ast::ClassPerlKind::*;\n\n        assert!(self.flags().unicode());\n        let result = match ast_class.kind {\n            Digit => unicode::perl_digit(),\n            Space => unicode::perl_space(),\n            Word => unicode::perl_word(),\n        };\n        let mut class =\n            self.convert_unicode_class_error(&ast_class.span, result)?;\n        // We needn't apply case folding here because the Perl Unicode classes\n        // are already closed under Unicode simple case folding.\n        if ast_class.negated {\n            class.negate();\n        }\n        Ok(class)\n    }\n\n    fn hir_perl_byte_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> hir::ClassBytes {\n        use ast::ClassPerlKind::*;\n\n        assert!(!self.flags().unicode());\n        let mut class = match ast_class.kind {\n            Digit => hir_ascii_class_bytes(&ast::ClassAsciiKind::Digit),\n            Space => hir_ascii_class_bytes(&ast::ClassAsciiKind::Space),\n            Word => hir_ascii_class_bytes(&ast::ClassAsciiKind::Word),\n        };\n        // We needn't apply case folding here because the Perl ASCII classes\n        // are already closed (under ASCII case folding).\n        if ast_class.negated {\n            class.negate();\n        }\n        class\n    }\n\n    /// Converts the given Unicode specific error to an HIR translation error.\n    ///\n    /// The span given should approximate the position at which an error would\n    /// occur.\n    fn convert_unicode_class_error(\n        &self,\n        span: &Span,\n        result: unicode::Result<hir::ClassUnicode>,\n    ) -> Result<hir::ClassUnicode> {\n        result.map_err(|err| {\n            let sp = span.clone();\n            match err {\n                unicode::Error::PropertyNotFound => {\n                    self.error(sp, ErrorKind::UnicodePropertyNotFound)\n                }\n                unicode::Error::PropertyValueNotFound => {\n                    self.error(sp, ErrorKind::UnicodePropertyValueNotFound)\n                }\n                unicode::Error::PerlClassNotFound => {\n                    self.error(sp, ErrorKind::UnicodePerlClassNotFound)\n                }\n            }\n        })\n    }\n\n    fn unicode_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassUnicode,\n    ) -> Result<()> {\n        // Note that we must apply case folding before negation!\n        // Consider `(?i)[^x]`. If we applied negation field, then\n        // the result would be the character class that matched any\n        // Unicode scalar value.\n        if self.flags().case_insensitive() {\n            class.try_case_fold_simple().map_err(|_| {\n                self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)\n            })?;\n        }\n        if negated {\n            class.negate();\n        }\n        Ok(())\n    }\n\n    fn bytes_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassBytes,\n    ) -> Result<()> {\n        // Note that we must apply case folding before negation!\n        // Consider `(?i)[^x]`. If we applied negation field, then\n        // the result would be the character class that matched any\n        // Unicode scalar value.\n        if self.flags().case_insensitive() {\n            class.case_fold_simple();\n        }\n        if negated {\n            class.negate();\n        }\n        if !self.trans().allow_invalid_utf8 && !class.is_all_ascii() {\n            return Err(self.error(span.clone(), ErrorKind::InvalidUtf8));\n        }\n        Ok(())\n    }\n\n    /// Return a scalar byte value suitable for use as a literal in a byte\n    /// character class.\n    fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {\n        match self.literal_to_char(ast)? {\n            hir::Literal::Byte(byte) => Ok(byte),\n            hir::Literal::Unicode(ch) => {\n                if ch <= 0x7F as char {\n                    Ok(ch as u8)\n                } else {\n                    // We can't feasibly support Unicode in\n                    // byte oriented classes. Byte classes don't\n                    // do Unicode case folding.\n                    Err(self.error(ast.span, ErrorKind::UnicodeNotAllowed))\n                }\n            }\n        }\n    }\n}\n\n/// A translator's representation of a regular expression's flags at any given\n/// moment in time.\n///\n/// Each flag can be in one of three states: absent, present but disabled or\n/// present but enabled.\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    // Note that `ignore_whitespace` is omitted here because it is handled\n    // entirely in the parser.\n}\n\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {\n        let mut flags = Flags::default();\n        let mut enable = true;\n        for item in &ast.items {\n            match item.kind {\n                ast::FlagsItemKind::Negation => {\n                    enable = false;\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive) => {\n                    flags.case_insensitive = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::MultiLine) => {\n                    flags.multi_line = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine) => {\n                    flags.dot_matches_new_line = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::SwapGreed) => {\n                    flags.swap_greed = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::Unicode) => {\n                    flags.unicode = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace) => {}\n            }\n        }\n        flags\n    }\n\n    fn merge(&mut self, previous: &Flags) {\n        if self.case_insensitive.is_none() {\n            self.case_insensitive = previous.case_insensitive;\n        }\n        if self.multi_line.is_none() {\n            self.multi_line = previous.multi_line;\n        }\n        if self.dot_matches_new_line.is_none() {\n            self.dot_matches_new_line = previous.dot_matches_new_line;\n        }\n        if self.swap_greed.is_none() {\n            self.swap_greed = previous.swap_greed;\n        }\n        if self.unicode.is_none() {\n            self.unicode = previous.unicode;\n        }\n    }\n\n    fn case_insensitive(&self) -> bool {\n        self.case_insensitive.unwrap_or(false)\n    }\n\n    fn multi_line(&self) -> bool {\n        self.multi_line.unwrap_or(false)\n    }\n\n    fn dot_matches_new_line(&self) -> bool {\n        self.dot_matches_new_line.unwrap_or(false)\n    }\n\n    fn swap_greed(&self) -> bool {\n        self.swap_greed.unwrap_or(false)\n    }\n\n    fn unicode(&self) -> bool {\n        self.unicode.unwrap_or(true)\n    }\n}\n\nfn hir_ascii_class_bytes(kind: &ast::ClassAsciiKind) -> hir::ClassBytes {\n    let ranges: Vec<_> = ascii_class(kind)\n        .iter()\n        .cloned()\n        .map(|(s, e)| hir::ClassBytesRange::new(s as u8, e as u8))\n        .collect();\n    hir::ClassBytes::new(ranges)\n}\n\nfn ascii_class(kind: &ast::ClassAsciiKind) -> &'static [(char, char)] {\n    use ast::ClassAsciiKind::*;\n    match *kind {\n        Alnum => &[('0', '9'), ('A', 'Z'), ('a', 'z')],\n        Alpha => &[('A', 'Z'), ('a', 'z')],\n        Ascii => &[('\\x00', '\\x7F')],\n        Blank => &[('\\t', '\\t'), (' ', ' ')],\n        Cntrl => &[('\\x00', '\\x1F'), ('\\x7F', '\\x7F')],\n        Digit => &[('0', '9')],\n        Graph => &[('!', '~')],\n        Lower => &[('a', 'z')],\n        Print => &[(' ', '~')],\n        Punct => &[('!', '/'), (':', '@'), ('[', '`'), ('{', '~')],\n        Space => &[\n            ('\\t', '\\t'),\n            ('\\n', '\\n'),\n            ('\\x0B', '\\x0B'),\n            ('\\x0C', '\\x0C'),\n            ('\\r', '\\r'),\n            (' ', ' '),\n        ],\n        Upper => &[('A', 'Z')],\n        Word => &[('0', '9'), ('A', 'Z'), ('_', '_'), ('a', 'z')],\n        Xdigit => &[('0', '9'), ('A', 'F'), ('a', 'f')],\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use ast::parse::ParserBuilder;\n    use ast::{self, Ast, Position, Span};\n    use hir::{self, Hir, HirKind};\n    use unicode::{self, ClassQuery};\n\n    use super::{ascii_class, TranslatorBuilder};\n\n    // We create these errors to compare with real hir::Errors in the tests.\n    // We define equality between TestError and hir::Error to disregard the\n    // pattern string in hir::Error, which is annoying to provide in tests.\n    #[derive(Clone, Debug)]\n    struct TestError {\n        span: Span,\n        kind: hir::ErrorKind,\n    }\n\n    impl PartialEq<hir::Error> for TestError {\n        fn eq(&self, other: &hir::Error) -> bool {\n            self.span == other.span && self.kind == other.kind\n        }\n    }\n\n    impl PartialEq<TestError> for hir::Error {\n        fn eq(&self, other: &TestError) -> bool {\n            self.span == other.span && self.kind == other.kind\n        }\n    }\n\n    fn parse(pattern: &str) -> Ast {\n        ParserBuilder::new().octal(true).build().parse(pattern).unwrap()\n    }\n\n    fn t(pattern: &str) -> Hir {\n        TranslatorBuilder::new()\n            .allow_invalid_utf8(false)\n            .build()\n            .translate(pattern, &parse(pattern))\n            .unwrap()\n    }\n\n    fn t_err(pattern: &str) -> hir::Error {\n        TranslatorBuilder::new()\n            .allow_invalid_utf8(false)\n            .build()\n            .translate(pattern, &parse(pattern))\n            .unwrap_err()\n    }\n\n    fn t_bytes(pattern: &str) -> Hir {\n        TranslatorBuilder::new()\n            .allow_invalid_utf8(true)\n            .build()\n            .translate(pattern, &parse(pattern))\n            .unwrap()\n    }\n\n    fn hir_lit(s: &str) -> Hir {\n        match s.len() {\n            0 => Hir::empty(),\n            _ => {\n                let lits = s\n                    .chars()\n                    .map(hir::Literal::Unicode)\n                    .map(Hir::literal)\n                    .collect();\n                Hir::concat(lits)\n            }\n        }\n    }\n\n    fn hir_blit(s: &[u8]) -> Hir {\n        match s.len() {\n            0 => Hir::empty(),\n            1 => Hir::literal(hir::Literal::Byte(s[0])),\n            _ => {\n                let lits = s\n                    .iter()\n                    .cloned()\n                    .map(hir::Literal::Byte)\n                    .map(Hir::literal)\n                    .collect();\n                Hir::concat(lits)\n            }\n        }\n    }\n\n    fn hir_group(i: u32, expr: Hir) -> Hir {\n        Hir::group(hir::Group {\n            kind: hir::GroupKind::CaptureIndex(i),\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_group_name(i: u32, name: &str, expr: Hir) -> Hir {\n        Hir::group(hir::Group {\n            kind: hir::GroupKind::CaptureName {\n                name: name.to_string(),\n                index: i,\n            },\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_group_nocap(expr: Hir) -> Hir {\n        Hir::group(hir::Group {\n            kind: hir::GroupKind::NonCapturing,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_quest(greedy: bool, expr: Hir) -> Hir {\n        Hir::repetition(hir::Repetition {\n            kind: hir::RepetitionKind::ZeroOrOne,\n            greedy: greedy,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_star(greedy: bool, expr: Hir) -> Hir {\n        Hir::repetition(hir::Repetition {\n            kind: hir::RepetitionKind::ZeroOrMore,\n            greedy: greedy,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_plus(greedy: bool, expr: Hir) -> Hir {\n        Hir::repetition(hir::Repetition {\n            kind: hir::RepetitionKind::OneOrMore,\n            greedy: greedy,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_range(greedy: bool, range: hir::RepetitionRange, expr: Hir) -> Hir {\n        Hir::repetition(hir::Repetition {\n            kind: hir::RepetitionKind::Range(range),\n            greedy: greedy,\n            hir: Box::new(expr),\n        })\n    }\n\n    fn hir_alt(alts: Vec<Hir>) -> Hir {\n        Hir::alternation(alts)\n    }\n\n    fn hir_cat(exprs: Vec<Hir>) -> Hir {\n        Hir::concat(exprs)\n    }\n\n    #[allow(dead_code)]\n    fn hir_uclass_query(query: ClassQuery) -> Hir {\n        Hir::class(hir::Class::Unicode(unicode::class(query).unwrap()))\n    }\n\n    #[allow(dead_code)]\n    fn hir_uclass_perl_word() -> Hir {\n        Hir::class(hir::Class::Unicode(unicode::perl_word().unwrap()))\n    }\n\n    fn hir_uclass(ranges: &[(char, char)]) -> Hir {\n        let ranges: Vec<hir::ClassUnicodeRange> = ranges\n            .iter()\n            .map(|&(s, e)| hir::ClassUnicodeRange::new(s, e))\n            .collect();\n        Hir::class(hir::Class::Unicode(hir::ClassUnicode::new(ranges)))\n    }\n\n    fn hir_bclass(ranges: &[(u8, u8)]) -> Hir {\n        let ranges: Vec<hir::ClassBytesRange> = ranges\n            .iter()\n            .map(|&(s, e)| hir::ClassBytesRange::new(s, e))\n            .collect();\n        Hir::class(hir::Class::Bytes(hir::ClassBytes::new(ranges)))\n    }\n\n    fn hir_bclass_from_char(ranges: &[(char, char)]) -> Hir {\n        let ranges: Vec<hir::ClassBytesRange> = ranges\n            .iter()\n            .map(|&(s, e)| {\n                assert!(s as u32 <= 0x7F);\n                assert!(e as u32 <= 0x7F);\n                hir::ClassBytesRange::new(s as u8, e as u8)\n            })\n            .collect();\n        Hir::class(hir::Class::Bytes(hir::ClassBytes::new(ranges)))\n    }\n\n    fn hir_case_fold(expr: Hir) -> Hir {\n        match expr.into_kind() {\n            HirKind::Class(mut cls) => {\n                cls.case_fold_simple();\n                Hir::class(cls)\n            }\n            _ => panic!(\"cannot case fold non-class Hir expr\"),\n        }\n    }\n\n    fn hir_negate(expr: Hir) -> Hir {\n        match expr.into_kind() {\n            HirKind::Class(mut cls) => {\n                cls.negate();\n                Hir::class(cls)\n            }\n            _ => panic!(\"cannot negate non-class Hir expr\"),\n        }\n    }\n\n    #[allow(dead_code)]\n    fn hir_union(expr1: Hir, expr2: Hir) -> Hir {\n        use hir::Class::{Bytes, Unicode};\n\n        match (expr1.into_kind(), expr2.into_kind()) {\n            (HirKind::Class(Unicode(mut c1)), HirKind::Class(Unicode(c2))) => {\n                c1.union(&c2);\n                Hir::class(hir::Class::Unicode(c1))\n            }\n            (HirKind::Class(Bytes(mut c1)), HirKind::Class(Bytes(c2))) => {\n                c1.union(&c2);\n                Hir::class(hir::Class::Bytes(c1))\n            }\n            _ => panic!(\"cannot union non-class Hir exprs\"),\n        }\n    }\n\n    #[allow(dead_code)]\n    fn hir_difference(expr1: Hir, expr2: Hir) -> Hir {\n        use hir::Class::{Bytes, Unicode};\n\n        match (expr1.into_kind(), expr2.into_kind()) {\n            (HirKind::Class(Unicode(mut c1)), HirKind::Class(Unicode(c2))) => {\n                c1.difference(&c2);\n                Hir::class(hir::Class::Unicode(c1))\n            }\n            (HirKind::Class(Bytes(mut c1)), HirKind::Class(Bytes(c2))) => {\n                c1.difference(&c2);\n                Hir::class(hir::Class::Bytes(c1))\n            }\n            _ => panic!(\"cannot difference non-class Hir exprs\"),\n        }\n    }\n\n    fn hir_anchor(anchor: hir::Anchor) -> Hir {\n        Hir::anchor(anchor)\n    }\n\n    fn hir_word(wb: hir::WordBoundary) -> Hir {\n        Hir::word_boundary(wb)\n    }\n\n    #[test]\n    fn empty() {\n        assert_eq!(t(\"\"), Hir::empty());\n        assert_eq!(t(\"(?i)\"), Hir::empty());\n        assert_eq!(t(\"()\"), hir_group(1, Hir::empty()));\n        assert_eq!(t(\"(?:)\"), hir_group_nocap(Hir::empty()));\n        assert_eq!(t(\"(?P<wat>)\"), hir_group_name(1, \"wat\", Hir::empty()));\n        assert_eq!(t(\"|\"), hir_alt(vec![Hir::empty(), Hir::empty()]));\n        assert_eq!(\n            t(\"()|()\"),\n            hir_alt(vec![\n                hir_group(1, Hir::empty()),\n                hir_group(2, Hir::empty()),\n            ])\n        );\n        assert_eq!(\n            t(\"(|b)\"),\n            hir_group(1, hir_alt(vec![Hir::empty(), hir_lit(\"b\"),]))\n        );\n        assert_eq!(\n            t(\"(a|)\"),\n            hir_group(1, hir_alt(vec![hir_lit(\"a\"), Hir::empty(),]))\n        );\n        assert_eq!(\n            t(\"(a||c)\"),\n            hir_group(\n                1,\n                hir_alt(vec![hir_lit(\"a\"), Hir::empty(), hir_lit(\"c\"),])\n            )\n        );\n        assert_eq!(\n            t(\"(||)\"),\n            hir_group(\n                1,\n                hir_alt(vec![Hir::empty(), Hir::empty(), Hir::empty(),])\n            )\n        );\n    }\n\n    #[test]\n    fn literal() {\n        assert_eq!(t(\"a\"), hir_lit(\"a\"));\n        assert_eq!(t(\"(?-u)a\"), hir_lit(\"a\"));\n        assert_eq!(t(\"☃\"), hir_lit(\"☃\"));\n        assert_eq!(t(\"abcd\"), hir_lit(\"abcd\"));\n\n        assert_eq!(t_bytes(\"(?-u)a\"), hir_lit(\"a\"));\n        assert_eq!(t_bytes(\"(?-u)\\x61\"), hir_lit(\"a\"));\n        assert_eq!(t_bytes(r\"(?-u)\\x61\"), hir_lit(\"a\"));\n        assert_eq!(t_bytes(r\"(?-u)\\xFF\"), hir_blit(b\"\\xFF\"));\n\n        assert_eq!(\n            t_err(\"(?-u)☃\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodeNotAllowed,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(8, 1, 7)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"(?-u)\\xFF\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(9, 1, 10)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn literal_case_insensitive() {\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(t(\"(?i)a\"), hir_uclass(&[('A', 'A'), ('a', 'a'),]));\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i:a)\"),\n            hir_group_nocap(hir_uclass(&[('A', 'A'), ('a', 'a')],))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"a(?i)a(?-i)a\"),\n            hir_cat(vec![\n                hir_lit(\"a\"),\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                hir_lit(\"a\"),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)ab@c\"),\n            hir_cat(vec![\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                hir_uclass(&[('B', 'B'), ('b', 'b')]),\n                hir_lit(\"@\"),\n                hir_uclass(&[('C', 'C'), ('c', 'c')]),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)β\"),\n            hir_uclass(&[('Β', 'Β'), ('β', 'β'), ('ϐ', 'ϐ'),])\n        );\n\n        assert_eq!(t(\"(?i-u)a\"), hir_bclass(&[(b'A', b'A'), (b'a', b'a'),]));\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?-u)a(?i)a(?-i)a\"),\n            hir_cat(vec![\n                hir_lit(\"a\"),\n                hir_bclass(&[(b'A', b'A'), (b'a', b'a')]),\n                hir_lit(\"a\"),\n            ])\n        );\n        assert_eq!(\n            t(\"(?i-u)ab@c\"),\n            hir_cat(vec![\n                hir_bclass(&[(b'A', b'A'), (b'a', b'a')]),\n                hir_bclass(&[(b'B', b'B'), (b'b', b'b')]),\n                hir_lit(\"@\"),\n                hir_bclass(&[(b'C', b'C'), (b'c', b'c')]),\n            ])\n        );\n\n        assert_eq!(\n            t_bytes(\"(?i-u)a\"),\n            hir_bclass(&[(b'A', b'A'), (b'a', b'a'),])\n        );\n        assert_eq!(\n            t_bytes(\"(?i-u)\\x61\"),\n            hir_bclass(&[(b'A', b'A'), (b'a', b'a'),])\n        );\n        assert_eq!(\n            t_bytes(r\"(?i-u)\\x61\"),\n            hir_bclass(&[(b'A', b'A'), (b'a', b'a'),])\n        );\n        assert_eq!(t_bytes(r\"(?i-u)\\xFF\"), hir_blit(b\"\\xFF\"));\n\n        assert_eq!(\n            t_err(\"(?i-u)β\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodeNotAllowed,\n                span: Span::new(\n                    Position::new(6, 1, 7),\n                    Position::new(8, 1, 8),\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn dot() {\n        assert_eq!(\n            t(\".\"),\n            hir_uclass(&[('\\0', '\\t'), ('\\x0B', '\\u{10FFFF}'),])\n        );\n        assert_eq!(t(\"(?s).\"), hir_uclass(&[('\\0', '\\u{10FFFF}'),]));\n        assert_eq!(\n            t_bytes(\"(?-u).\"),\n            hir_bclass(&[(b'\\0', b'\\t'), (b'\\x0B', b'\\xFF'),])\n        );\n        assert_eq!(t_bytes(\"(?s-u).\"), hir_bclass(&[(b'\\0', b'\\xFF'),]));\n\n        // If invalid UTF-8 isn't allowed, then non-Unicode `.` isn't allowed.\n        assert_eq!(\n            t_err(\"(?-u).\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(6, 1, 7)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(\"(?s-u).\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(6, 1, 7),\n                    Position::new(7, 1, 8)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn assertions() {\n        assert_eq!(t(\"^\"), hir_anchor(hir::Anchor::StartText));\n        assert_eq!(t(\"$\"), hir_anchor(hir::Anchor::EndText));\n        assert_eq!(t(r\"\\A\"), hir_anchor(hir::Anchor::StartText));\n        assert_eq!(t(r\"\\z\"), hir_anchor(hir::Anchor::EndText));\n        assert_eq!(t(\"(?m)^\"), hir_anchor(hir::Anchor::StartLine));\n        assert_eq!(t(\"(?m)$\"), hir_anchor(hir::Anchor::EndLine));\n        assert_eq!(t(r\"(?m)\\A\"), hir_anchor(hir::Anchor::StartText));\n        assert_eq!(t(r\"(?m)\\z\"), hir_anchor(hir::Anchor::EndText));\n\n        assert_eq!(t(r\"\\b\"), hir_word(hir::WordBoundary::Unicode));\n        assert_eq!(t(r\"\\B\"), hir_word(hir::WordBoundary::UnicodeNegate));\n        assert_eq!(t(r\"(?-u)\\b\"), hir_word(hir::WordBoundary::Ascii));\n        assert_eq!(\n            t_bytes(r\"(?-u)\\B\"),\n            hir_word(hir::WordBoundary::AsciiNegate)\n        );\n\n        assert_eq!(\n            t_err(r\"(?-u)\\B\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(7, 1, 8)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn group() {\n        assert_eq!(t(\"(a)\"), hir_group(1, hir_lit(\"a\")));\n        assert_eq!(\n            t(\"(a)(b)\"),\n            hir_cat(vec![\n                hir_group(1, hir_lit(\"a\")),\n                hir_group(2, hir_lit(\"b\")),\n            ])\n        );\n        assert_eq!(\n            t(\"(a)|(b)\"),\n            hir_alt(vec![\n                hir_group(1, hir_lit(\"a\")),\n                hir_group(2, hir_lit(\"b\")),\n            ])\n        );\n        assert_eq!(t(\"(?P<foo>)\"), hir_group_name(1, \"foo\", Hir::empty()));\n        assert_eq!(t(\"(?P<foo>a)\"), hir_group_name(1, \"foo\", hir_lit(\"a\")));\n        assert_eq!(\n            t(\"(?P<foo>a)(?P<bar>b)\"),\n            hir_cat(vec![\n                hir_group_name(1, \"foo\", hir_lit(\"a\")),\n                hir_group_name(2, \"bar\", hir_lit(\"b\")),\n            ])\n        );\n        assert_eq!(t(\"(?:)\"), hir_group_nocap(Hir::empty()));\n        assert_eq!(t(\"(?:a)\"), hir_group_nocap(hir_lit(\"a\")));\n        assert_eq!(\n            t(\"(?:a)(b)\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_lit(\"a\")),\n                hir_group(1, hir_lit(\"b\")),\n            ])\n        );\n        assert_eq!(\n            t(\"(a)(?:b)(c)\"),\n            hir_cat(vec![\n                hir_group(1, hir_lit(\"a\")),\n                hir_group_nocap(hir_lit(\"b\")),\n                hir_group(2, hir_lit(\"c\")),\n            ])\n        );\n        assert_eq!(\n            t(\"(a)(?P<foo>b)(c)\"),\n            hir_cat(vec![\n                hir_group(1, hir_lit(\"a\")),\n                hir_group_name(2, \"foo\", hir_lit(\"b\")),\n                hir_group(3, hir_lit(\"c\")),\n            ])\n        );\n        assert_eq!(t(\"()\"), hir_group(1, Hir::empty()));\n        assert_eq!(t(\"((?i))\"), hir_group(1, Hir::empty()));\n        assert_eq!(t(\"((?x))\"), hir_group(1, Hir::empty()));\n        assert_eq!(t(\"(((?x)))\"), hir_group(1, hir_group(2, Hir::empty())));\n    }\n\n    #[test]\n    fn flags() {\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i:a)a\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_uclass(&[('A', 'A'), ('a', 'a')])),\n                hir_lit(\"a\"),\n            ])\n        );\n        assert_eq!(\n            t(\"(?i-u:a)β\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_bclass(&[(b'A', b'A'), (b'a', b'a')])),\n                hir_lit(\"β\"),\n            ])\n        );\n        assert_eq!(\n            t(\"(?:(?i-u)a)b\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_bclass(&[(b'A', b'A'), (b'a', b'a')])),\n                hir_lit(\"b\"),\n            ])\n        );\n        assert_eq!(\n            t(\"((?i-u)a)b\"),\n            hir_cat(vec![\n                hir_group(1, hir_bclass(&[(b'A', b'A'), (b'a', b'a')])),\n                hir_lit(\"b\"),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)(?-i:a)a\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_lit(\"a\")),\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?im)a^\"),\n            hir_cat(vec![\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                hir_anchor(hir::Anchor::StartLine),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?im)a^(?i-m)a^\"),\n            hir_cat(vec![\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                hir_anchor(hir::Anchor::StartLine),\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                hir_anchor(hir::Anchor::StartText),\n            ])\n        );\n        assert_eq!(\n            t(\"(?U)a*a*?(?-U)a*a*?\"),\n            hir_cat(vec![\n                hir_star(false, hir_lit(\"a\")),\n                hir_star(true, hir_lit(\"a\")),\n                hir_star(true, hir_lit(\"a\")),\n                hir_star(false, hir_lit(\"a\")),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?:a(?i)a)a\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_cat(vec![\n                    hir_lit(\"a\"),\n                    hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                ])),\n                hir_lit(\"a\"),\n            ])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)(?:a(?-i)a)a\"),\n            hir_cat(vec![\n                hir_group_nocap(hir_cat(vec![\n                    hir_uclass(&[('A', 'A'), ('a', 'a')]),\n                    hir_lit(\"a\"),\n                ])),\n                hir_uclass(&[('A', 'A'), ('a', 'a')]),\n            ])\n        );\n    }\n\n    #[test]\n    fn escape() {\n        assert_eq!(\n            t(r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\"),\n            hir_lit(r\"\\.+*?()|[]{}^$#\")\n        );\n    }\n\n    #[test]\n    fn repetition() {\n        assert_eq!(t(\"a?\"), hir_quest(true, hir_lit(\"a\")));\n        assert_eq!(t(\"a*\"), hir_star(true, hir_lit(\"a\")));\n        assert_eq!(t(\"a+\"), hir_plus(true, hir_lit(\"a\")));\n        assert_eq!(t(\"a??\"), hir_quest(false, hir_lit(\"a\")));\n        assert_eq!(t(\"a*?\"), hir_star(false, hir_lit(\"a\")));\n        assert_eq!(t(\"a+?\"), hir_plus(false, hir_lit(\"a\")));\n\n        assert_eq!(\n            t(\"a{1}\"),\n            hir_range(true, hir::RepetitionRange::Exactly(1), hir_lit(\"a\"),)\n        );\n        assert_eq!(\n            t(\"a{1,}\"),\n            hir_range(true, hir::RepetitionRange::AtLeast(1), hir_lit(\"a\"),)\n        );\n        assert_eq!(\n            t(\"a{1,2}\"),\n            hir_range(true, hir::RepetitionRange::Bounded(1, 2), hir_lit(\"a\"),)\n        );\n        assert_eq!(\n            t(\"a{1}?\"),\n            hir_range(false, hir::RepetitionRange::Exactly(1), hir_lit(\"a\"),)\n        );\n        assert_eq!(\n            t(\"a{1,}?\"),\n            hir_range(false, hir::RepetitionRange::AtLeast(1), hir_lit(\"a\"),)\n        );\n        assert_eq!(\n            t(\"a{1,2}?\"),\n            hir_range(\n                false,\n                hir::RepetitionRange::Bounded(1, 2),\n                hir_lit(\"a\"),\n            )\n        );\n\n        assert_eq!(\n            t(\"ab?\"),\n            hir_cat(vec![hir_lit(\"a\"), hir_quest(true, hir_lit(\"b\")),])\n        );\n        assert_eq!(\n            t(\"(ab)?\"),\n            hir_quest(\n                true,\n                hir_group(1, hir_cat(vec![hir_lit(\"a\"), hir_lit(\"b\"),]))\n            )\n        );\n        assert_eq!(\n            t(\"a|b?\"),\n            hir_alt(vec![hir_lit(\"a\"), hir_quest(true, hir_lit(\"b\")),])\n        );\n    }\n\n    #[test]\n    fn cat_alt() {\n        assert_eq!(\n            t(\"(ab)\"),\n            hir_group(1, hir_cat(vec![hir_lit(\"a\"), hir_lit(\"b\"),]))\n        );\n        assert_eq!(t(\"a|b\"), hir_alt(vec![hir_lit(\"a\"), hir_lit(\"b\"),]));\n        assert_eq!(\n            t(\"a|b|c\"),\n            hir_alt(vec![hir_lit(\"a\"), hir_lit(\"b\"), hir_lit(\"c\"),])\n        );\n        assert_eq!(\n            t(\"ab|bc|cd\"),\n            hir_alt(vec![hir_lit(\"ab\"), hir_lit(\"bc\"), hir_lit(\"cd\"),])\n        );\n        assert_eq!(\n            t(\"(a|b)\"),\n            hir_group(1, hir_alt(vec![hir_lit(\"a\"), hir_lit(\"b\"),]))\n        );\n        assert_eq!(\n            t(\"(a|b|c)\"),\n            hir_group(\n                1,\n                hir_alt(vec![hir_lit(\"a\"), hir_lit(\"b\"), hir_lit(\"c\"),])\n            )\n        );\n        assert_eq!(\n            t(\"(ab|bc|cd)\"),\n            hir_group(\n                1,\n                hir_alt(vec![hir_lit(\"ab\"), hir_lit(\"bc\"), hir_lit(\"cd\"),])\n            )\n        );\n        assert_eq!(\n            t(\"(ab|(bc|(cd)))\"),\n            hir_group(\n                1,\n                hir_alt(vec![\n                    hir_lit(\"ab\"),\n                    hir_group(\n                        2,\n                        hir_alt(vec![\n                            hir_lit(\"bc\"),\n                            hir_group(3, hir_lit(\"cd\")),\n                        ])\n                    ),\n                ])\n            )\n        );\n    }\n\n    #[test]\n    fn class_ascii() {\n        assert_eq!(\n            t(\"[[:alnum:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Alnum))\n        );\n        assert_eq!(\n            t(\"[[:alpha:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Alpha))\n        );\n        assert_eq!(\n            t(\"[[:ascii:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Ascii))\n        );\n        assert_eq!(\n            t(\"[[:blank:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Blank))\n        );\n        assert_eq!(\n            t(\"[[:cntrl:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Cntrl))\n        );\n        assert_eq!(\n            t(\"[[:digit:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Digit))\n        );\n        assert_eq!(\n            t(\"[[:graph:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Graph))\n        );\n        assert_eq!(\n            t(\"[[:lower:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Lower))\n        );\n        assert_eq!(\n            t(\"[[:print:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Print))\n        );\n        assert_eq!(\n            t(\"[[:punct:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Punct))\n        );\n        assert_eq!(\n            t(\"[[:space:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Space))\n        );\n        assert_eq!(\n            t(\"[[:upper:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Upper))\n        );\n        assert_eq!(\n            t(\"[[:word:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Word))\n        );\n        assert_eq!(\n            t(\"[[:xdigit:]]\"),\n            hir_uclass(ascii_class(&ast::ClassAsciiKind::Xdigit))\n        );\n\n        assert_eq!(\n            t(\"[[:^lower:]]\"),\n            hir_negate(hir_uclass(ascii_class(&ast::ClassAsciiKind::Lower)))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[[:lower:]]\"),\n            hir_uclass(&[\n                ('A', 'Z'),\n                ('a', 'z'),\n                ('\\u{17F}', '\\u{17F}'),\n                ('\\u{212A}', '\\u{212A}'),\n            ])\n        );\n\n        assert_eq!(\n            t(\"(?-u)[[:lower:]]\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Lower))\n        );\n        assert_eq!(\n            t(\"(?i-u)[[:lower:]]\"),\n            hir_case_fold(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Lower\n            )))\n        );\n\n        assert_eq!(\n            t_err(\"(?-u)[[:^lower:]]\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(6, 1, 7),\n                    Position::new(16, 1, 17)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(\"(?i-u)[[:^lower:]]\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(7, 1, 8),\n                    Position::new(17, 1, 18)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-perl\")]\n    fn class_perl() {\n        // Unicode\n        assert_eq!(t(r\"\\d\"), hir_uclass_query(ClassQuery::Binary(\"digit\")));\n        assert_eq!(t(r\"\\s\"), hir_uclass_query(ClassQuery::Binary(\"space\")));\n        assert_eq!(t(r\"\\w\"), hir_uclass_perl_word());\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\d\"),\n            hir_uclass_query(ClassQuery::Binary(\"digit\"))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\s\"),\n            hir_uclass_query(ClassQuery::Binary(\"space\"))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(t(r\"(?i)\\w\"), hir_uclass_perl_word());\n\n        // Unicode, negated\n        assert_eq!(\n            t(r\"\\D\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"digit\")))\n        );\n        assert_eq!(\n            t(r\"\\S\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"space\")))\n        );\n        assert_eq!(t(r\"\\W\"), hir_negate(hir_uclass_perl_word()));\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\D\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"digit\")))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\S\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"space\")))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(t(r\"(?i)\\W\"), hir_negate(hir_uclass_perl_word()));\n\n        // ASCII only\n        assert_eq!(\n            t(r\"(?-u)\\d\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Digit))\n        );\n        assert_eq!(\n            t(r\"(?-u)\\s\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Space))\n        );\n        assert_eq!(\n            t(r\"(?-u)\\w\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Word))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\d\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Digit))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\s\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Space))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\w\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Word))\n        );\n\n        // ASCII only, negated\n        assert_eq!(\n            t(r\"(?-u)\\D\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Digit\n            )))\n        );\n        assert_eq!(\n            t(r\"(?-u)\\S\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Space\n            )))\n        );\n        assert_eq!(\n            t(r\"(?-u)\\W\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Word\n            )))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\D\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Digit\n            )))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\S\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Space\n            )))\n        );\n        assert_eq!(\n            t(r\"(?i-u)\\W\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Word\n            )))\n        );\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn class_perl_word_disabled() {\n        assert_eq!(\n            t_err(r\"\\w\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePerlClassNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(2, 1, 3)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(all(not(feature = \"unicode-perl\"), not(feature = \"unicode-bool\")))]\n    fn class_perl_space_disabled() {\n        assert_eq!(\n            t_err(r\"\\s\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePerlClassNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(2, 1, 3)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(all(\n        not(feature = \"unicode-perl\"),\n        not(feature = \"unicode-gencat\")\n    ))]\n    fn class_perl_digit_disabled() {\n        assert_eq!(\n            t_err(r\"\\d\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePerlClassNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(2, 1, 3)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-gencat\")]\n    fn class_unicode_gencat() {\n        assert_eq!(t(r\"\\pZ\"), hir_uclass_query(ClassQuery::Binary(\"Z\")));\n        assert_eq!(t(r\"\\pz\"), hir_uclass_query(ClassQuery::Binary(\"Z\")));\n        assert_eq!(\n            t(r\"\\p{Separator}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Z\"))\n        );\n        assert_eq!(\n            t(r\"\\p{se      PaRa ToR}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Z\"))\n        );\n        assert_eq!(\n            t(r\"\\p{gc:Separator}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Z\"))\n        );\n        assert_eq!(\n            t(r\"\\p{gc=Separator}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Z\"))\n        );\n        assert_eq!(\n            t(r\"\\p{Other}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Other\"))\n        );\n        assert_eq!(t(r\"\\pC\"), hir_uclass_query(ClassQuery::Binary(\"Other\")));\n\n        assert_eq!(\n            t(r\"\\PZ\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"Z\")))\n        );\n        assert_eq!(\n            t(r\"\\P{separator}\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"Z\")))\n        );\n        assert_eq!(\n            t(r\"\\P{gc!=separator}\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"Z\")))\n        );\n\n        assert_eq!(t(r\"\\p{any}\"), hir_uclass_query(ClassQuery::Binary(\"Any\")));\n        assert_eq!(\n            t(r\"\\p{assigned}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Assigned\"))\n        );\n        assert_eq!(\n            t(r\"\\p{ascii}\"),\n            hir_uclass_query(ClassQuery::Binary(\"ASCII\"))\n        );\n        assert_eq!(\n            t(r\"\\p{gc:any}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Any\"))\n        );\n        assert_eq!(\n            t(r\"\\p{gc:assigned}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Assigned\"))\n        );\n        assert_eq!(\n            t(r\"\\p{gc:ascii}\"),\n            hir_uclass_query(ClassQuery::Binary(\"ASCII\"))\n        );\n\n        assert_eq!(\n            t_err(r\"(?-u)\\pZ\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodeNotAllowed,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(8, 1, 9)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"(?-u)\\p{Separator}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodeNotAllowed,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(18, 1, 19)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"\\pE\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(3, 1, 4)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"\\p{Foo}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(7, 1, 8)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"\\p{gc:Foo}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyValueNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(10, 1, 11)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-gencat\"))]\n    fn class_unicode_gencat_disabled() {\n        assert_eq!(\n            t_err(r\"\\p{Separator}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(13, 1, 14)\n                ),\n            }\n        );\n\n        assert_eq!(\n            t_err(r\"\\p{Any}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(7, 1, 8)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-script\")]\n    fn class_unicode_script() {\n        assert_eq!(\n            t(r\"\\p{Greek}\"),\n            hir_uclass_query(ClassQuery::Binary(\"Greek\"))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\p{Greek}\"),\n            hir_case_fold(hir_uclass_query(ClassQuery::Binary(\"Greek\")))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)\\P{Greek}\"),\n            hir_negate(hir_case_fold(hir_uclass_query(ClassQuery::Binary(\n                \"Greek\"\n            ))))\n        );\n\n        assert_eq!(\n            t_err(r\"\\p{sc:Foo}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyValueNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(10, 1, 11)\n                ),\n            }\n        );\n        assert_eq!(\n            t_err(r\"\\p{scx:Foo}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyValueNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(11, 1, 12)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-script\"))]\n    fn class_unicode_script_disabled() {\n        assert_eq!(\n            t_err(r\"\\p{Greek}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(9, 1, 10)\n                ),\n            }\n        );\n\n        assert_eq!(\n            t_err(r\"\\p{scx:Greek}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(13, 1, 14)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-age\")]\n    fn class_unicode_age() {\n        assert_eq!(\n            t_err(r\"\\p{age:Foo}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyValueNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(11, 1, 12)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-age\"))]\n    fn class_unicode_age_disabled() {\n        assert_eq!(\n            t_err(r\"\\p{age:3.0}\"),\n            TestError {\n                kind: hir::ErrorKind::UnicodePropertyNotFound,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(11, 1, 12)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn class_bracketed() {\n        assert_eq!(t(\"[a]\"), hir_uclass(&[('a', 'a')]));\n        assert_eq!(t(\"[^[a]]\"), hir_negate(hir_uclass(&[('a', 'a')])));\n        assert_eq!(t(\"[a-z]\"), hir_uclass(&[('a', 'z')]));\n        assert_eq!(t(\"[a-fd-h]\"), hir_uclass(&[('a', 'h')]));\n        assert_eq!(t(\"[a-fg-m]\"), hir_uclass(&[('a', 'm')]));\n        assert_eq!(t(r\"[\\x00]\"), hir_uclass(&[('\\0', '\\0')]));\n        assert_eq!(t(r\"[\\n]\"), hir_uclass(&[('\\n', '\\n')]));\n        assert_eq!(t(\"[\\n]\"), hir_uclass(&[('\\n', '\\n')]));\n        #[cfg(any(feature = \"unicode-perl\", feature = \"unicode-gencat\"))]\n        assert_eq!(t(r\"[\\d]\"), hir_uclass_query(ClassQuery::Binary(\"digit\")));\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[\\pZ]\"),\n            hir_uclass_query(ClassQuery::Binary(\"separator\"))\n        );\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[\\p{separator}]\"),\n            hir_uclass_query(ClassQuery::Binary(\"separator\"))\n        );\n        #[cfg(any(feature = \"unicode-perl\", feature = \"unicode-gencat\"))]\n        assert_eq!(t(r\"[^\\D]\"), hir_uclass_query(ClassQuery::Binary(\"digit\")));\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[^\\PZ]\"),\n            hir_uclass_query(ClassQuery::Binary(\"separator\"))\n        );\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[^\\P{separator}]\"),\n            hir_uclass_query(ClassQuery::Binary(\"separator\"))\n        );\n        #[cfg(all(\n            feature = \"unicode-case\",\n            any(feature = \"unicode-perl\", feature = \"unicode-gencat\")\n        ))]\n        assert_eq!(\n            t(r\"(?i)[^\\D]\"),\n            hir_uclass_query(ClassQuery::Binary(\"digit\"))\n        );\n        #[cfg(all(feature = \"unicode-case\", feature = \"unicode-script\"))]\n        assert_eq!(\n            t(r\"(?i)[^\\P{greek}]\"),\n            hir_case_fold(hir_uclass_query(ClassQuery::Binary(\"greek\")))\n        );\n\n        assert_eq!(t(\"(?-u)[a]\"), hir_bclass(&[(b'a', b'a')]));\n        assert_eq!(t(r\"(?-u)[\\x00]\"), hir_bclass(&[(b'\\0', b'\\0')]));\n        assert_eq!(t_bytes(r\"(?-u)[\\xFF]\"), hir_bclass(&[(b'\\xFF', b'\\xFF')]));\n\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(t(\"(?i)[a]\"), hir_uclass(&[('A', 'A'), ('a', 'a')]));\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[k]\"),\n            hir_uclass(&[('K', 'K'), ('k', 'k'), ('\\u{212A}', '\\u{212A}'),])\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[β]\"),\n            hir_uclass(&[('Β', 'Β'), ('β', 'β'), ('ϐ', 'ϐ'),])\n        );\n        assert_eq!(t(\"(?i-u)[k]\"), hir_bclass(&[(b'K', b'K'), (b'k', b'k'),]));\n\n        assert_eq!(t(\"[^a]\"), hir_negate(hir_uclass(&[('a', 'a')])));\n        assert_eq!(t(r\"[^\\x00]\"), hir_negate(hir_uclass(&[('\\0', '\\0')])));\n        assert_eq!(\n            t_bytes(\"(?-u)[^a]\"),\n            hir_negate(hir_bclass(&[(b'a', b'a')]))\n        );\n        #[cfg(any(feature = \"unicode-perl\", feature = \"unicode-gencat\"))]\n        assert_eq!(\n            t(r\"[^\\d]\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"digit\")))\n        );\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[^\\pZ]\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"separator\")))\n        );\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[^\\p{separator}]\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"separator\")))\n        );\n        #[cfg(all(feature = \"unicode-case\", feature = \"unicode-script\"))]\n        assert_eq!(\n            t(r\"(?i)[^\\p{greek}]\"),\n            hir_negate(hir_case_fold(hir_uclass_query(ClassQuery::Binary(\n                \"greek\"\n            ))))\n        );\n        #[cfg(all(feature = \"unicode-case\", feature = \"unicode-script\"))]\n        assert_eq!(\n            t(r\"(?i)[\\P{greek}]\"),\n            hir_negate(hir_case_fold(hir_uclass_query(ClassQuery::Binary(\n                \"greek\"\n            ))))\n        );\n\n        // Test some weird cases.\n        assert_eq!(t(r\"[\\[]\"), hir_uclass(&[('[', '[')]));\n\n        assert_eq!(t(r\"[&]\"), hir_uclass(&[('&', '&')]));\n        assert_eq!(t(r\"[\\&]\"), hir_uclass(&[('&', '&')]));\n        assert_eq!(t(r\"[\\&\\&]\"), hir_uclass(&[('&', '&')]));\n        assert_eq!(t(r\"[\\x00-&]\"), hir_uclass(&[('\\0', '&')]));\n        assert_eq!(t(r\"[&-\\xFF]\"), hir_uclass(&[('&', '\\u{FF}')]));\n\n        assert_eq!(t(r\"[~]\"), hir_uclass(&[('~', '~')]));\n        assert_eq!(t(r\"[\\~]\"), hir_uclass(&[('~', '~')]));\n        assert_eq!(t(r\"[\\~\\~]\"), hir_uclass(&[('~', '~')]));\n        assert_eq!(t(r\"[\\x00-~]\"), hir_uclass(&[('\\0', '~')]));\n        assert_eq!(t(r\"[~-\\xFF]\"), hir_uclass(&[('~', '\\u{FF}')]));\n\n        assert_eq!(t(r\"[-]\"), hir_uclass(&[('-', '-')]));\n        assert_eq!(t(r\"[\\-]\"), hir_uclass(&[('-', '-')]));\n        assert_eq!(t(r\"[\\-\\-]\"), hir_uclass(&[('-', '-')]));\n        assert_eq!(t(r\"[\\x00-\\-]\"), hir_uclass(&[('\\0', '-')]));\n        assert_eq!(t(r\"[\\--\\xFF]\"), hir_uclass(&[('-', '\\u{FF}')]));\n\n        assert_eq!(\n            t_err(\"(?-u)[^a]\"),\n            TestError {\n                kind: hir::ErrorKind::InvalidUtf8,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(9, 1, 10)\n                ),\n            }\n        );\n        #[cfg(any(feature = \"unicode-perl\", feature = \"unicode-bool\"))]\n        assert_eq!(\n            t_err(r\"[^\\s\\S]\"),\n            TestError {\n                kind: hir::ErrorKind::EmptyClassNotAllowed,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(7, 1, 8)\n                ),\n            }\n        );\n        #[cfg(any(feature = \"unicode-perl\", feature = \"unicode-bool\"))]\n        assert_eq!(\n            t_err(r\"(?-u)[^\\s\\S]\"),\n            TestError {\n                kind: hir::ErrorKind::EmptyClassNotAllowed,\n                span: Span::new(\n                    Position::new(5, 1, 6),\n                    Position::new(12, 1, 13)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn class_bracketed_union() {\n        assert_eq!(t(\"[a-zA-Z]\"), hir_uclass(&[('A', 'Z'), ('a', 'z')]));\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[a\\pZb]\"),\n            hir_union(\n                hir_uclass(&[('a', 'b')]),\n                hir_uclass_query(ClassQuery::Binary(\"separator\"))\n            )\n        );\n        #[cfg(all(feature = \"unicode-gencat\", feature = \"unicode-script\"))]\n        assert_eq!(\n            t(r\"[\\pZ\\p{Greek}]\"),\n            hir_union(\n                hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                hir_uclass_query(ClassQuery::Binary(\"separator\"))\n            )\n        );\n        #[cfg(all(\n            feature = \"unicode-age\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-script\"\n        ))]\n        assert_eq!(\n            t(r\"[\\p{age:3.0}\\pZ\\p{Greek}]\"),\n            hir_union(\n                hir_uclass_query(ClassQuery::ByValue {\n                    property_name: \"age\",\n                    property_value: \"3.0\",\n                }),\n                hir_union(\n                    hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                    hir_uclass_query(ClassQuery::Binary(\"separator\"))\n                )\n            )\n        );\n        #[cfg(all(\n            feature = \"unicode-age\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-script\"\n        ))]\n        assert_eq!(\n            t(r\"[[[\\p{age:3.0}\\pZ]\\p{Greek}][\\p{Cyrillic}]]\"),\n            hir_union(\n                hir_uclass_query(ClassQuery::ByValue {\n                    property_name: \"age\",\n                    property_value: \"3.0\",\n                }),\n                hir_union(\n                    hir_uclass_query(ClassQuery::Binary(\"cyrillic\")),\n                    hir_union(\n                        hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                        hir_uclass_query(ClassQuery::Binary(\"separator\"))\n                    )\n                )\n            )\n        );\n\n        #[cfg(all(\n            feature = \"unicode-age\",\n            feature = \"unicode-case\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-script\"\n        ))]\n        assert_eq!(\n            t(r\"(?i)[\\p{age:3.0}\\pZ\\p{Greek}]\"),\n            hir_case_fold(hir_union(\n                hir_uclass_query(ClassQuery::ByValue {\n                    property_name: \"age\",\n                    property_value: \"3.0\",\n                }),\n                hir_union(\n                    hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                    hir_uclass_query(ClassQuery::Binary(\"separator\"))\n                )\n            ))\n        );\n        #[cfg(all(\n            feature = \"unicode-age\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-script\"\n        ))]\n        assert_eq!(\n            t(r\"[^\\p{age:3.0}\\pZ\\p{Greek}]\"),\n            hir_negate(hir_union(\n                hir_uclass_query(ClassQuery::ByValue {\n                    property_name: \"age\",\n                    property_value: \"3.0\",\n                }),\n                hir_union(\n                    hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                    hir_uclass_query(ClassQuery::Binary(\"separator\"))\n                )\n            ))\n        );\n        #[cfg(all(\n            feature = \"unicode-age\",\n            feature = \"unicode-case\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-script\"\n        ))]\n        assert_eq!(\n            t(r\"(?i)[^\\p{age:3.0}\\pZ\\p{Greek}]\"),\n            hir_negate(hir_case_fold(hir_union(\n                hir_uclass_query(ClassQuery::ByValue {\n                    property_name: \"age\",\n                    property_value: \"3.0\",\n                }),\n                hir_union(\n                    hir_uclass_query(ClassQuery::Binary(\"greek\")),\n                    hir_uclass_query(ClassQuery::Binary(\"separator\"))\n                )\n            )))\n        );\n    }\n\n    #[test]\n    fn class_bracketed_nested() {\n        assert_eq!(t(r\"[a[^c]]\"), hir_negate(hir_uclass(&[('c', 'c')])));\n        assert_eq!(t(r\"[a-b[^c]]\"), hir_negate(hir_uclass(&[('c', 'c')])));\n        assert_eq!(t(r\"[a-c[^c]]\"), hir_negate(hir_uclass(&[])));\n\n        assert_eq!(t(r\"[^a[^c]]\"), hir_uclass(&[('c', 'c')]));\n        assert_eq!(t(r\"[^a-b[^c]]\"), hir_uclass(&[('c', 'c')]));\n\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)[a[^c]]\"),\n            hir_negate(hir_case_fold(hir_uclass(&[('c', 'c')])))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)[a-b[^c]]\"),\n            hir_negate(hir_case_fold(hir_uclass(&[('c', 'c')])))\n        );\n\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(t(r\"(?i)[^a[^c]]\"), hir_uclass(&[('C', 'C'), ('c', 'c')]));\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(r\"(?i)[^a-b[^c]]\"),\n            hir_uclass(&[('C', 'C'), ('c', 'c')])\n        );\n\n        assert_eq!(\n            t_err(r\"[^a-c[^c]]\"),\n            TestError {\n                kind: hir::ErrorKind::EmptyClassNotAllowed,\n                span: Span::new(\n                    Position::new(0, 1, 1),\n                    Position::new(10, 1, 11)\n                ),\n            }\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t_err(r\"(?i)[^a-c[^c]]\"),\n            TestError {\n                kind: hir::ErrorKind::EmptyClassNotAllowed,\n                span: Span::new(\n                    Position::new(4, 1, 5),\n                    Position::new(14, 1, 15)\n                ),\n            }\n        );\n    }\n\n    #[test]\n    fn class_bracketed_intersect() {\n        assert_eq!(t(\"[abc&&b-c]\"), hir_uclass(&[('b', 'c')]));\n        assert_eq!(t(\"[abc&&[b-c]]\"), hir_uclass(&[('b', 'c')]));\n        assert_eq!(t(\"[[abc]&&[b-c]]\"), hir_uclass(&[('b', 'c')]));\n        assert_eq!(t(\"[a-z&&b-y&&c-x]\"), hir_uclass(&[('c', 'x')]));\n        assert_eq!(t(\"[c-da-b&&a-d]\"), hir_uclass(&[('a', 'd')]));\n        assert_eq!(t(\"[a-d&&c-da-b]\"), hir_uclass(&[('a', 'd')]));\n        assert_eq!(t(r\"[a-z&&a-c]\"), hir_uclass(&[('a', 'c')]));\n        assert_eq!(t(r\"[[a-z&&a-c]]\"), hir_uclass(&[('a', 'c')]));\n        assert_eq!(t(r\"[^[a-z&&a-c]]\"), hir_negate(hir_uclass(&[('a', 'c')])));\n\n        assert_eq!(t(\"(?-u)[abc&&b-c]\"), hir_bclass(&[(b'b', b'c')]));\n        assert_eq!(t(\"(?-u)[abc&&[b-c]]\"), hir_bclass(&[(b'b', b'c')]));\n        assert_eq!(t(\"(?-u)[[abc]&&[b-c]]\"), hir_bclass(&[(b'b', b'c')]));\n        assert_eq!(t(\"(?-u)[a-z&&b-y&&c-x]\"), hir_bclass(&[(b'c', b'x')]));\n        assert_eq!(t(\"(?-u)[c-da-b&&a-d]\"), hir_bclass(&[(b'a', b'd')]));\n        assert_eq!(t(\"(?-u)[a-d&&c-da-b]\"), hir_bclass(&[(b'a', b'd')]));\n\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[abc&&b-c]\"),\n            hir_case_fold(hir_uclass(&[('b', 'c')]))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[abc&&[b-c]]\"),\n            hir_case_fold(hir_uclass(&[('b', 'c')]))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[[abc]&&[b-c]]\"),\n            hir_case_fold(hir_uclass(&[('b', 'c')]))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[a-z&&b-y&&c-x]\"),\n            hir_case_fold(hir_uclass(&[('c', 'x')]))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[c-da-b&&a-d]\"),\n            hir_case_fold(hir_uclass(&[('a', 'd')]))\n        );\n        #[cfg(feature = \"unicode-case\")]\n        assert_eq!(\n            t(\"(?i)[a-d&&c-da-b]\"),\n            hir_case_fold(hir_uclass(&[('a', 'd')]))\n        );\n\n        assert_eq!(\n            t(\"(?i-u)[abc&&b-c]\"),\n            hir_case_fold(hir_bclass(&[(b'b', b'c')]))\n        );\n        assert_eq!(\n            t(\"(?i-u)[abc&&[b-c]]\"),\n            hir_case_fold(hir_bclass(&[(b'b', b'c')]))\n        );\n        assert_eq!(\n            t(\"(?i-u)[[abc]&&[b-c]]\"),\n            hir_case_fold(hir_bclass(&[(b'b', b'c')]))\n        );\n        assert_eq!(\n            t(\"(?i-u)[a-z&&b-y&&c-x]\"),\n            hir_case_fold(hir_bclass(&[(b'c', b'x')]))\n        );\n        assert_eq!(\n            t(\"(?i-u)[c-da-b&&a-d]\"),\n            hir_case_fold(hir_bclass(&[(b'a', b'd')]))\n        );\n        assert_eq!(\n            t(\"(?i-u)[a-d&&c-da-b]\"),\n            hir_case_fold(hir_bclass(&[(b'a', b'd')]))\n        );\n\n        // In `[a^]`, `^` does not need to be escaped, so it makes sense that\n        // `^` is also allowed to be unescaped after `&&`.\n        assert_eq!(t(r\"[\\^&&^]\"), hir_uclass(&[('^', '^')]));\n        // `]` needs to be escaped after `&&` since it's not at start of class.\n        assert_eq!(t(r\"[]&&\\]]\"), hir_uclass(&[(']', ']')]));\n        assert_eq!(t(r\"[-&&-]\"), hir_uclass(&[('-', '-')]));\n        assert_eq!(t(r\"[\\&&&&]\"), hir_uclass(&[('&', '&')]));\n        assert_eq!(t(r\"[\\&&&\\&]\"), hir_uclass(&[('&', '&')]));\n        // Test precedence.\n        assert_eq!(\n            t(r\"[a-w&&[^c-g]z]\"),\n            hir_uclass(&[('a', 'b'), ('h', 'w')])\n        );\n    }\n\n    #[test]\n    fn class_bracketed_intersect_negate() {\n        #[cfg(feature = \"unicode-perl\")]\n        assert_eq!(\n            t(r\"[^\\w&&\\d]\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"digit\")))\n        );\n        assert_eq!(t(r\"[^[a-z&&a-c]]\"), hir_negate(hir_uclass(&[('a', 'c')])));\n        #[cfg(feature = \"unicode-perl\")]\n        assert_eq!(\n            t(r\"[^[\\w&&\\d]]\"),\n            hir_negate(hir_uclass_query(ClassQuery::Binary(\"digit\")))\n        );\n        #[cfg(feature = \"unicode-perl\")]\n        assert_eq!(\n            t(r\"[^[^\\w&&\\d]]\"),\n            hir_uclass_query(ClassQuery::Binary(\"digit\"))\n        );\n        #[cfg(feature = \"unicode-perl\")]\n        assert_eq!(t(r\"[[[^\\w]&&[^\\d]]]\"), hir_negate(hir_uclass_perl_word()));\n\n        #[cfg(feature = \"unicode-perl\")]\n        assert_eq!(\n            t_bytes(r\"(?-u)[^\\w&&\\d]\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Digit\n            )))\n        );\n        assert_eq!(\n            t_bytes(r\"(?-u)[^[a-z&&a-c]]\"),\n            hir_negate(hir_bclass(&[(b'a', b'c')]))\n        );\n        assert_eq!(\n            t_bytes(r\"(?-u)[^[\\w&&\\d]]\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Digit\n            )))\n        );\n        assert_eq!(\n            t_bytes(r\"(?-u)[^[^\\w&&\\d]]\"),\n            hir_bclass_from_char(ascii_class(&ast::ClassAsciiKind::Digit))\n        );\n        assert_eq!(\n            t_bytes(r\"(?-u)[[[^\\w]&&[^\\d]]]\"),\n            hir_negate(hir_bclass_from_char(ascii_class(\n                &ast::ClassAsciiKind::Word\n            )))\n        );\n    }\n\n    #[test]\n    fn class_bracketed_difference() {\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"[\\pL--[:ascii:]]\"),\n            hir_difference(\n                hir_uclass_query(ClassQuery::Binary(\"letter\")),\n                hir_uclass(&[('\\0', '\\x7F')])\n            )\n        );\n\n        assert_eq!(\n            t(r\"(?-u)[[:alpha:]--[:lower:]]\"),\n            hir_bclass(&[(b'A', b'Z')])\n        );\n    }\n\n    #[test]\n    fn class_bracketed_symmetric_difference() {\n        #[cfg(feature = \"unicode-script\")]\n        assert_eq!(\n            t(r\"[\\p{sc:Greek}~~\\p{scx:Greek}]\"),\n            hir_uclass(&[\n                ('\\u{0342}', '\\u{0342}'),\n                ('\\u{0345}', '\\u{0345}'),\n                ('\\u{1DC0}', '\\u{1DC1}'),\n            ])\n        );\n        assert_eq!(t(r\"[a-g~~c-j]\"), hir_uclass(&[('a', 'b'), ('h', 'j')]));\n\n        assert_eq!(\n            t(r\"(?-u)[a-g~~c-j]\"),\n            hir_bclass(&[(b'a', b'b'), (b'h', b'j')])\n        );\n    }\n\n    #[test]\n    fn ignore_whitespace() {\n        assert_eq!(t(r\"(?x)\\12 3\"), hir_lit(\"\\n3\"));\n        assert_eq!(t(r\"(?x)\\x { 53 }\"), hir_lit(\"S\"));\n        assert_eq!(\n            t(r\"(?x)\\x # comment\n{ # comment\n    53 # comment\n} #comment\"),\n            hir_lit(\"S\")\n        );\n\n        assert_eq!(t(r\"(?x)\\x 53\"), hir_lit(\"S\"));\n        assert_eq!(\n            t(r\"(?x)\\x # comment\n        53 # comment\"),\n            hir_lit(\"S\")\n        );\n        assert_eq!(t(r\"(?x)\\x5 3\"), hir_lit(\"S\"));\n\n        #[cfg(feature = \"unicode-gencat\")]\n        assert_eq!(\n            t(r\"(?x)\\p # comment\n{ # comment\n    Separator # comment\n} # comment\"),\n            hir_uclass_query(ClassQuery::Binary(\"separator\"))\n        );\n\n        assert_eq!(\n            t(r\"(?x)a # comment\n{ # comment\n    5 # comment\n    , # comment\n    10 # comment\n} # comment\"),\n            hir_range(\n                true,\n                hir::RepetitionRange::Bounded(5, 10),\n                hir_lit(\"a\")\n            )\n        );\n\n        assert_eq!(t(r\"(?x)a\\  # hi there\"), hir_lit(\"a \"));\n    }\n\n    #[test]\n    fn analysis_is_always_utf8() {\n        // Positive examples.\n        assert!(t_bytes(r\"a\").is_always_utf8());\n        assert!(t_bytes(r\"ab\").is_always_utf8());\n        assert!(t_bytes(r\"(?-u)a\").is_always_utf8());\n        assert!(t_bytes(r\"(?-u)ab\").is_always_utf8());\n        assert!(t_bytes(r\"\\xFF\").is_always_utf8());\n        assert!(t_bytes(r\"\\xFF\\xFF\").is_always_utf8());\n        assert!(t_bytes(r\"[^a]\").is_always_utf8());\n        assert!(t_bytes(r\"[^a][^a]\").is_always_utf8());\n        assert!(t_bytes(r\"\\b\").is_always_utf8());\n        assert!(t_bytes(r\"\\B\").is_always_utf8());\n        assert!(t_bytes(r\"(?-u)\\b\").is_always_utf8());\n\n        // Negative examples.\n        assert!(!t_bytes(r\"(?-u)\\xFF\").is_always_utf8());\n        assert!(!t_bytes(r\"(?-u)\\xFF\\xFF\").is_always_utf8());\n        assert!(!t_bytes(r\"(?-u)[^a]\").is_always_utf8());\n        assert!(!t_bytes(r\"(?-u)[^a][^a]\").is_always_utf8());\n        assert!(!t_bytes(r\"(?-u)\\B\").is_always_utf8());\n    }\n\n    #[test]\n    fn analysis_is_all_assertions() {\n        // Positive examples.\n        assert!(t(r\"\\b\").is_all_assertions());\n        assert!(t(r\"\\B\").is_all_assertions());\n        assert!(t(r\"^\").is_all_assertions());\n        assert!(t(r\"$\").is_all_assertions());\n        assert!(t(r\"\\A\").is_all_assertions());\n        assert!(t(r\"\\z\").is_all_assertions());\n        assert!(t(r\"$^\\z\\A\\b\\B\").is_all_assertions());\n        assert!(t(r\"$|^|\\z|\\A|\\b|\\B\").is_all_assertions());\n        assert!(t(r\"^$|$^\").is_all_assertions());\n        assert!(t(r\"((\\b)+())*^\").is_all_assertions());\n\n        // Negative examples.\n        assert!(!t(r\"^a\").is_all_assertions());\n    }\n\n    #[test]\n    fn analysis_is_anchored() {\n        // Positive examples.\n        assert!(t(r\"^\").is_anchored_start());\n        assert!(t(r\"$\").is_anchored_end());\n        assert!(t(r\"^\").is_line_anchored_start());\n        assert!(t(r\"$\").is_line_anchored_end());\n\n        assert!(t(r\"^^\").is_anchored_start());\n        assert!(t(r\"$$\").is_anchored_end());\n        assert!(t(r\"^^\").is_line_anchored_start());\n        assert!(t(r\"$$\").is_line_anchored_end());\n\n        assert!(t(r\"^$\").is_anchored_start());\n        assert!(t(r\"^$\").is_anchored_end());\n        assert!(t(r\"^$\").is_line_anchored_start());\n        assert!(t(r\"^$\").is_line_anchored_end());\n\n        assert!(t(r\"^foo\").is_anchored_start());\n        assert!(t(r\"foo$\").is_anchored_end());\n        assert!(t(r\"^foo\").is_line_anchored_start());\n        assert!(t(r\"foo$\").is_line_anchored_end());\n\n        assert!(t(r\"^foo|^bar\").is_anchored_start());\n        assert!(t(r\"foo$|bar$\").is_anchored_end());\n        assert!(t(r\"^foo|^bar\").is_line_anchored_start());\n        assert!(t(r\"foo$|bar$\").is_line_anchored_end());\n\n        assert!(t(r\"^(foo|bar)\").is_anchored_start());\n        assert!(t(r\"(foo|bar)$\").is_anchored_end());\n        assert!(t(r\"^(foo|bar)\").is_line_anchored_start());\n        assert!(t(r\"(foo|bar)$\").is_line_anchored_end());\n\n        assert!(t(r\"^+\").is_anchored_start());\n        assert!(t(r\"$+\").is_anchored_end());\n        assert!(t(r\"^+\").is_line_anchored_start());\n        assert!(t(r\"$+\").is_line_anchored_end());\n        assert!(t(r\"^++\").is_anchored_start());\n        assert!(t(r\"$++\").is_anchored_end());\n        assert!(t(r\"^++\").is_line_anchored_start());\n        assert!(t(r\"$++\").is_line_anchored_end());\n        assert!(t(r\"(^)+\").is_anchored_start());\n        assert!(t(r\"($)+\").is_anchored_end());\n        assert!(t(r\"(^)+\").is_line_anchored_start());\n        assert!(t(r\"($)+\").is_line_anchored_end());\n\n        assert!(t(r\"$^\").is_anchored_start());\n        assert!(t(r\"$^\").is_anchored_start());\n        assert!(t(r\"$^\").is_line_anchored_end());\n        assert!(t(r\"$^\").is_line_anchored_end());\n        assert!(t(r\"$^|^$\").is_anchored_start());\n        assert!(t(r\"$^|^$\").is_anchored_end());\n        assert!(t(r\"$^|^$\").is_line_anchored_start());\n        assert!(t(r\"$^|^$\").is_line_anchored_end());\n\n        assert!(t(r\"\\b^\").is_anchored_start());\n        assert!(t(r\"$\\b\").is_anchored_end());\n        assert!(t(r\"\\b^\").is_line_anchored_start());\n        assert!(t(r\"$\\b\").is_line_anchored_end());\n        assert!(t(r\"^(?m:^)\").is_anchored_start());\n        assert!(t(r\"(?m:$)$\").is_anchored_end());\n        assert!(t(r\"^(?m:^)\").is_line_anchored_start());\n        assert!(t(r\"(?m:$)$\").is_line_anchored_end());\n        assert!(t(r\"(?m:^)^\").is_anchored_start());\n        assert!(t(r\"$(?m:$)\").is_anchored_end());\n        assert!(t(r\"(?m:^)^\").is_line_anchored_start());\n        assert!(t(r\"$(?m:$)\").is_line_anchored_end());\n\n        // Negative examples.\n        assert!(!t(r\"(?m)^\").is_anchored_start());\n        assert!(!t(r\"(?m)$\").is_anchored_end());\n        assert!(!t(r\"(?m:^$)|$^\").is_anchored_start());\n        assert!(!t(r\"(?m:^$)|$^\").is_anchored_end());\n        assert!(!t(r\"$^|(?m:^$)\").is_anchored_start());\n        assert!(!t(r\"$^|(?m:^$)\").is_anchored_end());\n\n        assert!(!t(r\"a^\").is_anchored_start());\n        assert!(!t(r\"$a\").is_anchored_start());\n        assert!(!t(r\"a^\").is_line_anchored_start());\n        assert!(!t(r\"$a\").is_line_anchored_start());\n\n        assert!(!t(r\"a^\").is_anchored_end());\n        assert!(!t(r\"$a\").is_anchored_end());\n        assert!(!t(r\"a^\").is_line_anchored_end());\n        assert!(!t(r\"$a\").is_line_anchored_end());\n\n        assert!(!t(r\"^foo|bar\").is_anchored_start());\n        assert!(!t(r\"foo|bar$\").is_anchored_end());\n        assert!(!t(r\"^foo|bar\").is_line_anchored_start());\n        assert!(!t(r\"foo|bar$\").is_line_anchored_end());\n\n        assert!(!t(r\"^*\").is_anchored_start());\n        assert!(!t(r\"$*\").is_anchored_end());\n        assert!(!t(r\"^*\").is_line_anchored_start());\n        assert!(!t(r\"$*\").is_line_anchored_end());\n        assert!(!t(r\"^*+\").is_anchored_start());\n        assert!(!t(r\"$*+\").is_anchored_end());\n        assert!(!t(r\"^*+\").is_line_anchored_start());\n        assert!(!t(r\"$*+\").is_line_anchored_end());\n        assert!(!t(r\"^+*\").is_anchored_start());\n        assert!(!t(r\"$+*\").is_anchored_end());\n        assert!(!t(r\"^+*\").is_line_anchored_start());\n        assert!(!t(r\"$+*\").is_line_anchored_end());\n        assert!(!t(r\"(^)*\").is_anchored_start());\n        assert!(!t(r\"($)*\").is_anchored_end());\n        assert!(!t(r\"(^)*\").is_line_anchored_start());\n        assert!(!t(r\"($)*\").is_line_anchored_end());\n    }\n\n    #[test]\n    fn analysis_is_line_anchored() {\n        assert!(t(r\"(?m)^(foo|bar)\").is_line_anchored_start());\n        assert!(t(r\"(?m)(foo|bar)$\").is_line_anchored_end());\n\n        assert!(t(r\"(?m)^foo|^bar\").is_line_anchored_start());\n        assert!(t(r\"(?m)foo$|bar$\").is_line_anchored_end());\n\n        assert!(t(r\"(?m)^\").is_line_anchored_start());\n        assert!(t(r\"(?m)$\").is_line_anchored_end());\n\n        assert!(t(r\"(?m:^$)|$^\").is_line_anchored_start());\n        assert!(t(r\"(?m:^$)|$^\").is_line_anchored_end());\n\n        assert!(t(r\"$^|(?m:^$)\").is_line_anchored_start());\n        assert!(t(r\"$^|(?m:^$)\").is_line_anchored_end());\n    }\n\n    #[test]\n    fn analysis_is_any_anchored() {\n        // Positive examples.\n        assert!(t(r\"^\").is_any_anchored_start());\n        assert!(t(r\"$\").is_any_anchored_end());\n        assert!(t(r\"\\A\").is_any_anchored_start());\n        assert!(t(r\"\\z\").is_any_anchored_end());\n\n        // Negative examples.\n        assert!(!t(r\"(?m)^\").is_any_anchored_start());\n        assert!(!t(r\"(?m)$\").is_any_anchored_end());\n        assert!(!t(r\"$\").is_any_anchored_start());\n        assert!(!t(r\"^\").is_any_anchored_end());\n    }\n\n    #[test]\n    fn analysis_is_match_empty() {\n        // Positive examples.\n        assert!(t(r\"\").is_match_empty());\n        assert!(t(r\"()\").is_match_empty());\n        assert!(t(r\"()*\").is_match_empty());\n        assert!(t(r\"()+\").is_match_empty());\n        assert!(t(r\"()?\").is_match_empty());\n        assert!(t(r\"a*\").is_match_empty());\n        assert!(t(r\"a?\").is_match_empty());\n        assert!(t(r\"a{0}\").is_match_empty());\n        assert!(t(r\"a{0,}\").is_match_empty());\n        assert!(t(r\"a{0,1}\").is_match_empty());\n        assert!(t(r\"a{0,10}\").is_match_empty());\n        #[cfg(feature = \"unicode-gencat\")]\n        assert!(t(r\"\\pL*\").is_match_empty());\n        assert!(t(r\"a*|b\").is_match_empty());\n        assert!(t(r\"b|a*\").is_match_empty());\n        assert!(t(r\"a*a?(abcd)*\").is_match_empty());\n        assert!(t(r\"^\").is_match_empty());\n        assert!(t(r\"$\").is_match_empty());\n        assert!(t(r\"(?m)^\").is_match_empty());\n        assert!(t(r\"(?m)$\").is_match_empty());\n        assert!(t(r\"\\A\").is_match_empty());\n        assert!(t(r\"\\z\").is_match_empty());\n        assert!(t(r\"\\B\").is_match_empty());\n        assert!(t_bytes(r\"(?-u)\\B\").is_match_empty());\n\n        // Negative examples.\n        assert!(!t(r\"a+\").is_match_empty());\n        assert!(!t(r\"a{1}\").is_match_empty());\n        assert!(!t(r\"a{1,}\").is_match_empty());\n        assert!(!t(r\"a{1,2}\").is_match_empty());\n        assert!(!t(r\"a{1,10}\").is_match_empty());\n        assert!(!t(r\"b|a\").is_match_empty());\n        assert!(!t(r\"a*a+(abcd)*\").is_match_empty());\n        assert!(!t(r\"\\b\").is_match_empty());\n        assert!(!t(r\"(?-u)\\b\").is_match_empty());\n    }\n\n    #[test]\n    fn analysis_is_literal() {\n        // Positive examples.\n        assert!(t(r\"a\").is_literal());\n        assert!(t(r\"ab\").is_literal());\n        assert!(t(r\"abc\").is_literal());\n        assert!(t(r\"(?m)abc\").is_literal());\n\n        // Negative examples.\n        assert!(!t(r\"\").is_literal());\n        assert!(!t(r\"^\").is_literal());\n        assert!(!t(r\"a|b\").is_literal());\n        assert!(!t(r\"(a)\").is_literal());\n        assert!(!t(r\"a+\").is_literal());\n        assert!(!t(r\"foo(a)\").is_literal());\n        assert!(!t(r\"(a)foo\").is_literal());\n        assert!(!t(r\"[a]\").is_literal());\n    }\n\n    #[test]\n    fn analysis_is_alternation_literal() {\n        // Positive examples.\n        assert!(t(r\"a\").is_alternation_literal());\n        assert!(t(r\"ab\").is_alternation_literal());\n        assert!(t(r\"abc\").is_alternation_literal());\n        assert!(t(r\"(?m)abc\").is_alternation_literal());\n        assert!(t(r\"a|b\").is_alternation_literal());\n        assert!(t(r\"a|b|c\").is_alternation_literal());\n        assert!(t(r\"foo|bar\").is_alternation_literal());\n        assert!(t(r\"foo|bar|baz\").is_alternation_literal());\n\n        // Negative examples.\n        assert!(!t(r\"\").is_alternation_literal());\n        assert!(!t(r\"^\").is_alternation_literal());\n        assert!(!t(r\"(a)\").is_alternation_literal());\n        assert!(!t(r\"a+\").is_alternation_literal());\n        assert!(!t(r\"foo(a)\").is_alternation_literal());\n        assert!(!t(r\"(a)foo\").is_alternation_literal());\n        assert!(!t(r\"[a]\").is_alternation_literal());\n        assert!(!t(r\"[a]|b\").is_alternation_literal());\n        assert!(!t(r\"a|[b]\").is_alternation_literal());\n        assert!(!t(r\"(a)|b\").is_alternation_literal());\n        assert!(!t(r\"a|(b)\").is_alternation_literal());\n    }\n}\n","traces":[{"line":22,"address":[6348176],"length":1,"stats":{"Line":15},"fn_name":"default"},{"line":23,"address":[6348180],"length":1,"stats":{"Line":15},"fn_name":null},{"line":29,"address":[6348256],"length":1,"stats":{"Line":15},"fn_name":"new"},{"line":32,"address":[6348260],"length":1,"stats":{"Line":15},"fn_name":null},{"line":37,"address":[6348398,6348352],"length":1,"stats":{"Line":15},"fn_name":"build"},{"line":39,"address":[6348367,6348413],"length":1,"stats":{"Line":30},"fn_name":null},{"line":40,"address":[6348434,6348515],"length":1,"stats":{"Line":30},"fn_name":null},{"line":41,"address":[6348562],"length":1,"stats":{"Line":15},"fn_name":null},{"line":56,"address":[6348672],"length":1,"stats":{"Line":15},"fn_name":"allow_invalid_utf8"},{"line":57,"address":[6348689],"length":1,"stats":{"Line":15},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":62,"address":[6348704],"length":1,"stats":{"Line":15},"fn_name":"case_insensitive"},{"line":63,"address":[6348722],"length":1,"stats":{"Line":15},"fn_name":null},{"line":64,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[6348768],"length":1,"stats":{"Line":15},"fn_name":"multi_line"},{"line":69,"address":[6348786],"length":1,"stats":{"Line":15},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[6348832],"length":1,"stats":{"Line":15},"fn_name":"dot_matches_new_line"},{"line":79,"address":[6348850],"length":1,"stats":{"Line":15},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[6348896],"length":1,"stats":{"Line":15},"fn_name":"swap_greed"},{"line":85,"address":[6348914],"length":1,"stats":{"Line":15},"fn_name":null},{"line":86,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[6348960],"length":1,"stats":{"Line":15},"fn_name":"unicode"},{"line":91,"address":[6348978],"length":1,"stats":{"Line":15},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[6349024],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":117,"address":[6349031],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[6349120],"length":1,"stats":{"Line":9},"fn_name":"translate"},{"line":130,"address":[6349147],"length":1,"stats":{"Line":9},"fn_name":null},{"line":188,"address":[6349216,6349254],"length":1,"stats":{"Line":14},"fn_name":"unwrap_expr"},{"line":189,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[6349359,6349226],"length":1,"stats":{"Line":28},"fn_name":null},{"line":191,"address":[6349469,6349269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[6349654,6349616],"length":1,"stats":{"Line":8},"fn_name":"unwrap_class_unicode"},{"line":198,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[6349626,6349759],"length":1,"stats":{"Line":16},"fn_name":null},{"line":200,"address":[6349681,6349851],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[6349984,6350022],"length":1,"stats":{"Line":8},"fn_name":"unwrap_class_bytes"},{"line":211,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[6349994,6350127],"length":1,"stats":{"Line":16},"fn_name":null},{"line":213,"address":[6350049,6350219],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[6350377,6350352],"length":1,"stats":{"Line":14},"fn_name":"unwrap_group"},{"line":225,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[6350476,6350359],"length":1,"stats":{"Line":28},"fn_name":null},{"line":227,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[6350572,6350506,6350392],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[6350656,6350699],"length":1,"stats":{"Line":9},"fn_name":"finish"},{"line":240,"address":[6350714,6350674],"length":1,"stats":{"Line":18},"fn_name":null},{"line":241,"address":[6351245],"length":1,"stats":{"Line":9},"fn_name":null},{"line":244,"address":[6351408],"length":1,"stats":{"Line":9},"fn_name":"visit_pre"},{"line":245,"address":[6351488,6351832,6352324,6352142,6352219,6352250,6352352],"length":1,"stats":{"Line":48},"fn_name":null},{"line":246,"address":[6351498,6351431],"length":1,"stats":{"Line":17},"fn_name":null},{"line":247,"address":[6351505,6351830,6351706],"length":1,"stats":{"Line":24},"fn_name":null},{"line":248,"address":[6351597],"length":1,"stats":{"Line":8},"fn_name":null},{"line":249,"address":[6351608],"length":1,"stats":{"Line":8},"fn_name":null},{"line":251,"address":[6351581],"length":1,"stats":{"Line":8},"fn_name":null},{"line":252,"address":[6351708],"length":1,"stats":{"Line":8},"fn_name":null},{"line":255,"address":[6351842],"length":1,"stats":{"Line":9},"fn_name":null},{"line":256,"address":[6351856,6351966,6351883],"length":1,"stats":{"Line":27},"fn_name":null},{"line":258,"address":[6351875],"length":1,"stats":{"Line":27},"fn_name":null},{"line":259,"address":[6351958],"length":1,"stats":{"Line":25},"fn_name":null},{"line":260,"address":[6352060],"length":1,"stats":{"Line":9},"fn_name":null},{"line":262,"address":[6352152],"length":1,"stats":{"Line":9},"fn_name":null},{"line":263,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[6352224],"length":1,"stats":{"Line":9},"fn_name":null},{"line":266,"address":[6352257],"length":1,"stats":{"Line":8},"fn_name":null},{"line":267,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":268,"address":[6352326],"length":1,"stats":{"Line":8},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[6352359],"length":1,"stats":{"Line":9},"fn_name":null},{"line":275,"address":[6352384,6352547],"length":1,"stats":{"Line":9},"fn_name":"visit_post"},{"line":276,"address":[6354673,6358777,6359339,6352934,6352416,6358527,6360014,6353494,6354128,6356400,6352618,6352740,6355759],"length":1,"stats":{"Line":121},"fn_name":null},{"line":277,"address":[6352480],"length":1,"stats":{"Line":9},"fn_name":null},{"line":278,"address":[6352647],"length":1,"stats":{"Line":8},"fn_name":null},{"line":280,"address":[6352753],"length":1,"stats":{"Line":8},"fn_name":null},{"line":281,"address":[6352773],"length":1,"stats":{"Line":8},"fn_name":null},{"line":291,"address":[6352841],"length":1,"stats":{"Line":13},"fn_name":null},{"line":293,"address":[6352947],"length":1,"stats":{"Line":9},"fn_name":null},{"line":294,"address":[6352961,6353463],"length":1,"stats":{"Line":10},"fn_name":null},{"line":296,"address":[6353507],"length":1,"stats":{"Line":8},"fn_name":null},{"line":297,"address":[6353559],"length":1,"stats":{"Line":8},"fn_name":null},{"line":299,"address":[6354141],"length":1,"stats":{"Line":9},"fn_name":null},{"line":300,"address":[6354155],"length":1,"stats":{"Line":9},"fn_name":null},{"line":302,"address":[6352570,6354686],"length":1,"stats":{"Line":21},"fn_name":null},{"line":303,"address":[6355479,6354714,6355757],"length":1,"stats":{"Line":35},"fn_name":null},{"line":304,"address":[6355128,6355352,6354834],"length":1,"stats":{"Line":8},"fn_name":null},{"line":305,"address":[6354982],"length":1,"stats":{"Line":9},"fn_name":null},{"line":306,"address":[6355357,6355066],"length":1,"stats":{"Line":18},"fn_name":null},{"line":308,"address":[6354800],"length":1,"stats":{"Line":13},"fn_name":null},{"line":309,"address":[6355484],"length":1,"stats":{"Line":13},"fn_name":null},{"line":310,"address":[6355592],"length":1,"stats":{"Line":13},"fn_name":null},{"line":313,"address":[6355772],"length":1,"stats":{"Line":8},"fn_name":null},{"line":314,"address":[6356049,6356273,6355792],"length":1,"stats":{"Line":8},"fn_name":null},{"line":315,"address":[6356297,6355979],"length":1,"stats":{"Line":16},"fn_name":null},{"line":317,"address":[6356413],"length":1,"stats":{"Line":8},"fn_name":null},{"line":318,"address":[6357557,6356441],"length":1,"stats":{"Line":16},"fn_name":null},{"line":319,"address":[6356553],"length":1,"stats":{"Line":8},"fn_name":null},{"line":320,"address":[6356674,6356761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":321,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[6356643],"length":1,"stats":{"Line":8},"fn_name":null},{"line":323,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":325,"address":[6357014],"length":1,"stats":{"Line":8},"fn_name":null},{"line":326,"address":[6357346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":327,"address":[6357282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":328,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[6357163],"length":1,"stats":{"Line":8},"fn_name":null},{"line":332,"address":[6357390],"length":1,"stats":{"Line":8},"fn_name":null},{"line":334,"address":[6356527,6357569],"length":1,"stats":{"Line":16},"fn_name":null},{"line":335,"address":[6357662,6357749],"length":1,"stats":{"Line":8},"fn_name":null},{"line":336,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":337,"address":[6357631],"length":1,"stats":{"Line":8},"fn_name":null},{"line":338,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":340,"address":[6358002],"length":1,"stats":{"Line":8},"fn_name":null},{"line":341,"address":[6358316],"length":1,"stats":{"Line":3},"fn_name":null},{"line":342,"address":[6358252],"length":1,"stats":{"Line":3},"fn_name":null},{"line":343,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[6358133],"length":1,"stats":{"Line":8},"fn_name":null},{"line":348,"address":[6358360],"length":1,"stats":{"Line":8},"fn_name":null},{"line":351,"address":[6358540],"length":1,"stats":{"Line":8},"fn_name":null},{"line":352,"address":[6358554],"length":1,"stats":{"Line":13},"fn_name":null},{"line":353,"address":[6358633],"length":1,"stats":{"Line":13},"fn_name":null},{"line":355,"address":[6358790],"length":1,"stats":{"Line":14},"fn_name":null},{"line":356,"address":[6358804],"length":1,"stats":{"Line":14},"fn_name":null},{"line":357,"address":[6358907],"length":1,"stats":{"Line":14},"fn_name":null},{"line":358,"address":[6359029],"length":1,"stats":{"Line":14},"fn_name":null},{"line":359,"address":[6359128],"length":1,"stats":{"Line":14},"fn_name":null},{"line":361,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":362,"address":[6359344],"length":1,"stats":{"Line":9},"fn_name":null},{"line":363,"address":[6359366,6360874,6359445],"length":1,"stats":{"Line":27},"fn_name":null},{"line":364,"address":[6359533,6359622,6359729],"length":1,"stats":{"Line":27},"fn_name":null},{"line":365,"address":[6359630],"length":1,"stats":{"Line":9},"fn_name":null},{"line":368,"address":[6359794],"length":1,"stats":{"Line":9},"fn_name":null},{"line":369,"address":[6359844],"length":1,"stats":{"Line":9},"fn_name":null},{"line":371,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":372,"address":[6352620],"length":1,"stats":{"Line":8},"fn_name":null},{"line":373,"address":[6361025,6360098,6360019],"length":1,"stats":{"Line":24},"fn_name":null},{"line":374,"address":[6360178],"length":1,"stats":{"Line":8},"fn_name":null},{"line":376,"address":[6360310],"length":1,"stats":{"Line":8},"fn_name":null},{"line":377,"address":[6360358],"length":1,"stats":{"Line":8},"fn_name":null},{"line":380,"address":[6360536],"length":1,"stats":{"Line":9},"fn_name":null},{"line":383,"address":[6361408],"length":1,"stats":{"Line":8},"fn_name":"visit_class_set_item_pre"},{"line":387,"address":[6361787,6361455],"length":1,"stats":{"Line":8},"fn_name":null},{"line":388,"address":[6361434],"length":1,"stats":{"Line":8},"fn_name":null},{"line":389,"address":[6361785,6361465,6361661],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[6361552],"length":1,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[6361563],"length":1,"stats":{"Line":0},"fn_name":null},{"line":393,"address":[6361536],"length":1,"stats":{"Line":0},"fn_name":null},{"line":394,"address":[6361663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":401,"address":[6361794],"length":1,"stats":{"Line":8},"fn_name":null},{"line":404,"address":[6362011,6361824],"length":1,"stats":{"Line":8},"fn_name":"visit_class_set_item_post"},{"line":408,"address":[6369592,6361856,6362026,6364577,6366388,6363123,6368062,6367030],"length":1,"stats":{"Line":51},"fn_name":null},{"line":409,"address":[6361944],"length":1,"stats":{"Line":8},"fn_name":null},{"line":410,"address":[6362046],"length":1,"stats":{"Line":8},"fn_name":null},{"line":411,"address":[6362074,6362452],"length":1,"stats":{"Line":16},"fn_name":null},{"line":412,"address":[6362186],"length":1,"stats":{"Line":8},"fn_name":null},{"line":413,"address":[6362276],"length":1,"stats":{"Line":8},"fn_name":null},{"line":414,"address":[6362341],"length":1,"stats":{"Line":8},"fn_name":null},{"line":416,"address":[6362160,6362464],"length":1,"stats":{"Line":16},"fn_name":null},{"line":417,"address":[6362542,6362855,6362912],"length":1,"stats":{"Line":10},"fn_name":null},{"line":418,"address":[6362921],"length":1,"stats":{"Line":8},"fn_name":null},{"line":419,"address":[6363012],"length":1,"stats":{"Line":8},"fn_name":null},{"line":422,"address":[6363136],"length":1,"stats":{"Line":8},"fn_name":null},{"line":423,"address":[6363164,6363544],"length":1,"stats":{"Line":16},"fn_name":null},{"line":424,"address":[6363276],"length":1,"stats":{"Line":8},"fn_name":null},{"line":425,"address":[6363366],"length":1,"stats":{"Line":8},"fn_name":null},{"line":426,"address":[6363433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":428,"address":[6363556,6363250],"length":1,"stats":{"Line":16},"fn_name":null},{"line":429,"address":[6363618,6363997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":430,"address":[6364010],"length":1,"stats":{"Line":8},"fn_name":null},{"line":431,"address":[6364369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":432,"address":[6364466],"length":1,"stats":{"Line":8},"fn_name":null},{"line":435,"address":[6364590],"length":1,"stats":{"Line":8},"fn_name":null},{"line":436,"address":[6365566,6364618],"length":1,"stats":{"Line":16},"fn_name":null},{"line":437,"address":[6364730],"length":1,"stats":{"Line":8},"fn_name":null},{"line":438,"address":[6365027,6365122,6364820],"length":1,"stats":{"Line":16},"fn_name":null},{"line":439,"address":[6365072],"length":1,"stats":{"Line":8},"fn_name":null},{"line":441,"address":[6365204,6365127,6365017],"length":1,"stats":{"Line":16},"fn_name":null},{"line":442,"address":[6364989],"length":1,"stats":{"Line":8},"fn_name":null},{"line":444,"address":[6365455],"length":1,"stats":{"Line":8},"fn_name":null},{"line":446,"address":[6365578,6364704],"length":1,"stats":{"Line":0},"fn_name":null},{"line":447,"address":[6365829,6365944,6365640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":448,"address":[6365874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":450,"address":[6365791,6366272,6365949],"length":1,"stats":{"Line":0},"fn_name":null},{"line":451,"address":[6366277],"length":1,"stats":{"Line":0},"fn_name":null},{"line":454,"address":[6366401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":455,"address":[6366415,6366573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":456,"address":[6366813,6366563],"length":1,"stats":{"Line":16},"fn_name":null},{"line":457,"address":[6366878],"length":1,"stats":{"Line":8},"fn_name":null},{"line":458,"address":[6366905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":460,"address":[6367043],"length":1,"stats":{"Line":0},"fn_name":null},{"line":461,"address":[6367796,6368060,6367068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[6367339,6367179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":463,"address":[6367329,6367579],"length":1,"stats":{"Line":0},"fn_name":null},{"line":464,"address":[6367644],"length":1,"stats":{"Line":0},"fn_name":null},{"line":465,"address":[6367671],"length":1,"stats":{"Line":0},"fn_name":null},{"line":467,"address":[6367148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":468,"address":[6367893,6367817],"length":1,"stats":{"Line":0},"fn_name":null},{"line":469,"address":[6367908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":470,"address":[6367935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":473,"address":[6368075],"length":1,"stats":{"Line":0},"fn_name":null},{"line":474,"address":[6368907,6368100,6369590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":475,"address":[6368206],"length":1,"stats":{"Line":0},"fn_name":null},{"line":476,"address":[6368323,6368430],"length":1,"stats":{"Line":0},"fn_name":null},{"line":477,"address":[6368285],"length":1,"stats":{"Line":0},"fn_name":null},{"line":478,"address":[6368288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":479,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":482,"address":[6368683],"length":1,"stats":{"Line":0},"fn_name":null},{"line":483,"address":[6368755],"length":1,"stats":{"Line":0},"fn_name":null},{"line":484,"address":[6368782],"length":1,"stats":{"Line":0},"fn_name":null},{"line":486,"address":[6368180,6368919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":487,"address":[6369008,6369115],"length":1,"stats":{"Line":0},"fn_name":null},{"line":488,"address":[6368970],"length":1,"stats":{"Line":0},"fn_name":null},{"line":489,"address":[6368973],"length":1,"stats":{"Line":0},"fn_name":null},{"line":490,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":493,"address":[6369366],"length":1,"stats":{"Line":0},"fn_name":null},{"line":494,"address":[6369438],"length":1,"stats":{"Line":0},"fn_name":null},{"line":495,"address":[6369465],"length":1,"stats":{"Line":0},"fn_name":null},{"line":499,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":501,"address":[6369602],"length":1,"stats":{"Line":8},"fn_name":null},{"line":504,"address":[6370576],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_pre"},{"line":508,"address":[6370816,6370940,6370607],"length":1,"stats":{"Line":0},"fn_name":null},{"line":509,"address":[6370707],"length":1,"stats":{"Line":0},"fn_name":null},{"line":510,"address":[6370718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[6370691],"length":1,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[6370818],"length":1,"stats":{"Line":0},"fn_name":null},{"line":515,"address":[6370947],"length":1,"stats":{"Line":0},"fn_name":null},{"line":518,"address":[6370976],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_in"},{"line":522,"address":[6371340,6371007,6371216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":523,"address":[6371107],"length":1,"stats":{"Line":0},"fn_name":null},{"line":524,"address":[6371118],"length":1,"stats":{"Line":0},"fn_name":null},{"line":526,"address":[6371091],"length":1,"stats":{"Line":0},"fn_name":null},{"line":527,"address":[6371218],"length":1,"stats":{"Line":0},"fn_name":null},{"line":529,"address":[6371347],"length":1,"stats":{"Line":0},"fn_name":null},{"line":532,"address":[6371376,6371483],"length":1,"stats":{"Line":0},"fn_name":"visit_class_set_binary_op_post"},{"line":538,"address":[6373072,6373761,6371396,6371498],"length":1,"stats":{"Line":0},"fn_name":null},{"line":539,"address":[6371545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":540,"address":[6371699,6371613],"length":1,"stats":{"Line":0},"fn_name":null},{"line":541,"address":[6371706,6371792],"length":1,"stats":{"Line":0},"fn_name":null},{"line":542,"address":[6371807,6372789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":543,"address":[6371911,6372092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":544,"address":[7014513,7014575],"length":1,"stats":{"Line":0},"fn_name":null},{"line":545,"address":[7014516],"length":1,"stats":{"Line":0},"fn_name":null},{"line":546,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":549,"address":[6372571,6372387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":550,"address":[7014625,7014687],"length":1,"stats":{"Line":0},"fn_name":null},{"line":551,"address":[7014628],"length":1,"stats":{"Line":0},"fn_name":null},{"line":552,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":556,"address":[6372851,6372877,6372903],"length":1,"stats":{"Line":0},"fn_name":null},{"line":557,"address":[6372791,6372853],"length":1,"stats":{"Line":0},"fn_name":null},{"line":558,"address":[6372879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":559,"address":[6372827],"length":1,"stats":{"Line":0},"fn_name":null},{"line":561,"address":[6372907],"length":1,"stats":{"Line":0},"fn_name":null},{"line":562,"address":[6372934],"length":1,"stats":{"Line":0},"fn_name":null},{"line":564,"address":[6371522,6373084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":565,"address":[6373130,6373219],"length":1,"stats":{"Line":0},"fn_name":null},{"line":566,"address":[6373312,6373226],"length":1,"stats":{"Line":0},"fn_name":null},{"line":567,"address":[6373327,6373466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":568,"address":[6373428],"length":1,"stats":{"Line":0},"fn_name":null},{"line":569,"address":[6373447],"length":1,"stats":{"Line":0},"fn_name":null},{"line":571,"address":[6373560,6373589,6373531],"length":1,"stats":{"Line":0},"fn_name":null},{"line":572,"address":[6373468,6373533],"length":1,"stats":{"Line":0},"fn_name":null},{"line":573,"address":[6373562],"length":1,"stats":{"Line":0},"fn_name":null},{"line":574,"address":[6373504],"length":1,"stats":{"Line":0},"fn_name":null},{"line":576,"address":[6373593],"length":1,"stats":{"Line":0},"fn_name":null},{"line":577,"address":[6373620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":579,"address":[6373768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":597,"address":[6374032],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":602,"address":[6374080],"length":1,"stats":{"Line":9},"fn_name":"trans"},{"line":603,"address":[6374085],"length":1,"stats":{"Line":9},"fn_name":null},{"line":607,"address":[6374096,6374144],"length":1,"stats":{"Line":9},"fn_name":"push"},{"line":608,"address":[6374111,6374159],"length":1,"stats":{"Line":18},"fn_name":null},{"line":612,"address":[6374416,6374453],"length":1,"stats":{"Line":9},"fn_name":"pop"},{"line":613,"address":[6374465,6374433],"length":1,"stats":{"Line":18},"fn_name":null},{"line":617,"address":[6374576],"length":1,"stats":{"Line":4},"fn_name":"error"},{"line":618,"address":[6374601],"length":1,"stats":{"Line":4},"fn_name":null},{"line":622,"address":[6374784],"length":1,"stats":{"Line":9},"fn_name":"flags"},{"line":623,"address":[6374793],"length":1,"stats":{"Line":9},"fn_name":null},{"line":628,"address":[6374896],"length":1,"stats":{"Line":9},"fn_name":"set_flags"},{"line":629,"address":[6374920],"length":1,"stats":{"Line":9},"fn_name":null},{"line":630,"address":[6374960],"length":1,"stats":{"Line":14},"fn_name":null},{"line":631,"address":[6374995],"length":1,"stats":{"Line":14},"fn_name":null},{"line":632,"address":[6375015],"length":1,"stats":{"Line":14},"fn_name":null},{"line":633,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":636,"address":[6375120,6375216],"length":1,"stats":{"Line":9},"fn_name":"hir_literal"},{"line":637,"address":[6375146,6375579,6375279,6375469,6375231],"length":1,"stats":{"Line":19},"fn_name":null},{"line":638,"address":[6375581,6375257],"length":1,"stats":{"Line":12},"fn_name":null},{"line":639,"address":[6375497],"length":1,"stats":{"Line":9},"fn_name":null},{"line":641,"address":[6375524,6375838,6375689],"length":1,"stats":{"Line":26},"fn_name":null},{"line":642,"address":[6375784],"length":1,"stats":{"Line":8},"fn_name":null},{"line":644,"address":[6375721],"length":1,"stats":{"Line":9},"fn_name":null},{"line":656,"address":[6375872],"length":1,"stats":{"Line":9},"fn_name":"literal_to_char"},{"line":657,"address":[6375903],"length":1,"stats":{"Line":9},"fn_name":null},{"line":658,"address":[6376021],"length":1,"stats":{"Line":9},"fn_name":null},{"line":660,"address":[6375992,6376108],"length":1,"stats":{"Line":8},"fn_name":null},{"line":661,"address":[6376066,6376115],"length":1,"stats":{"Line":17},"fn_name":null},{"line":662,"address":[6376080],"length":1,"stats":{"Line":8},"fn_name":null},{"line":664,"address":[6376098],"length":1,"stats":{"Line":8},"fn_name":null},{"line":665,"address":[6376170],"length":1,"stats":{"Line":8},"fn_name":null},{"line":667,"address":[6376154,6376209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":668,"address":[6376272],"length":1,"stats":{"Line":1},"fn_name":null},{"line":670,"address":[6376224],"length":1,"stats":{"Line":3},"fn_name":null},{"line":673,"address":[6376384],"length":1,"stats":{"Line":9},"fn_name":"hir_from_char"},{"line":674,"address":[6376414],"length":1,"stats":{"Line":9},"fn_name":null},{"line":675,"address":[6376688,6376608],"length":1,"stats":{"Line":2},"fn_name":null},{"line":677,"address":[6376567,6376734],"length":1,"stats":{"Line":18},"fn_name":null},{"line":680,"address":[6376784,6376916],"length":1,"stats":{"Line":8},"fn_name":"hir_from_char_case_insensitive"},{"line":685,"address":[6376931,6378249,6376809],"length":1,"stats":{"Line":24},"fn_name":null},{"line":687,"address":[6377171,6377117,6376994],"length":1,"stats":{"Line":16},"fn_name":null},{"line":688,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":689,"address":[7014737],"length":1,"stats":{"Line":0},"fn_name":null},{"line":691,"address":[6377410],"length":1,"stats":{"Line":8},"fn_name":null},{"line":692,"address":[6377472],"length":1,"stats":{"Line":8},"fn_name":null},{"line":694,"address":[6377426,6377557,6378901],"length":1,"stats":{"Line":16},"fn_name":null},{"line":695,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":696,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":698,"address":[6377638,6377826],"length":1,"stats":{"Line":8},"fn_name":null},{"line":699,"address":[7014849],"length":1,"stats":{"Line":0},"fn_name":null},{"line":701,"address":[6378077],"length":1,"stats":{"Line":8},"fn_name":null},{"line":703,"address":[6378259,6376965],"length":1,"stats":{"Line":16},"fn_name":null},{"line":704,"address":[6378292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":707,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":708,"address":[6378265,6378448],"length":1,"stats":{"Line":16},"fn_name":null},{"line":709,"address":[6378619,6378481],"length":1,"stats":{"Line":16},"fn_name":null},{"line":711,"address":[6378573,6378962,6378624],"length":1,"stats":{"Line":16},"fn_name":null},{"line":712,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":713,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":715,"address":[6378705],"length":1,"stats":{"Line":8},"fn_name":null},{"line":716,"address":[6378724],"length":1,"stats":{"Line":8},"fn_name":null},{"line":720,"address":[6379152],"length":1,"stats":{"Line":8},"fn_name":"hir_dot"},{"line":721,"address":[6379175],"length":1,"stats":{"Line":8},"fn_name":null},{"line":722,"address":[6379270],"length":1,"stats":{"Line":8},"fn_name":null},{"line":723,"address":[6379478,6379396],"length":1,"stats":{"Line":2},"fn_name":null},{"line":725,"address":[6379341,6379519,6379610],"length":1,"stats":{"Line":24},"fn_name":null},{"line":726,"address":[6379583],"length":1,"stats":{"Line":8},"fn_name":null},{"line":728,"address":[6379550],"length":1,"stats":{"Line":8},"fn_name":null},{"line":732,"address":[6379680],"length":1,"stats":{"Line":9},"fn_name":"hir_assertion"},{"line":733,"address":[6379711],"length":1,"stats":{"Line":9},"fn_name":null},{"line":734,"address":[6379807],"length":1,"stats":{"Line":9},"fn_name":null},{"line":735,"address":[6379934,6379983,6380035,6380077,6380129,6380341,6380056],"length":1,"stats":{"Line":33},"fn_name":null},{"line":736,"address":[6379885,6379954,6379940,6379964],"length":1,"stats":{"Line":36},"fn_name":null},{"line":737,"address":[6379956],"length":1,"stats":{"Line":8},"fn_name":null},{"line":739,"address":[6379946],"length":1,"stats":{"Line":9},"fn_name":null},{"line":741,"address":[6380006,6380016,6379992],"length":1,"stats":{"Line":24},"fn_name":null},{"line":742,"address":[6380008],"length":1,"stats":{"Line":8},"fn_name":null},{"line":744,"address":[6379998],"length":1,"stats":{"Line":8},"fn_name":null},{"line":746,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":747,"address":[6380040],"length":1,"stats":{"Line":0},"fn_name":null},{"line":749,"address":[6380061],"length":1,"stats":{"Line":0},"fn_name":null},{"line":750,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":751,"address":[6380100,6380086,6380110],"length":1,"stats":{"Line":24},"fn_name":null},{"line":752,"address":[6380102],"length":1,"stats":{"Line":8},"fn_name":null},{"line":754,"address":[6380092],"length":1,"stats":{"Line":8},"fn_name":null},{"line":757,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":758,"address":[6380322,6379921,6380188,6380159],"length":1,"stats":{"Line":27},"fn_name":null},{"line":759,"address":[6380151],"length":1,"stats":{"Line":8},"fn_name":null},{"line":764,"address":[6380139,6380169],"length":1,"stats":{"Line":6},"fn_name":null},{"line":765,"address":[6380278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":766,"address":[6380198],"length":1,"stats":{"Line":0},"fn_name":null},{"line":769,"address":[6380180],"length":1,"stats":{"Line":3},"fn_name":null},{"line":775,"address":[6380400,6380496],"length":1,"stats":{"Line":14},"fn_name":"hir_group"},{"line":776,"address":[6380553,6380426,6380519],"length":1,"stats":{"Line":31},"fn_name":null},{"line":777,"address":[6380442,6380531],"length":1,"stats":{"Line":22},"fn_name":null},{"line":778,"address":[6380541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":780,"address":[6380560],"length":1,"stats":{"Line":13},"fn_name":null},{"line":782,"address":[6380577],"length":1,"stats":{"Line":13},"fn_name":null},{"line":783,"address":[6380610],"length":1,"stats":{"Line":13},"fn_name":null},{"line":786,"address":[6380511],"length":1,"stats":{"Line":9},"fn_name":null},{"line":788,"address":[6380655,6380799],"length":1,"stats":{"Line":28},"fn_name":null},{"line":791,"address":[6381097,6380976],"length":1,"stats":{"Line":13},"fn_name":"hir_repetition"},{"line":792,"address":[6381267,6381244,6381002,6381229,6381257,6381326],"length":1,"stats":{"Line":59},"fn_name":null},{"line":793,"address":[6381018,6381236],"length":1,"stats":{"Line":21},"fn_name":null},{"line":794,"address":[6381249],"length":1,"stats":{"Line":9},"fn_name":null},{"line":795,"address":[6381259],"length":1,"stats":{"Line":13},"fn_name":null},{"line":796,"address":[6381117,6381274],"length":1,"stats":{"Line":16},"fn_name":null},{"line":797,"address":[6381284],"length":1,"stats":{"Line":8},"fn_name":null},{"line":799,"address":[6381333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":800,"address":[6381343],"length":1,"stats":{"Line":8},"fn_name":null},{"line":802,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":803,"address":[6381160],"length":1,"stats":{"Line":8},"fn_name":null},{"line":804,"address":[6381170],"length":1,"stats":{"Line":8},"fn_name":null},{"line":805,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":806,"address":[6381180],"length":1,"stats":{"Line":8},"fn_name":null},{"line":809,"address":[6381390],"length":1,"stats":{"Line":13},"fn_name":null},{"line":810,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":811,"address":[6381678],"length":1,"stats":{"Line":13},"fn_name":null},{"line":812,"address":[6381525],"length":1,"stats":{"Line":13},"fn_name":null},{"line":813,"address":[6381549],"length":1,"stats":{"Line":13},"fn_name":null},{"line":814,"address":[6381556],"length":1,"stats":{"Line":13},"fn_name":null},{"line":818,"address":[6381856,6381966],"length":1,"stats":{"Line":8},"fn_name":"hir_unicode_class"},{"line":824,"address":[6381981,6381890],"length":1,"stats":{"Line":16},"fn_name":null},{"line":825,"address":[6382159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":826,"address":[6382070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":829,"address":[6382330,6382418,6382292],"length":1,"stats":{"Line":16},"fn_name":null},{"line":830,"address":[6382016,6382302],"length":1,"stats":{"Line":16},"fn_name":null},{"line":831,"address":[6382343],"length":1,"stats":{"Line":8},"fn_name":null},{"line":837,"address":[6382571],"length":1,"stats":{"Line":8},"fn_name":null},{"line":838,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":839,"address":[6382511],"length":1,"stats":{"Line":8},"fn_name":null},{"line":841,"address":[6382602,6383012],"length":1,"stats":{"Line":16},"fn_name":null},{"line":842,"address":[6382777,6382663],"length":1,"stats":{"Line":8},"fn_name":null},{"line":843,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":844,"address":[6382642],"length":1,"stats":{"Line":8},"fn_name":null},{"line":845,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":848,"address":[6383022],"length":1,"stats":{"Line":8},"fn_name":null},{"line":851,"address":[6383202,6383104],"length":1,"stats":{"Line":8},"fn_name":"hir_perl_unicode_class"},{"line":857,"address":[6383217,6383277,6383135],"length":1,"stats":{"Line":16},"fn_name":null},{"line":858,"address":[6383319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":859,"address":[6383321,6383246],"length":1,"stats":{"Line":18},"fn_name":null},{"line":860,"address":[6383333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":861,"address":[6383307],"length":1,"stats":{"Line":8},"fn_name":null},{"line":863,"address":[6383348,6383571,6383770],"length":1,"stats":{"Line":9},"fn_name":null},{"line":864,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":867,"address":[6383830,6383556,6383812],"length":1,"stats":{"Line":26},"fn_name":null},{"line":868,"address":[6383814],"length":1,"stats":{"Line":8},"fn_name":null},{"line":870,"address":[6383832],"length":1,"stats":{"Line":9},"fn_name":null},{"line":873,"address":[6384040,6383968],"length":1,"stats":{"Line":13},"fn_name":"hir_perl_byte_class"},{"line":879,"address":[6383990,6384052,6384114],"length":1,"stats":{"Line":26},"fn_name":null},{"line":880,"address":[6384163,6384182,6384201],"length":1,"stats":{"Line":16},"fn_name":null},{"line":881,"address":[6384165,6384083],"length":1,"stats":{"Line":21},"fn_name":null},{"line":882,"address":[6384184],"length":1,"stats":{"Line":8},"fn_name":null},{"line":883,"address":[6384144],"length":1,"stats":{"Line":13},"fn_name":null},{"line":887,"address":[6384210,6384234],"length":1,"stats":{"Line":22},"fn_name":null},{"line":888,"address":[6384218],"length":1,"stats":{"Line":8},"fn_name":null},{"line":890,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":897,"address":[6384288],"length":1,"stats":{"Line":8},"fn_name":"convert_unicode_class_error"},{"line":902,"address":[6384305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":903,"address":[7014974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":904,"address":[7015305,7015131,7015218],"length":1,"stats":{"Line":0},"fn_name":null},{"line":905,"address":[7015005],"length":1,"stats":{"Line":0},"fn_name":null},{"line":906,"address":[7015138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":908,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":909,"address":[7015225],"length":1,"stats":{"Line":0},"fn_name":null},{"line":911,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":912,"address":[7015046],"length":1,"stats":{"Line":0},"fn_name":null},{"line":918,"address":[6384687,6384400],"length":1,"stats":{"Line":8},"fn_name":"unicode_fold_and_negate"},{"line":928,"address":[6384443,6384934],"length":1,"stats":{"Line":16},"fn_name":null},{"line":929,"address":[6384718,6384555],"length":1,"stats":{"Line":8},"fn_name":null},{"line":930,"address":[7015345],"length":1,"stats":{"Line":0},"fn_name":null},{"line":933,"address":[6384959,6384940],"length":1,"stats":{"Line":16},"fn_name":null},{"line":934,"address":[6384953],"length":1,"stats":{"Line":8},"fn_name":null},{"line":936,"address":[6384966],"length":1,"stats":{"Line":8},"fn_name":null},{"line":939,"address":[6384992],"length":1,"stats":{"Line":8},"fn_name":"bytes_fold_and_negate"},{"line":949,"address":[6385161,6385046],"length":1,"stats":{"Line":16},"fn_name":null},{"line":950,"address":[6385155],"length":1,"stats":{"Line":8},"fn_name":null},{"line":952,"address":[6385167,6385186],"length":1,"stats":{"Line":11},"fn_name":null},{"line":953,"address":[6385180],"length":1,"stats":{"Line":3},"fn_name":null},{"line":955,"address":[6385193],"length":1,"stats":{"Line":8},"fn_name":null},{"line":956,"address":[6385286,6385319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":958,"address":[6385280],"length":1,"stats":{"Line":8},"fn_name":null},{"line":963,"address":[6385472,6385376],"length":1,"stats":{"Line":8},"fn_name":"class_literal_byte"},{"line":964,"address":[6385402,6385487,6385535,6385722,6385794,6385929,6385770],"length":1,"stats":{"Line":28},"fn_name":null},{"line":965,"address":[6385513,6385772],"length":1,"stats":{"Line":11},"fn_name":null},{"line":966,"address":[6385748],"length":1,"stats":{"Line":8},"fn_name":null},{"line":967,"address":[6385759,6385884],"length":1,"stats":{"Line":16},"fn_name":null},{"line":968,"address":[6385878],"length":1,"stats":{"Line":8},"fn_name":null},{"line":973,"address":[6385804,6385891],"length":1,"stats":{"Line":0},"fn_name":null},{"line":997,"address":[6385968],"length":1,"stats":{"Line":14},"fn_name":"from_ast"},{"line":998,"address":[6385982],"length":1,"stats":{"Line":14},"fn_name":null},{"line":999,"address":[6386017],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1000,"address":[6386327,6386027,6386332,6386138],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1001,"address":[6386307,6386247,6386267,6386287,6386227,6386218],"length":1,"stats":{"Line":53},"fn_name":null},{"line":1002,"address":[6386160],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1003,"address":[6386222],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1005,"address":[6386188],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1006,"address":[6386229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1008,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1009,"address":[6386249],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1011,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1012,"address":[6386269],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1014,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1015,"address":[6386289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1017,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1018,"address":[6386309],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1020,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1023,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1026,"address":[6386336],"length":1,"stats":{"Line":14},"fn_name":"merge"},{"line":1027,"address":[6386350],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1028,"address":[6386393],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1030,"address":[6386407],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1031,"address":[6386443],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1033,"address":[6386459],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1034,"address":[6386495],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1036,"address":[6386511],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1037,"address":[6386547],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1039,"address":[6386563],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1040,"address":[6386599],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1044,"address":[6386624],"length":1,"stats":{"Line":9},"fn_name":"case_insensitive"},{"line":1045,"address":[6386635],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1048,"address":[6386672],"length":1,"stats":{"Line":9},"fn_name":"multi_line"},{"line":1049,"address":[6386683],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1052,"address":[6386720],"length":1,"stats":{"Line":8},"fn_name":"dot_matches_new_line"},{"line":1053,"address":[6386731],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1056,"address":[6386768],"length":1,"stats":{"Line":13},"fn_name":"swap_greed"},{"line":1057,"address":[6386779],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1060,"address":[6386816],"length":1,"stats":{"Line":9},"fn_name":"unicode"},{"line":1061,"address":[6386825],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1065,"address":[6386864],"length":1,"stats":{"Line":13},"fn_name":"hir_ascii_class_bytes"},{"line":1066,"address":[6386887],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1069,"address":[7015424,7015441],"length":1,"stats":{"Line":26},"fn_name":"{{closure}}"},{"line":1071,"address":[6387007],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1074,"address":[6387072],"length":1,"stats":{"Line":13},"fn_name":"ascii_class"},{"line":1076,"address":[6387433,6387185,6387159,6387364,6387131,6387211,6387237,6387289,6387315,6387263,6387341,6387410,6387387],"length":1,"stats":{"Line":48},"fn_name":null},{"line":1077,"address":[6387081,6387138],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1078,"address":[6387164],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1079,"address":[6387190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1080,"address":[6387216],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1081,"address":[6387242],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1082,"address":[6387268],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1083,"address":[6387294],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1084,"address":[6387320],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1085,"address":[6387343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1086,"address":[6387366],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1087,"address":[6387389],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1095,"address":[6387412],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1096,"address":[6387435],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1097,"address":[6387110],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1120,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1121,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1127,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":350,"coverable":524},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","hir","visitor.rs"],"content":"use hir::{self, Hir, HirKind};\n\n/// A trait for visiting the high-level IR (HIR) in depth first order.\n///\n/// The principle aim of this trait is to enable callers to perform case\n/// analysis on a high-level intermediate representation of a regular\n/// expression without necessarily using recursion. In particular, this permits\n/// callers to do case analysis with constant stack usage, which can be\n/// important since the size of an HIR may be proportional to end user input.\n///\n/// Typical usage of this trait involves providing an implementation and then\n/// running it using the [`visit`](fn.visit.html) function.\npub trait Visitor {\n    /// The result of visiting an HIR.\n    type Output;\n    /// An error that visiting an HIR might return.\n    type Err;\n\n    /// All implementors of `Visitor` must provide a `finish` method, which\n    /// yields the result of visiting the HIR or an error.\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n\n    /// This method is called before beginning traversal of the HIR.\n    fn start(&mut self) {}\n\n    /// This method is called on an `Hir` before descending into child `Hir`\n    /// nodes.\n    fn visit_pre(&mut self, _hir: &Hir) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called on an `Hir` after descending all of its child\n    /// `Hir` nodes.\n    fn visit_post(&mut self, _hir: &Hir) -> Result<(), Self::Err> {\n        Ok(())\n    }\n\n    /// This method is called between child nodes of an alternation.\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n\n/// Executes an implementation of `Visitor` in constant stack space.\n///\n/// This function will visit every node in the given `Hir` while calling\n/// appropriate methods provided by the\n/// [`Visitor`](trait.Visitor.html) trait.\n///\n/// The primary use case for this method is when one wants to perform case\n/// analysis over an `Hir` without using a stack size proportional to the depth\n/// of the `Hir`. Namely, this method will instead use constant stack space,\n/// but will use heap space proportional to the size of the `Hir`. This may be\n/// desirable in cases where the size of `Hir` is proportional to end user\n/// input.\n///\n/// If the visitor returns an error at any point, then visiting is stopped and\n/// the error is returned.\npub fn visit<V: Visitor>(hir: &Hir, visitor: V) -> Result<V::Output, V::Err> {\n    HeapVisitor::new().visit(hir, visitor)\n}\n\n/// HeapVisitor visits every item in an `Hir` recursively using constant stack\n/// size and a heap size proportional to the size of the `Hir`.\nstruct HeapVisitor<'a> {\n    /// A stack of `Hir` nodes. This is roughly analogous to the call stack\n    /// used in a typical recursive visitor.\n    stack: Vec<(&'a Hir, Frame<'a>)>,\n}\n\n/// Represents a single stack frame while performing structural induction over\n/// an `Hir`.\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a hir::Repetition),\n    /// A stack frame allocated just before descending into a group's child\n    /// node.\n    Group(&'a hir::Group),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n}\n\nimpl<'a> HeapVisitor<'a> {\n    fn new() -> HeapVisitor<'a> {\n        HeapVisitor { stack: vec![] }\n    }\n\n    fn visit<V: Visitor>(\n        &mut self,\n        mut hir: &'a Hir,\n        mut visitor: V,\n    ) -> Result<V::Output, V::Err> {\n        self.stack.clear();\n\n        visitor.start();\n        loop {\n            visitor.visit_pre(hir)?;\n            if let Some(x) = self.induct(hir) {\n                let child = x.child();\n                self.stack.push((hir, x));\n                hir = child;\n                continue;\n            }\n            // No induction means we have a base case, so we can post visit\n            // it now.\n            visitor.visit_post(hir)?;\n\n            // At this point, we now try to pop our call stack until it is\n            // either empty or we hit another inductive case.\n            loop {\n                let (post_hir, frame) = match self.stack.pop() {\n                    None => return visitor.finish(),\n                    Some((post_hir, frame)) => (post_hir, frame),\n                };\n                // If this is a concat/alternate, then we might have additional\n                // inductive steps to process.\n                if let Some(x) = self.pop(frame) {\n                    if let Frame::Alternation { .. } = x {\n                        visitor.visit_alternation_in()?;\n                    }\n                    hir = x.child();\n                    self.stack.push((post_hir, x));\n                    break;\n                }\n                // Otherwise, we've finished visiting all the child nodes for\n                // this HIR, so we can post visit it now.\n                visitor.visit_post(post_hir)?;\n            }\n        }\n    }\n\n    /// Build a stack frame for the given HIR if one is needed (which occurs if\n    /// and only if there are child nodes in the HIR). Otherwise, return None.\n    fn induct(&mut self, hir: &'a Hir) -> Option<Frame<'a>> {\n        match *hir.kind() {\n            HirKind::Repetition(ref x) => Some(Frame::Repetition(x)),\n            HirKind::Group(ref x) => Some(Frame::Group(x)),\n            HirKind::Concat(ref x) if x.is_empty() => None,\n            HirKind::Concat(ref x) => {\n                Some(Frame::Concat { head: &x[0], tail: &x[1..] })\n            }\n            HirKind::Alternation(ref x) if x.is_empty() => None,\n            HirKind::Alternation(ref x) => {\n                Some(Frame::Alternation { head: &x[0], tail: &x[1..] })\n            }\n            _ => None,\n        }\n    }\n\n    /// Pops the given frame. If the frame has an additional inductive step,\n    /// then return it, otherwise return `None`.\n    fn pop(&self, induct: Frame<'a>) -> Option<Frame<'a>> {\n        match induct {\n            Frame::Repetition(_) => None,\n            Frame::Group(_) => None,\n            Frame::Concat { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Concat { head: &tail[0], tail: &tail[1..] })\n                }\n            }\n            Frame::Alternation { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Alternation {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n        }\n    }\n}\n\nimpl<'a> Frame<'a> {\n    /// Perform the next inductive step on this frame and return the next\n    /// child HIR node to visit.\n    fn child(&self) -> &'a Hir {\n        match *self {\n            Frame::Repetition(rep) => &rep.hir,\n            Frame::Group(group) => &group.hir,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }\n    }\n}\n","traces":[{"line":24,"address":[7220272,7220277,7220279],"length":1,"stats":{"Line":0},"fn_name":"start<regex_syntax::hir::print::Writer<&mut core::fmt::Formatter>>"},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[7220736,7220799],"length":1,"stats":{"Line":0},"fn_name":"visit<regex_syntax::hir::print::Writer<&mut core::fmt::Formatter>>"},{"line":60,"address":[7220755,7220811],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[7224336],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":100,"address":[7224343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[7221006,7220944],"length":1,"stats":{"Line":0},"fn_name":"visit<regex_syntax::hir::print::Writer<&mut core::fmt::Formatter>>"},{"line":108,"address":[7220974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[7221021],"length":1,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[7221037,7222323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[7221039],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[7221193,7221282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[7221308],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[7221345],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[7221451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[7221456],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[7221254,7221465],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[7222434,7221570],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[7221744,7221861,7221572],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[7221596,7221863],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[7221624],"length":1,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[7221977,7221915,7221792],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[7222041,7222186],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[7222057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[7222188],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[7222222],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[7222332,7221949],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[7224416],"length":1,"stats":{"Line":0},"fn_name":"induct"},{"line":150,"address":[7224527,7224617,7224793,7224713,7224447,7224990,7225070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[7224537,7224471],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[7224627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[7224723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[7224814],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[7224829],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[7225000],"length":1,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[7225091],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[7225106],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[7224520],"length":1,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[7225280],"length":1,"stats":{"Line":0},"fn_name":"pop"},{"line":168,"address":[7225679,7225880,7225402,7225433,7225416],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[7225298,7225409],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[7225426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[7225443],"length":1,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[7225467,7225542],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[7225535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[7225512,7225949,7225922,7225564],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[7225347],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[7225733,7225371,7225688],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[7225726],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[7225783],"length":1,"stats":{"Line":0},"fn_name":null},{"line":183,"address":[7225703,7225895],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[7225755],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[7225952],"length":1,"stats":{"Line":0},"fn_name":"child"},{"line":196,"address":[7226063,7226012,7226038],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[7225961,7226021],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[7226045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[7226070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[7225998],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":64},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","lib.rs"],"content":"/*!\nThis crate provides a robust regular expression parser.\n\nThis crate defines two primary types:\n\n* [`Ast`](ast/enum.Ast.html) is the abstract syntax of a regular expression.\n  An abstract syntax corresponds to a *structured representation* of the\n  concrete syntax of a regular expression, where the concrete syntax is the\n  pattern string itself (e.g., `foo(bar)+`). Given some abstract syntax, it\n  can be converted back to the original concrete syntax (modulo some details,\n  like whitespace). To a first approximation, the abstract syntax is complex\n  and difficult to analyze.\n* [`Hir`](hir/struct.Hir.html) is the high-level intermediate representation\n  (\"HIR\" or \"high-level IR\" for short) of regular expression. It corresponds to\n  an intermediate state of a regular expression that sits between the abstract\n  syntax and the low level compiled opcodes that are eventually responsible for\n  executing a regular expression search. Given some high-level IR, it is not\n  possible to produce the original concrete syntax (although it is possible to\n  produce an equivalent concrete syntax, but it will likely scarcely resemble\n  the original pattern). To a first approximation, the high-level IR is simple\n  and easy to analyze.\n\nThese two types come with conversion routines:\n\n* An [`ast::parse::Parser`](ast/parse/struct.Parser.html) converts concrete\n  syntax (a `&str`) to an [`Ast`](ast/enum.Ast.html).\n* A [`hir::translate::Translator`](hir/translate/struct.Translator.html)\n  converts an [`Ast`](ast/enum.Ast.html) to a [`Hir`](hir/struct.Hir.html).\n\nAs a convenience, the above two conversion routines are combined into one via\nthe top-level [`Parser`](struct.Parser.html) type. This `Parser` will first\nconvert your pattern to an `Ast` and then convert the `Ast` to an `Hir`.\n\n\n# Example\n\nThis example shows how to parse a pattern string into its HIR:\n\n```\nuse regex_syntax::Parser;\nuse regex_syntax::hir::{self, Hir};\n\nlet hir = Parser::new().parse(\"a|b\").unwrap();\nassert_eq!(hir, Hir::alternation(vec![\n    Hir::literal(hir::Literal::Unicode('a')),\n    Hir::literal(hir::Literal::Unicode('b')),\n]));\n```\n\n\n# Concrete syntax supported\n\nThe concrete syntax is documented as part of the public API of the\n[`regex` crate](https://docs.rs/regex/%2A/regex/#syntax).\n\n\n# Input safety\n\nA key feature of this library is that it is safe to use with end user facing\ninput. This plays a significant role in the internal implementation. In\nparticular:\n\n1. Parsers provide a `nest_limit` option that permits callers to control how\n   deeply nested a regular expression is allowed to be. This makes it possible\n   to do case analysis over an `Ast` or an `Hir` using recursion without\n   worrying about stack overflow.\n2. Since relying on a particular stack size is brittle, this crate goes to\n   great lengths to ensure that all interactions with both the `Ast` and the\n   `Hir` do not use recursion. Namely, they use constant stack space and heap\n   space proportional to the size of the original pattern string (in bytes).\n   This includes the type's corresponding destructors. (One exception to this\n   is literal extraction, but this will eventually get fixed.)\n\n\n# Error reporting\n\nThe `Display` implementations on all `Error` types exposed in this library\nprovide nice human readable errors that are suitable for showing to end users\nin a monospace font.\n\n\n# Literal extraction\n\nThis crate provides limited support for\n[literal extraction from `Hir` values](hir/literal/struct.Literals.html).\nBe warned that literal extraction currently uses recursion, and therefore,\nstack size proportional to the size of the `Hir`.\n\nThe purpose of literal extraction is to speed up searches. That is, if you\nknow a regular expression must match a prefix or suffix literal, then it is\noften quicker to search for instances of that literal, and then confirm or deny\nthe match using the full regular expression engine. These optimizations are\ndone automatically in the `regex` crate.\n\n\n# Crate features\n\nAn important feature provided by this crate is its Unicode support. This\nincludes things like case folding, boolean properties, general categories,\nscripts and Unicode-aware support for the Perl classes `\\w`, `\\s` and `\\d`.\nHowever, a downside of this support is that it requires bundling several\nUnicode data tables that are substantial in size.\n\nA fair number of use cases do not require full Unicode support. For this\nreason, this crate exposes a number of features to control which Unicode\ndata is available.\n\nIf a regular expression attempts to use a Unicode feature that is not available\nbecause the corresponding crate feature was disabled, then translating that\nregular expression to an `Hir` will return an error. (It is still possible\nconstruct an `Ast` for such a regular expression, since Unicode data is not\nused until translation to an `Hir`.) Stated differently, enabling or disabling\nany of the features below can only add or subtract from the total set of valid\nregular expressions. Enabling or disabling a feature will never modify the\nmatch semantics of a regular expression.\n\nThe following features are available:\n\n* **unicode** -\n  Enables all Unicode features. This feature is enabled by default, and will\n  always cover all Unicode features, even if more are added in the future.\n* **unicode-age** -\n  Provide the data for the\n  [Unicode `Age` property](https://www.unicode.org/reports/tr44/tr44-24.html#Character_Age).\n  This makes it possible to use classes like `\\p{Age:6.0}` to refer to all\n  codepoints first introduced in Unicode 6.0\n* **unicode-bool** -\n  Provide the data for numerous Unicode boolean properties. The full list\n  is not included here, but contains properties like `Alphabetic`, `Emoji`,\n  `Lowercase`, `Math`, `Uppercase` and `White_Space`.\n* **unicode-case** -\n  Provide the data for case insensitive matching using\n  [Unicode's \"simple loose matches\" specification](https://www.unicode.org/reports/tr18/#Simple_Loose_Matches).\n* **unicode-gencat** -\n  Provide the data for\n  [Uncode general categories](https://www.unicode.org/reports/tr44/tr44-24.html#General_Category_Values).\n  This includes, but is not limited to, `Decimal_Number`, `Letter`,\n  `Math_Symbol`, `Number` and `Punctuation`.\n* **unicode-perl** -\n  Provide the data for supporting the Unicode-aware Perl character classes,\n  corresponding to `\\w`, `\\s` and `\\d`. This is also necessary for using\n  Unicode-aware word boundary assertions. Note that if this feature is\n  disabled, the `\\s` and `\\d` character classes are still available if the\n  `unicode-bool` and `unicode-gencat` features are enabled, respectively.\n* **unicode-script** -\n  Provide the data for\n  [Unicode scripts and script extensions](https://www.unicode.org/reports/tr24/).\n  This includes, but is not limited to, `Arabic`, `Cyrillic`, `Hebrew`,\n  `Latin` and `Thai`.\n* **unicode-segment** -\n  Provide the data necessary to provide the properties used to implement the\n  [Unicode text segmentation algorithms](https://www.unicode.org/reports/tr29/).\n  This enables using classes like `\\p{gcb=Extend}`, `\\p{wb=Katakana}` and\n  `\\p{sb=ATerm}`.\n*/\n\n#![deny(missing_docs)]\n#![forbid(unsafe_code)]\n\npub use error::{Error, Result};\npub use parser::{Parser, ParserBuilder};\npub use unicode::UnicodeWordError;\n\npub mod ast;\nmod either;\nmod error;\npub mod hir;\nmod parser;\nmod unicode;\nmod unicode_tables;\npub mod utf8;\n\n/// Escapes all regular expression meta characters in `text`.\n///\n/// The string returned may be safely used as a literal in a regular\n/// expression.\npub fn escape(text: &str) -> String {\n    let mut quoted = String::new();\n    escape_into(text, &mut quoted);\n    quoted\n}\n\n/// Escapes all meta characters in `text` and writes the result into `buf`.\n///\n/// This will append escape characters into the given buffer. The characters\n/// that are appended are safe to use as a literal in a regular expression.\npub fn escape_into(text: &str, buf: &mut String) {\n    buf.reserve(text.len());\n    for c in text.chars() {\n        if is_meta_character(c) {\n            buf.push('\\\\');\n        }\n        buf.push(c);\n    }\n}\n\n/// Returns true if the give character has significance in a regex.\n///\n/// These are the only characters that are allowed to be escaped, with one\n/// exception: an ASCII space character may be escaped when extended mode (with\n/// the `x` flag) is enabld. In particular, `is_meta_character(' ')` returns\n/// `false`.\n///\n/// Note that the set of characters for which this function returns `true` or\n/// `false` is fixed and won't change in a semver compatible release.\npub fn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{'\n        | '}' | '^' | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\n/// Returns true if and only if the given character is a Unicode word\n/// character.\n///\n/// A Unicode word character is defined by\n/// [UTS#18 Annex C](http://unicode.org/reports/tr18/#Compatibility_Properties).\n/// In particular, a character\n/// is considered a word character if it is in either of the `Alphabetic` or\n/// `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`\n/// or `Connector_Punctuation` general categories.\n///\n/// # Panics\n///\n/// If the `unicode-perl` feature is not enabled, then this function panics.\n/// For this reason, it is recommended that callers use\n/// [`try_is_word_character`](fn.try_is_word_character.html)\n/// instead.\npub fn is_word_character(c: char) -> bool {\n    try_is_word_character(c).expect(\"unicode-perl feature must be enabled\")\n}\n\n/// Returns true if and only if the given character is a Unicode word\n/// character.\n///\n/// A Unicode word character is defined by\n/// [UTS#18 Annex C](http://unicode.org/reports/tr18/#Compatibility_Properties).\n/// In particular, a character\n/// is considered a word character if it is in either of the `Alphabetic` or\n/// `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`\n/// or `Connector_Punctuation` general categories.\n///\n/// # Errors\n///\n/// If the `unicode-perl` feature is not enabled, then this function always\n/// returns an error.\npub fn try_is_word_character(\n    c: char,\n) -> std::result::Result<bool, UnicodeWordError> {\n    unicode::is_word_character(c)\n}\n\n/// Returns true if and only if the given character is an ASCII word character.\n///\n/// An ASCII word character is defined by the following character class:\n/// `[_0-9a-zA-Z]'.\npub fn is_word_byte(c: u8) -> bool {\n    match c {\n        b'_' | b'0'..=b'9' | b'a'..=b'z' | b'A'..=b'Z' => true,\n        _ => false,\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn escape_meta() {\n        assert_eq!(\n            escape(r\"\\.+*?()|[]{}^$#&-~\"),\n            r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\#\\&\\-\\~\".to_string()\n        );\n    }\n\n    #[test]\n    fn word_byte() {\n        assert!(is_word_byte(b'a'));\n        assert!(!is_word_byte(b'-'));\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-perl\")]\n    fn word_char() {\n        assert!(is_word_character('a'), \"ASCII\");\n        assert!(is_word_character('à'), \"Latin-1\");\n        assert!(is_word_character('β'), \"Greek\");\n        assert!(is_word_character('\\u{11011}'), \"Brahmi (Unicode 6.0)\");\n        assert!(is_word_character('\\u{11611}'), \"Modi (Unicode 7.0)\");\n        assert!(is_word_character('\\u{11711}'), \"Ahom (Unicode 8.0)\");\n        assert!(is_word_character('\\u{17828}'), \"Tangut (Unicode 9.0)\");\n        assert!(is_word_character('\\u{1B1B1}'), \"Nushu (Unicode 10.0)\");\n        assert!(is_word_character('\\u{16E40}'), \"Medefaidrin (Unicode 11.0)\");\n        assert!(!is_word_character('-'));\n        assert!(!is_word_character('☃'));\n    }\n\n    #[test]\n    #[should_panic]\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn word_char_disabled_panic() {\n        assert!(is_word_character('a'));\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn word_char_disabled_error() {\n        assert!(try_is_word_character('a').is_err());\n    }\n}\n","traces":[{"line":177,"address":[7348832,7348876],"length":1,"stats":{"Line":0},"fn_name":"escape"},{"line":178,"address":[7348869],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[7348888],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[7348960],"length":1,"stats":{"Line":0},"fn_name":"escape_into"},{"line":188,"address":[7348997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[7349138,7349226,7349221,7349032],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[7349205,7349162],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[7024299],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[7024320],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[7024336],"length":1,"stats":{"Line":9},"fn_name":"is_meta_character"},{"line":207,"address":[7024383],"length":1,"stats":{"Line":8},"fn_name":null},{"line":208,"address":[7024344],"length":1,"stats":{"Line":9},"fn_name":null},{"line":209,"address":[7349281],"length":1,"stats":{"Line":9},"fn_name":null},{"line":210,"address":[7024378],"length":1,"stats":{"Line":8},"fn_name":null},{"line":230,"address":[7024416],"length":1,"stats":{"Line":9},"fn_name":"is_word_character"},{"line":231,"address":[7024421],"length":1,"stats":{"Line":9},"fn_name":null},{"line":248,"address":[7024496],"length":1,"stats":{"Line":9},"fn_name":"try_is_word_character"},{"line":251,"address":[7024501],"length":1,"stats":{"Line":9},"fn_name":null},{"line":258,"address":[7024528],"length":1,"stats":{"Line":8},"fn_name":"is_word_byte"},{"line":259,"address":[7024600],"length":1,"stats":{"Line":8},"fn_name":null},{"line":260,"address":[7024537,7024602],"length":1,"stats":{"Line":16},"fn_name":null},{"line":261,"address":[7024595],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":13,"coverable":22},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","parser.rs"],"content":"use ast;\nuse hir;\n\nuse Result;\n\n/// A builder for a regular expression parser.\n///\n/// This builder permits modifying configuration options for the parser.\n///\n/// This type combines the builder options for both the\n/// [AST `ParserBuilder`](ast/parse/struct.ParserBuilder.html)\n/// and the\n/// [HIR `TranslatorBuilder`](hir/translate/struct.TranslatorBuilder.html).\n#[derive(Clone, Debug, Default)]\npub struct ParserBuilder {\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n\nimpl ParserBuilder {\n    /// Create a new parser builder with a default configuration.\n    pub fn new() -> ParserBuilder {\n        ParserBuilder::default()\n    }\n\n    /// Build a parser from this configuration with the given pattern.\n    pub fn build(&self) -> Parser {\n        Parser { ast: self.ast.build(), hir: self.hir.build() }\n    }\n\n    /// Set the nesting limit for this parser.\n    ///\n    /// The nesting limit controls how deep the abstract syntax tree is allowed\n    /// to be. If the AST exceeds the given limit (e.g., with too many nested\n    /// groups), then an error is returned by the parser.\n    ///\n    /// The purpose of this limit is to act as a heuristic to prevent stack\n    /// overflow for consumers that do structural induction on an `Ast` using\n    /// explicit recursion. While this crate never does this (instead using\n    /// constant stack space and moving the call stack to the heap), other\n    /// crates may.\n    ///\n    /// This limit is not checked until the entire Ast is parsed. Therefore,\n    /// if callers want to put a limit on the amount of heap space used, then\n    /// they should impose a limit on the length, in bytes, of the concrete\n    /// pattern string. In particular, this is viable since this parser\n    /// implementation will limit itself to heap space proportional to the\n    /// lenth of the pattern string.\n    ///\n    /// Note that a nest limit of `0` will return a nest limit error for most\n    /// patterns but not all. For example, a nest limit of `0` permits `a` but\n    /// not `ab`, since `ab` requires a concatenation, which results in a nest\n    /// depth of `1`. In general, a nest limit is not something that manifests\n    /// in an obvious way in the concrete syntax, therefore, it should not be\n    /// used in a granular way.\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {\n        self.ast.nest_limit(limit);\n        self\n    }\n\n    /// Whether to support octal syntax or not.\n    ///\n    /// Octal syntax is a little-known way of uttering Unicode codepoints in\n    /// a regular expression. For example, `a`, `\\x61`, `\\u0061` and\n    /// `\\141` are all equivalent regular expressions, where the last example\n    /// shows octal syntax.\n    ///\n    /// While supporting octal syntax isn't in and of itself a problem, it does\n    /// make good error messages harder. That is, in PCRE based regex engines,\n    /// syntax like `\\0` invokes a backreference, which is explicitly\n    /// unsupported in Rust's regex engine. However, many users expect it to\n    /// be supported. Therefore, when octal support is disabled, the error\n    /// message will explicitly mention that backreferences aren't supported.\n    ///\n    /// Octal syntax is disabled by default.\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.ast.octal(yes);\n        self\n    }\n\n    /// When enabled, the parser will permit the construction of a regular\n    /// expression that may match invalid UTF-8.\n    ///\n    /// When disabled (the default), the parser is guaranteed to produce\n    /// an expression that will only ever match valid UTF-8 (otherwise, the\n    /// parser will return an error).\n    ///\n    /// Perhaps surprisingly, when invalid UTF-8 isn't allowed, a negated ASCII\n    /// word boundary (uttered as `(?-u:\\B)` in the concrete syntax) will cause\n    /// the parser to return an error. Namely, a negated ASCII word boundary\n    /// can result in matching positions that aren't valid UTF-8 boundaries.\n    pub fn allow_invalid_utf8(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.allow_invalid_utf8(yes);\n        self\n    }\n\n    /// Enable verbose mode in the regular expression.\n    ///\n    /// When enabled, verbose mode permits insigificant whitespace in many\n    /// places in the regular expression, as well as comments. Comments are\n    /// started using `#` and continue until the end of the line.\n    ///\n    /// By default, this is disabled. It may be selectively enabled in the\n    /// regular expression by using the `x` flag regardless of this setting.\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.ast.ignore_whitespace(yes);\n        self\n    }\n\n    /// Enable or disable the case insensitive flag by default.\n    ///\n    /// By default this is disabled. It may alternatively be selectively\n    /// enabled in the regular expression itself via the `i` flag.\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.case_insensitive(yes);\n        self\n    }\n\n    /// Enable or disable the multi-line matching flag by default.\n    ///\n    /// By default this is disabled. It may alternatively be selectively\n    /// enabled in the regular expression itself via the `m` flag.\n    pub fn multi_line(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.multi_line(yes);\n        self\n    }\n\n    /// Enable or disable the \"dot matches any character\" flag by default.\n    ///\n    /// By default this is disabled. It may alternatively be selectively\n    /// enabled in the regular expression itself via the `s` flag.\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.dot_matches_new_line(yes);\n        self\n    }\n\n    /// Enable or disable the \"swap greed\" flag by default.\n    ///\n    /// By default this is disabled. It may alternatively be selectively\n    /// enabled in the regular expression itself via the `U` flag.\n    pub fn swap_greed(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.swap_greed(yes);\n        self\n    }\n\n    /// Enable or disable the Unicode flag (`u`) by default.\n    ///\n    /// By default this is **enabled**. It may alternatively be selectively\n    /// disabled in the regular expression itself via the `u` flag.\n    ///\n    /// Note that unless `allow_invalid_utf8` is enabled (it's disabled by\n    /// default), a regular expression will fail to parse if Unicode mode is\n    /// disabled and a sub-expression could possibly match invalid UTF-8.\n    pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.unicode(yes);\n        self\n    }\n}\n\n/// A convenience parser for regular expressions.\n///\n/// This parser takes as input a regular expression pattern string (the\n/// \"concrete syntax\") and returns a high-level intermediate representation\n/// (the HIR) suitable for most types of analysis. In particular, this parser\n/// hides the intermediate state of producing an AST (the \"abstract syntax\").\n/// The AST is itself far more complex than the HIR, so this parser serves as a\n/// convenience for never having to deal with it at all.\n///\n/// If callers have more fine grained use cases that need an AST, then please\n/// see the [`ast::parse`](ast/parse/index.html) module.\n///\n/// A `Parser` can be configured in more detail via a\n/// [`ParserBuilder`](struct.ParserBuilder.html).\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n\nimpl Parser {\n    /// Create a new parser with a default configuration.\n    ///\n    /// The parser can be run with `parse` method. The parse method returns\n    /// a high level intermediate representation of the given regular\n    /// expression.\n    ///\n    /// To set configuration options on the parser, use\n    /// [`ParserBuilder`](struct.ParserBuilder.html).\n    pub fn new() -> Parser {\n        ParserBuilder::new().build()\n    }\n\n    /// Parse the regular expression into a high level intermediate\n    /// representation.\n    pub fn parse(&mut self, pattern: &str) -> Result<hir::Hir> {\n        let ast = self.ast.parse(pattern)?;\n        let hir = self.hir.translate(pattern, &ast)?;\n        Ok(hir)\n    }\n}\n","traces":[{"line":22,"address":[6758992],"length":1,"stats":{"Line":15},"fn_name":"new"},{"line":23,"address":[7088232],"length":1,"stats":{"Line":15},"fn_name":null},{"line":27,"address":[6759079,6759024],"length":1,"stats":{"Line":15},"fn_name":"build"},{"line":28,"address":[6759099,6759199,6759042],"length":1,"stats":{"Line":30},"fn_name":null},{"line":56,"address":[6759232],"length":1,"stats":{"Line":15},"fn_name":"nest_limit"},{"line":57,"address":[6759245],"length":1,"stats":{"Line":15},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[6759280],"length":1,"stats":{"Line":15},"fn_name":"octal"},{"line":77,"address":[6759298],"length":1,"stats":{"Line":15},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[6759344],"length":1,"stats":{"Line":15},"fn_name":"allow_invalid_utf8"},{"line":93,"address":[6759362],"length":1,"stats":{"Line":15},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[7088640],"length":1,"stats":{"Line":15},"fn_name":"ignore_whitespace"},{"line":106,"address":[7088658],"length":1,"stats":{"Line":15},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[6759472],"length":1,"stats":{"Line":15},"fn_name":"case_insensitive"},{"line":115,"address":[6759490],"length":1,"stats":{"Line":15},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[6759536],"length":1,"stats":{"Line":15},"fn_name":"multi_line"},{"line":124,"address":[6759554],"length":1,"stats":{"Line":15},"fn_name":null},{"line":125,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[6759600],"length":1,"stats":{"Line":15},"fn_name":"dot_matches_new_line"},{"line":133,"address":[6759618],"length":1,"stats":{"Line":15},"fn_name":null},{"line":134,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[6759664],"length":1,"stats":{"Line":15},"fn_name":"swap_greed"},{"line":142,"address":[6759682],"length":1,"stats":{"Line":15},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[6759728],"length":1,"stats":{"Line":15},"fn_name":"unicode"},{"line":155,"address":[6759746],"length":1,"stats":{"Line":15},"fn_name":null},{"line":156,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[6759792],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":190,"address":[6759799],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[6759856,6759943],"length":1,"stats":{"Line":15},"fn_name":"parse"},{"line":196,"address":[6759958,6760169,6759890,6760467],"length":1,"stats":{"Line":32},"fn_name":null},{"line":197,"address":[6760103,6760991,6760761,6760515],"length":1,"stats":{"Line":22},"fn_name":null},{"line":198,"address":[6760655],"length":1,"stats":{"Line":9},"fn_name":null}],"covered":26,"coverable":37},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","unicode.rs"],"content":"use std::error;\nuse std::fmt;\nuse std::result;\n\nuse hir;\n\n/// A type alias for errors specific to Unicode handling of classes.\npub type Result<T> = result::Result<T, Error>;\n\n/// An inclusive range of codepoints from a generated file (hence the static\n/// lifetime).\ntype Range = &'static [(char, char)];\n\n/// An error that occurs when dealing with Unicode.\n///\n/// We don't impl the Error trait here because these always get converted\n/// into other public errors. (This error type isn't exported.)\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    // Not used when unicode-perl is enabled.\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\n\n/// A type alias for errors specific to Unicode case folding.\npub type FoldResult<T> = result::Result<T, CaseFoldError>;\n\n/// An error that occurs when Unicode-aware simple case folding fails.\n///\n/// This error can occur when the case mapping tables necessary for Unicode\n/// aware case folding are unavailable. This only occurs when the\n/// `unicode-case` feature is disabled. (The feature is enabled by default.)\n#[derive(Debug)]\npub struct CaseFoldError(());\n\nimpl error::Error for CaseFoldError {}\n\nimpl fmt::Display for CaseFoldError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(\n            f,\n            \"Unicode-aware case folding is not available \\\n             (probably because the unicode-case feature is not enabled)\"\n        )\n    }\n}\n\n/// An error that occurs when the Unicode-aware `\\w` class is unavailable.\n///\n/// This error can occur when the data tables necessary for the Unicode aware\n/// Perl character class `\\w` are unavailable. This only occurs when the\n/// `unicode-perl` feature is disabled. (The feature is enabled by default.)\n#[derive(Debug)]\npub struct UnicodeWordError(());\n\nimpl error::Error for UnicodeWordError {}\n\nimpl fmt::Display for UnicodeWordError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(\n            f,\n            \"Unicode-aware \\\\w class is not available \\\n             (probably because the unicode-perl feature is not enabled)\"\n        )\n    }\n}\n\n/// Return an iterator over the equivalence class of simple case mappings\n/// for the given codepoint. The equivalence class does not include the\n/// given codepoint.\n///\n/// If the equivalence class is empty, then this returns the next scalar\n/// value that has a non-empty equivalence class, if it exists. If no such\n/// scalar value exists, then `None` is returned. The point of this behavior\n/// is to permit callers to avoid calling `simple_fold` more than they need\n/// to, since there is some cost to fetching the equivalence class.\n///\n/// This returns an error if the Unicode case folding tables are not available.\npub fn simple_fold(\n    c: char,\n) -> FoldResult<result::Result<impl Iterator<Item = char>, Option<char>>> {\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn imp(\n        _: char,\n    ) -> FoldResult<result::Result<impl Iterator<Item = char>, Option<char>>>\n    {\n        use std::option::IntoIter;\n        Err::<result::Result<IntoIter<char>, _>, _>(CaseFoldError(()))\n    }\n\n    #[cfg(feature = \"unicode-case\")]\n    fn imp(\n        c: char,\n    ) -> FoldResult<result::Result<impl Iterator<Item = char>, Option<char>>>\n    {\n        use unicode_tables::case_folding_simple::CASE_FOLDING_SIMPLE;\n\n        Ok(CASE_FOLDING_SIMPLE\n            .binary_search_by_key(&c, |&(c1, _)| c1)\n            .map(|i| CASE_FOLDING_SIMPLE[i].1.iter().map(|&c| c))\n            .map_err(|i| {\n                if i >= CASE_FOLDING_SIMPLE.len() {\n                    None\n                } else {\n                    Some(CASE_FOLDING_SIMPLE[i].0)\n                }\n            }))\n    }\n\n    imp(c)\n}\n\n/// Returns true if and only if the given (inclusive) range contains at least\n/// one Unicode scalar value that has a non-empty non-trivial simple case\n/// mapping.\n///\n/// This function panics if `end < start`.\n///\n/// This returns an error if the Unicode case folding tables are not available.\npub fn contains_simple_case_mapping(\n    start: char,\n    end: char,\n) -> FoldResult<bool> {\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn imp(_: char, _: char) -> FoldResult<bool> {\n        Err(CaseFoldError(()))\n    }\n\n    #[cfg(feature = \"unicode-case\")]\n    fn imp(start: char, end: char) -> FoldResult<bool> {\n        use std::cmp::Ordering;\n        use unicode_tables::case_folding_simple::CASE_FOLDING_SIMPLE;\n\n        assert!(start <= end);\n        Ok(CASE_FOLDING_SIMPLE\n            .binary_search_by(|&(c, _)| {\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if c > end {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok())\n    }\n\n    imp(start, end)\n}\n\n/// A query for finding a character class defined by Unicode. This supports\n/// either use of a property name directly, or lookup by property value. The\n/// former generally refers to Binary properties (see UTS#44, Table 8), but\n/// as a special exception (see UTS#18, Section 1.2) both general categories\n/// (an enumeration) and scripts (a catalog) are supported as if each of their\n/// possible values were a binary property.\n///\n/// In all circumstances, property names and values are normalized and\n/// canonicalized. That is, `GC == gc == GeneralCategory == general_category`.\n///\n/// The lifetime `'a` refers to the shorter of the lifetimes of property name\n/// and property value.\n#[derive(Debug)]\npub enum ClassQuery<'a> {\n    /// Return a class corresponding to a Unicode binary property, named by\n    /// a single letter.\n    OneLetter(char),\n    /// Return a class corresponding to a Unicode binary property.\n    ///\n    /// Note that, by special exception (see UTS#18, Section 1.2), both\n    /// general category values and script values are permitted here as if\n    /// they were a binary property.\n    Binary(&'a str),\n    /// Return a class corresponding to all codepoints whose property\n    /// (identified by `property_name`) corresponds to the given value\n    /// (identified by `property_value`).\n    ByValue {\n        /// A property name.\n        property_name: &'a str,\n        /// A property value.\n        property_value: &'a str,\n    },\n}\n\nimpl<'a> ClassQuery<'a> {\n    fn canonicalize(&self) -> Result<CanonicalClassQuery> {\n        match *self {\n            ClassQuery::OneLetter(c) => self.canonical_binary(&c.to_string()),\n            ClassQuery::Binary(name) => self.canonical_binary(name),\n            ClassQuery::ByValue { property_name, property_value } => {\n                let property_name = symbolic_name_normalize(property_name);\n                let property_value = symbolic_name_normalize(property_value);\n\n                let canon_name = match canonical_prop(&property_name)? {\n                    None => return Err(Error::PropertyNotFound),\n                    Some(canon_name) => canon_name,\n                };\n                Ok(match canon_name {\n                    \"General_Category\" => {\n                        let canon = match canonical_gencat(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::GeneralCategory(canon)\n                    }\n                    \"Script\" => {\n                        let canon = match canonical_script(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::Script(canon)\n                    }\n                    _ => {\n                        let vals = match property_values(canon_name)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(vals) => vals,\n                        };\n                        let canon_val =\n                            match canonical_value(vals, &property_value) {\n                                None => {\n                                    return Err(Error::PropertyValueNotFound)\n                                }\n                                Some(canon_val) => canon_val,\n                            };\n                        CanonicalClassQuery::ByValue {\n                            property_name: canon_name,\n                            property_value: canon_val,\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    fn canonical_binary(&self, name: &str) -> Result<CanonicalClassQuery> {\n        let norm = symbolic_name_normalize(name);\n\n        if let Some(canon) = canonical_prop(&norm)? {\n            return Ok(CanonicalClassQuery::Binary(canon));\n        }\n        if let Some(canon) = canonical_gencat(&norm)? {\n            return Ok(CanonicalClassQuery::GeneralCategory(canon));\n        }\n        if let Some(canon) = canonical_script(&norm)? {\n            return Ok(CanonicalClassQuery::Script(canon));\n        }\n        Err(Error::PropertyNotFound)\n    }\n}\n\n/// Like ClassQuery, but its parameters have been canonicalized. This also\n/// differentiates binary properties from flattened general categories and\n/// scripts.\n#[derive(Debug, Eq, PartialEq)]\nenum CanonicalClassQuery {\n    /// The canonical binary property name.\n    Binary(&'static str),\n    /// The canonical general category name.\n    GeneralCategory(&'static str),\n    /// The canonical script name.\n    Script(&'static str),\n    /// An arbitrary association between property and value, both of which\n    /// have been canonicalized.\n    ///\n    /// Note that by construction, the property name of ByValue will never\n    /// be General_Category or Script. Those two cases are subsumed by the\n    /// eponymous variants.\n    ByValue {\n        /// The canonical property name.\n        property_name: &'static str,\n        /// The canonical property value.\n        property_value: &'static str,\n    },\n}\n\n/// Looks up a Unicode class given a query. If one doesn't exist, then\n/// `None` is returned.\npub fn class(query: ClassQuery) -> Result<hir::ClassUnicode> {\n    use self::CanonicalClassQuery::*;\n\n    match query.canonicalize()? {\n        Binary(name) => bool_property(name),\n        GeneralCategory(name) => gencat(name),\n        Script(name) => script(name),\n        ByValue { property_name: \"Age\", property_value } => {\n            let mut class = hir::ClassUnicode::empty();\n            for set in ages(property_value)? {\n                class.union(&hir_class(set));\n            }\n            Ok(class)\n        }\n        ByValue { property_name: \"Script_Extensions\", property_value } => {\n            script_extension(property_value)\n        }\n        ByValue {\n            property_name: \"Grapheme_Cluster_Break\",\n            property_value,\n        } => gcb(property_value),\n        ByValue { property_name: \"Sentence_Break\", property_value } => {\n            sb(property_value)\n        }\n        ByValue { property_name: \"Word_Break\", property_value } => {\n            wb(property_value)\n        }\n        _ => {\n            // What else should we support?\n            Err(Error::PropertyNotFound)\n        }\n    }\n}\n\n/// Returns a Unicode aware class for \\w.\n///\n/// This returns an error if the data is not available for \\w.\npub fn perl_word() -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn imp() -> Result<hir::ClassUnicode> {\n        Err(Error::PerlClassNotFound)\n    }\n\n    #[cfg(feature = \"unicode-perl\")]\n    fn imp() -> Result<hir::ClassUnicode> {\n        use unicode_tables::perl_word::PERL_WORD;\n        Ok(hir_class(PERL_WORD))\n    }\n\n    imp()\n}\n\n/// Returns a Unicode aware class for \\s.\n///\n/// This returns an error if the data is not available for \\s.\npub fn perl_space() -> Result<hir::ClassUnicode> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode> {\n        Err(Error::PerlClassNotFound)\n    }\n\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode> {\n        use unicode_tables::perl_space::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n\n    #[cfg(feature = \"unicode-bool\")]\n    fn imp() -> Result<hir::ClassUnicode> {\n        use unicode_tables::property_bool::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n\n    imp()\n}\n\n/// Returns a Unicode aware class for \\d.\n///\n/// This returns an error if the data is not available for \\d.\npub fn perl_digit() -> Result<hir::ClassUnicode> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode> {\n        Err(Error::PerlClassNotFound)\n    }\n\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode> {\n        use unicode_tables::perl_decimal::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp() -> Result<hir::ClassUnicode> {\n        use unicode_tables::general_category::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n\n    imp()\n}\n\n/// Build a Unicode HIR class from a sequence of Unicode scalar value ranges.\npub fn hir_class(ranges: &[(char, char)]) -> hir::ClassUnicode {\n    let hir_ranges: Vec<hir::ClassUnicodeRange> = ranges\n        .iter()\n        .map(|&(s, e)| hir::ClassUnicodeRange::new(s, e))\n        .collect();\n    hir::ClassUnicode::new(hir_ranges)\n}\n\n/// Returns true only if the given codepoint is in the `\\w` character class.\n///\n/// If the `unicode-perl` feature is not enabled, then this returns an error.\npub fn is_word_character(c: char) -> result::Result<bool, UnicodeWordError> {\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn imp(_: char) -> result::Result<bool, UnicodeWordError> {\n        Err(UnicodeWordError(()))\n    }\n\n    #[cfg(feature = \"unicode-perl\")]\n    fn imp(c: char) -> result::Result<bool, UnicodeWordError> {\n        use is_word_byte;\n        use std::cmp::Ordering;\n        use unicode_tables::perl_word::PERL_WORD;\n\n        if c <= 0x7F as char && is_word_byte(c as u8) {\n            return Ok(true);\n        }\n        Ok(PERL_WORD\n            .binary_search_by(|&(start, end)| {\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if start > c {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok())\n    }\n\n    imp(c)\n}\n\n/// A mapping of property values for a specific property.\n///\n/// The first element of each tuple is a normalized property value while the\n/// second element of each tuple is the corresponding canonical property\n/// value.\ntype PropertyValues = &'static [(&'static str, &'static str)];\n\nfn canonical_gencat(normalized_value: &str) -> Result<Option<&'static str>> {\n    Ok(match normalized_value {\n        \"any\" => Some(\"Any\"),\n        \"assigned\" => Some(\"Assigned\"),\n        \"ascii\" => Some(\"ASCII\"),\n        _ => {\n            let gencats = property_values(\"General_Category\")?.unwrap();\n            canonical_value(gencats, normalized_value)\n        }\n    })\n}\n\nfn canonical_script(normalized_value: &str) -> Result<Option<&'static str>> {\n    let scripts = property_values(\"Script\")?.unwrap();\n    Ok(canonical_value(scripts, normalized_value))\n}\n\n/// Find the canonical property name for the given normalized property name.\n///\n/// If no such property exists, then `None` is returned.\n///\n/// The normalized property name must have been normalized according to\n/// UAX44 LM3, which can be done using `symbolic_name_normalize`.\n///\n/// If the property names data is not available, then an error is returned.\nfn canonical_prop(normalized_name: &str) -> Result<Option<&'static str>> {\n    #[cfg(not(any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    )))]\n    fn imp(_: &str) -> Result<Option<&'static str>> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    ))]\n    fn imp(name: &str) -> Result<Option<&'static str>> {\n        use unicode_tables::property_names::PROPERTY_NAMES;\n\n        Ok(PROPERTY_NAMES\n            .binary_search_by_key(&name, |&(n, _)| n)\n            .ok()\n            .map(|i| PROPERTY_NAMES[i].1))\n    }\n\n    imp(normalized_name)\n}\n\n/// Find the canonical property value for the given normalized property\n/// value.\n///\n/// The given property values should correspond to the values for the property\n/// under question, which can be found using `property_values`.\n///\n/// If no such property value exists, then `None` is returned.\n///\n/// The normalized property value must have been normalized according to\n/// UAX44 LM3, which can be done using `symbolic_name_normalize`.\nfn canonical_value(\n    vals: PropertyValues,\n    normalized_value: &str,\n) -> Option<&'static str> {\n    vals.binary_search_by_key(&normalized_value, |&(n, _)| n)\n        .ok()\n        .map(|i| vals[i].1)\n}\n\n/// Return the table of property values for the given property name.\n///\n/// If the property values data is not available, then an error is returned.\nfn property_values(\n    canonical_property_name: &'static str,\n) -> Result<Option<PropertyValues>> {\n    #[cfg(not(any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    )))]\n    fn imp(_: &'static str) -> Result<Option<PropertyValues>> {\n        Err(Error::PropertyValueNotFound)\n    }\n\n    #[cfg(any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    ))]\n    fn imp(name: &'static str) -> Result<Option<PropertyValues>> {\n        use unicode_tables::property_values::PROPERTY_VALUES;\n\n        Ok(PROPERTY_VALUES\n            .binary_search_by_key(&name, |&(n, _)| n)\n            .ok()\n            .map(|i| PROPERTY_VALUES[i].1))\n    }\n\n    imp(canonical_property_name)\n}\n\n// This is only used in some cases, but small enough to just let it be dead\n// instead of figuring out (and maintaining) the right set of features.\n#[allow(dead_code)]\nfn property_set(\n    name_map: &'static [(&'static str, Range)],\n    canonical: &'static str,\n) -> Option<Range> {\n    name_map\n        .binary_search_by_key(&canonical, |x| x.0)\n        .ok()\n        .map(|i| name_map[i].1)\n}\n\n/// Returns an iterator over Unicode Age sets. Each item corresponds to a set\n/// of codepoints that were added in a particular revision of Unicode. The\n/// iterator yields items in chronological order.\n///\n/// If the given age value isn't valid or if the data isn't available, then an\n/// error is returned instead.\nfn ages(canonical_age: &str) -> Result<impl Iterator<Item = Range>> {\n    #[cfg(not(feature = \"unicode-age\"))]\n    fn imp(_: &str) -> Result<impl Iterator<Item = Range>> {\n        use std::option::IntoIter;\n        Err::<IntoIter<Range>, _>(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-age\")]\n    fn imp(canonical_age: &str) -> Result<impl Iterator<Item = Range>> {\n        use unicode_tables::age;\n\n        const AGES: &'static [(&'static str, Range)] = &[\n            (\"V1_1\", age::V1_1),\n            (\"V2_0\", age::V2_0),\n            (\"V2_1\", age::V2_1),\n            (\"V3_0\", age::V3_0),\n            (\"V3_1\", age::V3_1),\n            (\"V3_2\", age::V3_2),\n            (\"V4_0\", age::V4_0),\n            (\"V4_1\", age::V4_1),\n            (\"V5_0\", age::V5_0),\n            (\"V5_1\", age::V5_1),\n            (\"V5_2\", age::V5_2),\n            (\"V6_0\", age::V6_0),\n            (\"V6_1\", age::V6_1),\n            (\"V6_2\", age::V6_2),\n            (\"V6_3\", age::V6_3),\n            (\"V7_0\", age::V7_0),\n            (\"V8_0\", age::V8_0),\n            (\"V9_0\", age::V9_0),\n            (\"V10_0\", age::V10_0),\n            (\"V11_0\", age::V11_0),\n            (\"V12_0\", age::V12_0),\n            (\"V12_1\", age::V12_1),\n            (\"V13_0\", age::V13_0),\n        ];\n        assert_eq!(AGES.len(), age::BY_NAME.len(), \"ages are out of sync\");\n\n        let pos = AGES.iter().position(|&(age, _)| canonical_age == age);\n        match pos {\n            None => Err(Error::PropertyValueNotFound),\n            Some(i) => Ok(AGES[..i + 1].iter().map(|&(_, classes)| classes)),\n        }\n    }\n\n    imp(canonical_age)\n}\n\n/// Returns the Unicode HIR class corresponding to the given general category.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given general category could not be found, or if the general\n/// category data is not available, then an error is returned.\nfn gencat(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-gencat\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::general_category::BY_NAME;\n        match name {\n            \"ASCII\" => Ok(hir_class(&[('\\0', '\\x7F')])),\n            \"Any\" => Ok(hir_class(&[('\\0', '\\u{10FFFF}')])),\n            \"Assigned\" => {\n                let mut cls = gencat(\"Unassigned\")?;\n                cls.negate();\n                Ok(cls)\n            }\n            name => property_set(BY_NAME, name)\n                .map(hir_class)\n                .ok_or(Error::PropertyValueNotFound),\n        }\n    }\n\n    match canonical_name {\n        \"Decimal_Number\" => perl_digit(),\n        name => imp(name),\n    }\n}\n\n/// Returns the Unicode HIR class corresponding to the given script.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given script could not be found, or if the script data is not\n/// available, then an error is returned.\nfn script(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-script\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-script\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::script::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyValueNotFound)\n    }\n\n    imp(canonical_name)\n}\n\n/// Returns the Unicode HIR class corresponding to the given script extension.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given script extension could not be found, or if the script data is\n/// not available, then an error is returned.\nfn script_extension(\n    canonical_name: &'static str,\n) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-script\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-script\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::script_extension::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyValueNotFound)\n    }\n\n    imp(canonical_name)\n}\n\n/// Returns the Unicode HIR class corresponding to the given Unicode boolean\n/// property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given boolean property could not be found, or if the boolean\n/// property data is not available, then an error is returned.\nfn bool_property(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-bool\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-bool\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::property_bool::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyNotFound)\n    }\n\n    match canonical_name {\n        \"Decimal_Number\" => perl_digit(),\n        \"White_Space\" => perl_space(),\n        name => imp(name),\n    }\n}\n\n/// Returns the Unicode HIR class corresponding to the given grapheme cluster\n/// break property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given property could not be found, or if the corresponding data is\n/// not available, then an error is returned.\nfn gcb(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-segment\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-segment\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::grapheme_cluster_break::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyValueNotFound)\n    }\n\n    imp(canonical_name)\n}\n\n/// Returns the Unicode HIR class corresponding to the given word break\n/// property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given property could not be found, or if the corresponding data is\n/// not available, then an error is returned.\nfn wb(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-segment\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-segment\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::word_break::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyValueNotFound)\n    }\n\n    imp(canonical_name)\n}\n\n/// Returns the Unicode HIR class corresponding to the given sentence\n/// break property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given property could not be found, or if the corresponding data is\n/// not available, then an error is returned.\nfn sb(canonical_name: &'static str) -> Result<hir::ClassUnicode> {\n    #[cfg(not(feature = \"unicode-segment\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode> {\n        Err(Error::PropertyNotFound)\n    }\n\n    #[cfg(feature = \"unicode-segment\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode> {\n        use unicode_tables::sentence_break::BY_NAME;\n        property_set(BY_NAME, name)\n            .map(hir_class)\n            .ok_or(Error::PropertyValueNotFound)\n    }\n\n    imp(canonical_name)\n}\n\n/// Like symbolic_name_normalize_bytes, but operates on a string.\nfn symbolic_name_normalize(x: &str) -> String {\n    let mut tmp = x.as_bytes().to_vec();\n    let len = symbolic_name_normalize_bytes(&mut tmp).len();\n    tmp.truncate(len);\n    // This should always succeed because `symbolic_name_normalize_bytes`\n    // guarantees that `&tmp[..len]` is always valid UTF-8.\n    //\n    // N.B. We could avoid the additional UTF-8 check here, but it's unlikely\n    // to be worth skipping the additional safety check. A benchmark must\n    // justify it first.\n    String::from_utf8(tmp).unwrap()\n}\n\n/// Normalize the given symbolic name in place according to UAX44-LM3.\n///\n/// A \"symbolic name\" typically corresponds to property names and property\n/// value aliases. Note, though, that it should not be applied to property\n/// string values.\n///\n/// The slice returned is guaranteed to be valid UTF-8 for all possible values\n/// of `slice`.\n///\n/// See: http://unicode.org/reports/tr44/#UAX44-LM3\nfn symbolic_name_normalize_bytes(slice: &mut [u8]) -> &mut [u8] {\n    // I couldn't find a place in the standard that specified that property\n    // names/aliases had a particular structure (unlike character names), but\n    // we assume that it's ASCII only and drop anything that isn't ASCII.\n    let mut start = 0;\n    let mut starts_with_is = false;\n    if slice.len() >= 2 {\n        // Ignore any \"is\" prefix.\n        starts_with_is = slice[0..2] == b\"is\"[..]\n            || slice[0..2] == b\"IS\"[..]\n            || slice[0..2] == b\"iS\"[..]\n            || slice[0..2] == b\"Is\"[..];\n        if starts_with_is {\n            start = 2;\n        }\n    }\n    let mut next_write = 0;\n    for i in start..slice.len() {\n        // VALIDITY ARGUMENT: To guarantee that the resulting slice is valid\n        // UTF-8, we ensure that the slice contains only ASCII bytes. In\n        // particular, we drop every non-ASCII byte from the normalized string.\n        let b = slice[i];\n        if b == b' ' || b == b'_' || b == b'-' {\n            continue;\n        } else if b'A' <= b && b <= b'Z' {\n            slice[next_write] = b + (b'a' - b'A');\n            next_write += 1;\n        } else if b <= 0x7F {\n            slice[next_write] = b;\n            next_write += 1;\n        }\n    }\n    // Special case: ISO_Comment has a 'isc' abbreviation. Since we generally\n    // ignore 'is' prefixes, the 'isc' abbreviation gets caught in the cross\n    // fire and ends up creating an alias for 'c' to 'ISO_Comment', but it\n    // is actually an alias for the 'Other' general category.\n    if starts_with_is && next_write == 1 && slice[0] == b'c' {\n        slice[0] = b'i';\n        slice[1] = b's';\n        slice[2] = b'c';\n        next_write = 3;\n    }\n    &mut slice[..next_write]\n}\n\n#[cfg(test)]\nmod tests {\n    use super::{\n        contains_simple_case_mapping, simple_fold, symbolic_name_normalize,\n        symbolic_name_normalize_bytes,\n    };\n\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_ok(c: char) -> impl Iterator<Item = char> {\n        simple_fold(c).unwrap().unwrap()\n    }\n\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_err(c: char) -> Option<char> {\n        match simple_fold(c).unwrap() {\n            Ok(_) => unreachable!(\"simple_fold returned Ok iterator\"),\n            Err(next) => next,\n        }\n    }\n\n    #[cfg(feature = \"unicode-case\")]\n    fn contains_case_map(start: char, end: char) -> bool {\n        contains_simple_case_mapping(start, end).unwrap()\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_k() {\n        let xs: Vec<char> = simple_fold_ok('k').collect();\n        assert_eq!(xs, vec!['K', 'K']);\n\n        let xs: Vec<char> = simple_fold_ok('K').collect();\n        assert_eq!(xs, vec!['k', 'K']);\n\n        let xs: Vec<char> = simple_fold_ok('K').collect();\n        assert_eq!(xs, vec!['K', 'k']);\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_a() {\n        let xs: Vec<char> = simple_fold_ok('a').collect();\n        assert_eq!(xs, vec!['A']);\n\n        let xs: Vec<char> = simple_fold_ok('A').collect();\n        assert_eq!(xs, vec!['a']);\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_empty() {\n        assert_eq!(Some('A'), simple_fold_err('?'));\n        assert_eq!(Some('A'), simple_fold_err('@'));\n        assert_eq!(Some('a'), simple_fold_err('['));\n        assert_eq!(Some('Ⰰ'), simple_fold_err('☃'));\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn simple_fold_max() {\n        assert_eq!(None, simple_fold_err('\\u{10FFFE}'));\n        assert_eq!(None, simple_fold_err('\\u{10FFFF}'));\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn simple_fold_disabled() {\n        assert!(simple_fold('a').is_err());\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-case\")]\n    fn range_contains() {\n        assert!(contains_case_map('A', 'A'));\n        assert!(contains_case_map('Z', 'Z'));\n        assert!(contains_case_map('A', 'Z'));\n        assert!(contains_case_map('@', 'A'));\n        assert!(contains_case_map('Z', '['));\n        assert!(contains_case_map('☃', 'Ⰰ'));\n\n        assert!(!contains_case_map('[', '['));\n        assert!(!contains_case_map('[', '`'));\n\n        assert!(!contains_case_map('☃', '☃'));\n    }\n\n    #[test]\n    #[cfg(not(feature = \"unicode-case\"))]\n    fn range_contains_disabled() {\n        assert!(contains_simple_case_mapping('a', 'a').is_err());\n    }\n\n    #[test]\n    #[cfg(feature = \"unicode-gencat\")]\n    fn regression_466() {\n        use super::{CanonicalClassQuery, ClassQuery};\n\n        let q = ClassQuery::OneLetter('C');\n        assert_eq!(\n            q.canonicalize().unwrap(),\n            CanonicalClassQuery::GeneralCategory(\"Other\")\n        );\n    }\n\n    #[test]\n    fn sym_normalize() {\n        let sym_norm = symbolic_name_normalize;\n\n        assert_eq!(sym_norm(\"Line_Break\"), \"linebreak\");\n        assert_eq!(sym_norm(\"Line-break\"), \"linebreak\");\n        assert_eq!(sym_norm(\"linebreak\"), \"linebreak\");\n        assert_eq!(sym_norm(\"BA\"), \"ba\");\n        assert_eq!(sym_norm(\"ba\"), \"ba\");\n        assert_eq!(sym_norm(\"Greek\"), \"greek\");\n        assert_eq!(sym_norm(\"isGreek\"), \"greek\");\n        assert_eq!(sym_norm(\"IS_Greek\"), \"greek\");\n        assert_eq!(sym_norm(\"isc\"), \"isc\");\n        assert_eq!(sym_norm(\"is c\"), \"isc\");\n        assert_eq!(sym_norm(\"is_c\"), \"isc\");\n    }\n\n    #[test]\n    fn valid_utf8_symbolic() {\n        let mut x = b\"abc\\xFFxyz\".to_vec();\n        let y = symbolic_name_normalize_bytes(&mut x);\n        assert_eq!(y, b\"abcxyz\");\n    }\n}\n","traces":[{"line":41,"address":[6545808],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":42,"address":[6545834],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[6545920],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":62,"address":[6545946],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[6546032],"length":1,"stats":{"Line":8},"fn_name":"simple_fold"},{"line":94,"address":[6546064],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":100,"address":[6546075],"length":1,"stats":{"Line":8},"fn_name":null},{"line":101,"address":[7022477,7022464],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":102,"address":[7022496,7022537,7022528,7022509],"length":1,"stats":{"Line":32},"fn_name":"{{closure}}"},{"line":103,"address":[7022688],"length":1,"stats":{"Line":8},"fn_name":"{{closure}}"},{"line":104,"address":[7022697,7022787],"length":1,"stats":{"Line":8},"fn_name":null},{"line":105,"address":[7022779],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[7022852,7022745,7022824,7022794],"length":1,"stats":{"Line":16},"fn_name":null},{"line":112,"address":[6546048],"length":1,"stats":{"Line":8},"fn_name":null},{"line":122,"address":[6546208],"length":1,"stats":{"Line":8},"fn_name":"contains_simple_case_mapping"},{"line":132,"address":[6546240],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":136,"address":[6546336,6546252],"length":1,"stats":{"Line":8},"fn_name":null},{"line":137,"address":[6546366,6546271,6546305],"length":1,"stats":{"Line":24},"fn_name":null},{"line":138,"address":[6546290],"length":1,"stats":{"Line":24},"fn_name":null},{"line":139,"address":[7022884,7022980,7022966],"length":1,"stats":{"Line":24},"fn_name":null},{"line":140,"address":[7022961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":141,"address":[7022947,7022973],"length":1,"stats":{"Line":16},"fn_name":null},{"line":142,"address":[7022975],"length":1,"stats":{"Line":8},"fn_name":null},{"line":144,"address":[7022968],"length":1,"stats":{"Line":8},"fn_name":null},{"line":150,"address":[6546220],"length":1,"stats":{"Line":8},"fn_name":null},{"line":188,"address":[6546400,6546487],"length":1,"stats":{"Line":8},"fn_name":"canonicalize"},{"line":189,"address":[6546814,6546742,6546598,6548682],"length":1,"stats":{"Line":31},"fn_name":null},{"line":190,"address":[6546418,6546608],"length":1,"stats":{"Line":16},"fn_name":null},{"line":191,"address":[6546755],"length":1,"stats":{"Line":8},"fn_name":null},{"line":192,"address":[6546510],"length":1,"stats":{"Line":9},"fn_name":null},{"line":193,"address":[6546558],"length":1,"stats":{"Line":9},"fn_name":null},{"line":194,"address":[6546843],"length":1,"stats":{"Line":8},"fn_name":null},{"line":196,"address":[6546858,6547191,6546924,6547299,6547070,6546947,6547132],"length":1,"stats":{"Line":27},"fn_name":null},{"line":197,"address":[6547309,6547041],"length":1,"stats":{"Line":10},"fn_name":null},{"line":198,"address":[6547193],"length":1,"stats":{"Line":10},"fn_name":null},{"line":200,"address":[6548578,6548068,6548602,6547726],"length":1,"stats":{"Line":30},"fn_name":null},{"line":201,"address":[6547241,6547325],"length":1,"stats":{"Line":26},"fn_name":null},{"line":202,"address":[6547579,6547414,6547731],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[6547550,6547741],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[6547650],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[6547698],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[6547331],"length":1,"stats":{"Line":14},"fn_name":null},{"line":209,"address":[6547923,6548073,6547758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[6547894,6548083],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[6547992],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[6548040],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[6547396,6548092,6548369,6548215],"length":1,"stats":{"Line":28},"fn_name":null},{"line":217,"address":[6548186,6548379],"length":1,"stats":{"Line":15},"fn_name":null},{"line":218,"address":[6548286],"length":1,"stats":{"Line":15},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[6548580,6548408,6548352],"length":1,"stats":{"Line":30},"fn_name":null},{"line":222,"address":[6548451],"length":1,"stats":{"Line":15},"fn_name":null},{"line":223,"address":[6548590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[6548476],"length":1,"stats":{"Line":15},"fn_name":null},{"line":227,"address":[6548529],"length":1,"stats":{"Line":15},"fn_name":null},{"line":228,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[6548752,6548817],"length":1,"stats":{"Line":8},"fn_name":"canonical_binary"},{"line":238,"address":[6548786],"length":1,"stats":{"Line":8},"fn_name":null},{"line":240,"address":[6548837,6548892,6549094,6549060,6549118],"length":1,"stats":{"Line":32},"fn_name":null},{"line":241,"address":[6549144],"length":1,"stats":{"Line":8},"fn_name":null},{"line":243,"address":[6549238,6549457,6549101],"length":1,"stats":{"Line":24},"fn_name":null},{"line":244,"address":[6549489],"length":1,"stats":{"Line":8},"fn_name":null},{"line":246,"address":[6549805,6549440,6549583],"length":1,"stats":{"Line":0},"fn_name":null},{"line":247,"address":[6549837],"length":1,"stats":{"Line":0},"fn_name":null},{"line":249,"address":[6549785],"length":1,"stats":{"Line":0},"fn_name":null},{"line":280,"address":[6549990,6549952],"length":1,"stats":{"Line":8},"fn_name":"class"},{"line":283,"address":[6550005,6550236,6550642,6550595,6549962,6550501,6551127,6551431,6551478,6551384,6551334,6550183,6550548],"length":1,"stats":{"Line":65},"fn_name":null},{"line":284,"address":[6550506,6550139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":285,"address":[6550553],"length":1,"stats":{"Line":8},"fn_name":null},{"line":286,"address":[6550600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":287,"address":[6550256,6550647],"length":1,"stats":{"Line":15},"fn_name":null},{"line":288,"address":[6550676],"length":1,"stats":{"Line":0},"fn_name":null},{"line":289,"address":[6551284,6550718,6551132,6550771,6550922],"length":1,"stats":{"Line":0},"fn_name":null},{"line":290,"address":[6551206],"length":1,"stats":{"Line":0},"fn_name":null},{"line":292,"address":[6551035],"length":1,"stats":{"Line":0},"fn_name":null},{"line":294,"address":[6551289,6550304],"length":1,"stats":{"Line":15},"fn_name":null},{"line":295,"address":[6551323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":298,"address":[6550352],"length":1,"stats":{"Line":15},"fn_name":null},{"line":299,"address":[6551339],"length":1,"stats":{"Line":15},"fn_name":null},{"line":300,"address":[6551373],"length":1,"stats":{"Line":15},"fn_name":null},{"line":301,"address":[6551386,6550400],"length":1,"stats":{"Line":16},"fn_name":null},{"line":302,"address":[6551420],"length":1,"stats":{"Line":8},"fn_name":null},{"line":304,"address":[6550448,6551433],"length":1,"stats":{"Line":16},"fn_name":null},{"line":305,"address":[6551467],"length":1,"stats":{"Line":8},"fn_name":null},{"line":309,"address":[6550494],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[6551536],"length":1,"stats":{"Line":8},"fn_name":"perl_word"},{"line":324,"address":[6551568],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":326,"address":[6551575],"length":1,"stats":{"Line":8},"fn_name":null},{"line":329,"address":[6551544],"length":1,"stats":{"Line":8},"fn_name":null},{"line":335,"address":[6551664],"length":1,"stats":{"Line":8},"fn_name":"perl_space"},{"line":348,"address":[6551696],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":350,"address":[6551703],"length":1,"stats":{"Line":8},"fn_name":null},{"line":353,"address":[6551672],"length":1,"stats":{"Line":8},"fn_name":null},{"line":359,"address":[6551792],"length":1,"stats":{"Line":9},"fn_name":"perl_digit"},{"line":372,"address":[6551824],"length":1,"stats":{"Line":9},"fn_name":"imp"},{"line":374,"address":[6551831],"length":1,"stats":{"Line":9},"fn_name":null},{"line":377,"address":[6551800],"length":1,"stats":{"Line":9},"fn_name":null},{"line":381,"address":[6551920],"length":1,"stats":{"Line":8},"fn_name":"hir_class"},{"line":382,"address":[6551942],"length":1,"stats":{"Line":8},"fn_name":null},{"line":384,"address":[7022992,7023006],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":386,"address":[6552016],"length":1,"stats":{"Line":8},"fn_name":null},{"line":392,"address":[6552080],"length":1,"stats":{"Line":9},"fn_name":"is_word_character"},{"line":399,"address":[6552112],"length":1,"stats":{"Line":10},"fn_name":"imp"},{"line":404,"address":[6552120],"length":1,"stats":{"Line":10},"fn_name":null},{"line":405,"address":[6552231],"length":1,"stats":{"Line":9},"fn_name":null},{"line":407,"address":[6552205,6552245,6552181],"length":1,"stats":{"Line":27},"fn_name":null},{"line":408,"address":[6552200],"length":1,"stats":{"Line":27},"fn_name":null},{"line":409,"address":[7023165,7023179,7023083],"length":1,"stats":{"Line":27},"fn_name":null},{"line":410,"address":[7023160],"length":1,"stats":{"Line":9},"fn_name":null},{"line":411,"address":[7023147,7023172],"length":1,"stats":{"Line":18},"fn_name":null},{"line":412,"address":[7023174],"length":1,"stats":{"Line":9},"fn_name":null},{"line":414,"address":[7023167],"length":1,"stats":{"Line":9},"fn_name":null},{"line":420,"address":[6552085],"length":1,"stats":{"Line":10},"fn_name":null},{"line":430,"address":[6552272],"length":1,"stats":{"Line":8},"fn_name":"canonical_gencat"},{"line":431,"address":[6552494,6552520,6552755,6552546],"length":1,"stats":{"Line":8},"fn_name":null},{"line":432,"address":[6552310,6552480],"length":1,"stats":{"Line":8},"fn_name":null},{"line":433,"address":[6552375,6552506],"length":1,"stats":{"Line":8},"fn_name":null},{"line":434,"address":[6552532,6552419],"length":1,"stats":{"Line":8},"fn_name":null},{"line":436,"address":[6552453,6552551,6552709],"length":1,"stats":{"Line":16},"fn_name":null},{"line":437,"address":[6552740],"length":1,"stats":{"Line":8},"fn_name":null},{"line":442,"address":[6552800],"length":1,"stats":{"Line":0},"fn_name":"canonical_script"},{"line":443,"address":[6553035,6552833],"length":1,"stats":{"Line":0},"fn_name":null},{"line":444,"address":[6553066],"length":1,"stats":{"Line":0},"fn_name":null},{"line":455,"address":[6553120],"length":1,"stats":{"Line":8},"fn_name":"canonical_prop"},{"line":476,"address":[6553168],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":479,"address":[6553185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":480,"address":[7023200,7023213],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":482,"address":[7023248,7023257],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}"},{"line":485,"address":[6553141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":498,"address":[6553328],"length":1,"stats":{"Line":8},"fn_name":"canonical_value"},{"line":502,"address":[6553352,6553419],"length":1,"stats":{"Line":32},"fn_name":null},{"line":504,"address":[6553409],"length":1,"stats":{"Line":24},"fn_name":null},{"line":510,"address":[6553472],"length":1,"stats":{"Line":8},"fn_name":"property_values"},{"line":533,"address":[6553520],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":536,"address":[6553537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":537,"address":[7023520,7023533],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":539,"address":[7023568,7023577],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":542,"address":[6553493],"length":1,"stats":{"Line":8},"fn_name":null},{"line":548,"address":[6553680],"length":1,"stats":{"Line":8},"fn_name":"property_set"},{"line":552,"address":[6553704,6553771],"length":1,"stats":{"Line":16},"fn_name":null},{"line":553,"address":[7023693,7023680],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":555,"address":[6553761],"length":1,"stats":{"Line":24},"fn_name":null},{"line":564,"address":[6553824],"length":1,"stats":{"Line":0},"fn_name":"ages"},{"line":572,"address":[6553872],"length":1,"stats":{"Line":0},"fn_name":"imp"},{"line":600,"address":[6553898,6554122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":602,"address":[6554073,6554579],"length":1,"stats":{"Line":0},"fn_name":null},{"line":603,"address":[6554708,6554725],"length":1,"stats":{"Line":0},"fn_name":null},{"line":604,"address":[6554718,6554628],"length":1,"stats":{"Line":0},"fn_name":null},{"line":605,"address":[6554643,6554742,6554914,6554884],"length":1,"stats":{"Line":0},"fn_name":null},{"line":609,"address":[6553845],"length":1,"stats":{"Line":0},"fn_name":null},{"line":618,"address":[6554928],"length":1,"stats":{"Line":8},"fn_name":"gencat"},{"line":625,"address":[6555150,6555072],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":627,"address":[6555848,6555795,6555398,6555463],"length":1,"stats":{"Line":8},"fn_name":null},{"line":628,"address":[6555110,6555169,6555338],"length":1,"stats":{"Line":16},"fn_name":null},{"line":629,"address":[6555403,6555196],"length":1,"stats":{"Line":8},"fn_name":null},{"line":630,"address":[6555244],"length":1,"stats":{"Line":8},"fn_name":null},{"line":631,"address":[6555475,6555619,6555672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":632,"address":[6555603],"length":1,"stats":{"Line":0},"fn_name":null},{"line":633,"address":[6555709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":635,"address":[6555800,6555280],"length":1,"stats":{"Line":16},"fn_name":null},{"line":641,"address":[6555055],"length":1,"stats":{"Line":8},"fn_name":null},{"line":642,"address":[6554957,6555048],"length":1,"stats":{"Line":16},"fn_name":null},{"line":643,"address":[6555010],"length":1,"stats":{"Line":8},"fn_name":null},{"line":653,"address":[6555904],"length":1,"stats":{"Line":0},"fn_name":"script"},{"line":660,"address":[6555952],"length":1,"stats":{"Line":0},"fn_name":"imp"},{"line":662,"address":[6555969],"length":1,"stats":{"Line":0},"fn_name":null},{"line":667,"address":[6555925],"length":1,"stats":{"Line":0},"fn_name":null},{"line":676,"address":[6556096],"length":1,"stats":{"Line":0},"fn_name":"script_extension"},{"line":685,"address":[6556144],"length":1,"stats":{"Line":0},"fn_name":"imp"},{"line":687,"address":[6556161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":692,"address":[6556117],"length":1,"stats":{"Line":0},"fn_name":null},{"line":702,"address":[6556288],"length":1,"stats":{"Line":8},"fn_name":"bool_property"},{"line":709,"address":[6556496],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":711,"address":[6556513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":716,"address":[6556471],"length":1,"stats":{"Line":8},"fn_name":null},{"line":717,"address":[6556317,6556452],"length":1,"stats":{"Line":8},"fn_name":null},{"line":718,"address":[6556382,6556464],"length":1,"stats":{"Line":8},"fn_name":null},{"line":719,"address":[6556414],"length":1,"stats":{"Line":8},"fn_name":null},{"line":730,"address":[6556640],"length":1,"stats":{"Line":15},"fn_name":"gcb"},{"line":737,"address":[6556688],"length":1,"stats":{"Line":15},"fn_name":"imp"},{"line":739,"address":[6556705],"length":1,"stats":{"Line":15},"fn_name":null},{"line":744,"address":[6556661],"length":1,"stats":{"Line":15},"fn_name":null},{"line":754,"address":[6556832],"length":1,"stats":{"Line":8},"fn_name":"wb"},{"line":761,"address":[6556880],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":763,"address":[6556897],"length":1,"stats":{"Line":8},"fn_name":null},{"line":768,"address":[6556853],"length":1,"stats":{"Line":8},"fn_name":null},{"line":778,"address":[6557024],"length":1,"stats":{"Line":8},"fn_name":"sb"},{"line":785,"address":[6557072],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":787,"address":[6557089],"length":1,"stats":{"Line":10},"fn_name":null},{"line":792,"address":[6557045],"length":1,"stats":{"Line":8},"fn_name":null},{"line":796,"address":[6557216,6557320],"length":1,"stats":{"Line":8},"fn_name":"symbolic_name_normalize"},{"line":797,"address":[6557242,6557318,6557335],"length":1,"stats":{"Line":24},"fn_name":null},{"line":798,"address":[6557364],"length":1,"stats":{"Line":8},"fn_name":null},{"line":799,"address":[6557454],"length":1,"stats":{"Line":8},"fn_name":null},{"line":806,"address":[6557473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":819,"address":[6557632],"length":1,"stats":{"Line":8},"fn_name":"symbolic_name_normalize_bytes"},{"line":823,"address":[6557655],"length":1,"stats":{"Line":8},"fn_name":null},{"line":824,"address":[6557667],"length":1,"stats":{"Line":8},"fn_name":null},{"line":825,"address":[6557691,6558673],"length":1,"stats":{"Line":16},"fn_name":null},{"line":827,"address":[6557965,6558078,6557731,6558552,6558440,6557930,6558210,6558646],"length":1,"stats":{"Line":56},"fn_name":null},{"line":828,"address":[6558355,6558124],"length":1,"stats":{"Line":16},"fn_name":null},{"line":829,"address":[6558467,6557992],"length":1,"stats":{"Line":16},"fn_name":null},{"line":830,"address":[6557844,6558579],"length":1,"stats":{"Line":16},"fn_name":null},{"line":831,"address":[6557946,6558659],"length":1,"stats":{"Line":16},"fn_name":null},{"line":832,"address":[6558661],"length":1,"stats":{"Line":0},"fn_name":null},{"line":835,"address":[6558675],"length":1,"stats":{"Line":8},"fn_name":null},{"line":836,"address":[6559371,6558880,6558687],"length":1,"stats":{"Line":16},"fn_name":null},{"line":840,"address":[6558922,6559726],"length":1,"stats":{"Line":8},"fn_name":null},{"line":841,"address":[6558966],"length":1,"stats":{"Line":8},"fn_name":null},{"line":842,"address":[6559073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":843,"address":[6559369,6559078,6559061,6559261],"length":1,"stats":{"Line":32},"fn_name":null},{"line":844,"address":[6559757,6559139],"length":1,"stats":{"Line":8},"fn_name":null},{"line":845,"address":[6559214,6559818],"length":1,"stats":{"Line":8},"fn_name":null},{"line":846,"address":[6559122,6559263],"length":1,"stats":{"Line":8},"fn_name":null},{"line":847,"address":[6559848,6559265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":848,"address":[6559322,6559879],"length":1,"stats":{"Line":8},"fn_name":null},{"line":855,"address":[6559376,6558861,6559909],"length":1,"stats":{"Line":8},"fn_name":null},{"line":856,"address":[6559939,6559515],"length":1,"stats":{"Line":0},"fn_name":null},{"line":857,"address":[6559969,6559544],"length":1,"stats":{"Line":0},"fn_name":null},{"line":858,"address":[6560000,6559587,6560031],"length":1,"stats":{"Line":0},"fn_name":null},{"line":859,"address":[6559630],"length":1,"stats":{"Line":0},"fn_name":null},{"line":861,"address":[6559649],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":169,"coverable":226},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","regex-syntax","src","utf8.rs"],"content":"/*!\nConverts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes.\n\nThis is sub-module is useful for constructing byte based automatons that need\nto embed UTF-8 decoding. The most common use of this module is in conjunction\nwith the [`hir::ClassUnicodeRange`](../hir/struct.ClassUnicodeRange.html) type.\n\nSee the documentation on the `Utf8Sequences` iterator for more details and\nan example.\n\n# Wait, what is this?\n\nThis is simplest to explain with an example. Let's say you wanted to test\nwhether a particular byte sequence was a Cyrillic character. One possible\nscalar value range is `[0400-04FF]`. The set of allowed bytes for this\nrange can be expressed as a sequence of byte ranges:\n\n```ignore\n[D0-D3][80-BF]\n```\n\nThis is simple enough: simply encode the boundaries, `0400` encodes to\n`D0 80` and `04FF` encodes to `D3 BF`, and create ranges from each\ncorresponding pair of bytes: `D0` to `D3` and `80` to `BF`.\n\nHowever, what if you wanted to add the Cyrillic Supplementary characters to\nyour range? Your range might then become `[0400-052F]`. The same procedure\nas above doesn't quite work because `052F` encodes to `D4 AF`. The byte ranges\nyou'd get from the previous transformation would be `[D0-D4][80-AF]`. However,\nthis isn't quite correct because this range doesn't capture many characters,\nfor example, `04FF` (because its last byte, `BF` isn't in the range `80-AF`).\n\nInstead, you need multiple sequences of byte ranges:\n\n```ignore\n[D0-D3][80-BF]  # matches codepoints 0400-04FF\n[D4][80-AF]     # matches codepoints 0500-052F\n```\n\nThis gets even more complicated if you want bigger ranges, particularly if\nthey naively contain surrogate codepoints. For example, the sequence of byte\nranges for the basic multilingual plane (`[0000-FFFF]`) look like this:\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n```\n\nNote that the byte ranges above will *not* match any erroneous encoding of\nUTF-8, including encodings of surrogate codepoints.\n\nAnd, of course, for all of Unicode (`[000000-10FFFF]`):\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n[F0][90-BF][80-BF][80-BF]\n[F1-F3][80-BF][80-BF][80-BF]\n[F4][80-8F][80-BF][80-BF]\n```\n\nThis module automates the process of creating these byte ranges from ranges of\nUnicode scalar values.\n\n# Lineage\n\nI got the idea and general implementation strategy from Russ Cox in his\n[article on regexps](https://web.archive.org/web/20160404141123/https://swtch.com/~rsc/regexp/regexp3.html) and RE2.\nRuss Cox got it from Ken Thompson's `grep` (no source, folk lore?).\nI also got the idea from\n[Lucene](https://github.com/apache/lucene-solr/blob/ae93f4e7ac6a3908046391de35d4f50a0d3c59ca/lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8.java),\nwhich uses it for executing automata on their term index.\n*/\n\n#![deny(missing_docs)]\n\nuse std::char;\nuse std::fmt;\nuse std::slice;\n\nconst MAX_UTF8_BYTES: usize = 4;\n\n/// Utf8Sequence represents a sequence of byte ranges.\n///\n/// To match a Utf8Sequence, a candidate byte sequence must match each\n/// successive range.\n///\n/// For example, if there are two ranges, `[C2-DF][80-BF]`, then the byte\n/// sequence `\\xDD\\x61` would not match because `0x61 < 0x80`.\n#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]\npub enum Utf8Sequence {\n    /// One byte range.\n    One(Utf8Range),\n    /// Two successive byte ranges.\n    Two([Utf8Range; 2]),\n    /// Three successive byte ranges.\n    Three([Utf8Range; 3]),\n    /// Four successive byte ranges.\n    Four([Utf8Range; 4]),\n}\n\nimpl Utf8Sequence {\n    /// Creates a new UTF-8 sequence from the encoded bytes of a scalar value\n    /// range.\n    ///\n    /// This assumes that `start` and `end` have the same length.\n    fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {\n        assert_eq!(start.len(), end.len());\n        match start.len() {\n            2 => Utf8Sequence::Two([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n            ]),\n            3 => Utf8Sequence::Three([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n                Utf8Range::new(start[2], end[2]),\n            ]),\n            4 => Utf8Sequence::Four([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n                Utf8Range::new(start[2], end[2]),\n                Utf8Range::new(start[3], end[3]),\n            ]),\n            n => unreachable!(\"invalid encoded length: {}\", n),\n        }\n    }\n\n    /// Returns the underlying sequence of byte ranges as a slice.\n    pub fn as_slice(&self) -> &[Utf8Range] {\n        use self::Utf8Sequence::*;\n        match *self {\n            One(ref r) => slice::from_ref(r),\n            Two(ref r) => &r[..],\n            Three(ref r) => &r[..],\n            Four(ref r) => &r[..],\n        }\n    }\n\n    /// Returns the number of byte ranges in this sequence.\n    ///\n    /// The length is guaranteed to be in the closed interval `[1, 4]`.\n    pub fn len(&self) -> usize {\n        self.as_slice().len()\n    }\n\n    /// Reverses the ranges in this sequence.\n    ///\n    /// For example, if this corresponds to the following sequence:\n    ///\n    /// ```ignore\n    /// [D0-D3][80-BF]\n    /// ```\n    ///\n    /// Then after reversal, it will be\n    ///\n    /// ```ignore\n    /// [80-BF][D0-D3]\n    /// ```\n    ///\n    /// This is useful when one is constructing a UTF-8 automaton to match\n    /// character classes in reverse.\n    pub fn reverse(&mut self) {\n        match *self {\n            Utf8Sequence::One(_) => {}\n            Utf8Sequence::Two(ref mut x) => x.reverse(),\n            Utf8Sequence::Three(ref mut x) => x.reverse(),\n            Utf8Sequence::Four(ref mut x) => x.reverse(),\n        }\n    }\n\n    /// Returns true if and only if a prefix of `bytes` matches this sequence\n    /// of byte ranges.\n    pub fn matches(&self, bytes: &[u8]) -> bool {\n        if bytes.len() < self.len() {\n            return false;\n        }\n        for (&b, r) in bytes.iter().zip(self) {\n            if !r.matches(b) {\n                return false;\n            }\n        }\n        true\n    }\n}\n\nimpl<'a> IntoIterator for &'a Utf8Sequence {\n    type IntoIter = slice::Iter<'a, Utf8Range>;\n    type Item = &'a Utf8Range;\n\n    fn into_iter(self) -> Self::IntoIter {\n        self.as_slice().into_iter()\n    }\n}\n\nimpl fmt::Debug for Utf8Sequence {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        use self::Utf8Sequence::*;\n        match *self {\n            One(ref r) => write!(f, \"{:?}\", r),\n            Two(ref r) => write!(f, \"{:?}{:?}\", r[0], r[1]),\n            Three(ref r) => write!(f, \"{:?}{:?}{:?}\", r[0], r[1], r[2]),\n            Four(ref r) => {\n                write!(f, \"{:?}{:?}{:?}{:?}\", r[0], r[1], r[2], r[3])\n            }\n        }\n    }\n}\n\n/// A single inclusive range of UTF-8 bytes.\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\n\nimpl Utf8Range {\n    fn new(start: u8, end: u8) -> Self {\n        Utf8Range { start, end }\n    }\n\n    /// Returns true if and only if the given byte is in this range.\n    pub fn matches(&self, b: u8) -> bool {\n        self.start <= b && b <= self.end\n    }\n}\n\nimpl fmt::Debug for Utf8Range {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        if self.start == self.end {\n            write!(f, \"[{:X}]\", self.start)\n        } else {\n            write!(f, \"[{:X}-{:X}]\", self.start, self.end)\n        }\n    }\n}\n\n/// An iterator over ranges of matching UTF-8 byte sequences.\n///\n/// The iteration represents an alternation of comprehensive byte sequences\n/// that match precisely the set of UTF-8 encoded scalar values.\n///\n/// A byte sequence corresponds to one of the scalar values in the range given\n/// if and only if it completely matches exactly one of the sequences of byte\n/// ranges produced by this iterator.\n///\n/// Each sequence of byte ranges matches a unique set of bytes. That is, no two\n/// sequences will match the same bytes.\n///\n/// # Example\n///\n/// This shows how to match an arbitrary byte sequence against a range of\n/// scalar values.\n///\n/// ```rust\n/// use regex_syntax::utf8::{Utf8Sequences, Utf8Sequence};\n///\n/// fn matches(seqs: &[Utf8Sequence], bytes: &[u8]) -> bool {\n///     for range in seqs {\n///         if range.matches(bytes) {\n///             return true;\n///         }\n///     }\n///     false\n/// }\n///\n/// // Test the basic multilingual plane.\n/// let seqs: Vec<_> = Utf8Sequences::new('\\u{0}', '\\u{FFFF}').collect();\n///\n/// // UTF-8 encoding of 'a'.\n/// assert!(matches(&seqs, &[0x61]));\n/// // UTF-8 encoding of '☃' (`\\u{2603}`).\n/// assert!(matches(&seqs, &[0xE2, 0x98, 0x83]));\n/// // UTF-8 encoding of `\\u{10348}` (outside the BMP).\n/// assert!(!matches(&seqs, &[0xF0, 0x90, 0x8D, 0x88]));\n/// // Tries to match against a UTF-8 encoding of a surrogate codepoint,\n/// // which is invalid UTF-8, and therefore fails, despite the fact that\n/// // the corresponding codepoint (0xD800) falls in the range given.\n/// assert!(!matches(&seqs, &[0xED, 0xA0, 0x80]));\n/// // And fails against plain old invalid UTF-8.\n/// assert!(!matches(&seqs, &[0xFF, 0xFF]));\n/// ```\n///\n/// If this example seems circuitous, that's because it is! It's meant to be\n/// illustrative. In practice, you could just try to decode your byte sequence\n/// and compare it with the scalar value range directly. However, this is not\n/// always possible (for example, in a byte based automaton).\npub struct Utf8Sequences {\n    range_stack: Vec<ScalarRange>,\n}\n\nimpl Utf8Sequences {\n    /// Create a new iterator over UTF-8 byte ranges for the scalar value range\n    /// given.\n    pub fn new(start: char, end: char) -> Self {\n        let mut it = Utf8Sequences { range_stack: vec![] };\n        it.push(start as u32, end as u32);\n        it\n    }\n\n    /// reset resets the scalar value range.\n    /// Any existing state is cleared, but resources may be reused.\n    ///\n    /// N.B. Benchmarks say that this method is dubious.\n    #[doc(hidden)]\n    pub fn reset(&mut self, start: char, end: char) {\n        self.range_stack.clear();\n        self.push(start as u32, end as u32);\n    }\n\n    fn push(&mut self, start: u32, end: u32) {\n        self.range_stack.push(ScalarRange { start, end });\n    }\n}\n\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\n\nimpl fmt::Debug for ScalarRange {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"ScalarRange({:X}, {:X})\", self.start, self.end)\n    }\n}\n\nimpl Iterator for Utf8Sequences {\n    type Item = Utf8Sequence;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        'TOP: while let Some(mut r) = self.range_stack.pop() {\n            'INNER: loop {\n                if let Some((r1, r2)) = r.split() {\n                    self.push(r2.start, r2.end);\n                    r.start = r1.start;\n                    r.end = r1.end;\n                    continue 'INNER;\n                }\n                if !r.is_valid() {\n                    continue 'TOP;\n                }\n                for i in 1..MAX_UTF8_BYTES {\n                    let max = max_scalar_value(i);\n                    if r.start <= max && max < r.end {\n                        self.push(max + 1, r.end);\n                        r.end = max;\n                        continue 'INNER;\n                    }\n                }\n                if let Some(ascii_range) = r.as_ascii() {\n                    return Some(Utf8Sequence::One(ascii_range));\n                }\n                for i in 1..MAX_UTF8_BYTES {\n                    let m = (1 << (6 * i)) - 1;\n                    if (r.start & !m) != (r.end & !m) {\n                        if (r.start & m) != 0 {\n                            self.push((r.start | m) + 1, r.end);\n                            r.end = r.start | m;\n                            continue 'INNER;\n                        }\n                        if (r.end & m) != m {\n                            self.push(r.end & !m, r.end);\n                            r.end = (r.end & !m) - 1;\n                            continue 'INNER;\n                        }\n                    }\n                }\n                let mut start = [0; MAX_UTF8_BYTES];\n                let mut end = [0; MAX_UTF8_BYTES];\n                let n = r.encode(&mut start, &mut end);\n                return Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ));\n            }\n        }\n        None\n    }\n}\n\nimpl ScalarRange {\n    /// split splits this range if it overlaps with a surrogate codepoint.\n    ///\n    /// Either or both ranges may be invalid.\n    fn split(&self) -> Option<(ScalarRange, ScalarRange)> {\n        if self.start < 0xE000 && self.end > 0xD7FF {\n            Some((\n                ScalarRange { start: self.start, end: 0xD7FF },\n                ScalarRange { start: 0xE000, end: self.end },\n            ))\n        } else {\n            None\n        }\n    }\n\n    /// is_valid returns true if and only if start <= end.\n    fn is_valid(&self) -> bool {\n        self.start <= self.end\n    }\n\n    /// as_ascii returns this range as a Utf8Range if and only if all scalar\n    /// values in this range can be encoded as a single byte.\n    fn as_ascii(&self) -> Option<Utf8Range> {\n        if self.is_ascii() {\n            Some(Utf8Range::new(self.start as u8, self.end as u8))\n        } else {\n            None\n        }\n    }\n\n    /// is_ascii returns true if the range is ASCII only (i.e., takes a single\n    /// byte to encode any scalar value).\n    fn is_ascii(&self) -> bool {\n        self.is_valid() && self.end <= 0x7f\n    }\n\n    /// encode writes the UTF-8 encoding of the start and end of this range\n    /// to the corresponding destination slices, and returns the number of\n    /// bytes written.\n    ///\n    /// The slices should have room for at least `MAX_UTF8_BYTES`.\n    fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {\n        let cs = char::from_u32(self.start).unwrap();\n        let ce = char::from_u32(self.end).unwrap();\n        let ss = cs.encode_utf8(start);\n        let se = ce.encode_utf8(end);\n        assert_eq!(ss.len(), se.len());\n        ss.len()\n    }\n}\n\nfn max_scalar_value(nbytes: usize) -> u32 {\n    match nbytes {\n        1 => 0x007F,\n        2 => 0x07FF,\n        3 => 0xFFFF,\n        4 => 0x10FFFF,\n        _ => unreachable!(\"invalid UTF-8 byte sequence size\"),\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use std::char;\n\n    use utf8::{Utf8Range, Utf8Sequences};\n\n    fn rutf8(s: u8, e: u8) -> Utf8Range {\n        Utf8Range::new(s, e)\n    }\n\n    fn never_accepts_surrogate_codepoints(start: char, end: char) {\n        for cp in 0xD800..0xE000 {\n            let buf = encode_surrogate(cp);\n            for r in Utf8Sequences::new(start, end) {\n                if r.matches(&buf) {\n                    panic!(\n                        \"Sequence ({:X}, {:X}) contains range {:?}, \\\n                         which matches surrogate code point {:X} \\\n                         with encoded bytes {:?}\",\n                        start as u32, end as u32, r, cp, buf,\n                    );\n                }\n            }\n        }\n    }\n\n    #[test]\n    fn codepoints_no_surrogates() {\n        never_accepts_surrogate_codepoints('\\u{0}', '\\u{FFFF}');\n        never_accepts_surrogate_codepoints('\\u{0}', '\\u{10FFFF}');\n        never_accepts_surrogate_codepoints('\\u{0}', '\\u{10FFFE}');\n        never_accepts_surrogate_codepoints('\\u{80}', '\\u{10FFFF}');\n        never_accepts_surrogate_codepoints('\\u{D7FF}', '\\u{E000}');\n    }\n\n    #[test]\n    fn single_codepoint_one_sequence() {\n        // Tests that every range of scalar values that contains a single\n        // scalar value is recognized by one sequence of byte ranges.\n        for i in 0x0..(0x10FFFF + 1) {\n            let c = match char::from_u32(i) {\n                None => continue,\n                Some(c) => c,\n            };\n            let seqs: Vec<_> = Utf8Sequences::new(c, c).collect();\n            assert_eq!(seqs.len(), 1);\n        }\n    }\n\n    #[test]\n    fn bmp() {\n        use utf8::Utf8Sequence::*;\n\n        let seqs = Utf8Sequences::new('\\u{0}', '\\u{FFFF}').collect::<Vec<_>>();\n        assert_eq!(\n            seqs,\n            vec![\n                One(rutf8(0x0, 0x7F)),\n                Two([rutf8(0xC2, 0xDF), rutf8(0x80, 0xBF)]),\n                Three([\n                    rutf8(0xE0, 0xE0),\n                    rutf8(0xA0, 0xBF),\n                    rutf8(0x80, 0xBF)\n                ]),\n                Three([\n                    rutf8(0xE1, 0xEC),\n                    rutf8(0x80, 0xBF),\n                    rutf8(0x80, 0xBF)\n                ]),\n                Three([\n                    rutf8(0xED, 0xED),\n                    rutf8(0x80, 0x9F),\n                    rutf8(0x80, 0xBF)\n                ]),\n                Three([\n                    rutf8(0xEE, 0xEF),\n                    rutf8(0x80, 0xBF),\n                    rutf8(0x80, 0xBF)\n                ]),\n            ]\n        );\n    }\n\n    #[test]\n    fn reverse() {\n        use utf8::Utf8Sequence::*;\n\n        let mut s = One(rutf8(0xA, 0xB));\n        s.reverse();\n        assert_eq!(s.as_slice(), &[rutf8(0xA, 0xB)]);\n\n        let mut s = Two([rutf8(0xA, 0xB), rutf8(0xB, 0xC)]);\n        s.reverse();\n        assert_eq!(s.as_slice(), &[rutf8(0xB, 0xC), rutf8(0xA, 0xB)]);\n\n        let mut s = Three([rutf8(0xA, 0xB), rutf8(0xB, 0xC), rutf8(0xC, 0xD)]);\n        s.reverse();\n        assert_eq!(\n            s.as_slice(),\n            &[rutf8(0xC, 0xD), rutf8(0xB, 0xC), rutf8(0xA, 0xB)]\n        );\n\n        let mut s = Four([\n            rutf8(0xA, 0xB),\n            rutf8(0xB, 0xC),\n            rutf8(0xC, 0xD),\n            rutf8(0xD, 0xE),\n        ]);\n        s.reverse();\n        assert_eq!(\n            s.as_slice(),\n            &[\n                rutf8(0xD, 0xE),\n                rutf8(0xC, 0xD),\n                rutf8(0xB, 0xC),\n                rutf8(0xA, 0xB)\n            ]\n        );\n    }\n\n    fn encode_surrogate(cp: u32) -> [u8; 3] {\n        const TAG_CONT: u8 = 0b1000_0000;\n        const TAG_THREE_B: u8 = 0b1110_0000;\n\n        assert!(0xD800 <= cp && cp < 0xE000);\n        let mut dst = [0; 3];\n        dst[0] = (cp >> 12 & 0x0F) as u8 | TAG_THREE_B;\n        dst[1] = (cp >> 6 & 0x3F) as u8 | TAG_CONT;\n        dst[2] = (cp & 0x3F) as u8 | TAG_CONT;\n        dst\n    }\n}\n","traces":[{"line":115,"address":[6727744],"length":1,"stats":{"Line":8},"fn_name":"from_encoded_range"},{"line":116,"address":[6728024,6727795],"length":1,"stats":{"Line":8},"fn_name":null},{"line":117,"address":[6728727,6729717,6728001,6729163],"length":1,"stats":{"Line":36},"fn_name":null},{"line":118,"address":[6728662,6728314],"length":1,"stats":{"Line":16},"fn_name":null},{"line":119,"address":[6730261,6728456],"length":1,"stats":{"Line":8},"fn_name":null},{"line":120,"address":[6730321,6728551],"length":1,"stats":{"Line":8},"fn_name":null},{"line":122,"address":[6729057],"length":1,"stats":{"Line":10},"fn_name":null},{"line":123,"address":[6730077,6728744],"length":1,"stats":{"Line":8},"fn_name":null},{"line":124,"address":[6728839,6730137],"length":1,"stats":{"Line":8},"fn_name":null},{"line":125,"address":[6730199,6728946],"length":1,"stats":{"Line":10},"fn_name":null},{"line":127,"address":[6729600],"length":1,"stats":{"Line":10},"fn_name":null},{"line":128,"address":[6729180,6729831],"length":1,"stats":{"Line":10},"fn_name":null},{"line":129,"address":[6729891,6729275],"length":1,"stats":{"Line":10},"fn_name":null},{"line":130,"address":[6729382,6729953],"length":1,"stats":{"Line":10},"fn_name":null},{"line":131,"address":[6730015,6729489],"length":1,"stats":{"Line":10},"fn_name":null},{"line":138,"address":[6730384],"length":1,"stats":{"Line":8},"fn_name":"as_slice"},{"line":140,"address":[6730624,6730695,6730548,6730488],"length":1,"stats":{"Line":28},"fn_name":null},{"line":141,"address":[6730495,6730396],"length":1,"stats":{"Line":16},"fn_name":null},{"line":142,"address":[6730565],"length":1,"stats":{"Line":10},"fn_name":null},{"line":143,"address":[6730638],"length":1,"stats":{"Line":10},"fn_name":null},{"line":144,"address":[6730702,6730444],"length":1,"stats":{"Line":20},"fn_name":null},{"line":151,"address":[6730736],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":152,"address":[6730745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[6730800],"length":1,"stats":{"Line":0},"fn_name":"reverse"},{"line":172,"address":[6730941,6730875,6730909],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[6730809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[6730884],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[6730916],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[6730848],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[6730960],"length":1,"stats":{"Line":0},"fn_name":"matches"},{"line":183,"address":[6730996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[6731082],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[6731104,6731249,6731064,6731342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[6731316],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[6731347],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[6731239],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[6731360],"length":1,"stats":{"Line":8},"fn_name":"into_iter"},{"line":200,"address":[6731369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":205,"address":[6731424],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":207,"address":[6732268,6732641,6732921,6731945,6731725],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[6731742,6731448],"length":1,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[6731965],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[6732288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[6731516],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[6731530,6732661],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[6732944],"length":1,"stats":{"Line":12},"fn_name":"new"},{"line":233,"address":[6732976],"length":1,"stats":{"Line":0},"fn_name":"matches"},{"line":234,"address":[6732990],"length":1,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[6733056],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":240,"address":[6733372,6733532,6733079],"length":1,"stats":{"Line":0},"fn_name":null},{"line":241,"address":[6733216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[6733103,6733389],"length":1,"stats":{"Line":0},"fn_name":null},{"line":305,"address":[6733552,6733600],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":306,"address":[6733567,6733612],"length":1,"stats":{"Line":28},"fn_name":null},{"line":307,"address":[6733634],"length":1,"stats":{"Line":14},"fn_name":null},{"line":308,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[6733696],"length":1,"stats":{"Line":10},"fn_name":"reset"},{"line":317,"address":[6733713],"length":1,"stats":{"Line":10},"fn_name":null},{"line":318,"address":[6733751],"length":1,"stats":{"Line":10},"fn_name":null},{"line":321,"address":[6733776],"length":1,"stats":{"Line":14},"fn_name":"push"},{"line":322,"address":[6733793],"length":1,"stats":{"Line":14},"fn_name":null},{"line":332,"address":[6733824],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":333,"address":[6733854],"length":1,"stats":{"Line":0},"fn_name":null},{"line":340,"address":[6734128],"length":1,"stats":{"Line":10},"fn_name":"next"},{"line":341,"address":[6734226,6734178],"length":1,"stats":{"Line":24},"fn_name":null},{"line":342,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[6734315,6734254],"length":1,"stats":{"Line":20},"fn_name":null},{"line":344,"address":[6734386],"length":1,"stats":{"Line":8},"fn_name":null},{"line":345,"address":[6734421],"length":1,"stats":{"Line":8},"fn_name":null},{"line":346,"address":[6734435],"length":1,"stats":{"Line":8},"fn_name":null},{"line":347,"address":[6734442],"length":1,"stats":{"Line":8},"fn_name":null},{"line":349,"address":[6734454,6734290],"length":1,"stats":{"Line":20},"fn_name":null},{"line":350,"address":[6734524],"length":1,"stats":{"Line":0},"fn_name":null},{"line":352,"address":[6734460,6734537,6734680,6734802],"length":1,"stats":{"Line":30},"fn_name":null},{"line":353,"address":[6734714],"length":1,"stats":{"Line":12},"fn_name":null},{"line":354,"address":[6734743],"length":1,"stats":{"Line":12},"fn_name":null},{"line":355,"address":[6734814,6735927],"length":1,"stats":{"Line":8},"fn_name":null},{"line":356,"address":[6734870],"length":1,"stats":{"Line":8},"fn_name":null},{"line":357,"address":[6734877],"length":1,"stats":{"Line":8},"fn_name":null},{"line":360,"address":[6734619,6734882,6734963],"length":1,"stats":{"Line":36},"fn_name":null},{"line":361,"address":[6735060,6734991],"length":1,"stats":{"Line":24},"fn_name":null},{"line":363,"address":[6735665,6735273,6735070,6734902],"length":1,"stats":{"Line":24},"fn_name":null},{"line":364,"address":[6735957,6735307],"length":1,"stats":{"Line":8},"fn_name":null},{"line":365,"address":[6735426,6735577],"length":1,"stats":{"Line":16},"fn_name":null},{"line":366,"address":[6735467],"length":1,"stats":{"Line":8},"fn_name":null},{"line":367,"address":[6735504,6736047],"length":1,"stats":{"Line":8},"fn_name":null},{"line":368,"address":[6735558],"length":1,"stats":{"Line":8},"fn_name":null},{"line":369,"address":[6735572],"length":1,"stats":{"Line":8},"fn_name":null},{"line":371,"address":[6735483],"length":1,"stats":{"Line":8},"fn_name":null},{"line":372,"address":[6735579],"length":1,"stats":{"Line":10},"fn_name":null},{"line":373,"address":[6736107,6735617,6736077],"length":1,"stats":{"Line":10},"fn_name":null},{"line":374,"address":[6735663],"length":1,"stats":{"Line":10},"fn_name":null},{"line":378,"address":[6735162],"length":1,"stats":{"Line":8},"fn_name":null},{"line":379,"address":[6735214],"length":1,"stats":{"Line":8},"fn_name":null},{"line":380,"address":[6735229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":381,"address":[6735861],"length":1,"stats":{"Line":8},"fn_name":null},{"line":382,"address":[6735677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":383,"address":[6735773],"length":1,"stats":{"Line":8},"fn_name":null},{"line":387,"address":[6734218],"length":1,"stats":{"Line":8},"fn_name":null},{"line":395,"address":[6736112],"length":1,"stats":{"Line":12},"fn_name":"split"},{"line":396,"address":[6736124,6736196],"length":1,"stats":{"Line":22},"fn_name":null},{"line":397,"address":[6736232],"length":1,"stats":{"Line":8},"fn_name":null},{"line":398,"address":[6736203],"length":1,"stats":{"Line":8},"fn_name":null},{"line":399,"address":[6736217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":402,"address":[6736190],"length":1,"stats":{"Line":10},"fn_name":null},{"line":407,"address":[6736304],"length":1,"stats":{"Line":10},"fn_name":"is_valid"},{"line":408,"address":[6736309],"length":1,"stats":{"Line":10},"fn_name":null},{"line":413,"address":[6736336],"length":1,"stats":{"Line":12},"fn_name":"as_ascii"},{"line":414,"address":[6736374,6736350],"length":1,"stats":{"Line":20},"fn_name":null},{"line":415,"address":[6736381],"length":1,"stats":{"Line":12},"fn_name":null},{"line":417,"address":[6736369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":423,"address":[6736448],"length":1,"stats":{"Line":12},"fn_name":"is_ascii"},{"line":424,"address":[6736524,6736462,6736518],"length":1,"stats":{"Line":24},"fn_name":null},{"line":432,"address":[6736528],"length":1,"stats":{"Line":8},"fn_name":"encode"},{"line":433,"address":[6736575],"length":1,"stats":{"Line":8},"fn_name":null},{"line":434,"address":[6736667],"length":1,"stats":{"Line":8},"fn_name":null},{"line":435,"address":[6736730],"length":1,"stats":{"Line":8},"fn_name":null},{"line":436,"address":[6736781],"length":1,"stats":{"Line":8},"fn_name":null},{"line":437,"address":[6736822,6736984],"length":1,"stats":{"Line":8},"fn_name":null},{"line":438,"address":[6736962],"length":1,"stats":{"Line":8},"fn_name":null},{"line":442,"address":[6737280],"length":1,"stats":{"Line":12},"fn_name":"max_scalar_value"},{"line":443,"address":[6737404,6737424,6737434,6737414],"length":1,"stats":{"Line":34},"fn_name":null},{"line":444,"address":[6737396,6737292],"length":1,"stats":{"Line":24},"fn_name":null},{"line":445,"address":[6737406],"length":1,"stats":{"Line":10},"fn_name":null},{"line":446,"address":[6737416],"length":1,"stats":{"Line":12},"fn_name":null},{"line":447,"address":[6737426],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":92,"coverable":126},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","backtrack.rs"],"content":"// This is the backtracking matching engine. It has the same exact capability\n// as the full NFA simulation, except it is artificially restricted to small\n// regexes on small inputs because of its memory requirements.\n//\n// In particular, this is a *bounded* backtracking engine. It retains worst\n// case linear time by keeping track of the states that it has visited (using a\n// bitmap). Namely, once a state is visited, it is never visited again. Since a\n// state is keyed by `(instruction index, input index)`, we have that its time\n// complexity is `O(mn)` (i.e., linear in the size of the search text).\n//\n// The backtracking engine can beat out the NFA simulation on small\n// regexes/inputs because it doesn't have to keep track of multiple copies of\n// the capture groups. In benchmarks, the backtracking engine is roughly twice\n// as fast as the full NFA simulation. Note though that its performance doesn't\n// scale, even if you're willing to live with the memory requirements. Namely,\n// the bitset has to be zeroed on each execution, which becomes quite expensive\n// on large bitsets.\n\nuse exec::ProgramCache;\nuse input::{Input, InputAt};\nuse prog::{InstPtr, Program};\nuse re_trait::Slot;\n\ntype Bits = u32;\n\nconst BIT_SIZE: usize = 32;\nconst MAX_SIZE_BYTES: usize = 256 * (1 << 10); // 256 KB\n\n/// Returns true iff the given regex and input should be executed by this\n/// engine with reasonable memory usage.\npub fn should_exec(num_insts: usize, text_len: usize) -> bool {\n    // Total memory usage in bytes is determined by:\n    //\n    //   ((len(insts) * (len(input) + 1) + bits - 1) / bits) * (size_of(u32))\n    //\n    // The actual limit picked is pretty much a heuristic.\n    // See: https://github.com/rust-lang/regex/issues/215\n    let size = ((num_insts * (text_len + 1) + BIT_SIZE - 1) / BIT_SIZE) * 4;\n    size <= MAX_SIZE_BYTES\n}\n\n/// A backtracking matching engine.\n#[derive(Debug)]\npub struct Bounded<'a, 'm, 'r, 's, I> {\n    prog: &'r Program,\n    input: I,\n    matches: &'m mut [bool],\n    slots: &'s mut [Slot],\n    m: &'a mut Cache,\n}\n\n/// Shared cached state between multiple invocations of a backtracking engine\n/// in the same thread.\n#[derive(Clone, Debug)]\npub struct Cache {\n    jobs: Vec<Job>,\n    visited: Vec<Bits>,\n}\n\nimpl Cache {\n    /// Create new empty cache for the backtracking engine.\n    pub fn new(_prog: &Program) -> Self {\n        Cache { jobs: vec![], visited: vec![] }\n    }\n}\n\n/// A job is an explicit unit of stack space in the backtracking engine.\n///\n/// The \"normal\" representation is a single state transition, which corresponds\n/// to an NFA state and a character in the input. However, the backtracking\n/// engine must keep track of old capture group values. We use the explicit\n/// stack to do it.\n#[derive(Clone, Copy, Debug)]\nenum Job {\n    Inst { ip: InstPtr, at: InputAt },\n    SaveRestore { slot: usize, old_pos: Option<usize> },\n}\n\nimpl<'a, 'm, 'r, 's, I: Input> Bounded<'a, 'm, 'r, 's, I> {\n    /// Execute the backtracking matching engine.\n    ///\n    /// If there's a match, `exec` returns `true` and populates the given\n    /// captures accordingly.\n    pub fn exec(\n        prog: &'r Program,\n        cache: &ProgramCache,\n        matches: &'m mut [bool],\n        slots: &'s mut [Slot],\n        input: I,\n        start: usize,\n        end: usize,\n    ) -> bool {\n        let mut cache = cache.borrow_mut();\n        let cache = &mut cache.backtrack;\n        let start = input.at(start);\n        let mut b = Bounded {\n            prog: prog,\n            input: input,\n            matches: matches,\n            slots: slots,\n            m: cache,\n        };\n        b.exec_(start, end)\n    }\n\n    /// Clears the cache such that the backtracking engine can be executed\n    /// on some input of fixed length.\n    fn clear(&mut self) {\n        // Reset the job memory so that we start fresh.\n        self.m.jobs.clear();\n\n        // Now we need to clear the bit state set.\n        // We do this by figuring out how much space we need to keep track\n        // of the states we've visited.\n        // Then we reset all existing allocated space to 0.\n        // Finally, we request more space if we need it.\n        //\n        // This is all a little circuitous, but doing this unsafely\n        // doesn't seem to have a measurable impact on performance.\n        // (Probably because backtracking is limited to such small\n        // inputs/regexes in the first place.)\n        let visited_len =\n            (self.prog.len() * (self.input.len() + 1) + BIT_SIZE - 1)\n                / BIT_SIZE;\n        self.m.visited.truncate(visited_len);\n        for v in &mut self.m.visited {\n            *v = 0;\n        }\n        if visited_len > self.m.visited.len() {\n            let len = self.m.visited.len();\n            self.m.visited.reserve_exact(visited_len - len);\n            for _ in 0..(visited_len - len) {\n                self.m.visited.push(0);\n            }\n        }\n    }\n\n    /// Start backtracking at the given position in the input, but also look\n    /// for literal prefixes.\n    fn exec_(&mut self, mut at: InputAt, end: usize) -> bool {\n        self.clear();\n        // If this is an anchored regex at the beginning of the input, then\n        // we're either already done or we only need to try backtracking once.\n        if self.prog.is_anchored_start {\n            return if !at.is_start() { false } else { self.backtrack(at) };\n        }\n        let mut matched = false;\n        loop {\n            if !self.prog.prefixes.is_empty() {\n                at = match self.input.prefix_at(&self.prog.prefixes, at) {\n                    None => break,\n                    Some(at) => at,\n                };\n            }\n            matched = self.backtrack(at) || matched;\n            if matched && self.prog.matches.len() == 1 {\n                return true;\n            }\n            if at.pos() >= end {\n                break;\n            }\n            at = self.input.at(at.next_pos());\n        }\n        matched\n    }\n\n    /// The main backtracking loop starting at the given input position.\n    fn backtrack(&mut self, start: InputAt) -> bool {\n        // N.B. We use an explicit stack to avoid recursion.\n        // To avoid excessive pushing and popping, most transitions are handled\n        // in the `step` helper function, which only pushes to the stack when\n        // there's a capture or a branch.\n        let mut matched = false;\n        self.m.jobs.push(Job::Inst { ip: 0, at: start });\n        while let Some(job) = self.m.jobs.pop() {\n            match job {\n                Job::Inst { ip, at } => {\n                    if self.step(ip, at) {\n                        // Only quit if we're matching one regex.\n                        // If we're matching a regex set, then mush on and\n                        // try to find other matches (if we want them).\n                        if self.prog.matches.len() == 1 {\n                            return true;\n                        }\n                        matched = true;\n                    }\n                }\n                Job::SaveRestore { slot, old_pos } => {\n                    if slot < self.slots.len() {\n                        self.slots[slot] = old_pos;\n                    }\n                }\n            }\n        }\n        matched\n    }\n\n    fn step(&mut self, mut ip: InstPtr, mut at: InputAt) -> bool {\n        use prog::Inst::*;\n        loop {\n            // This loop is an optimization to avoid constantly pushing/popping\n            // from the stack. Namely, if we're pushing a job only to run it\n            // next, avoid the push and just mutate `ip` (and possibly `at`)\n            // in place.\n            if self.has_visited(ip, at) {\n                return false;\n            }\n            match self.prog[ip] {\n                Match(slot) => {\n                    if slot < self.matches.len() {\n                        self.matches[slot] = true;\n                    }\n                    return true;\n                }\n                Save(ref inst) => {\n                    if let Some(&old_pos) = self.slots.get(inst.slot) {\n                        // If this path doesn't work out, then we save the old\n                        // capture index (if one exists) in an alternate\n                        // job. If the next path fails, then the alternate\n                        // job is popped and the old capture index is restored.\n                        self.m.jobs.push(Job::SaveRestore {\n                            slot: inst.slot,\n                            old_pos: old_pos,\n                        });\n                        self.slots[inst.slot] = Some(at.pos());\n                    }\n                    ip = inst.goto;\n                }\n                Split(ref inst) => {\n                    self.m.jobs.push(Job::Inst { ip: inst.goto2, at: at });\n                    ip = inst.goto1;\n                }\n                EmptyLook(ref inst) => {\n                    if self.input.is_empty_match(at, inst) {\n                        ip = inst.goto;\n                    } else {\n                        return false;\n                    }\n                }\n                Char(ref inst) => {\n                    if inst.c == at.char() {\n                        ip = inst.goto;\n                        at = self.input.at(at.next_pos());\n                    } else {\n                        return false;\n                    }\n                }\n                Ranges(ref inst) => {\n                    if inst.matches(at.char()) {\n                        ip = inst.goto;\n                        at = self.input.at(at.next_pos());\n                    } else {\n                        return false;\n                    }\n                }\n                Bytes(ref inst) => {\n                    if let Some(b) = at.byte() {\n                        if inst.matches(b) {\n                            ip = inst.goto;\n                            at = self.input.at(at.next_pos());\n                            continue;\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n    }\n\n    fn has_visited(&mut self, ip: InstPtr, at: InputAt) -> bool {\n        let k = ip * (self.input.len() + 1) + at.pos();\n        let k1 = k / BIT_SIZE;\n        let k2 = usize_to_u32(1 << (k & (BIT_SIZE - 1)));\n        if self.m.visited[k1] & k2 == 0 {\n            self.m.visited[k1] |= k2;\n            false\n        } else {\n            true\n        }\n    }\n}\n\nfn usize_to_u32(n: usize) -> u32 {\n    if (n as u64) > (::std::u32::MAX as u64) {\n        panic!(\"BUG: {} is too big to fit into u32\", n)\n    }\n    n as u32\n}\n","traces":[{"line":31,"address":[5204016],"length":1,"stats":{"Line":8},"fn_name":"should_exec"},{"line":38,"address":[5204030,5204212],"length":1,"stats":{"Line":8},"fn_name":null},{"line":39,"address":[5204190],"length":1,"stats":{"Line":8},"fn_name":null},{"line":62,"address":[5204368,5204404],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":63,"address":[5204380,5204421,5204495],"length":1,"stats":{"Line":32},"fn_name":null},{"line":84,"address":[4568384,4568553,4569131,4568976],"length":1,"stats":{"Line":19},"fn_name":"exec<regex::input::CharInput>"},{"line":93,"address":[4568573,4568482,4569055,4569151],"length":1,"stats":{"Line":38},"fn_name":null},{"line":94,"address":[4569171,4568596],"length":1,"stats":{"Line":19},"fn_name":null},{"line":95,"address":[4568650,4569225],"length":1,"stats":{"Line":19},"fn_name":null},{"line":103,"address":[4568784,4569393],"length":1,"stats":{"Line":19},"fn_name":null},{"line":108,"address":[4570640,4569584],"length":1,"stats":{"Line":20},"fn_name":"clear<regex::input::CharInput>"},{"line":110,"address":[4570655,4569599],"length":1,"stats":{"Line":20},"fn_name":null},{"line":122,"address":[4571501,4570445,4569627,4569685,4570741,4570683],"length":1,"stats":{"Line":40},"fn_name":null},{"line":123,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[4570925,4569869],"length":1,"stats":{"Line":20},"fn_name":null},{"line":126,"address":[4569904,4570041,4570081,4571137,4571097,4570960],"length":1,"stats":{"Line":32},"fn_name":null},{"line":127,"address":[4570075,4571131],"length":1,"stats":{"Line":12},"fn_name":null},{"line":129,"address":[4571149,4570093,4571434,4570378,4571070,4570014],"length":1,"stats":{"Line":60},"fn_name":null},{"line":130,"address":[4570111,4571167],"length":1,"stats":{"Line":20},"fn_name":null},{"line":131,"address":[4570565,4571621,4571208,4570152],"length":1,"stats":{"Line":20},"fn_name":null},{"line":132,"address":[4570595,4570225,4570625,4571436,4570435,4571651,4571681,4571491,4571281,4570380],"length":1,"stats":{"Line":40},"fn_name":null},{"line":133,"address":[4571472,4570416],"length":1,"stats":{"Line":20},"fn_name":null},{"line":140,"address":[4572496,4571696],"length":1,"stats":{"Line":20},"fn_name":"exec_<regex::input::ByteInput>"},{"line":141,"address":[4571734,4572534],"length":1,"stats":{"Line":20},"fn_name":null},{"line":144,"address":[4571744,4572544],"length":1,"stats":{"Line":20},"fn_name":null},{"line":145,"address":[4572600,4571768,4571800,4572568],"length":1,"stats":{"Line":14},"fn_name":null},{"line":147,"address":[4571756,4572556],"length":1,"stats":{"Line":17},"fn_name":null},{"line":148,"address":[4573296,4572491,4571761,4572496,4572561,4573291],"length":1,"stats":{"Line":28},"fn_name":"exec_<regex::input::CharInput>"},{"line":149,"address":[4572688,4571888,4572140,4572940],"length":1,"stats":{"Line":23},"fn_name":null},{"line":150,"address":[4571923,4572723,4572942,4572109,4572142,4572909],"length":1,"stats":{"Line":12},"fn_name":null},{"line":151,"address":[4572144,4572001,4572801,4572944],"length":1,"stats":{"Line":10},"fn_name":null},{"line":152,"address":[4572022,4572822],"length":1,"stats":{"Line":6},"fn_name":null},{"line":155,"address":[4572154,4572954,4573068,4572268],"length":1,"stats":{"Line":30},"fn_name":null},{"line":156,"address":[4572274,4572255,4573055,4573074],"length":1,"stats":{"Line":26},"fn_name":null},{"line":157,"address":[4572367,4573167],"length":1,"stats":{"Line":11},"fn_name":null},{"line":159,"address":[4573187,4572355,4572387,4573155],"length":1,"stats":{"Line":24},"fn_name":null},{"line":160,"address":[4573224,4572424],"length":1,"stats":{"Line":12},"fn_name":null},{"line":162,"address":[4572397,4573197,4572429,4573229],"length":1,"stats":{"Line":20},"fn_name":null},{"line":164,"address":[4571871,4572671],"length":1,"stats":{"Line":12},"fn_name":null},{"line":168,"address":[4573296,4574000],"length":1,"stats":{"Line":16},"fn_name":"backtrack<regex::input::CharInput>"},{"line":173,"address":[4574015,4573311],"length":1,"stats":{"Line":17},"fn_name":null},{"line":174,"address":[4573316,4574020],"length":1,"stats":{"Line":17},"fn_name":null},{"line":175,"address":[4574202,4574665,4573498,4573961,4573418,4574122],"length":1,"stats":{"Line":52},"fn_name":null},{"line":176,"address":[4573872,4573652,4573959,4574576,4574663,4574356],"length":1,"stats":{"Line":29},"fn_name":null},{"line":177,"address":[4574358,4574250,4573546,4573654],"length":1,"stats":{"Line":34},"fn_name":null},{"line":178,"address":[4573718,4573848,4574422,4574552],"length":1,"stats":{"Line":20},"fn_name":null},{"line":182,"address":[4573808,4574512],"length":1,"stats":{"Line":16},"fn_name":null},{"line":183,"address":[4573850,4574554],"length":1,"stats":{"Line":16},"fn_name":null},{"line":185,"address":[4573843,4574547],"length":1,"stats":{"Line":3},"fn_name":null},{"line":188,"address":[4573561,4574265],"length":1,"stats":{"Line":12},"fn_name":null},{"line":189,"address":[4573614,4574588,4573884,4574318],"length":1,"stats":{"Line":24},"fn_name":null},{"line":190,"address":[4573966,4574600,4573896,4574670,4574697,4573993],"length":1,"stats":{"Line":12},"fn_name":null},{"line":195,"address":[4573483,4574187],"length":1,"stats":{"Line":12},"fn_name":null},{"line":198,"address":[4574704,4576848],"length":1,"stats":{"Line":17},"fn_name":"step<regex::input::CharInput>"},{"line":200,"address":[4578880,4576736],"length":1,"stats":{"Line":20},"fn_name":null},{"line":205,"address":[4574743,4576887],"length":1,"stats":{"Line":17},"fn_name":null},{"line":206,"address":[4574887,4577031],"length":1,"stats":{"Line":5},"fn_name":null},{"line":208,"address":[4575663,4575084,4576292,4576521,4576741,4578017,4578185,4578885,4576041,4577029,4577807,4578665,4574843,4574915,4577059,4574885,4576987,4577228,4575873,4578436],"length":1,"stats":{"Line":112},"fn_name":null},{"line":209,"address":[4574963,4577107,4575094,4577238],"length":1,"stats":{"Line":30},"fn_name":null},{"line":210,"address":[4575132,4577276],"length":1,"stats":{"Line":13},"fn_name":null},{"line":211,"address":[4578984,4578950,4576840,4577337,4575193,4576806],"length":1,"stats":{"Line":16},"fn_name":null},{"line":213,"address":[4575255,4577399],"length":1,"stats":{"Line":16},"fn_name":null},{"line":215,"address":[4577420,4575276],"length":1,"stats":{"Line":17},"fn_name":null},{"line":216,"address":[4575320,4577464],"length":1,"stats":{"Line":17},"fn_name":null},{"line":221,"address":[4577569,4575425,4575441,4577585],"length":1,"stats":{"Line":34},"fn_name":null},{"line":222,"address":[4577581,4575437],"length":1,"stats":{"Line":17},"fn_name":null},{"line":223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[4576775,4575501,4577645,4578919],"length":1,"stats":{"Line":17},"fn_name":null},{"line":227,"address":[4577796,4575652],"length":1,"stats":{"Line":17},"fn_name":null},{"line":229,"address":[4575676,4577820],"length":1,"stats":{"Line":13},"fn_name":null},{"line":230,"address":[4577864,4575720],"length":1,"stats":{"Line":13},"fn_name":null},{"line":231,"address":[4575862,4578006],"length":1,"stats":{"Line":13},"fn_name":null},{"line":233,"address":[4575886,4578030],"length":1,"stats":{"Line":13},"fn_name":null},{"line":234,"address":[4578071,4575927],"length":1,"stats":{"Line":13},"fn_name":null},{"line":235,"address":[4576030,4578174],"length":1,"stats":{"Line":13},"fn_name":null},{"line":237,"address":[4576012,4578156],"length":1,"stats":{"Line":10},"fn_name":null},{"line":240,"address":[4576054,4578198],"length":1,"stats":{"Line":9},"fn_name":null},{"line":241,"address":[4578231,4576087],"length":1,"stats":{"Line":9},"fn_name":null},{"line":242,"address":[4576177,4578321],"length":1,"stats":{"Line":9},"fn_name":null},{"line":243,"address":[4578340,4576196],"length":1,"stats":{"Line":9},"fn_name":null},{"line":245,"address":[4578303,4576159],"length":1,"stats":{"Line":8},"fn_name":null},{"line":248,"address":[4578449,4576305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":249,"address":[4576351,4578495],"length":1,"stats":{"Line":8},"fn_name":null},{"line":250,"address":[4578550,4576406],"length":1,"stats":{"Line":6},"fn_name":null},{"line":251,"address":[4576425,4578569],"length":1,"stats":{"Line":6},"fn_name":null},{"line":253,"address":[4578532,4576388],"length":1,"stats":{"Line":10},"fn_name":null},{"line":256,"address":[4577163,4575019],"length":1,"stats":{"Line":8},"fn_name":null},{"line":257,"address":[4576595,4576526,4575060,4577204,4578670,4578739],"length":1,"stats":{"Line":23},"fn_name":null},{"line":258,"address":[4578717,4576573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":259,"address":[4578749,4576605],"length":1,"stats":{"Line":8},"fn_name":null},{"line":260,"address":[4578768,4576624],"length":1,"stats":{"Line":8},"fn_name":null},{"line":261,"address":[4578862,4576718],"length":1,"stats":{"Line":8},"fn_name":null},{"line":264,"address":[4576723,4578867],"length":1,"stats":{"Line":7},"fn_name":null},{"line":270,"address":[4578992,4579536],"length":1,"stats":{"Line":17},"fn_name":"has_visited<regex::input::ByteInput>"},{"line":271,"address":[4579009,4579951,4579407,4579553],"length":1,"stats":{"Line":17},"fn_name":null},{"line":272,"address":[4579708,4579164],"length":1,"stats":{"Line":17},"fn_name":null},{"line":273,"address":[4580041,4580071,4579527,4579181,4579497,4579725],"length":1,"stats":{"Line":17},"fn_name":null},{"line":274,"address":[4579328,4579872,4579274,4579818],"length":1,"stats":{"Line":22},"fn_name":null},{"line":275,"address":[4579886,4579342],"length":1,"stats":{"Line":17},"fn_name":null},{"line":276,"address":[4579385,4579929],"length":1,"stats":{"Line":17},"fn_name":null},{"line":278,"address":[4579323,4579867],"length":1,"stats":{"Line":5},"fn_name":null},{"line":283,"address":[5204528],"length":1,"stats":{"Line":9},"fn_name":"usize_to_u32"},{"line":284,"address":[5204537],"length":1,"stats":{"Line":9},"fn_name":null},{"line":285,"address":[5204566],"length":1,"stats":{"Line":0},"fn_name":null},{"line":287,"address":[5204549],"length":1,"stats":{"Line":9},"fn_name":null}],"covered":102,"coverable":106},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","cache.rs"],"content":"// This module defines a common API for caching internal runtime state.\n// The `thread_local` crate provides an extremely optimized version of this.\n// However, if the perf-cache feature is disabled, then we drop the\n// thread_local dependency and instead use a pretty naive caching mechanism\n// with a mutex.\n//\n// Strictly speaking, the CachedGuard isn't necessary for the much more\n// flexible thread_local API, but implementing thread_local's API doesn't\n// seem possible in purely safe code.\n\npub use self::imp::{Cached, CachedGuard};\n\n#[cfg(feature = \"perf-cache\")]\nmod imp {\n    use thread_local::CachedThreadLocal;\n\n    #[derive(Debug)]\n    pub struct Cached<T: Send>(CachedThreadLocal<T>);\n\n    #[derive(Debug)]\n    pub struct CachedGuard<'a, T: 'a>(&'a T);\n\n    impl<T: Send> Cached<T> {\n        pub fn new() -> Cached<T> {\n            Cached(CachedThreadLocal::new())\n        }\n\n        pub fn get_or(&self, create: impl FnOnce() -> T) -> CachedGuard<T> {\n            CachedGuard(self.0.get_or(|| create()))\n        }\n    }\n\n    impl<'a, T: Send> CachedGuard<'a, T> {\n        pub fn value(&self) -> &T {\n            self.0\n        }\n    }\n}\n\n#[cfg(not(feature = \"perf-cache\"))]\nmod imp {\n    use std::marker::PhantomData;\n    use std::panic::UnwindSafe;\n    use std::sync::Mutex;\n\n    #[derive(Debug)]\n    pub struct Cached<T: Send> {\n        stack: Mutex<Vec<T>>,\n        /// When perf-cache is enabled, the thread_local crate is used, and\n        /// its CachedThreadLocal impls Send, Sync and UnwindSafe, but NOT\n        /// RefUnwindSafe. However, a Mutex impls RefUnwindSafe. So in order\n        /// to keep the APIs consistent regardless of whether perf-cache is\n        /// enabled, we force this type to NOT impl RefUnwindSafe too.\n        ///\n        /// Ideally, we should always impl RefUnwindSafe, but it seems a little\n        /// tricky to do that right now.\n        ///\n        /// See also: https://github.com/rust-lang/regex/issues/576\n        _phantom: PhantomData<Box<dyn Send + Sync + UnwindSafe>>,\n    }\n\n    #[derive(Debug)]\n    pub struct CachedGuard<'a, T: 'a + Send> {\n        cache: &'a Cached<T>,\n        value: Option<T>,\n    }\n\n    impl<T: Send> Cached<T> {\n        pub fn new() -> Cached<T> {\n            Cached { stack: Mutex::new(vec![]), _phantom: PhantomData }\n        }\n\n        pub fn get_or(&self, create: impl FnOnce() -> T) -> CachedGuard<T> {\n            let mut stack = self.stack.lock().unwrap();\n            match stack.pop() {\n                None => CachedGuard { cache: self, value: Some(create()) },\n                Some(value) => CachedGuard { cache: self, value: Some(value) },\n            }\n        }\n\n        fn put(&self, value: T) {\n            let mut stack = self.stack.lock().unwrap();\n            stack.push(value);\n        }\n    }\n\n    impl<'a, T: Send> CachedGuard<'a, T> {\n        pub fn value(&self) -> &T {\n            self.value.as_ref().unwrap()\n        }\n    }\n\n    impl<'a, T: Send> Drop for CachedGuard<'a, T> {\n        fn drop(&mut self) {\n            if let Some(value) = self.value.take() {\n                self.cache.put(value);\n            }\n        }\n    }\n}\n","traces":[{"line":24,"address":[9120912],"length":1,"stats":{"Line":10},"fn_name":"new<core::cell::RefCell<regex::exec::ProgramCacheInner>>"},{"line":25,"address":[9370951],"length":1,"stats":{"Line":10},"fn_name":null},{"line":28,"address":[5205936],"length":1,"stats":{"Line":16},"fn_name":"get_or<core::cell::RefCell<regex::exec::ProgramCacheInner>,closure-0>"},{"line":29,"address":[9371120,9371137,9371038,9371093],"length":1,"stats":{"Line":64},"fn_name":"{{closure}}<core::cell::RefCell<regex::exec::ProgramCacheInner>,closure-0>"},{"line":34,"address":[9371168],"length":1,"stats":{"Line":15},"fn_name":"value<core::cell::RefCell<regex::exec::ProgramCacheInner>>"},{"line":35,"address":[9546997],"length":1,"stats":{"Line":15},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":6,"coverable":21},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","compile.rs"],"content":"use std::collections::HashMap;\nuse std::iter;\nuse std::result;\nuse std::sync::Arc;\n\nuse syntax::hir::{self, Hir};\nuse syntax::is_word_byte;\nuse syntax::utf8::{Utf8Range, Utf8Sequence, Utf8Sequences};\n\nuse prog::{\n    EmptyLook, Inst, InstBytes, InstChar, InstEmptyLook, InstPtr, InstRanges,\n    InstSave, InstSplit, Program,\n};\n\nuse Error;\n\ntype Result = result::Result<Patch, Error>;\ntype ResultOrEmpty = result::Result<Option<Patch>, Error>;\n\n#[derive(Debug)]\nstruct Patch {\n    hole: Hole,\n    entry: InstPtr,\n}\n\n/// A compiler translates a regular expression AST to a sequence of\n/// instructions. The sequence of instructions represents an NFA.\npub struct Compiler {\n    insts: Vec<MaybeInst>,\n    compiled: Program,\n    capture_name_idx: HashMap<String, usize>,\n    num_exprs: usize,\n    size_limit: usize,\n    suffix_cache: SuffixCache,\n    utf8_seqs: Option<Utf8Sequences>,\n    byte_classes: ByteClassSet,\n}\n\nimpl Compiler {\n    /// Create a new regular expression compiler.\n    ///\n    /// Various options can be set before calling `compile` on an expression.\n    pub fn new() -> Self {\n        Compiler {\n            insts: vec![],\n            compiled: Program::new(),\n            capture_name_idx: HashMap::new(),\n            num_exprs: 0,\n            size_limit: 10 * (1 << 20),\n            suffix_cache: SuffixCache::new(1000),\n            utf8_seqs: Some(Utf8Sequences::new('\\x00', '\\x00')),\n            byte_classes: ByteClassSet::new(),\n        }\n    }\n\n    /// The size of the resulting program is limited by size_limit. If\n    /// the program approximately exceeds the given size (in bytes), then\n    /// compilation will stop and return an error.\n    pub fn size_limit(mut self, size_limit: usize) -> Self {\n        self.size_limit = size_limit;\n        self\n    }\n\n    /// If bytes is true, then the program is compiled as a byte based\n    /// automaton, which incorporates UTF-8 decoding into the machine. If it's\n    /// false, then the automaton is Unicode scalar value based, e.g., an\n    /// engine utilizing such an automaton is responsible for UTF-8 decoding.\n    ///\n    /// The specific invariant is that when returning a byte based machine,\n    /// the neither the `Char` nor `Ranges` instructions are produced.\n    /// Conversely, when producing a Unicode scalar value machine, the `Bytes`\n    /// instruction is never produced.\n    ///\n    /// Note that `dfa(true)` implies `bytes(true)`.\n    pub fn bytes(mut self, yes: bool) -> Self {\n        self.compiled.is_bytes = yes;\n        self\n    }\n\n    /// When disabled, the program compiled may match arbitrary bytes.\n    ///\n    /// When enabled (the default), all compiled programs exclusively match\n    /// valid UTF-8 bytes.\n    pub fn only_utf8(mut self, yes: bool) -> Self {\n        self.compiled.only_utf8 = yes;\n        self\n    }\n\n    /// When set, the machine returned is suitable for use in the DFA matching\n    /// engine.\n    ///\n    /// In particular, this ensures that if the regex is not anchored in the\n    /// beginning, then a preceding `.*?` is included in the program. (The NFA\n    /// based engines handle the preceding `.*?` explicitly, which is difficult\n    /// or impossible in the DFA engine.)\n    pub fn dfa(mut self, yes: bool) -> Self {\n        self.compiled.is_dfa = yes;\n        self\n    }\n\n    /// When set, the machine returned is suitable for matching text in\n    /// reverse. In particular, all concatenations are flipped.\n    pub fn reverse(mut self, yes: bool) -> Self {\n        self.compiled.is_reverse = yes;\n        self\n    }\n\n    /// Compile a regular expression given its AST.\n    ///\n    /// The compiler is guaranteed to succeed unless the program exceeds the\n    /// specified size limit. If the size limit is exceeded, then compilation\n    /// stops and returns an error.\n    pub fn compile(mut self, exprs: &[Hir]) -> result::Result<Program, Error> {\n        debug_assert!(!exprs.is_empty());\n        self.num_exprs = exprs.len();\n        if exprs.len() == 1 {\n            self.compile_one(&exprs[0])\n        } else {\n            self.compile_many(exprs)\n        }\n    }\n\n    fn compile_one(mut self, expr: &Hir) -> result::Result<Program, Error> {\n        // If we're compiling a forward DFA and we aren't anchored, then\n        // add a `.*?` before the first capture group.\n        // Other matching engines handle this by baking the logic into the\n        // matching engine itself.\n        let mut dotstar_patch = Patch { hole: Hole::None, entry: 0 };\n        self.compiled.is_anchored_start = expr.is_anchored_start();\n        self.compiled.is_anchored_end = expr.is_anchored_end();\n        if self.compiled.needs_dotstar() {\n            dotstar_patch = self.c_dotstar()?;\n            self.compiled.start = dotstar_patch.entry;\n        }\n        self.compiled.captures = vec![None];\n        let patch = self.c_capture(0, expr)?.unwrap_or(self.next_inst());\n        if self.compiled.needs_dotstar() {\n            self.fill(dotstar_patch.hole, patch.entry);\n        } else {\n            self.compiled.start = patch.entry;\n        }\n        self.fill_to_next(patch.hole);\n        self.compiled.matches = vec![self.insts.len()];\n        self.push_compiled(Inst::Match(0));\n        self.compile_finish()\n    }\n\n    fn compile_many(\n        mut self,\n        exprs: &[Hir],\n    ) -> result::Result<Program, Error> {\n        debug_assert!(exprs.len() > 1);\n\n        self.compiled.is_anchored_start =\n            exprs.iter().all(|e| e.is_anchored_start());\n        self.compiled.is_anchored_end =\n            exprs.iter().all(|e| e.is_anchored_end());\n        let mut dotstar_patch = Patch { hole: Hole::None, entry: 0 };\n        if self.compiled.needs_dotstar() {\n            dotstar_patch = self.c_dotstar()?;\n            self.compiled.start = dotstar_patch.entry;\n        } else {\n            self.compiled.start = 0; // first instruction is always split\n        }\n        self.fill_to_next(dotstar_patch.hole);\n\n        let mut prev_hole = Hole::None;\n        for (i, expr) in exprs[0..exprs.len() - 1].iter().enumerate() {\n            self.fill_to_next(prev_hole);\n            let split = self.push_split_hole();\n            let Patch { hole, entry } =\n                self.c_capture(0, expr)?.unwrap_or(self.next_inst());\n            self.fill_to_next(hole);\n            self.compiled.matches.push(self.insts.len());\n            self.push_compiled(Inst::Match(i));\n            prev_hole = self.fill_split(split, Some(entry), None);\n        }\n        let i = exprs.len() - 1;\n        let Patch { hole, entry } =\n            self.c_capture(0, &exprs[i])?.unwrap_or(self.next_inst());\n        self.fill(prev_hole, entry);\n        self.fill_to_next(hole);\n        self.compiled.matches.push(self.insts.len());\n        self.push_compiled(Inst::Match(i));\n        self.compile_finish()\n    }\n\n    fn compile_finish(mut self) -> result::Result<Program, Error> {\n        self.compiled.insts =\n            self.insts.into_iter().map(|inst| inst.unwrap()).collect();\n        self.compiled.byte_classes = self.byte_classes.byte_classes();\n        self.compiled.capture_name_idx = Arc::new(self.capture_name_idx);\n        Ok(self.compiled)\n    }\n\n    /// Compile expr into self.insts, returning a patch on success,\n    /// or an error if we run out of memory.\n    ///\n    /// All of the c_* methods of the compiler share the contract outlined\n    /// here.\n    ///\n    /// The main thing that a c_* method does is mutate `self.insts`\n    /// to add a list of mostly compiled instructions required to execute\n    /// the given expression. `self.insts` contains MaybeInsts rather than\n    /// Insts because there is some backpatching required.\n    ///\n    /// The `Patch` value returned by each c_* method provides metadata\n    /// about the compiled instructions emitted to `self.insts`. The\n    /// `entry` member of the patch refers to the first instruction\n    /// (the entry point), while the `hole` member contains zero or\n    /// more offsets to partial instructions that need to be backpatched.\n    /// The c_* routine can't know where its list of instructions are going to\n    /// jump to after execution, so it is up to the caller to patch\n    /// these jumps to point to the right place. So compiling some\n    /// expression, e, we would end up with a situation that looked like:\n    ///\n    /// ```text\n    /// self.insts = [ ..., i1, i2, ..., iexit1, ..., iexitn, ...]\n    ///                     ^              ^             ^\n    ///                     |                \\         /\n    ///                   entry                \\     /\n    ///                                         hole\n    /// ```\n    ///\n    /// To compile two expressions, e1 and e2, concatinated together we\n    /// would do:\n    ///\n    /// ```ignore\n    /// let patch1 = self.c(e1);\n    /// let patch2 = self.c(e2);\n    /// ```\n    ///\n    /// while leaves us with a situation that looks like\n    ///\n    /// ```text\n    /// self.insts = [ ..., i1, ..., iexit1, ..., i2, ..., iexit2 ]\n    ///                     ^        ^            ^        ^\n    ///                     |        |            |        |\n    ///                entry1        hole1   entry2        hole2\n    /// ```\n    ///\n    /// Then to merge the two patches together into one we would backpatch\n    /// hole1 with entry2 and return a new patch that enters at entry1\n    /// and has hole2 for a hole. In fact, if you look at the c_concat\n    /// method you will see that it does exactly this, though it handles\n    /// a list of expressions rather than just the two that we use for\n    /// an example.\n    ///\n    /// Ok(None) is returned when an expression is compiled to no\n    /// instruction, and so no patch.entry value makes sense.\n    fn c(&mut self, expr: &Hir) -> ResultOrEmpty {\n        use prog;\n        use syntax::hir::HirKind::*;\n\n        self.check_size()?;\n        match *expr.kind() {\n            Empty => Ok(None),\n            Literal(hir::Literal::Unicode(c)) => self.c_char(c),\n            Literal(hir::Literal::Byte(b)) => {\n                assert!(self.compiled.uses_bytes());\n                self.c_byte(b)\n            }\n            Class(hir::Class::Unicode(ref cls)) => self.c_class(cls.ranges()),\n            Class(hir::Class::Bytes(ref cls)) => {\n                if self.compiled.uses_bytes() {\n                    self.c_class_bytes(cls.ranges())\n                } else {\n                    assert!(cls.is_all_ascii());\n                    let mut char_ranges = vec![];\n                    for r in cls.iter() {\n                        let (s, e) = (r.start() as char, r.end() as char);\n                        char_ranges.push(hir::ClassUnicodeRange::new(s, e));\n                    }\n                    self.c_class(&char_ranges)\n                }\n            }\n            Anchor(hir::Anchor::StartLine) if self.compiled.is_reverse => {\n                self.byte_classes.set_range(b'\\n', b'\\n');\n                self.c_empty_look(prog::EmptyLook::EndLine)\n            }\n            Anchor(hir::Anchor::StartLine) => {\n                self.byte_classes.set_range(b'\\n', b'\\n');\n                self.c_empty_look(prog::EmptyLook::StartLine)\n            }\n            Anchor(hir::Anchor::EndLine) if self.compiled.is_reverse => {\n                self.byte_classes.set_range(b'\\n', b'\\n');\n                self.c_empty_look(prog::EmptyLook::StartLine)\n            }\n            Anchor(hir::Anchor::EndLine) => {\n                self.byte_classes.set_range(b'\\n', b'\\n');\n                self.c_empty_look(prog::EmptyLook::EndLine)\n            }\n            Anchor(hir::Anchor::StartText) if self.compiled.is_reverse => {\n                self.c_empty_look(prog::EmptyLook::EndText)\n            }\n            Anchor(hir::Anchor::StartText) => {\n                self.c_empty_look(prog::EmptyLook::StartText)\n            }\n            Anchor(hir::Anchor::EndText) if self.compiled.is_reverse => {\n                self.c_empty_look(prog::EmptyLook::StartText)\n            }\n            Anchor(hir::Anchor::EndText) => {\n                self.c_empty_look(prog::EmptyLook::EndText)\n            }\n            WordBoundary(hir::WordBoundary::Unicode) => {\n                if !cfg!(feature = \"unicode-perl\") {\n                    return Err(Error::Syntax(\n                        \"Unicode word boundaries are unavailable when \\\n                         the unicode-perl feature is disabled\"\n                            .to_string(),\n                    ));\n                }\n                self.compiled.has_unicode_word_boundary = true;\n                self.byte_classes.set_word_boundary();\n                self.c_empty_look(prog::EmptyLook::WordBoundary)\n            }\n            WordBoundary(hir::WordBoundary::UnicodeNegate) => {\n                if !cfg!(feature = \"unicode-perl\") {\n                    return Err(Error::Syntax(\n                        \"Unicode word boundaries are unavailable when \\\n                         the unicode-perl feature is disabled\"\n                            .to_string(),\n                    ));\n                }\n                self.compiled.has_unicode_word_boundary = true;\n                self.byte_classes.set_word_boundary();\n                self.c_empty_look(prog::EmptyLook::NotWordBoundary)\n            }\n            WordBoundary(hir::WordBoundary::Ascii) => {\n                self.byte_classes.set_word_boundary();\n                self.c_empty_look(prog::EmptyLook::WordBoundaryAscii)\n            }\n            WordBoundary(hir::WordBoundary::AsciiNegate) => {\n                self.byte_classes.set_word_boundary();\n                self.c_empty_look(prog::EmptyLook::NotWordBoundaryAscii)\n            }\n            Group(ref g) => match g.kind {\n                hir::GroupKind::NonCapturing => self.c(&g.hir),\n                hir::GroupKind::CaptureIndex(index) => {\n                    if index as usize >= self.compiled.captures.len() {\n                        self.compiled.captures.push(None);\n                    }\n                    self.c_capture(2 * index as usize, &g.hir)\n                }\n                hir::GroupKind::CaptureName { index, ref name } => {\n                    if index as usize >= self.compiled.captures.len() {\n                        let n = name.to_string();\n                        self.compiled.captures.push(Some(n.clone()));\n                        self.capture_name_idx.insert(n, index as usize);\n                    }\n                    self.c_capture(2 * index as usize, &g.hir)\n                }\n            },\n            Concat(ref es) => {\n                if self.compiled.is_reverse {\n                    self.c_concat(es.iter().rev())\n                } else {\n                    self.c_concat(es)\n                }\n            }\n            Alternation(ref es) => self.c_alternate(&**es),\n            Repetition(ref rep) => self.c_repeat(rep),\n        }\n    }\n\n    fn c_capture(&mut self, first_slot: usize, expr: &Hir) -> ResultOrEmpty {\n        if self.num_exprs > 1 || self.compiled.is_dfa {\n            // Don't ever compile Save instructions for regex sets because\n            // they are never used. They are also never used in DFA programs\n            // because DFAs can't handle captures.\n            self.c(expr)\n        } else {\n            let entry = self.insts.len();\n            let hole = self.push_hole(InstHole::Save { slot: first_slot });\n            let patch = self.c(expr)?.unwrap_or(self.next_inst());\n            self.fill(hole, patch.entry);\n            self.fill_to_next(patch.hole);\n            let hole = self.push_hole(InstHole::Save { slot: first_slot + 1 });\n            Ok(Some(Patch { hole: hole, entry: entry }))\n        }\n    }\n\n    fn c_dotstar(&mut self) -> Result {\n        Ok(if !self.compiled.only_utf8() {\n            self.c(&Hir::repetition(hir::Repetition {\n                kind: hir::RepetitionKind::ZeroOrMore,\n                greedy: false,\n                hir: Box::new(Hir::any(true)),\n            }))?\n            .unwrap()\n        } else {\n            self.c(&Hir::repetition(hir::Repetition {\n                kind: hir::RepetitionKind::ZeroOrMore,\n                greedy: false,\n                hir: Box::new(Hir::any(false)),\n            }))?\n            .unwrap()\n        })\n    }\n\n    fn c_char(&mut self, c: char) -> ResultOrEmpty {\n        if self.compiled.uses_bytes() {\n            if c.is_ascii() {\n                let b = c as u8;\n                let hole =\n                    self.push_hole(InstHole::Bytes { start: b, end: b });\n                self.byte_classes.set_range(b, b);\n                Ok(Some(Patch { hole, entry: self.insts.len() - 1 }))\n            } else {\n                self.c_class(&[hir::ClassUnicodeRange::new(c, c)])\n            }\n        } else {\n            let hole = self.push_hole(InstHole::Char { c: c });\n            Ok(Some(Patch { hole, entry: self.insts.len() - 1 }))\n        }\n    }\n\n    fn c_class(&mut self, ranges: &[hir::ClassUnicodeRange]) -> ResultOrEmpty {\n        assert!(!ranges.is_empty());\n        if self.compiled.uses_bytes() {\n            Ok(Some(CompileClass { c: self, ranges: ranges }.compile()?))\n        } else {\n            let ranges: Vec<(char, char)> =\n                ranges.iter().map(|r| (r.start(), r.end())).collect();\n            let hole = if ranges.len() == 1 && ranges[0].0 == ranges[0].1 {\n                self.push_hole(InstHole::Char { c: ranges[0].0 })\n            } else {\n                self.push_hole(InstHole::Ranges { ranges: ranges })\n            };\n            Ok(Some(Patch { hole: hole, entry: self.insts.len() - 1 }))\n        }\n    }\n\n    fn c_byte(&mut self, b: u8) -> ResultOrEmpty {\n        self.c_class_bytes(&[hir::ClassBytesRange::new(b, b)])\n    }\n\n    fn c_class_bytes(\n        &mut self,\n        ranges: &[hir::ClassBytesRange],\n    ) -> ResultOrEmpty {\n        debug_assert!(!ranges.is_empty());\n\n        let first_split_entry = self.insts.len();\n        let mut holes = vec![];\n        let mut prev_hole = Hole::None;\n        for r in &ranges[0..ranges.len() - 1] {\n            self.fill_to_next(prev_hole);\n            let split = self.push_split_hole();\n            let next = self.insts.len();\n            self.byte_classes.set_range(r.start(), r.end());\n            holes.push(self.push_hole(InstHole::Bytes {\n                start: r.start(),\n                end: r.end(),\n            }));\n            prev_hole = self.fill_split(split, Some(next), None);\n        }\n        let next = self.insts.len();\n        let r = &ranges[ranges.len() - 1];\n        self.byte_classes.set_range(r.start(), r.end());\n        holes.push(\n            self.push_hole(InstHole::Bytes { start: r.start(), end: r.end() }),\n        );\n        self.fill(prev_hole, next);\n        Ok(Some(Patch { hole: Hole::Many(holes), entry: first_split_entry }))\n    }\n\n    fn c_empty_look(&mut self, look: EmptyLook) -> ResultOrEmpty {\n        let hole = self.push_hole(InstHole::EmptyLook { look: look });\n        Ok(Some(Patch { hole: hole, entry: self.insts.len() - 1 }))\n    }\n\n    fn c_concat<'a, I>(&mut self, exprs: I) -> ResultOrEmpty\n    where\n        I: IntoIterator<Item = &'a Hir>,\n    {\n        let mut exprs = exprs.into_iter();\n        let Patch { mut hole, entry } = loop {\n            match exprs.next() {\n                None => return Ok(None),\n                Some(e) => {\n                    if let Some(p) = self.c(e)? {\n                        break p;\n                    }\n                }\n            }\n        };\n        for e in exprs {\n            if let Some(p) = self.c(e)? {\n                self.fill(hole, p.entry);\n                hole = p.hole;\n            }\n        }\n        Ok(Some(Patch { hole: hole, entry: entry }))\n    }\n\n    fn c_alternate(&mut self, exprs: &[Hir]) -> ResultOrEmpty {\n        debug_assert!(\n            exprs.len() >= 2,\n            \"alternates must have at least 2 exprs\"\n        );\n\n        // Initial entry point is always the first split.\n        let first_split_entry = self.insts.len();\n\n        // Save up all of the holes from each alternate. They will all get\n        // patched to point to the same location.\n        let mut holes = vec![];\n\n        // true indicates that the hole is a split where we want to fill\n        // the second branch.\n        let mut prev_hole = (Hole::None, false);\n        for e in &exprs[0..exprs.len() - 1] {\n            if prev_hole.1 {\n                let next = self.insts.len();\n                self.fill_split(prev_hole.0, None, Some(next));\n            } else {\n                self.fill_to_next(prev_hole.0);\n            }\n            let split = self.push_split_hole();\n            if let Some(Patch { hole, entry }) = self.c(e)? {\n                holes.push(hole);\n                prev_hole = (self.fill_split(split, Some(entry), None), false);\n            } else {\n                let (split1, split2) = split.dup_one();\n                holes.push(split1);\n                prev_hole = (split2, true);\n            }\n        }\n        if let Some(Patch { hole, entry }) = self.c(&exprs[exprs.len() - 1])? {\n            holes.push(hole);\n            if prev_hole.1 {\n                self.fill_split(prev_hole.0, None, Some(entry));\n            } else {\n                self.fill(prev_hole.0, entry);\n            }\n        } else {\n            // We ignore prev_hole.1. When it's true, it means we have two\n            // empty branches both pushing prev_hole.0 into holes, so both\n            // branches will go to the same place anyway.\n            holes.push(prev_hole.0);\n        }\n        Ok(Some(Patch { hole: Hole::Many(holes), entry: first_split_entry }))\n    }\n\n    fn c_repeat(&mut self, rep: &hir::Repetition) -> ResultOrEmpty {\n        use syntax::hir::RepetitionKind::*;\n        match rep.kind {\n            ZeroOrOne => self.c_repeat_zero_or_one(&rep.hir, rep.greedy),\n            ZeroOrMore => self.c_repeat_zero_or_more(&rep.hir, rep.greedy),\n            OneOrMore => self.c_repeat_one_or_more(&rep.hir, rep.greedy),\n            Range(hir::RepetitionRange::Exactly(min_max)) => {\n                self.c_repeat_range(&rep.hir, rep.greedy, min_max, min_max)\n            }\n            Range(hir::RepetitionRange::AtLeast(min)) => {\n                self.c_repeat_range_min_or_more(&rep.hir, rep.greedy, min)\n            }\n            Range(hir::RepetitionRange::Bounded(min, max)) => {\n                self.c_repeat_range(&rep.hir, rep.greedy, min, max)\n            }\n        }\n    }\n\n    fn c_repeat_zero_or_one(\n        &mut self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> ResultOrEmpty {\n        let split_entry = self.insts.len();\n        let split = self.push_split_hole();\n        let Patch { hole: hole_rep, entry: entry_rep } = match self.c(expr)? {\n            Some(p) => p,\n            None => return self.pop_split_hole(),\n        };\n        let split_hole = if greedy {\n            self.fill_split(split, Some(entry_rep), None)\n        } else {\n            self.fill_split(split, None, Some(entry_rep))\n        };\n        let holes = vec![hole_rep, split_hole];\n        Ok(Some(Patch { hole: Hole::Many(holes), entry: split_entry }))\n    }\n\n    fn c_repeat_zero_or_more(\n        &mut self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> ResultOrEmpty {\n        let split_entry = self.insts.len();\n        let split = self.push_split_hole();\n        let Patch { hole: hole_rep, entry: entry_rep } = match self.c(expr)? {\n            Some(p) => p,\n            None => return self.pop_split_hole(),\n        };\n\n        self.fill(hole_rep, split_entry);\n        let split_hole = if greedy {\n            self.fill_split(split, Some(entry_rep), None)\n        } else {\n            self.fill_split(split, None, Some(entry_rep))\n        };\n        Ok(Some(Patch { hole: split_hole, entry: split_entry }))\n    }\n\n    fn c_repeat_one_or_more(\n        &mut self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> ResultOrEmpty {\n        let Patch { hole: hole_rep, entry: entry_rep } = match self.c(expr)? {\n            Some(p) => p,\n            None => return Ok(None),\n        };\n        self.fill_to_next(hole_rep);\n        let split = self.push_split_hole();\n\n        let split_hole = if greedy {\n            self.fill_split(split, Some(entry_rep), None)\n        } else {\n            self.fill_split(split, None, Some(entry_rep))\n        };\n        Ok(Some(Patch { hole: split_hole, entry: entry_rep }))\n    }\n\n    fn c_repeat_range_min_or_more(\n        &mut self,\n        expr: &Hir,\n        greedy: bool,\n        min: u32,\n    ) -> ResultOrEmpty {\n        let min = u32_to_usize(min);\n        // Using next_inst() is ok, because we can't return it (concat would\n        // have to return Some(_) while c_repeat_range_min_or_more returns\n        // None).\n        let patch_concat = self\n            .c_concat(iter::repeat(expr).take(min))?\n            .unwrap_or(self.next_inst());\n        if let Some(patch_rep) = self.c_repeat_zero_or_more(expr, greedy)? {\n            self.fill(patch_concat.hole, patch_rep.entry);\n            Ok(Some(Patch { hole: patch_rep.hole, entry: patch_concat.entry }))\n        } else {\n            Ok(None)\n        }\n    }\n\n    fn c_repeat_range(\n        &mut self,\n        expr: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> ResultOrEmpty {\n        let (min, max) = (u32_to_usize(min), u32_to_usize(max));\n        debug_assert!(min <= max);\n        let patch_concat = self.c_concat(iter::repeat(expr).take(min))?;\n        if min == max {\n            return Ok(patch_concat);\n        }\n        // Same reasoning as in c_repeat_range_min_or_more (we know that min <\n        // max at this point).\n        let patch_concat = patch_concat.unwrap_or(self.next_inst());\n        let initial_entry = patch_concat.entry;\n        // It is much simpler to compile, e.g., `a{2,5}` as:\n        //\n        //     aaa?a?a?\n        //\n        // But you end up with a sequence of instructions like this:\n        //\n        //     0: 'a'\n        //     1: 'a',\n        //     2: split(3, 4)\n        //     3: 'a'\n        //     4: split(5, 6)\n        //     5: 'a'\n        //     6: split(7, 8)\n        //     7: 'a'\n        //     8: MATCH\n        //\n        // This is *incredibly* inefficient because the splits end\n        // up forming a chain, which has to be resolved everything a\n        // transition is followed.\n        let mut holes = vec![];\n        let mut prev_hole = patch_concat.hole;\n        for _ in min..max {\n            self.fill_to_next(prev_hole);\n            let split = self.push_split_hole();\n            let Patch { hole, entry } = match self.c(expr)? {\n                Some(p) => p,\n                None => return self.pop_split_hole(),\n            };\n            prev_hole = hole;\n            if greedy {\n                holes.push(self.fill_split(split, Some(entry), None));\n            } else {\n                holes.push(self.fill_split(split, None, Some(entry)));\n            }\n        }\n        holes.push(prev_hole);\n        Ok(Some(Patch { hole: Hole::Many(holes), entry: initial_entry }))\n    }\n\n    /// Can be used as a default value for the c_* functions when the call to\n    /// c_function is followed by inserting at least one instruction that is\n    /// always executed after the ones written by the c* function.\n    fn next_inst(&self) -> Patch {\n        Patch { hole: Hole::None, entry: self.insts.len() }\n    }\n\n    fn fill(&mut self, hole: Hole, goto: InstPtr) {\n        match hole {\n            Hole::None => {}\n            Hole::One(pc) => {\n                self.insts[pc].fill(goto);\n            }\n            Hole::Many(holes) => {\n                for hole in holes {\n                    self.fill(hole, goto);\n                }\n            }\n        }\n    }\n\n    fn fill_to_next(&mut self, hole: Hole) {\n        let next = self.insts.len();\n        self.fill(hole, next);\n    }\n\n    fn fill_split(\n        &mut self,\n        hole: Hole,\n        goto1: Option<InstPtr>,\n        goto2: Option<InstPtr>,\n    ) -> Hole {\n        match hole {\n            Hole::None => Hole::None,\n            Hole::One(pc) => match (goto1, goto2) {\n                (Some(goto1), Some(goto2)) => {\n                    self.insts[pc].fill_split(goto1, goto2);\n                    Hole::None\n                }\n                (Some(goto1), None) => {\n                    self.insts[pc].half_fill_split_goto1(goto1);\n                    Hole::One(pc)\n                }\n                (None, Some(goto2)) => {\n                    self.insts[pc].half_fill_split_goto2(goto2);\n                    Hole::One(pc)\n                }\n                (None, None) => unreachable!(\n                    \"at least one of the split \\\n                     holes must be filled\"\n                ),\n            },\n            Hole::Many(holes) => {\n                let mut new_holes = vec![];\n                for hole in holes {\n                    new_holes.push(self.fill_split(hole, goto1, goto2));\n                }\n                if new_holes.is_empty() {\n                    Hole::None\n                } else if new_holes.len() == 1 {\n                    new_holes.pop().unwrap()\n                } else {\n                    Hole::Many(new_holes)\n                }\n            }\n        }\n    }\n\n    fn push_compiled(&mut self, inst: Inst) {\n        self.insts.push(MaybeInst::Compiled(inst));\n    }\n\n    fn push_hole(&mut self, inst: InstHole) -> Hole {\n        let hole = self.insts.len();\n        self.insts.push(MaybeInst::Uncompiled(inst));\n        Hole::One(hole)\n    }\n\n    fn push_split_hole(&mut self) -> Hole {\n        let hole = self.insts.len();\n        self.insts.push(MaybeInst::Split);\n        Hole::One(hole)\n    }\n\n    fn pop_split_hole(&mut self) -> ResultOrEmpty {\n        self.insts.pop();\n        Ok(None)\n    }\n\n    fn check_size(&self) -> result::Result<(), Error> {\n        use std::mem::size_of;\n\n        if self.insts.len() * size_of::<Inst>() > self.size_limit {\n            Err(Error::CompiledTooBig(self.size_limit))\n        } else {\n            Ok(())\n        }\n    }\n}\n\n#[derive(Debug)]\nenum Hole {\n    None,\n    One(InstPtr),\n    Many(Vec<Hole>),\n}\n\nimpl Hole {\n    fn dup_one(self) -> (Self, Self) {\n        match self {\n            Hole::One(pc) => (Hole::One(pc), Hole::One(pc)),\n            Hole::None | Hole::Many(_) => {\n                unreachable!(\"must be called on single hole\")\n            }\n        }\n    }\n}\n\n#[derive(Clone, Debug)]\nenum MaybeInst {\n    Compiled(Inst),\n    Uncompiled(InstHole),\n    Split,\n    Split1(InstPtr),\n    Split2(InstPtr),\n}\n\nimpl MaybeInst {\n    fn fill(&mut self, goto: InstPtr) {\n        let maybeinst = match *self {\n            MaybeInst::Split => MaybeInst::Split1(goto),\n            MaybeInst::Uncompiled(ref inst) => {\n                MaybeInst::Compiled(inst.fill(goto))\n            }\n            MaybeInst::Split1(goto1) => {\n                MaybeInst::Compiled(Inst::Split(InstSplit {\n                    goto1: goto1,\n                    goto2: goto,\n                }))\n            }\n            MaybeInst::Split2(goto2) => {\n                MaybeInst::Compiled(Inst::Split(InstSplit {\n                    goto1: goto,\n                    goto2: goto2,\n                }))\n            }\n            _ => unreachable!(\n                \"not all instructions were compiled! \\\n                 found uncompiled instruction: {:?}\",\n                self\n            ),\n        };\n        *self = maybeinst;\n    }\n\n    fn fill_split(&mut self, goto1: InstPtr, goto2: InstPtr) {\n        let filled = match *self {\n            MaybeInst::Split => {\n                Inst::Split(InstSplit { goto1: goto1, goto2: goto2 })\n            }\n            _ => unreachable!(\n                \"must be called on Split instruction, \\\n                 instead it was called on: {:?}\",\n                self\n            ),\n        };\n        *self = MaybeInst::Compiled(filled);\n    }\n\n    fn half_fill_split_goto1(&mut self, goto1: InstPtr) {\n        let half_filled = match *self {\n            MaybeInst::Split => goto1,\n            _ => unreachable!(\n                \"must be called on Split instruction, \\\n                 instead it was called on: {:?}\",\n                self\n            ),\n        };\n        *self = MaybeInst::Split1(half_filled);\n    }\n\n    fn half_fill_split_goto2(&mut self, goto2: InstPtr) {\n        let half_filled = match *self {\n            MaybeInst::Split => goto2,\n            _ => unreachable!(\n                \"must be called on Split instruction, \\\n                 instead it was called on: {:?}\",\n                self\n            ),\n        };\n        *self = MaybeInst::Split2(half_filled);\n    }\n\n    fn unwrap(self) -> Inst {\n        match self {\n            MaybeInst::Compiled(inst) => inst,\n            _ => unreachable!(\n                \"must be called on a compiled instruction, \\\n                 instead it was called on: {:?}\",\n                self\n            ),\n        }\n    }\n}\n\n#[derive(Clone, Debug)]\nenum InstHole {\n    Save { slot: usize },\n    EmptyLook { look: EmptyLook },\n    Char { c: char },\n    Ranges { ranges: Vec<(char, char)> },\n    Bytes { start: u8, end: u8 },\n}\n\nimpl InstHole {\n    fn fill(&self, goto: InstPtr) -> Inst {\n        match *self {\n            InstHole::Save { slot } => {\n                Inst::Save(InstSave { goto: goto, slot: slot })\n            }\n            InstHole::EmptyLook { look } => {\n                Inst::EmptyLook(InstEmptyLook { goto: goto, look: look })\n            }\n            InstHole::Char { c } => Inst::Char(InstChar { goto: goto, c: c }),\n            InstHole::Ranges { ref ranges } => {\n                Inst::Ranges(InstRanges { goto: goto, ranges: ranges.clone() })\n            }\n            InstHole::Bytes { start, end } => {\n                Inst::Bytes(InstBytes { goto: goto, start: start, end: end })\n            }\n        }\n    }\n}\n\nstruct CompileClass<'a, 'b> {\n    c: &'a mut Compiler,\n    ranges: &'b [hir::ClassUnicodeRange],\n}\n\nimpl<'a, 'b> CompileClass<'a, 'b> {\n    fn compile(mut self) -> Result {\n        let mut holes = vec![];\n        let mut initial_entry = None;\n        let mut last_split = Hole::None;\n        let mut utf8_seqs = self.c.utf8_seqs.take().unwrap();\n        self.c.suffix_cache.clear();\n\n        for (i, range) in self.ranges.iter().enumerate() {\n            let is_last_range = i + 1 == self.ranges.len();\n            utf8_seqs.reset(range.start(), range.end());\n            let mut it = (&mut utf8_seqs).peekable();\n            loop {\n                let utf8_seq = match it.next() {\n                    None => break,\n                    Some(utf8_seq) => utf8_seq,\n                };\n                if is_last_range && it.peek().is_none() {\n                    let Patch { hole, entry } = self.c_utf8_seq(&utf8_seq)?;\n                    holes.push(hole);\n                    self.c.fill(last_split, entry);\n                    last_split = Hole::None;\n                    if initial_entry.is_none() {\n                        initial_entry = Some(entry);\n                    }\n                } else {\n                    if initial_entry.is_none() {\n                        initial_entry = Some(self.c.insts.len());\n                    }\n                    self.c.fill_to_next(last_split);\n                    last_split = self.c.push_split_hole();\n                    let Patch { hole, entry } = self.c_utf8_seq(&utf8_seq)?;\n                    holes.push(hole);\n                    last_split =\n                        self.c.fill_split(last_split, Some(entry), None);\n                }\n            }\n        }\n        self.c.utf8_seqs = Some(utf8_seqs);\n        Ok(Patch { hole: Hole::Many(holes), entry: initial_entry.unwrap() })\n    }\n\n    fn c_utf8_seq(&mut self, seq: &Utf8Sequence) -> Result {\n        if self.c.compiled.is_reverse {\n            self.c_utf8_seq_(seq)\n        } else {\n            self.c_utf8_seq_(seq.into_iter().rev())\n        }\n    }\n\n    fn c_utf8_seq_<'r, I>(&mut self, seq: I) -> Result\n    where\n        I: IntoIterator<Item = &'r Utf8Range>,\n    {\n        // The initial instruction for each UTF-8 sequence should be the same.\n        let mut from_inst = ::std::usize::MAX;\n        let mut last_hole = Hole::None;\n        for byte_range in seq {\n            let key = SuffixCacheKey {\n                from_inst: from_inst,\n                start: byte_range.start,\n                end: byte_range.end,\n            };\n            {\n                let pc = self.c.insts.len();\n                if let Some(cached_pc) = self.c.suffix_cache.get(key, pc) {\n                    from_inst = cached_pc;\n                    continue;\n                }\n            }\n            self.c.byte_classes.set_range(byte_range.start, byte_range.end);\n            if from_inst == ::std::usize::MAX {\n                last_hole = self.c.push_hole(InstHole::Bytes {\n                    start: byte_range.start,\n                    end: byte_range.end,\n                });\n            } else {\n                self.c.push_compiled(Inst::Bytes(InstBytes {\n                    goto: from_inst,\n                    start: byte_range.start,\n                    end: byte_range.end,\n                }));\n            }\n            from_inst = self.c.insts.len().checked_sub(1).unwrap();\n            debug_assert!(from_inst < ::std::usize::MAX);\n        }\n        debug_assert!(from_inst < ::std::usize::MAX);\n        Ok(Patch { hole: last_hole, entry: from_inst })\n    }\n}\n\n/// `SuffixCache` is a simple bounded hash map for caching suffix entries in\n/// UTF-8 automata. For example, consider the Unicode range \\u{0}-\\u{FFFF}.\n/// The set of byte ranges looks like this:\n///\n/// [0-7F]\n/// [C2-DF][80-BF]\n/// [E0][A0-BF][80-BF]\n/// [E1-EC][80-BF][80-BF]\n/// [ED][80-9F][80-BF]\n/// [EE-EF][80-BF][80-BF]\n///\n/// Each line above translates to one alternate in the compiled regex program.\n/// However, all but one of the alternates end in the same suffix, which is\n/// a waste of an instruction. The suffix cache facilitates reusing them across\n/// alternates.\n///\n/// Note that a HashMap could be trivially used for this, but we don't need its\n/// overhead. Some small bounded space (LRU style) is more than enough.\n///\n/// This uses similar idea to [`SparseSet`](../sparse/struct.SparseSet.html),\n/// except it uses hashes as original indices and then compares full keys for\n/// validation against `dense` array.\nstruct SuffixCache {\n    sparse: Box<[usize]>,\n    dense: Vec<SuffixCacheEntry>,\n}\n\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq)]\nstruct SuffixCacheEntry {\n    key: SuffixCacheKey,\n    pc: InstPtr,\n}\n\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq)]\nstruct SuffixCacheKey {\n    from_inst: InstPtr,\n    start: u8,\n    end: u8,\n}\n\nimpl SuffixCache {\n    fn new(size: usize) -> Self {\n        SuffixCache {\n            sparse: vec![0usize; size].into(),\n            dense: Vec::with_capacity(size),\n        }\n    }\n\n    fn get(&mut self, key: SuffixCacheKey, pc: InstPtr) -> Option<InstPtr> {\n        let hash = self.hash(&key);\n        let pos = &mut self.sparse[hash];\n        if let Some(entry) = self.dense.get(*pos) {\n            if entry.key == key {\n                return Some(entry.pc);\n            }\n        }\n        *pos = self.dense.len();\n        self.dense.push(SuffixCacheEntry { key: key, pc: pc });\n        None\n    }\n\n    fn clear(&mut self) {\n        self.dense.clear();\n    }\n\n    fn hash(&self, suffix: &SuffixCacheKey) -> usize {\n        // Basic FNV-1a hash as described:\n        // https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n        const FNV_PRIME: u64 = 1099511628211;\n        let mut h = 14695981039346656037;\n        h = (h ^ (suffix.from_inst as u64)).wrapping_mul(FNV_PRIME);\n        h = (h ^ (suffix.start as u64)).wrapping_mul(FNV_PRIME);\n        h = (h ^ (suffix.end as u64)).wrapping_mul(FNV_PRIME);\n        (h as usize) % self.sparse.len()\n    }\n}\n\nstruct ByteClassSet([bool; 256]);\n\nimpl ByteClassSet {\n    fn new() -> Self {\n        ByteClassSet([false; 256])\n    }\n\n    fn set_range(&mut self, start: u8, end: u8) {\n        debug_assert!(start <= end);\n        if start > 0 {\n            self.0[start as usize - 1] = true;\n        }\n        self.0[end as usize] = true;\n    }\n\n    fn set_word_boundary(&mut self) {\n        // We need to mark all ranges of bytes whose pairs result in\n        // evaluating \\b differently.\n        let iswb = is_word_byte;\n        let mut b1: u16 = 0;\n        let mut b2: u16;\n        while b1 <= 255 {\n            b2 = b1 + 1;\n            while b2 <= 255 && iswb(b1 as u8) == iswb(b2 as u8) {\n                b2 += 1;\n            }\n            self.set_range(b1 as u8, (b2 - 1) as u8);\n            b1 = b2;\n        }\n    }\n\n    fn byte_classes(&self) -> Vec<u8> {\n        // N.B. If you're debugging the DFA, it's useful to simply return\n        // `(0..256).collect()`, which effectively removes the byte classes\n        // and makes the transitions easier to read.\n        // (0usize..256).map(|x| x as u8).collect()\n        let mut byte_classes = vec![0; 256];\n        let mut class = 0u8;\n        let mut i = 0;\n        loop {\n            byte_classes[i] = class as u8;\n            if i >= 255 {\n                break;\n            }\n            if self.0[i] {\n                class = class.checked_add(1).unwrap();\n            }\n            i += 1;\n        }\n        byte_classes\n    }\n}\n\nfn u32_to_usize(n: u32) -> usize {\n    // In case usize is less than 32 bits, we need to guard against overflow.\n    // On most platforms this compiles to nothing.\n    // TODO Use `std::convert::TryFrom` once it's stable.\n    if (n as u64) > (::std::usize::MAX as u64) {\n        panic!(\"BUG: {} is too big to be pointer sized\", n)\n    }\n    n as usize\n}\n\n#[cfg(test)]\nmod tests {\n    use super::ByteClassSet;\n\n    #[test]\n    fn byte_classes() {\n        let mut set = ByteClassSet::new();\n        set.set_range(b'a', b'z');\n        let classes = set.byte_classes();\n        assert_eq!(classes[0], 0);\n        assert_eq!(classes[1], 0);\n        assert_eq!(classes[2], 0);\n        assert_eq!(classes[b'a' as usize - 1], 0);\n        assert_eq!(classes[b'a' as usize], 1);\n        assert_eq!(classes[b'm' as usize], 1);\n        assert_eq!(classes[b'z' as usize], 1);\n        assert_eq!(classes[b'z' as usize + 1], 2);\n        assert_eq!(classes[254], 2);\n        assert_eq!(classes[255], 2);\n\n        let mut set = ByteClassSet::new();\n        set.set_range(0, 2);\n        set.set_range(4, 6);\n        let classes = set.byte_classes();\n        assert_eq!(classes[0], 0);\n        assert_eq!(classes[1], 0);\n        assert_eq!(classes[2], 0);\n        assert_eq!(classes[3], 1);\n        assert_eq!(classes[4], 2);\n        assert_eq!(classes[5], 2);\n        assert_eq!(classes[6], 2);\n        assert_eq!(classes[7], 3);\n        assert_eq!(classes[255], 3);\n    }\n\n    #[test]\n    fn full_byte_classes() {\n        let mut set = ByteClassSet::new();\n        for i in 0..256u16 {\n            set.set_range(i as u8, i as u8);\n        }\n        assert_eq!(set.byte_classes().len(), 256);\n    }\n}\n","traces":[{"line":43,"address":[5512544,5512587],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":45,"address":[5512562],"length":1,"stats":{"Line":14},"fn_name":null},{"line":46,"address":[5512607],"length":1,"stats":{"Line":14},"fn_name":null},{"line":47,"address":[5512622],"length":1,"stats":{"Line":14},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[5512654],"length":1,"stats":{"Line":14},"fn_name":null},{"line":51,"address":[5512688],"length":1,"stats":{"Line":14},"fn_name":null},{"line":52,"address":[5512753],"length":1,"stats":{"Line":14},"fn_name":null},{"line":59,"address":[5513136],"length":1,"stats":{"Line":16},"fn_name":"size_limit"},{"line":60,"address":[5513148],"length":1,"stats":{"Line":16},"fn_name":null},{"line":61,"address":[5513155],"length":1,"stats":{"Line":16},"fn_name":null},{"line":75,"address":[5513184],"length":1,"stats":{"Line":16},"fn_name":"bytes"},{"line":76,"address":[5513200],"length":1,"stats":{"Line":16},"fn_name":null},{"line":77,"address":[5513209],"length":1,"stats":{"Line":16},"fn_name":null},{"line":84,"address":[5513248],"length":1,"stats":{"Line":16},"fn_name":"only_utf8"},{"line":85,"address":[5513264],"length":1,"stats":{"Line":16},"fn_name":null},{"line":86,"address":[5513273],"length":1,"stats":{"Line":16},"fn_name":null},{"line":96,"address":[5513312],"length":1,"stats":{"Line":16},"fn_name":"dfa"},{"line":97,"address":[5513328],"length":1,"stats":{"Line":16},"fn_name":null},{"line":98,"address":[5513337],"length":1,"stats":{"Line":16},"fn_name":null},{"line":103,"address":[5513376],"length":1,"stats":{"Line":9},"fn_name":"reverse"},{"line":104,"address":[5513392],"length":1,"stats":{"Line":9},"fn_name":null},{"line":105,"address":[5513401],"length":1,"stats":{"Line":9},"fn_name":null},{"line":113,"address":[5513440,5514070],"length":1,"stats":{"Line":16},"fn_name":"compile"},{"line":114,"address":[5513583,5513474],"length":1,"stats":{"Line":16},"fn_name":null},{"line":115,"address":[5513557,5513626],"length":1,"stats":{"Line":32},"fn_name":null},{"line":116,"address":[5513859,5513633],"length":1,"stats":{"Line":30},"fn_name":null},{"line":117,"address":[5514038,5513749,5514104],"length":1,"stats":{"Line":16},"fn_name":null},{"line":119,"address":[5513670],"length":1,"stats":{"Line":12},"fn_name":null},{"line":123,"address":[5514160,5514367],"length":1,"stats":{"Line":16},"fn_name":"compile_one"},{"line":128,"address":[5514186],"length":1,"stats":{"Line":16},"fn_name":null},{"line":129,"address":[5514405,5514329],"length":1,"stats":{"Line":32},"fn_name":null},{"line":130,"address":[5514418],"length":1,"stats":{"Line":16},"fn_name":null},{"line":131,"address":[5516254,5514455],"length":1,"stats":{"Line":24},"fn_name":null},{"line":132,"address":[5514497,5516158,5514780],"length":1,"stats":{"Line":8},"fn_name":null},{"line":133,"address":[5516237],"length":1,"stats":{"Line":8},"fn_name":null},{"line":135,"address":[5514871,5516259],"length":1,"stats":{"Line":16},"fn_name":null},{"line":136,"address":[5514982,5515266,5516375],"length":1,"stats":{"Line":33},"fn_name":null},{"line":137,"address":[5515391,5515365,5515331,5515455],"length":1,"stats":{"Line":35},"fn_name":null},{"line":138,"address":[5515393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":140,"address":[5515371],"length":1,"stats":{"Line":9},"fn_name":null},{"line":142,"address":[5515457],"length":1,"stats":{"Line":9},"fn_name":null},{"line":143,"address":[5515522,5516463],"length":1,"stats":{"Line":9},"fn_name":null},{"line":144,"address":[5516587],"length":1,"stats":{"Line":9},"fn_name":null},{"line":145,"address":[5515651],"length":1,"stats":{"Line":9},"fn_name":null},{"line":148,"address":[5516880,5517068],"length":1,"stats":{"Line":12},"fn_name":"compile_many"},{"line":152,"address":[5517091,5517149,5516914],"length":1,"stats":{"Line":24},"fn_name":null},{"line":154,"address":[5517243],"length":1,"stats":{"Line":14},"fn_name":null},{"line":155,"address":[5517106,5517190],"length":1,"stats":{"Line":49},"fn_name":null},{"line":156,"address":[5517363],"length":1,"stats":{"Line":14},"fn_name":null},{"line":157,"address":[5517259],"length":1,"stats":{"Line":42},"fn_name":null},{"line":158,"address":[5517379],"length":1,"stats":{"Line":14},"fn_name":null},{"line":159,"address":[5520937,5517443,5517511],"length":1,"stats":{"Line":42},"fn_name":null},{"line":160,"address":[5520829,5517821,5517532],"length":1,"stats":{"Line":14},"fn_name":null},{"line":161,"address":[5520914],"length":1,"stats":{"Line":14},"fn_name":null},{"line":163,"address":[5517500],"length":1,"stats":{"Line":14},"fn_name":null},{"line":165,"address":[5517833],"length":1,"stats":{"Line":14},"fn_name":null},{"line":167,"address":[5517896],"length":1,"stats":{"Line":14},"fn_name":null},{"line":168,"address":[5518345,5521292,5517916,5519436],"length":1,"stats":{"Line":28},"fn_name":null},{"line":169,"address":[5518411],"length":1,"stats":{"Line":14},"fn_name":null},{"line":170,"address":[5518500],"length":1,"stats":{"Line":14},"fn_name":null},{"line":171,"address":[5518889,5518876,5518540,5521059],"length":1,"stats":{"Line":14},"fn_name":null},{"line":172,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[5518997],"length":1,"stats":{"Line":14},"fn_name":null},{"line":174,"address":[5519092],"length":1,"stats":{"Line":14},"fn_name":null},{"line":175,"address":[5519159],"length":1,"stats":{"Line":14},"fn_name":null},{"line":176,"address":[5519202],"length":1,"stats":{"Line":14},"fn_name":null},{"line":178,"address":[5521402,5519446,5518310],"length":1,"stats":{"Line":28},"fn_name":null},{"line":179,"address":[5519490,5521435,5521123],"length":1,"stats":{"Line":14},"fn_name":null},{"line":180,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[5519969],"length":1,"stats":{"Line":14},"fn_name":null},{"line":182,"address":[5520054],"length":1,"stats":{"Line":14},"fn_name":null},{"line":183,"address":[5520125],"length":1,"stats":{"Line":14},"fn_name":null},{"line":184,"address":[5520192],"length":1,"stats":{"Line":14},"fn_name":null},{"line":185,"address":[5520235],"length":1,"stats":{"Line":14},"fn_name":null},{"line":188,"address":[5521644,5521536],"length":1,"stats":{"Line":14},"fn_name":"compile_finish"},{"line":189,"address":[5521871,5521701],"length":1,"stats":{"Line":14},"fn_name":null},{"line":190,"address":[5521554,5521672],"length":1,"stats":{"Line":56},"fn_name":null},{"line":191,"address":[5521725,5521943],"length":1,"stats":{"Line":28},"fn_name":null},{"line":192,"address":[5522061,5521753],"length":1,"stats":{"Line":28},"fn_name":null},{"line":193,"address":[5522216],"length":1,"stats":{"Line":14},"fn_name":null},{"line":251,"address":[5522480,5522564],"length":1,"stats":{"Line":16},"fn_name":"c"},{"line":255,"address":[5522506,5522579,5522767],"length":1,"stats":{"Line":40},"fn_name":null},{"line":256,"address":[5524772,5524149,5523111,5522873,5524659,5523157,5524719,5524825,5524291,5524433,5525560,5524511,5523286,5522784,5525745,5524594,5523381,5524263,5525817,5524402],"length":1,"stats":{"Line":166},"fn_name":null},{"line":257,"address":[5522806,5523046],"length":1,"stats":{"Line":26},"fn_name":null},{"line":258,"address":[5523124,5522851],"length":1,"stats":{"Line":18},"fn_name":null},{"line":259,"address":[5523170],"length":1,"stats":{"Line":3},"fn_name":null},{"line":260,"address":[5523256,5523188],"length":1,"stats":{"Line":3},"fn_name":null},{"line":261,"address":[5523246],"length":1,"stats":{"Line":3},"fn_name":null},{"line":263,"address":[5522883,5523299],"length":1,"stats":{"Line":16},"fn_name":null},{"line":264,"address":[5523394],"length":1,"stats":{"Line":8},"fn_name":null},{"line":265,"address":[5523548,5524147,5523422],"length":1,"stats":{"Line":24},"fn_name":null},{"line":266,"address":[5523489],"length":1,"stats":{"Line":8},"fn_name":null},{"line":268,"address":[5523560,5523582,5523466],"length":1,"stats":{"Line":16},"fn_name":null},{"line":269,"address":[5523566],"length":1,"stats":{"Line":8},"fn_name":null},{"line":270,"address":[5524089,5523847,5523717,5523612],"length":1,"stats":{"Line":24},"fn_name":null},{"line":271,"address":[5523881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":272,"address":[5524012],"length":1,"stats":{"Line":8},"fn_name":null},{"line":274,"address":[5523809,5524126],"length":1,"stats":{"Line":16},"fn_name":null},{"line":277,"address":[5524162,5522911],"length":1,"stats":{"Line":17},"fn_name":null},{"line":278,"address":[5524179],"length":1,"stats":{"Line":8},"fn_name":null},{"line":279,"address":[5524253],"length":1,"stats":{"Line":8},"fn_name":null},{"line":281,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":282,"address":[5524212],"length":1,"stats":{"Line":8},"fn_name":null},{"line":283,"address":[5524286],"length":1,"stats":{"Line":8},"fn_name":null},{"line":285,"address":[5524304],"length":1,"stats":{"Line":8},"fn_name":null},{"line":286,"address":[5524321],"length":1,"stats":{"Line":8},"fn_name":null},{"line":287,"address":[5524397],"length":1,"stats":{"Line":8},"fn_name":null},{"line":289,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":290,"address":[5524354],"length":1,"stats":{"Line":8},"fn_name":null},{"line":291,"address":[5524423],"length":1,"stats":{"Line":8},"fn_name":null},{"line":293,"address":[5524446],"length":1,"stats":{"Line":9},"fn_name":null},{"line":294,"address":[5524471],"length":1,"stats":{"Line":9},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[5524499],"length":1,"stats":{"Line":9},"fn_name":null},{"line":299,"address":[5524529],"length":1,"stats":{"Line":8},"fn_name":null},{"line":300,"address":[5524554],"length":1,"stats":{"Line":8},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[5524582],"length":1,"stats":{"Line":8},"fn_name":null},{"line":305,"address":[5522957],"length":1,"stats":{"Line":8},"fn_name":null},{"line":306,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":307,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":308,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[5524612],"length":1,"stats":{"Line":8},"fn_name":null},{"line":314,"address":[5524619],"length":1,"stats":{"Line":8},"fn_name":null},{"line":315,"address":[5524649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":317,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":318,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":319,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":325,"address":[5524672],"length":1,"stats":{"Line":8},"fn_name":null},{"line":326,"address":[5524679],"length":1,"stats":{"Line":8},"fn_name":null},{"line":327,"address":[5524709],"length":1,"stats":{"Line":8},"fn_name":null},{"line":329,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":330,"address":[5524732],"length":1,"stats":{"Line":8},"fn_name":null},{"line":331,"address":[5524762],"length":1,"stats":{"Line":8},"fn_name":null},{"line":333,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":334,"address":[5524785],"length":1,"stats":{"Line":3},"fn_name":null},{"line":335,"address":[5524815],"length":1,"stats":{"Line":3},"fn_name":null},{"line":337,"address":[5524838,5525032,5525230,5525558,5524997],"length":1,"stats":{"Line":39},"fn_name":null},{"line":338,"address":[5524858,5525007],"length":1,"stats":{"Line":18},"fn_name":null},{"line":339,"address":[5525045],"length":1,"stats":{"Line":8},"fn_name":null},{"line":340,"address":[5525055,5525152],"length":1,"stats":{"Line":16},"fn_name":null},{"line":341,"address":[5525118],"length":1,"stats":{"Line":8},"fn_name":null},{"line":343,"address":[5525935,5525158],"length":1,"stats":{"Line":8},"fn_name":null},{"line":345,"address":[5524916],"length":1,"stats":{"Line":8},"fn_name":null},{"line":346,"address":[5525248,5524940],"length":1,"stats":{"Line":16},"fn_name":null},{"line":347,"address":[5525258],"length":1,"stats":{"Line":8},"fn_name":null},{"line":348,"address":[5525295],"length":1,"stats":{"Line":8},"fn_name":null},{"line":349,"address":[5525393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":351,"address":[5525486,5525905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":354,"address":[5525573],"length":1,"stats":{"Line":9},"fn_name":null},{"line":355,"address":[5525741,5525595],"length":1,"stats":{"Line":18},"fn_name":null},{"line":356,"address":[5525642],"length":1,"stats":{"Line":9},"fn_name":null},{"line":358,"address":[5525630],"length":1,"stats":{"Line":9},"fn_name":null},{"line":361,"address":[5525755],"length":1,"stats":{"Line":8},"fn_name":null},{"line":362,"address":[5523003],"length":1,"stats":{"Line":8},"fn_name":null},{"line":366,"address":[5526132,5526000],"length":1,"stats":{"Line":16},"fn_name":"c_capture"},{"line":367,"address":[5526201,5526034],"length":1,"stats":{"Line":25},"fn_name":null},{"line":371,"address":[5526196],"length":1,"stats":{"Line":9},"fn_name":null},{"line":373,"address":[5526152],"length":1,"stats":{"Line":16},"fn_name":null},{"line":374,"address":[5526211],"length":1,"stats":{"Line":16},"fn_name":null},{"line":375,"address":[5527177,5526616,5526270,5526567],"length":1,"stats":{"Line":32},"fn_name":null},{"line":376,"address":[5526673],"length":1,"stats":{"Line":14},"fn_name":null},{"line":377,"address":[5526754],"length":1,"stats":{"Line":14},"fn_name":null},{"line":378,"address":[5526819,5527318],"length":1,"stats":{"Line":14},"fn_name":null},{"line":379,"address":[5526891],"length":1,"stats":{"Line":14},"fn_name":null},{"line":383,"address":[5527360,5527410],"length":1,"stats":{"Line":8},"fn_name":"c_dotstar"},{"line":384,"address":[5527429,5527977,5528462,5527378],"length":1,"stats":{"Line":32},"fn_name":null},{"line":385,"address":[5527544,5527680,5527706],"length":1,"stats":{"Line":24},"fn_name":null},{"line":386,"address":[5527467],"length":1,"stats":{"Line":8},"fn_name":null},{"line":387,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[5527478],"length":1,"stats":{"Line":8},"fn_name":null},{"line":390,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":392,"address":[5528165,5528194,5528029],"length":1,"stats":{"Line":24},"fn_name":null},{"line":393,"address":[5527437],"length":1,"stats":{"Line":8},"fn_name":null},{"line":394,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":395,"address":[5527448],"length":1,"stats":{"Line":8},"fn_name":null},{"line":397,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":401,"address":[5528608,5528670],"length":1,"stats":{"Line":9},"fn_name":"c_char"},{"line":402,"address":[5528689,5529234,5528630],"length":1,"stats":{"Line":27},"fn_name":null},{"line":403,"address":[5528745,5529176,5529232],"length":1,"stats":{"Line":26},"fn_name":null},{"line":404,"address":[5528796],"length":1,"stats":{"Line":9},"fn_name":null},{"line":405,"address":[5528807],"length":1,"stats":{"Line":9},"fn_name":null},{"line":406,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[5528869],"length":1,"stats":{"Line":9},"fn_name":null},{"line":408,"address":[5529594,5528894],"length":1,"stats":{"Line":9},"fn_name":null},{"line":410,"address":[5529182,5528769],"length":1,"stats":{"Line":16},"fn_name":null},{"line":413,"address":[5528695],"length":1,"stats":{"Line":9},"fn_name":null},{"line":414,"address":[5529239,5529646,5529676],"length":1,"stats":{"Line":9},"fn_name":null},{"line":418,"address":[5529680,5529782],"length":1,"stats":{"Line":8},"fn_name":"c_class"},{"line":419,"address":[5529837,5529714,5529804],"length":1,"stats":{"Line":16},"fn_name":null},{"line":420,"address":[5530213,5529874,5529820],"length":1,"stats":{"Line":33},"fn_name":null},{"line":421,"address":[5529928,5530218,5530035,5530339],"length":1,"stats":{"Line":20},"fn_name":null},{"line":423,"address":[5530361,5529896],"length":1,"stats":{"Line":52},"fn_name":null},{"line":424,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":425,"address":[5530415,5530765],"length":1,"stats":{"Line":19},"fn_name":null},{"line":426,"address":[5530681],"length":1,"stats":{"Line":6},"fn_name":null},{"line":428,"address":[5530570],"length":1,"stats":{"Line":13},"fn_name":null},{"line":430,"address":[5530769,5531189],"length":1,"stats":{"Line":13},"fn_name":null},{"line":434,"address":[5531232],"length":1,"stats":{"Line":3},"fn_name":"c_byte"},{"line":435,"address":[5531248],"length":1,"stats":{"Line":3},"fn_name":null},{"line":438,"address":[5531344,5531454],"length":1,"stats":{"Line":8},"fn_name":"c_class_bytes"},{"line":442,"address":[5531524,5531378,5531476],"length":1,"stats":{"Line":16},"fn_name":null},{"line":444,"address":[5531492],"length":1,"stats":{"Line":8},"fn_name":null},{"line":445,"address":[5531554],"length":1,"stats":{"Line":8},"fn_name":null},{"line":446,"address":[5531567],"length":1,"stats":{"Line":8},"fn_name":null},{"line":447,"address":[5531587,5531676,5532536,5531925,5533357],"length":1,"stats":{"Line":24},"fn_name":null},{"line":448,"address":[5531959],"length":1,"stats":{"Line":8},"fn_name":null},{"line":449,"address":[5532043],"length":1,"stats":{"Line":8},"fn_name":null},{"line":450,"address":[5532066],"length":1,"stats":{"Line":8},"fn_name":null},{"line":451,"address":[5532108],"length":1,"stats":{"Line":8},"fn_name":null},{"line":452,"address":[5532230],"length":1,"stats":{"Line":8},"fn_name":null},{"line":453,"address":[5532186],"length":1,"stats":{"Line":8},"fn_name":null},{"line":454,"address":[5532206],"length":1,"stats":{"Line":8},"fn_name":null},{"line":456,"address":[5532310],"length":1,"stats":{"Line":8},"fn_name":null},{"line":458,"address":[5531901,5532546],"length":1,"stats":{"Line":16},"fn_name":null},{"line":459,"address":[5533406,5532554],"length":1,"stats":{"Line":8},"fn_name":null},{"line":460,"address":[5532676],"length":1,"stats":{"Line":8},"fn_name":null},{"line":461,"address":[5532885],"length":1,"stats":{"Line":8},"fn_name":null},{"line":462,"address":[5532768],"length":1,"stats":{"Line":8},"fn_name":null},{"line":464,"address":[5532892],"length":1,"stats":{"Line":8},"fn_name":null},{"line":465,"address":[5532960],"length":1,"stats":{"Line":8},"fn_name":null},{"line":468,"address":[5533472,5533541],"length":1,"stats":{"Line":9},"fn_name":"c_empty_look"},{"line":469,"address":[5533497],"length":1,"stats":{"Line":9},"fn_name":null},{"line":470,"address":[5533556,5533849],"length":1,"stats":{"Line":9},"fn_name":null},{"line":473,"address":[5927254,5929328,5929423,5931504,5931611,5927152],"length":1,"stats":{"Line":26},"fn_name":"c_concat<core::iter::adapters::Take<core::iter::sources::Repeat<&regex_syntax::hir::Hir>>>"},{"line":477,"address":[5931626,5929438,5927186,5929354,5927269,5931538],"length":1,"stats":{"Line":52},"fn_name":null},{"line":478,"address":[5933453,5927871,5931265,5932232,5929084,5930044],"length":1,"stats":{"Line":42},"fn_name":null},{"line":479,"address":[5931634,5929545,5929446,5927372,5931733,5927285],"length":1,"stats":{"Line":26},"fn_name":null},{"line":480,"address":[5931735,5929483,5929621,5929547,5931671,5927310,5931809,5927448,5927374],"length":1,"stats":{"Line":74},"fn_name":null},{"line":481,"address":[5927333,5931694,5929506],"length":1,"stats":{"Line":26},"fn_name":null},{"line":482,"address":[5927515,5929535,5931840,5929948,5932136,5931723,5927775,5927479,5929652,5927362,5931876,5929688],"length":1,"stats":{"Line":104},"fn_name":null},{"line":483,"address":[5927823,5929996,5932184],"length":1,"stats":{"Line":26},"fn_name":null},{"line":488,"address":[5932362,5928045,5932288,5928083,5933489,5930174,5930226,5927997,5932452,5927927,5930100,5929120,5930264,5931301,5932414],"length":1,"stats":{"Line":104},"fn_name":null},{"line":489,"address":[5928130,5928479,5930660,5932561,5932499,5932848,5928192,5930311,5930373],"length":1,"stats":{"Line":60},"fn_name":null},{"line":490,"address":[5932914,5928545,5930726],"length":1,"stats":{"Line":26},"fn_name":null},{"line":491,"address":[5928613,5930794,5932982],"length":1,"stats":{"Line":26},"fn_name":null},{"line":494,"address":[5928774,5930955,5933143],"length":1,"stats":{"Line":26},"fn_name":null},{"line":497,"address":[5533888,5534040],"length":1,"stats":{"Line":8},"fn_name":"c_alternate"},{"line":498,"address":[5533922,5534070,5534118],"length":1,"stats":{"Line":16},"fn_name":null},{"line":499,"address":[5533986,5534063],"length":1,"stats":{"Line":16},"fn_name":null},{"line":504,"address":[5534086],"length":1,"stats":{"Line":8},"fn_name":null},{"line":508,"address":[5534148],"length":1,"stats":{"Line":8},"fn_name":null},{"line":512,"address":[5534169],"length":1,"stats":{"Line":8},"fn_name":null},{"line":513,"address":[5537982,5534291,5534229,5537438,5534579],"length":1,"stats":{"Line":24},"fn_name":null},{"line":514,"address":[5534613,5534892],"length":1,"stats":{"Line":16},"fn_name":null},{"line":515,"address":[5534702],"length":1,"stats":{"Line":8},"fn_name":null},{"line":516,"address":[5534736],"length":1,"stats":{"Line":8},"fn_name":null},{"line":518,"address":[5534628],"length":1,"stats":{"Line":8},"fn_name":null},{"line":520,"address":[5534912],"length":1,"stats":{"Line":8},"fn_name":null},{"line":521,"address":[5535864,5535056,5534948,5535004,5535362,5536231,5535443,5535316,5535375],"length":1,"stats":{"Line":48},"fn_name":null},{"line":522,"address":[5535499],"length":1,"stats":{"Line":8},"fn_name":null},{"line":523,"address":[5535559,5535752],"length":1,"stats":{"Line":16},"fn_name":null},{"line":525,"address":[5535869,5535377],"length":1,"stats":{"Line":16},"fn_name":null},{"line":526,"address":[5535949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":527,"address":[5536031],"length":1,"stats":{"Line":8},"fn_name":null},{"line":530,"address":[5534544,5536459,5536715,5536786,5536312,5538114,5537148],"length":1,"stats":{"Line":40},"fn_name":null},{"line":531,"address":[5536842],"length":1,"stats":{"Line":8},"fn_name":null},{"line":532,"address":[5536902,5537144],"length":1,"stats":{"Line":16},"fn_name":null},{"line":533,"address":[5536983],"length":1,"stats":{"Line":8},"fn_name":null},{"line":535,"address":[5536912],"length":1,"stats":{"Line":8},"fn_name":null},{"line":541,"address":[5536720],"length":1,"stats":{"Line":8},"fn_name":null},{"line":543,"address":[5537570],"length":1,"stats":{"Line":8},"fn_name":null},{"line":546,"address":[5538256],"length":1,"stats":{"Line":8},"fn_name":"c_repeat"},{"line":548,"address":[5538497,5538568,5538753,5538683,5538605,5538531],"length":1,"stats":{"Line":45},"fn_name":null},{"line":549,"address":[5538275,5538504],"length":1,"stats":{"Line":16},"fn_name":null},{"line":550,"address":[5538541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":551,"address":[5538578],"length":1,"stats":{"Line":8},"fn_name":null},{"line":552,"address":[5538352,5538615],"length":1,"stats":{"Line":16},"fn_name":null},{"line":553,"address":[5538622],"length":1,"stats":{"Line":8},"fn_name":null},{"line":555,"address":[5538690],"length":1,"stats":{"Line":8},"fn_name":null},{"line":556,"address":[5538697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":558,"address":[5538395],"length":1,"stats":{"Line":8},"fn_name":null},{"line":559,"address":[5538409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":564,"address":[5538898,5538784],"length":1,"stats":{"Line":8},"fn_name":"c_repeat_zero_or_one"},{"line":569,"address":[5538825],"length":1,"stats":{"Line":8},"fn_name":null},{"line":570,"address":[5538913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":571,"address":[5539288,5538954,5539253,5539310,5539009,5539138,5539389],"length":1,"stats":{"Line":32},"fn_name":null},{"line":572,"address":[5539312,5539105],"length":1,"stats":{"Line":16},"fn_name":null},{"line":573,"address":[5539300,5540322],"length":1,"stats":{"Line":16},"fn_name":null},{"line":575,"address":[5539482,5539831],"length":1,"stats":{"Line":16},"fn_name":null},{"line":576,"address":[5539694],"length":1,"stats":{"Line":8},"fn_name":null},{"line":578,"address":[5539554],"length":1,"stats":{"Line":0},"fn_name":null},{"line":580,"address":[5539845],"length":1,"stats":{"Line":8},"fn_name":null},{"line":581,"address":[5539992],"length":1,"stats":{"Line":8},"fn_name":null},{"line":584,"address":[5540546,5540432],"length":1,"stats":{"Line":8},"fn_name":"c_repeat_zero_or_more"},{"line":589,"address":[5540473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":590,"address":[5540561],"length":1,"stats":{"Line":8},"fn_name":null},{"line":591,"address":[5540901,5540958,5541056,5540936,5540786,5540602,5540657],"length":1,"stats":{"Line":32},"fn_name":null},{"line":592,"address":[5540960,5540753],"length":1,"stats":{"Line":16},"fn_name":null},{"line":593,"address":[5540948,5541812],"length":1,"stats":{"Line":16},"fn_name":null},{"line":596,"address":[5541109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":597,"address":[5541235,5541522],"length":1,"stats":{"Line":17},"fn_name":null},{"line":598,"address":[5541385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":600,"address":[5541245],"length":1,"stats":{"Line":8},"fn_name":null},{"line":602,"address":[5541526],"length":1,"stats":{"Line":8},"fn_name":null},{"line":605,"address":[5542006,5541920],"length":1,"stats":{"Line":8},"fn_name":"c_repeat_one_or_more"},{"line":610,"address":[5542308,5542395,5542021,5542487,5541961,5542193,5542064],"length":1,"stats":{"Line":47},"fn_name":null},{"line":611,"address":[5542397,5542160],"length":1,"stats":{"Line":26},"fn_name":null},{"line":612,"address":[5542317,5542590],"length":1,"stats":{"Line":16},"fn_name":null},{"line":614,"address":[5542531],"length":1,"stats":{"Line":13},"fn_name":null},{"line":615,"address":[5542627],"length":1,"stats":{"Line":13},"fn_name":null},{"line":617,"address":[5542638,5542921],"length":1,"stats":{"Line":26},"fn_name":null},{"line":618,"address":[5542786],"length":1,"stats":{"Line":13},"fn_name":null},{"line":620,"address":[5542648],"length":1,"stats":{"Line":8},"fn_name":null},{"line":622,"address":[5542925],"length":1,"stats":{"Line":13},"fn_name":null},{"line":625,"address":[5543232,5543352],"length":1,"stats":{"Line":8},"fn_name":"c_repeat_range_min_or_more"},{"line":631,"address":[5543281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":635,"address":[5543605,5543407,5543478,5543745],"length":1,"stats":{"Line":24},"fn_name":null},{"line":636,"address":[5543607,5543456,5543720,5543743,5543372],"length":1,"stats":{"Line":16},"fn_name":null},{"line":637,"address":[5544713,5543727,5543476,5543595,5543781],"length":1,"stats":{"Line":16},"fn_name":null},{"line":638,"address":[5544211,5543927,5543801,5544275,5543871,5544637],"length":1,"stats":{"Line":32},"fn_name":null},{"line":639,"address":[5544336],"length":1,"stats":{"Line":8},"fn_name":null},{"line":640,"address":[5544401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":642,"address":[5544216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":646,"address":[5545056,5545226],"length":1,"stats":{"Line":8},"fn_name":"c_repeat_range"},{"line":653,"address":[5545248,5545113],"length":1,"stats":{"Line":16},"fn_name":null},{"line":654,"address":[5545325,5545381],"length":1,"stats":{"Line":8},"fn_name":null},{"line":655,"address":[5545366,5545427,5545773,5545652,5545788],"length":1,"stats":{"Line":32},"fn_name":null},{"line":656,"address":[5545638],"length":1,"stats":{"Line":8},"fn_name":null},{"line":657,"address":[5545896,5546010],"length":1,"stats":{"Line":16},"fn_name":null},{"line":661,"address":[5545809,5546015,5548031],"length":1,"stats":{"Line":16},"fn_name":null},{"line":662,"address":[5546070],"length":1,"stats":{"Line":8},"fn_name":null},{"line":682,"address":[5546099],"length":1,"stats":{"Line":8},"fn_name":null},{"line":683,"address":[5546106],"length":1,"stats":{"Line":8},"fn_name":null},{"line":684,"address":[5546269,5547694,5546162,5546407],"length":1,"stats":{"Line":24},"fn_name":null},{"line":685,"address":[5546433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":686,"address":[5546512],"length":1,"stats":{"Line":8},"fn_name":null},{"line":687,"address":[5546606,5546551,5546735,5546911,5547021,5546942],"length":1,"stats":{"Line":24},"fn_name":null},{"line":688,"address":[5546702,5546944],"length":1,"stats":{"Line":16},"fn_name":null},{"line":689,"address":[5546932,5548192],"length":1,"stats":{"Line":0},"fn_name":null},{"line":691,"address":[5547109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":692,"address":[5547261,5547651,5547676],"length":1,"stats":{"Line":24},"fn_name":null},{"line":693,"address":[5547482],"length":1,"stats":{"Line":8},"fn_name":null},{"line":695,"address":[5547669,5547333],"length":1,"stats":{"Line":16},"fn_name":null},{"line":698,"address":[5546341],"length":1,"stats":{"Line":8},"fn_name":null},{"line":699,"address":[5547699],"length":1,"stats":{"Line":8},"fn_name":null},{"line":705,"address":[5548437,5548384],"length":1,"stats":{"Line":14},"fn_name":"next_inst"},{"line":706,"address":[5548396,5548449,5548508],"length":1,"stats":{"Line":28},"fn_name":null},{"line":709,"address":[5548544,5549158],"length":1,"stats":{"Line":14},"fn_name":"fill"},{"line":710,"address":[5548687,5548775],"length":1,"stats":{"Line":14},"fn_name":null},{"line":711,"address":[5548567],"length":1,"stats":{"Line":14},"fn_name":null},{"line":712,"address":[5548699],"length":1,"stats":{"Line":14},"fn_name":null},{"line":713,"address":[5548716],"length":1,"stats":{"Line":14},"fn_name":null},{"line":715,"address":[5548623],"length":1,"stats":{"Line":8},"fn_name":null},{"line":716,"address":[5549151,5548780,5548873,5548641],"length":1,"stats":{"Line":34},"fn_name":null},{"line":717,"address":[5549063],"length":1,"stats":{"Line":8},"fn_name":null},{"line":723,"address":[5549264,5549317],"length":1,"stats":{"Line":14},"fn_name":"fill_to_next"},{"line":724,"address":[5549334,5549273],"length":1,"stats":{"Line":28},"fn_name":null},{"line":725,"address":[5549339],"length":1,"stats":{"Line":14},"fn_name":null},{"line":728,"address":[5549440,5551205],"length":1,"stats":{"Line":13},"fn_name":"fill_split"},{"line":734,"address":[5549678,5550379,5549695],"length":1,"stats":{"Line":13},"fn_name":null},{"line":735,"address":[5549498,5549688],"length":1,"stats":{"Line":13},"fn_name":null},{"line":736,"address":[5550279,5549708,5550061,5550170,5549906],"length":1,"stats":{"Line":34},"fn_name":null},{"line":737,"address":[5549908,5549784],"length":1,"stats":{"Line":26},"fn_name":null},{"line":738,"address":[5549967],"length":1,"stats":{"Line":0},"fn_name":null},{"line":739,"address":[5550054],"length":1,"stats":{"Line":0},"fn_name":null},{"line":741,"address":[5550066],"length":1,"stats":{"Line":13},"fn_name":null},{"line":742,"address":[5550090],"length":1,"stats":{"Line":13},"fn_name":null},{"line":743,"address":[5550159],"length":1,"stats":{"Line":13},"fn_name":null},{"line":745,"address":[5550175,5549806],"length":1,"stats":{"Line":16},"fn_name":null},{"line":746,"address":[5550199],"length":1,"stats":{"Line":8},"fn_name":null},{"line":747,"address":[5550268],"length":1,"stats":{"Line":8},"fn_name":null},{"line":754,"address":[5549620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":755,"address":[5549668],"length":1,"stats":{"Line":0},"fn_name":null},{"line":756,"address":[5550930,5550563,5550585,5550384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":757,"address":[5550775,5550915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":759,"address":[5550999,5551179,5550943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":760,"address":[5550992],"length":1,"stats":{"Line":0},"fn_name":null},{"line":761,"address":[5550972,5551177,5551009,5551122],"length":1,"stats":{"Line":0},"fn_name":null},{"line":762,"address":[5551140],"length":1,"stats":{"Line":0},"fn_name":null},{"line":764,"address":[5551015],"length":1,"stats":{"Line":0},"fn_name":null},{"line":770,"address":[5551440],"length":1,"stats":{"Line":9},"fn_name":"push_compiled"},{"line":771,"address":[5551455],"length":1,"stats":{"Line":9},"fn_name":null},{"line":774,"address":[5551663,5551584],"length":1,"stats":{"Line":16},"fn_name":"push_hole"},{"line":775,"address":[5551602,5551683],"length":1,"stats":{"Line":32},"fn_name":null},{"line":776,"address":[5551696],"length":1,"stats":{"Line":16},"fn_name":null},{"line":777,"address":[5551787],"length":1,"stats":{"Line":16},"fn_name":null},{"line":780,"address":[5551872],"length":1,"stats":{"Line":13},"fn_name":"push_split_hole"},{"line":781,"address":[5551884],"length":1,"stats":{"Line":13},"fn_name":null},{"line":782,"address":[5551932],"length":1,"stats":{"Line":13},"fn_name":null},{"line":783,"address":[5551970],"length":1,"stats":{"Line":13},"fn_name":null},{"line":786,"address":[5552000],"length":1,"stats":{"Line":8},"fn_name":"pop_split_hole"},{"line":787,"address":[5552012],"length":1,"stats":{"Line":8},"fn_name":null},{"line":788,"address":[5552052],"length":1,"stats":{"Line":8},"fn_name":null},{"line":791,"address":[5552128],"length":1,"stats":{"Line":16},"fn_name":"check_size"},{"line":794,"address":[5552140,5552334,5552364,5552256,5552207],"length":1,"stats":{"Line":48},"fn_name":null},{"line":795,"address":[5552263],"length":1,"stats":{"Line":8},"fn_name":null},{"line":797,"address":[5552249],"length":1,"stats":{"Line":16},"fn_name":null},{"line":810,"address":[5552368,5552430],"length":1,"stats":{"Line":8},"fn_name":"dup_one"},{"line":811,"address":[5552445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":812,"address":[5552378,5552452],"length":1,"stats":{"Line":16},"fn_name":null},{"line":830,"address":[5553514,5552816],"length":1,"stats":{"Line":14},"fn_name":"fill"},{"line":831,"address":[5553193,5553061,5552978,5553324],"length":1,"stats":{"Line":43},"fn_name":null},{"line":832,"address":[5552836,5552964],"length":1,"stats":{"Line":22},"fn_name":null},{"line":833,"address":[5552983],"length":1,"stats":{"Line":14},"fn_name":null},{"line":834,"address":[5553002],"length":1,"stats":{"Line":14},"fn_name":null},{"line":836,"address":[5553066],"length":1,"stats":{"Line":13},"fn_name":null},{"line":837,"address":[5553083],"length":1,"stats":{"Line":13},"fn_name":null},{"line":838,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":839,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":842,"address":[5553198],"length":1,"stats":{"Line":8},"fn_name":null},{"line":843,"address":[5553220],"length":1,"stats":{"Line":8},"fn_name":null},{"line":844,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":845,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":854,"address":[5553529,5553423],"length":1,"stats":{"Line":28},"fn_name":null},{"line":857,"address":[5553998,5553584],"length":1,"stats":{"Line":0},"fn_name":"fill_split"},{"line":858,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":859,"address":[5553612],"length":1,"stats":{"Line":0},"fn_name":null},{"line":860,"address":[5553709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":868,"address":[5553753,5553958,5554013],"length":1,"stats":{"Line":0},"fn_name":null},{"line":871,"address":[5554348,5554080],"length":1,"stats":{"Line":13},"fn_name":"half_fill_split_goto1"},{"line":872,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":873,"address":[5554100,5554183],"length":1,"stats":{"Line":26},"fn_name":null},{"line":880,"address":[5554191,5554363,5554308],"length":1,"stats":{"Line":26},"fn_name":null},{"line":883,"address":[5554700,5554432],"length":1,"stats":{"Line":8},"fn_name":"half_fill_split_goto2"},{"line":884,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":885,"address":[5554535,5554452],"length":1,"stats":{"Line":16},"fn_name":null},{"line":892,"address":[5554715,5554660,5554543],"length":1,"stats":{"Line":16},"fn_name":null},{"line":895,"address":[5554817,5554784],"length":1,"stats":{"Line":14},"fn_name":"unwrap"},{"line":896,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":897,"address":[5554908,5554794],"length":1,"stats":{"Line":28},"fn_name":null},{"line":917,"address":[5555152],"length":1,"stats":{"Line":14},"fn_name":"fill"},{"line":918,"address":[5555449,5555318,5555387,5555511],"length":1,"stats":{"Line":43},"fn_name":null},{"line":919,"address":[5555178,5555330],"length":1,"stats":{"Line":28},"fn_name":null},{"line":920,"address":[5555347],"length":1,"stats":{"Line":14},"fn_name":null},{"line":922,"address":[5555397],"length":1,"stats":{"Line":9},"fn_name":null},{"line":923,"address":[5555412],"length":1,"stats":{"Line":9},"fn_name":null},{"line":925,"address":[5555459],"length":1,"stats":{"Line":9},"fn_name":null},{"line":926,"address":[5555521],"length":1,"stats":{"Line":13},"fn_name":null},{"line":927,"address":[5555535],"length":1,"stats":{"Line":13},"fn_name":null},{"line":929,"address":[5555235],"length":1,"stats":{"Line":11},"fn_name":null},{"line":930,"address":[5555260],"length":1,"stats":{"Line":11},"fn_name":null},{"line":942,"address":[5555764,5555664],"length":1,"stats":{"Line":10},"fn_name":"compile"},{"line":943,"address":[5555674],"length":1,"stats":{"Line":10},"fn_name":null},{"line":944,"address":[5555779],"length":1,"stats":{"Line":10},"fn_name":null},{"line":945,"address":[5555791],"length":1,"stats":{"Line":10},"fn_name":null},{"line":946,"address":[5555819,5555896],"length":1,"stats":{"Line":20},"fn_name":null},{"line":947,"address":[5555912],"length":1,"stats":{"Line":10},"fn_name":null},{"line":949,"address":[5555940,5556626,5556258],"length":1,"stats":{"Line":18},"fn_name":null},{"line":950,"address":[5556324,5559032],"length":1,"stats":{"Line":10},"fn_name":null},{"line":951,"address":[5556408],"length":1,"stats":{"Line":10},"fn_name":null},{"line":952,"address":[5556500],"length":1,"stats":{"Line":10},"fn_name":null},{"line":953,"address":[5558431,5556507],"length":1,"stats":{"Line":20},"fn_name":null},{"line":954,"address":[5556624,5556525],"length":1,"stats":{"Line":10},"fn_name":null},{"line":955,"address":[5556532],"length":1,"stats":{"Line":12},"fn_name":null},{"line":956,"address":[5556553],"length":1,"stats":{"Line":12},"fn_name":null},{"line":958,"address":[5556617,5556631,5557525],"length":1,"stats":{"Line":32},"fn_name":null},{"line":959,"address":[5557053,5557278,5556775,5557174],"length":1,"stats":{"Line":10},"fn_name":null},{"line":960,"address":[5556982],"length":1,"stats":{"Line":10},"fn_name":null},{"line":961,"address":[5557310],"length":1,"stats":{"Line":10},"fn_name":null},{"line":962,"address":[5557373],"length":1,"stats":{"Line":10},"fn_name":null},{"line":963,"address":[5557425],"length":1,"stats":{"Line":10},"fn_name":null},{"line":964,"address":[5557465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":967,"address":[5557534,5556725],"length":1,"stats":{"Line":16},"fn_name":null},{"line":968,"address":[5557550],"length":1,"stats":{"Line":8},"fn_name":null},{"line":970,"address":[5557640],"length":1,"stats":{"Line":8},"fn_name":null},{"line":971,"address":[5557706],"length":1,"stats":{"Line":8},"fn_name":null},{"line":972,"address":[5558066,5557788],"length":1,"stats":{"Line":8},"fn_name":null},{"line":973,"address":[5557995],"length":1,"stats":{"Line":10},"fn_name":null},{"line":974,"address":[5558351],"length":1,"stats":{"Line":10},"fn_name":null},{"line":975,"address":[5558210],"length":1,"stats":{"Line":10},"fn_name":null},{"line":979,"address":[5556155,5558775],"length":1,"stats":{"Line":10},"fn_name":null},{"line":980,"address":[5558436,5558866],"length":1,"stats":{"Line":10},"fn_name":null},{"line":983,"address":[5559216],"length":1,"stats":{"Line":8},"fn_name":"c_utf8_seq"},{"line":984,"address":[5559308,5559360,5559233],"length":1,"stats":{"Line":30},"fn_name":null},{"line":985,"address":[5559303],"length":1,"stats":{"Line":8},"fn_name":null},{"line":987,"address":[5559320,5559270],"length":1,"stats":{"Line":16},"fn_name":null},{"line":991,"address":[5933696,5933813,5935148,5935024],"length":1,"stats":{"Line":18},"fn_name":"c_utf8_seq_<&regex_syntax::utf8::Utf8Sequence>"},{"line":996,"address":[5933722,5935058],"length":1,"stats":{"Line":18},"fn_name":null},{"line":997,"address":[5935070,5933734],"length":1,"stats":{"Line":18},"fn_name":null},{"line":998,"address":[5933908,5935862,5934527,5933851,5935186,5933870,5935205,5933746,5935087,5935243],"length":1,"stats":{"Line":82},"fn_name":null},{"line":1001,"address":[5933950,5935285],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1002,"address":[5933952,5935287],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1005,"address":[5933984,5935319],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1006,"address":[5935519,5935364,5934029,5934184],"length":1,"stats":{"Line":38},"fn_name":null},{"line":1007,"address":[5934200,5935535],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1008,"address":[5934208,5935543],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1011,"address":[5934128,5935463],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1012,"address":[5935548,5936292,5934213,5934402,5935737,5934957],"length":1,"stats":{"Line":62},"fn_name":null},{"line":1013,"address":[5936159,5934824,5934338,5935673,5934324,5935659],"length":1,"stats":{"Line":44},"fn_name":null},{"line":1014,"address":[5935667,5934332],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1015,"address":[5934334,5935669],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1018,"address":[5935587,5934229,5934252,5935564],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1019,"address":[5935567,5934232],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1020,"address":[5935580,5934245],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1021,"address":[5935583,5934248],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1024,"address":[5934409,5935744],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1025,"address":[5935842,5934532,5935867,5934507],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1027,"address":[5934791,5936126,5934565,5935900],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1028,"address":[5934587,5935922],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1073,"address":[5559376,5559430],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":1075,"address":[5559447,5559392],"length":1,"stats":{"Line":28},"fn_name":null},{"line":1076,"address":[5559472],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1080,"address":[5559568],"length":1,"stats":{"Line":10},"fn_name":"get"},{"line":1081,"address":[5559606],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1082,"address":[5560036,5559629,5560008],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1083,"address":[5559819,5559686],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1084,"address":[5559784],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1085,"address":[5559826],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1088,"address":[5559867],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1089,"address":[5559904],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1090,"address":[5559994],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1093,"address":[5560048],"length":1,"stats":{"Line":10},"fn_name":"clear"},{"line":1094,"address":[5560053],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1097,"address":[5560080],"length":1,"stats":{"Line":10},"fn_name":"hash"},{"line":1101,"address":[5560094],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1102,"address":[5560109],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1103,"address":[5560158],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1104,"address":[5560210],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1105,"address":[5560367,5560337,5560262],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1112,"address":[5560368],"length":1,"stats":{"Line":15},"fn_name":"new"},{"line":1113,"address":[5560390],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1116,"address":[5560464],"length":1,"stats":{"Line":13},"fn_name":"set_range"},{"line":1117,"address":[5560482,5560518],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1118,"address":[5560512,5560548],"length":1,"stats":{"Line":25},"fn_name":null},{"line":1119,"address":[5560554,5560668],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1121,"address":[5560754,5560726,5560620],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1124,"address":[5560768],"length":1,"stats":{"Line":8},"fn_name":"set_word_boundary"},{"line":1127,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1128,"address":[5560777],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1129,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1130,"address":[5561039,5560789],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1131,"address":[5561044,5560803],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1132,"address":[5560839,5560999],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1133,"address":[5560967,5561074],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1135,"address":[5561104,5561134,5560930,5561018],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1136,"address":[5561029],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1140,"address":[5561136,5561180],"length":1,"stats":{"Line":14},"fn_name":"byte_classes"},{"line":1145,"address":[5561160],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1146,"address":[5561192],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1147,"address":[5561197],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1148,"address":[5561452],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1149,"address":[5561206,5561265],"length":1,"stats":{"Line":30},"fn_name":null},{"line":1150,"address":[5561267],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1151,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1153,"address":[5561278,5561471,5561327],"length":1,"stats":{"Line":30},"fn_name":null},{"line":1154,"address":[5561335],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1156,"address":[5561420,5561531,5561501],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1158,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1162,"address":[5561536],"length":1,"stats":{"Line":8},"fn_name":"u32_to_usize"},{"line":1166,"address":[5561544],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1167,"address":[5561572],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1169,"address":[5561556],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1177,"address":[4540837,4540832],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1178,"address":[5443757],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1179,"address":[5443787],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1180,"address":[5443810],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1181,"address":[5443831,5444023],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1182,"address":[5444520,5443985,5444383],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1183,"address":[5444880,5444482,5445017],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1184,"address":[5445377,5445514,5444979],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1185,"address":[5445874,5446011,5445476],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1186,"address":[5446508,5445973,5446371],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1187,"address":[5446868,5446470,5447005],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1188,"address":[5447365,5447502,5446967],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1189,"address":[5447862,5447999,5447464],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1190,"address":[5447961,5448359,5448476],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1192,"address":[5448466],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1193,"address":[5448851],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1194,"address":[5448876],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1195,"address":[5448899],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1196,"address":[5449098,5448906],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1197,"address":[5449458,5449060,5449595],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1198,"address":[5449955,5450092,5449557],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1199,"address":[5450452,5450589,5450054],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1200,"address":[5451086,5450551,5450949],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1201,"address":[5451583,5451446,5451048],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1202,"address":[5451545,5452080,5451943],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1203,"address":[5452440,5452577,5452042],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1204,"address":[5452539,5452901,5453016],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1208,"address":[4540869,4540864],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1209,"address":[5453399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1210,"address":[5453574,5453426,5453626],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1211,"address":[5453608],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1213,"address":[5453554,5453628],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":523,"coverable":581},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","dfa.rs"],"content":"/*!\nThe DFA matching engine.\n\nA DFA provides faster matching because the engine is in exactly one state at\nany point in time. In the NFA, there may be multiple active states, and\nconsiderable CPU cycles are spent shuffling them around. In finite automata\nspeak, the DFA follows epsilon transitions in the regex far less than the NFA.\n\nA DFA is a classic trade off between time and space. The NFA is slower, but\nits memory requirements are typically small and predictable. The DFA is faster,\nbut given the right regex and the right input, the number of states in the\nDFA can grow exponentially. To mitigate this space problem, we do two things:\n\n1. We implement an *online* DFA. That is, the DFA is constructed from the NFA\n   during a search. When a new state is computed, it is stored in a cache so\n   that it may be reused. An important consequence of this implementation\n   is that states that are never reached for a particular input are never\n   computed. (This is impossible in an \"offline\" DFA which needs to compute\n   all possible states up front.)\n2. If the cache gets too big, we wipe it and continue matching.\n\nIn pathological cases, a new state can be created for every byte of input.\n(e.g., The regex `(a|b)*a(a|b){20}` on a long sequence of a's and b's.)\nIn this case, performance regresses to slightly slower than the full NFA\nsimulation, in large part because the cache becomes useless. If the cache\nis wiped too frequently, the DFA quits and control falls back to one of the\nNFA simulations.\n\nBecause of the \"lazy\" nature of this DFA, the inner matching loop is\nconsiderably more complex than one might expect out of a DFA. A number of\ntricks are employed to make it fast. Tread carefully.\n\nN.B. While this implementation is heavily commented, Russ Cox's series of\narticles on regexes is strongly recommended: https://swtch.com/~rsc/regexp/\n(As is the DFA implementation in RE2, which heavily influenced this\nimplementation.)\n*/\n\nuse std::collections::HashMap;\nuse std::fmt;\nuse std::iter::repeat;\nuse std::mem;\nuse std::sync::Arc;\n\nuse exec::ProgramCache;\nuse prog::{Inst, Program};\nuse sparse::SparseSet;\n\n/// Return true if and only if the given program can be executed by a DFA.\n///\n/// Generally, a DFA is always possible. A pathological case where it is not\n/// possible is if the number of NFA states exceeds `u32::MAX`, in which case,\n/// this function will return false.\n///\n/// This function will also return false if the given program has any Unicode\n/// instructions (Char or Ranges) since the DFA operates on bytes only.\npub fn can_exec(insts: &Program) -> bool {\n    use prog::Inst::*;\n    // If for some reason we manage to allocate a regex program with more\n    // than i32::MAX instructions, then we can't execute the DFA because we\n    // use 32 bit instruction pointer deltas for memory savings.\n    // If i32::MAX is the largest positive delta,\n    // then -i32::MAX == i32::MIN + 1 is the largest negative delta,\n    // and we are OK to use 32 bits.\n    if insts.dfa_size_limit == 0 || insts.len() > ::std::i32::MAX as usize {\n        return false;\n    }\n    for inst in insts {\n        match *inst {\n            Char(_) | Ranges(_) => return false,\n            EmptyLook(_) | Match(_) | Save(_) | Split(_) | Bytes(_) => {}\n        }\n    }\n    true\n}\n\n/// A reusable cache of DFA states.\n///\n/// This cache is reused between multiple invocations of the same regex\n/// program. (It is not shared simultaneously between threads. If there is\n/// contention, then new caches are created.)\n#[derive(Debug)]\npub struct Cache {\n    /// Group persistent DFA related cache state together. The sparse sets\n    /// listed below are used as scratch space while computing uncached states.\n    inner: CacheInner,\n    /// qcur and qnext are ordered sets with constant time\n    /// addition/membership/clearing-whole-set and linear time iteration. They\n    /// are used to manage the sets of NFA states in DFA states when computing\n    /// cached DFA states. In particular, the order of the NFA states matters\n    /// for leftmost-first style matching. Namely, when computing a cached\n    /// state, the set of NFA states stops growing as soon as the first Match\n    /// instruction is observed.\n    qcur: SparseSet,\n    qnext: SparseSet,\n}\n\n/// `CacheInner` is logically just a part of Cache, but groups together fields\n/// that aren't passed as function parameters throughout search. (This split\n/// is mostly an artifact of the borrow checker. It is happily paid.)\n#[derive(Debug)]\nstruct CacheInner {\n    /// A cache of pre-compiled DFA states, keyed by the set of NFA states\n    /// and the set of empty-width flags set at the byte in the input when the\n    /// state was observed.\n    ///\n    /// A StatePtr is effectively a `*State`, but to avoid various inconvenient\n    /// things, we just pass indexes around manually. The performance impact of\n    /// this is probably an instruction or two in the inner loop. However, on\n    /// 64 bit, each StatePtr is half the size of a *State.\n    compiled: StateMap,\n    /// The transition table.\n    ///\n    /// The transition table is laid out in row-major order, where states are\n    /// rows and the transitions for each state are columns. At a high level,\n    /// given state `s` and byte `b`, the next state can be found at index\n    /// `s * 256 + b`.\n    ///\n    /// This is, of course, a lie. A StatePtr is actually a pointer to the\n    /// *start* of a row in this table. When indexing in the DFA's inner loop,\n    /// this removes the need to multiply the StatePtr by the stride. Yes, it\n    /// matters. This reduces the number of states we can store, but: the\n    /// stride is rarely 256 since we define transitions in terms of\n    /// *equivalence classes* of bytes. Each class corresponds to a set of\n    /// bytes that never discriminate a distinct path through the DFA from each\n    /// other.\n    trans: Transitions,\n    /// A set of cached start states, which are limited to the number of\n    /// permutations of flags set just before the initial byte of input. (The\n    /// index into this vec is a `EmptyFlags`.)\n    ///\n    /// N.B. A start state can be \"dead\" (i.e., no possible match), so we\n    /// represent it with a StatePtr.\n    start_states: Vec<StatePtr>,\n    /// Stack scratch space used to follow epsilon transitions in the NFA.\n    /// (This permits us to avoid recursion.)\n    ///\n    /// The maximum stack size is the number of NFA states.\n    stack: Vec<InstPtr>,\n    /// The total number of times this cache has been flushed by the DFA\n    /// because of space constraints.\n    flush_count: u64,\n    /// The total heap size of the DFA's cache. We use this to determine when\n    /// we should flush the cache.\n    size: usize,\n    /// Scratch space used when building instruction pointer lists for new\n    /// states. This helps amortize allocation.\n    insts_scratch_space: Vec<u8>,\n}\n\n/// The transition table.\n///\n/// It is laid out in row-major order, with states as rows and byte class\n/// transitions as columns.\n///\n/// The transition table is responsible for producing valid `StatePtrs`. A\n/// `StatePtr` points to the start of a particular row in this table. When\n/// indexing to find the next state this allows us to avoid a multiplication\n/// when computing an index into the table.\n#[derive(Clone)]\nstruct Transitions {\n    /// The table.\n    table: Vec<StatePtr>,\n    /// The stride.\n    num_byte_classes: usize,\n}\n\n/// Fsm encapsulates the actual execution of the DFA.\n#[derive(Debug)]\npub struct Fsm<'a> {\n    /// prog contains the NFA instruction opcodes. DFA execution uses either\n    /// the `dfa` instructions or the `dfa_reverse` instructions from\n    /// `exec::ExecReadOnly`. (It never uses `ExecReadOnly.nfa`, which may have\n    /// Unicode opcodes that cannot be executed by the DFA.)\n    prog: &'a Program,\n    /// The start state. We record it here because the pointer may change\n    /// when the cache is wiped.\n    start: StatePtr,\n    /// The current position in the input.\n    at: usize,\n    /// Should we quit after seeing the first match? e.g., When the caller\n    /// uses `is_match` or `shortest_match`.\n    quit_after_match: bool,\n    /// The last state that matched.\n    ///\n    /// When no match has occurred, this is set to STATE_UNKNOWN.\n    ///\n    /// This is only useful when matching regex sets. The last match state\n    /// is useful because it contains all of the match instructions seen,\n    /// thereby allowing us to enumerate which regexes in the set matched.\n    last_match_si: StatePtr,\n    /// The input position of the last cache flush. We use this to determine\n    /// if we're thrashing in the cache too often. If so, the DFA quits so\n    /// that we can fall back to the NFA algorithm.\n    last_cache_flush: usize,\n    /// All cached DFA information that is persisted between searches.\n    cache: &'a mut CacheInner,\n}\n\n/// The result of running the DFA.\n///\n/// Generally, the result is either a match or not a match, but sometimes the\n/// DFA runs too slowly because the cache size is too small. In that case, it\n/// gives up with the intent of falling back to the NFA algorithm.\n///\n/// The DFA can also give up if it runs out of room to create new states, or if\n/// it sees non-ASCII bytes in the presence of a Unicode word boundary.\n#[derive(Clone, Debug)]\npub enum Result<T> {\n    Match(T),\n    NoMatch(usize),\n    Quit,\n}\n\nimpl<T> Result<T> {\n    /// Returns true if this result corresponds to a match.\n    pub fn is_match(&self) -> bool {\n        match *self {\n            Result::Match(_) => true,\n            Result::NoMatch(_) | Result::Quit => false,\n        }\n    }\n\n    /// Maps the given function onto T and returns the result.\n    ///\n    /// If this isn't a match, then this is a no-op.\n    #[cfg(feature = \"perf-literal\")]\n    pub fn map<U, F: FnMut(T) -> U>(self, mut f: F) -> Result<U> {\n        match self {\n            Result::Match(t) => Result::Match(f(t)),\n            Result::NoMatch(x) => Result::NoMatch(x),\n            Result::Quit => Result::Quit,\n        }\n    }\n\n    /// Sets the non-match position.\n    ///\n    /// If this isn't a non-match, then this is a no-op.\n    fn set_non_match(self, at: usize) -> Result<T> {\n        match self {\n            Result::NoMatch(_) => Result::NoMatch(at),\n            r => r,\n        }\n    }\n}\n\n/// `State` is a DFA state. It contains an ordered set of NFA states (not\n/// necessarily complete) and a smattering of flags.\n///\n/// The flags are packed into the first byte of data.\n///\n/// States don't carry their transitions. Instead, transitions are stored in\n/// a single row-major table.\n///\n/// Delta encoding is used to store the instruction pointers.\n/// The first instruction pointer is stored directly starting\n/// at data[1], and each following pointer is stored as an offset\n/// to the previous one. If a delta is in the range -127..127,\n/// it is packed into a single byte; Otherwise the byte 128 (-128 as an i8)\n/// is coded as a flag, followed by 4 bytes encoding the delta.\n#[derive(Clone, Eq, Hash, PartialEq)]\nstruct State {\n    data: Arc<[u8]>,\n}\n\n/// `InstPtr` is a 32 bit pointer into a sequence of opcodes (i.e., it indexes\n/// an NFA state).\n///\n/// Throughout this library, this is usually set to `usize`, but we force a\n/// `u32` here for the DFA to save on space.\ntype InstPtr = u32;\n\n/// Adds ip to data using delta encoding with respect to prev.\n///\n/// After completion, `data` will contain `ip` and `prev` will be set to `ip`.\nfn push_inst_ptr(data: &mut Vec<u8>, prev: &mut InstPtr, ip: InstPtr) {\n    let delta = (ip as i32) - (*prev as i32);\n    write_vari32(data, delta);\n    *prev = ip;\n}\n\nstruct InstPtrs<'a> {\n    base: usize,\n    data: &'a [u8],\n}\n\nimpl<'a> Iterator for InstPtrs<'a> {\n    type Item = usize;\n\n    fn next(&mut self) -> Option<usize> {\n        if self.data.is_empty() {\n            return None;\n        }\n        let (delta, nread) = read_vari32(self.data);\n        let base = self.base as i32 + delta;\n        debug_assert!(base >= 0);\n        debug_assert!(nread > 0);\n        self.data = &self.data[nread..];\n        self.base = base as usize;\n        Some(self.base)\n    }\n}\n\nimpl State {\n    fn flags(&self) -> StateFlags {\n        StateFlags(self.data[0])\n    }\n\n    fn inst_ptrs(&self) -> InstPtrs {\n        InstPtrs { base: 0, data: &self.data[1..] }\n    }\n}\n\n/// `StatePtr` is a 32 bit pointer to the start of a row in the transition\n/// table.\n///\n/// It has many special values. There are two types of special values:\n/// sentinels and flags.\n///\n/// Sentinels corresponds to special states that carry some kind of\n/// significance. There are three such states: unknown, dead and quit states.\n///\n/// Unknown states are states that haven't been computed yet. They indicate\n/// that a transition should be filled in that points to either an existing\n/// cached state or a new state altogether. In general, an unknown state means\n/// \"follow the NFA's epsilon transitions.\"\n///\n/// Dead states are states that can never lead to a match, no matter what\n/// subsequent input is observed. This means that the DFA should quit\n/// immediately and return the longest match it has found thus far.\n///\n/// Quit states are states that imply the DFA is not capable of matching the\n/// regex correctly. Currently, this is only used when a Unicode word boundary\n/// exists in the regex *and* a non-ASCII byte is observed.\n///\n/// The other type of state pointer is a state pointer with special flag bits.\n/// There are two flags: a start flag and a match flag. The lower bits of both\n/// kinds always contain a \"valid\" `StatePtr` (indicated by the `STATE_MAX`\n/// mask).\n///\n/// The start flag means that the state is a start state, and therefore may be\n/// subject to special prefix scanning optimizations.\n///\n/// The match flag means that the state is a match state, and therefore the\n/// current position in the input (while searching) should be recorded.\n///\n/// The above exists mostly in the service of making the inner loop fast.\n/// In particular, the inner *inner* loop looks something like this:\n///\n/// ```ignore\n/// while state <= STATE_MAX and i < len(text):\n///     state = state.next[i]\n/// ```\n///\n/// This is nice because it lets us execute a lazy DFA as if it were an\n/// entirely offline DFA (i.e., with very few instructions). The loop will\n/// quit only when we need to examine a case that needs special attention.\ntype StatePtr = u32;\n\n/// An unknown state means that the state has not been computed yet, and that\n/// the only way to progress is to compute it.\nconst STATE_UNKNOWN: StatePtr = 1 << 31;\n\n/// A dead state means that the state has been computed and it is known that\n/// once it is entered, no future match can ever occur.\nconst STATE_DEAD: StatePtr = STATE_UNKNOWN + 1;\n\n/// A quit state means that the DFA came across some input that it doesn't\n/// know how to process correctly. The DFA should quit and another matching\n/// engine should be run in its place.\nconst STATE_QUIT: StatePtr = STATE_DEAD + 1;\n\n/// A start state is a state that the DFA can start in.\n///\n/// Note that start states have their lower bits set to a state pointer.\nconst STATE_START: StatePtr = 1 << 30;\n\n/// A match state means that the regex has successfully matched.\n///\n/// Note that match states have their lower bits set to a state pointer.\nconst STATE_MATCH: StatePtr = 1 << 29;\n\n/// The maximum state pointer. This is useful to mask out the \"valid\" state\n/// pointer from a state with the \"start\" or \"match\" bits set.\n///\n/// It doesn't make sense to use this with unknown, dead or quit state\n/// pointers, since those pointers are sentinels and never have their lower\n/// bits set to anything meaningful.\nconst STATE_MAX: StatePtr = STATE_MATCH - 1;\n\n/// Byte is a u8 in spirit, but a u16 in practice so that we can represent the\n/// special EOF sentinel value.\n#[derive(Copy, Clone, Debug)]\nstruct Byte(u16);\n\n/// A set of flags for zero-width assertions.\n#[derive(Clone, Copy, Eq, Debug, Default, Hash, PartialEq)]\nstruct EmptyFlags {\n    start: bool,\n    end: bool,\n    start_line: bool,\n    end_line: bool,\n    word_boundary: bool,\n    not_word_boundary: bool,\n}\n\n/// A set of flags describing various configurations of a DFA state. This is\n/// represented by a `u8` so that it is compact.\n#[derive(Clone, Copy, Eq, Default, Hash, PartialEq)]\nstruct StateFlags(u8);\n\nimpl Cache {\n    /// Create new empty cache for the DFA engine.\n    pub fn new(prog: &Program) -> Self {\n        // We add 1 to account for the special EOF byte.\n        let num_byte_classes = (prog.byte_classes[255] as usize + 1) + 1;\n        let starts = vec![STATE_UNKNOWN; 256];\n        let mut cache = Cache {\n            inner: CacheInner {\n                compiled: StateMap::new(num_byte_classes),\n                trans: Transitions::new(num_byte_classes),\n                start_states: starts,\n                stack: vec![],\n                flush_count: 0,\n                size: 0,\n                insts_scratch_space: vec![],\n            },\n            qcur: SparseSet::new(prog.insts.len()),\n            qnext: SparseSet::new(prog.insts.len()),\n        };\n        cache.inner.reset_size();\n        cache\n    }\n}\n\nimpl CacheInner {\n    /// Resets the cache size to account for fixed costs, such as the program\n    /// and stack sizes.\n    fn reset_size(&mut self) {\n        self.size = (self.start_states.len() * mem::size_of::<StatePtr>())\n            + (self.stack.len() * mem::size_of::<InstPtr>());\n    }\n}\n\nimpl<'a> Fsm<'a> {\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn forward(\n        prog: &'a Program,\n        cache: &ProgramCache,\n        quit_after_match: bool,\n        text: &[u8],\n        at: usize,\n    ) -> Result<usize> {\n        let mut cache = cache.borrow_mut();\n        let cache = &mut cache.dfa;\n        let mut dfa = Fsm {\n            prog: prog,\n            start: 0, // filled in below\n            at: at,\n            quit_after_match: quit_after_match,\n            last_match_si: STATE_UNKNOWN,\n            last_cache_flush: at,\n            cache: &mut cache.inner,\n        };\n        let (empty_flags, state_flags) = dfa.start_flags(text, at);\n        dfa.start =\n            match dfa.start_state(&mut cache.qcur, empty_flags, state_flags) {\n                None => return Result::Quit,\n                Some(STATE_DEAD) => return Result::NoMatch(at),\n                Some(si) => si,\n            };\n        debug_assert!(dfa.start != STATE_UNKNOWN);\n        dfa.exec_at(&mut cache.qcur, &mut cache.qnext, text)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn reverse(\n        prog: &'a Program,\n        cache: &ProgramCache,\n        quit_after_match: bool,\n        text: &[u8],\n        at: usize,\n    ) -> Result<usize> {\n        let mut cache = cache.borrow_mut();\n        let cache = &mut cache.dfa_reverse;\n        let mut dfa = Fsm {\n            prog: prog,\n            start: 0, // filled in below\n            at: at,\n            quit_after_match: quit_after_match,\n            last_match_si: STATE_UNKNOWN,\n            last_cache_flush: at,\n            cache: &mut cache.inner,\n        };\n        let (empty_flags, state_flags) = dfa.start_flags_reverse(text, at);\n        dfa.start =\n            match dfa.start_state(&mut cache.qcur, empty_flags, state_flags) {\n                None => return Result::Quit,\n                Some(STATE_DEAD) => return Result::NoMatch(at),\n                Some(si) => si,\n            };\n        debug_assert!(dfa.start != STATE_UNKNOWN);\n        dfa.exec_at_reverse(&mut cache.qcur, &mut cache.qnext, text)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn forward_many(\n        prog: &'a Program,\n        cache: &ProgramCache,\n        matches: &mut [bool],\n        text: &[u8],\n        at: usize,\n    ) -> Result<usize> {\n        debug_assert!(matches.len() == prog.matches.len());\n        let mut cache = cache.borrow_mut();\n        let cache = &mut cache.dfa;\n        let mut dfa = Fsm {\n            prog: prog,\n            start: 0, // filled in below\n            at: at,\n            quit_after_match: false,\n            last_match_si: STATE_UNKNOWN,\n            last_cache_flush: at,\n            cache: &mut cache.inner,\n        };\n        let (empty_flags, state_flags) = dfa.start_flags(text, at);\n        dfa.start =\n            match dfa.start_state(&mut cache.qcur, empty_flags, state_flags) {\n                None => return Result::Quit,\n                Some(STATE_DEAD) => return Result::NoMatch(at),\n                Some(si) => si,\n            };\n        debug_assert!(dfa.start != STATE_UNKNOWN);\n        let result = dfa.exec_at(&mut cache.qcur, &mut cache.qnext, text);\n        if result.is_match() {\n            if matches.len() == 1 {\n                matches[0] = true;\n            } else {\n                debug_assert!(dfa.last_match_si != STATE_UNKNOWN);\n                debug_assert!(dfa.last_match_si != STATE_DEAD);\n                for ip in dfa.state(dfa.last_match_si).inst_ptrs() {\n                    if let Inst::Match(slot) = dfa.prog[ip] {\n                        matches[slot] = true;\n                    }\n                }\n            }\n        }\n        result\n    }\n\n    /// Executes the DFA on a forward NFA.\n    ///\n    /// {qcur,qnext} are scratch ordered sets which may be non-empty.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn exec_at(\n        &mut self,\n        qcur: &mut SparseSet,\n        qnext: &mut SparseSet,\n        text: &[u8],\n    ) -> Result<usize> {\n        // For the most part, the DFA is basically:\n        //\n        //   last_match = null\n        //   while current_byte != EOF:\n        //     si = current_state.next[current_byte]\n        //     if si is match\n        //       last_match = si\n        //   return last_match\n        //\n        // However, we need to deal with a few things:\n        //\n        //   1. This is an *online* DFA, so the current state's next list\n        //      may not point to anywhere yet, so we must go out and compute\n        //      them. (They are then cached into the current state's next list\n        //      to avoid re-computation.)\n        //   2. If we come across a state that is known to be dead (i.e., never\n        //      leads to a match), then we can quit early.\n        //   3. If the caller just wants to know if a match occurs, then we\n        //      can quit as soon as we know we have a match. (Full leftmost\n        //      first semantics require continuing on.)\n        //   4. If we're in the start state, then we can use a pre-computed set\n        //      of prefix literals to skip quickly along the input.\n        //   5. After the input is exhausted, we run the DFA on one symbol\n        //      that stands for EOF. This is useful for handling empty width\n        //      assertions.\n        //   6. We can't actually do state.next[byte]. Instead, we have to do\n        //      state.next[byte_classes[byte]], which permits us to keep the\n        //      'next' list very small.\n        //\n        // Since there's a bunch of extra stuff we need to consider, we do some\n        // pretty hairy tricks to get the inner loop to run as fast as\n        // possible.\n        debug_assert!(!self.prog.is_reverse);\n\n        // The last match is the currently known ending match position. It is\n        // reported as an index to the most recent byte that resulted in a\n        // transition to a match state and is always stored in capture slot `1`\n        // when searching forwards. Its maximum value is `text.len()`.\n        let mut result = Result::NoMatch(self.at);\n        let (mut prev_si, mut next_si) = (self.start, self.start);\n        let mut at = self.at;\n        while at < text.len() {\n            // This is the real inner loop. We take advantage of special bits\n            // set in the state pointer to determine whether a state is in the\n            // \"common\" case or not. Specifically, the common case is a\n            // non-match non-start non-dead state that has already been\n            // computed. So long as we remain in the common case, this inner\n            // loop will chew through the input.\n            //\n            // We also unroll the loop 4 times to amortize the cost of checking\n            // whether we've consumed the entire input. We are also careful\n            // to make sure that `prev_si` always represents the previous state\n            // and `next_si` always represents the next state after the loop\n            // exits, even if it isn't always true inside the loop.\n            while next_si <= STATE_MAX && at < text.len() {\n                // Argument for safety is in the definition of next_si.\n                prev_si = unsafe { self.next_si(next_si, text, at) };\n                at += 1;\n                if prev_si > STATE_MAX || at + 2 >= text.len() {\n                    mem::swap(&mut prev_si, &mut next_si);\n                    break;\n                }\n                next_si = unsafe { self.next_si(prev_si, text, at) };\n                at += 1;\n                if next_si > STATE_MAX {\n                    break;\n                }\n                prev_si = unsafe { self.next_si(next_si, text, at) };\n                at += 1;\n                if prev_si > STATE_MAX {\n                    mem::swap(&mut prev_si, &mut next_si);\n                    break;\n                }\n                next_si = unsafe { self.next_si(prev_si, text, at) };\n                at += 1;\n            }\n            if next_si & STATE_MATCH > 0 {\n                // A match state is outside of the common case because it needs\n                // special case analysis. In particular, we need to record the\n                // last position as having matched and possibly quit the DFA if\n                // we don't need to keep matching.\n                next_si &= !STATE_MATCH;\n                result = Result::Match(at - 1);\n                if self.quit_after_match {\n                    return result;\n                }\n                self.last_match_si = next_si;\n                prev_si = next_si;\n\n                // This permits short-circuiting when matching a regex set.\n                // In particular, if this DFA state contains only match states,\n                // then it's impossible to extend the set of matches since\n                // match states are final. Therefore, we can quit.\n                if self.prog.matches.len() > 1 {\n                    let state = self.state(next_si);\n                    let just_matches =\n                        state.inst_ptrs().all(|ip| self.prog[ip].is_match());\n                    if just_matches {\n                        return result;\n                    }\n                }\n\n                // Another inner loop! If the DFA stays in this particular\n                // match state, then we can rip through all of the input\n                // very quickly, and only recording the match location once\n                // we've left this particular state.\n                let cur = at;\n                while (next_si & !STATE_MATCH) == prev_si\n                    && at + 2 < text.len()\n                {\n                    // Argument for safety is in the definition of next_si.\n                    next_si = unsafe {\n                        self.next_si(next_si & !STATE_MATCH, text, at)\n                    };\n                    at += 1;\n                }\n                if at > cur {\n                    result = Result::Match(at - 2);\n                }\n            } else if next_si & STATE_START > 0 {\n                // A start state isn't in the common case because we may\n                // what to do quick prefix scanning. If the program doesn't\n                // have a detected prefix, then start states are actually\n                // considered common and this case is never reached.\n                debug_assert!(self.has_prefix());\n                next_si &= !STATE_START;\n                prev_si = next_si;\n                at = match self.prefix_at(text, at) {\n                    None => return Result::NoMatch(text.len()),\n                    Some(i) => i,\n                };\n            } else if next_si >= STATE_UNKNOWN {\n                if next_si == STATE_QUIT {\n                    return Result::Quit;\n                }\n                // Finally, this corresponds to the case where the transition\n                // entered a state that can never lead to a match or a state\n                // that hasn't been computed yet. The latter being the \"slow\"\n                // path.\n                let byte = Byte::byte(text[at - 1]);\n                // We no longer care about the special bits in the state\n                // pointer.\n                prev_si &= STATE_MAX;\n                // Record where we are. This is used to track progress for\n                // determining whether we should quit if we've flushed the\n                // cache too much.\n                self.at = at;\n                next_si = match self.next_state(qcur, qnext, prev_si, byte) {\n                    None => return Result::Quit,\n                    Some(STATE_DEAD) => return result.set_non_match(at),\n                    Some(si) => si,\n                };\n                debug_assert!(next_si != STATE_UNKNOWN);\n                if next_si & STATE_MATCH > 0 {\n                    next_si &= !STATE_MATCH;\n                    result = Result::Match(at - 1);\n                    if self.quit_after_match {\n                        return result;\n                    }\n                    self.last_match_si = next_si;\n                }\n                prev_si = next_si;\n            } else {\n                prev_si = next_si;\n            }\n        }\n\n        // Run the DFA once more on the special EOF senitnel value.\n        // We don't care about the special bits in the state pointer any more,\n        // so get rid of them.\n        prev_si &= STATE_MAX;\n        prev_si = match self.next_state(qcur, qnext, prev_si, Byte::eof()) {\n            None => return Result::Quit,\n            Some(STATE_DEAD) => return result.set_non_match(text.len()),\n            Some(si) => si & !STATE_START,\n        };\n        debug_assert!(prev_si != STATE_UNKNOWN);\n        if prev_si & STATE_MATCH > 0 {\n            prev_si &= !STATE_MATCH;\n            self.last_match_si = prev_si;\n            result = Result::Match(text.len());\n        }\n        result\n    }\n\n    /// Executes the DFA on a reverse NFA.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn exec_at_reverse(\n        &mut self,\n        qcur: &mut SparseSet,\n        qnext: &mut SparseSet,\n        text: &[u8],\n    ) -> Result<usize> {\n        // The comments in `exec_at` above mostly apply here too. The main\n        // difference is that we move backwards over the input and we look for\n        // the longest possible match instead of the leftmost-first match.\n        //\n        // N.B. The code duplication here is regrettable. Efforts to improve\n        // it without sacrificing performance are welcome. ---AG\n        debug_assert!(self.prog.is_reverse);\n        let mut result = Result::NoMatch(self.at);\n        let (mut prev_si, mut next_si) = (self.start, self.start);\n        let mut at = self.at;\n        while at > 0 {\n            while next_si <= STATE_MAX && at > 0 {\n                // Argument for safety is in the definition of next_si.\n                at -= 1;\n                prev_si = unsafe { self.next_si(next_si, text, at) };\n                if prev_si > STATE_MAX || at <= 4 {\n                    mem::swap(&mut prev_si, &mut next_si);\n                    break;\n                }\n                at -= 1;\n                next_si = unsafe { self.next_si(prev_si, text, at) };\n                if next_si > STATE_MAX {\n                    break;\n                }\n                at -= 1;\n                prev_si = unsafe { self.next_si(next_si, text, at) };\n                if prev_si > STATE_MAX {\n                    mem::swap(&mut prev_si, &mut next_si);\n                    break;\n                }\n                at -= 1;\n                next_si = unsafe { self.next_si(prev_si, text, at) };\n            }\n            if next_si & STATE_MATCH > 0 {\n                next_si &= !STATE_MATCH;\n                result = Result::Match(at + 1);\n                if self.quit_after_match {\n                    return result;\n                }\n                self.last_match_si = next_si;\n                prev_si = next_si;\n                let cur = at;\n                while (next_si & !STATE_MATCH) == prev_si && at >= 2 {\n                    // Argument for safety is in the definition of next_si.\n                    at -= 1;\n                    next_si = unsafe {\n                        self.next_si(next_si & !STATE_MATCH, text, at)\n                    };\n                }\n                if at < cur {\n                    result = Result::Match(at + 2);\n                }\n            } else if next_si >= STATE_UNKNOWN {\n                if next_si == STATE_QUIT {\n                    return Result::Quit;\n                }\n                let byte = Byte::byte(text[at]);\n                prev_si &= STATE_MAX;\n                self.at = at;\n                next_si = match self.next_state(qcur, qnext, prev_si, byte) {\n                    None => return Result::Quit,\n                    Some(STATE_DEAD) => return result.set_non_match(at),\n                    Some(si) => si,\n                };\n                debug_assert!(next_si != STATE_UNKNOWN);\n                if next_si & STATE_MATCH > 0 {\n                    next_si &= !STATE_MATCH;\n                    result = Result::Match(at + 1);\n                    if self.quit_after_match {\n                        return result;\n                    }\n                    self.last_match_si = next_si;\n                }\n                prev_si = next_si;\n            } else {\n                prev_si = next_si;\n            }\n        }\n\n        // Run the DFA once more on the special EOF senitnel value.\n        prev_si = match self.next_state(qcur, qnext, prev_si, Byte::eof()) {\n            None => return Result::Quit,\n            Some(STATE_DEAD) => return result.set_non_match(0),\n            Some(si) => si,\n        };\n        debug_assert!(prev_si != STATE_UNKNOWN);\n        if prev_si & STATE_MATCH > 0 {\n            prev_si &= !STATE_MATCH;\n            self.last_match_si = prev_si;\n            result = Result::Match(0);\n        }\n        result\n    }\n\n    /// next_si transitions to the next state, where the transition input\n    /// corresponds to text[i].\n    ///\n    /// This elides bounds checks, and is therefore unsafe.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    unsafe fn next_si(&self, si: StatePtr, text: &[u8], i: usize) -> StatePtr {\n        // What is the argument for safety here?\n        // We have three unchecked accesses that could possibly violate safety:\n        //\n        //   1. The given byte of input (`text[i]`).\n        //   2. The class of the byte of input (`classes[text[i]]`).\n        //   3. The transition for the class (`trans[si + cls]`).\n        //\n        // (1) is only safe when calling next_si is guarded by\n        // `i < text.len()`.\n        //\n        // (2) is the easiest case to guarantee since `text[i]` is always a\n        // `u8` and `self.prog.byte_classes` always has length `u8::MAX`.\n        // (See `ByteClassSet.byte_classes` in `compile.rs`.)\n        //\n        // (3) is only safe if (1)+(2) are safe. Namely, the transitions\n        // of every state are defined to have length equal to the number of\n        // byte classes in the program. Therefore, a valid class leads to a\n        // valid transition. (All possible transitions are valid lookups, even\n        // if it points to a state that hasn't been computed yet.) (3) also\n        // relies on `si` being correct, but StatePtrs should only ever be\n        // retrieved from the transition table, which ensures they are correct.\n        debug_assert!(i < text.len());\n        let b = *text.get_unchecked(i);\n        debug_assert!((b as usize) < self.prog.byte_classes.len());\n        let cls = *self.prog.byte_classes.get_unchecked(b as usize);\n        self.cache.trans.next_unchecked(si, cls as usize)\n    }\n\n    /// Computes the next state given the current state and the current input\n    /// byte (which may be EOF).\n    ///\n    /// If STATE_DEAD is returned, then there is no valid state transition.\n    /// This implies that no permutation of future input can lead to a match\n    /// state.\n    ///\n    /// STATE_UNKNOWN can never be returned.\n    fn exec_byte(\n        &mut self,\n        qcur: &mut SparseSet,\n        qnext: &mut SparseSet,\n        mut si: StatePtr,\n        b: Byte,\n    ) -> Option<StatePtr> {\n        use prog::Inst::*;\n\n        // Initialize a queue with the current DFA state's NFA states.\n        qcur.clear();\n        for ip in self.state(si).inst_ptrs() {\n            qcur.insert(ip);\n        }\n\n        // Before inspecting the current byte, we may need to also inspect\n        // whether the position immediately preceding the current byte\n        // satisfies the empty assertions found in the current state.\n        //\n        // We only need to do this step if there are any empty assertions in\n        // the current state.\n        let is_word_last = self.state(si).flags().is_word();\n        let is_word = b.is_ascii_word();\n        if self.state(si).flags().has_empty() {\n            // Compute the flags immediately preceding the current byte.\n            // This means we only care about the \"end\" or \"end line\" flags.\n            // (The \"start\" flags are computed immediately proceding the\n            // current byte and is handled below.)\n            let mut flags = EmptyFlags::default();\n            if b.is_eof() {\n                flags.end = true;\n                flags.end_line = true;\n            } else if b.as_byte().map_or(false, |b| b == b'\\n') {\n                flags.end_line = true;\n            }\n            if is_word_last == is_word {\n                flags.not_word_boundary = true;\n            } else {\n                flags.word_boundary = true;\n            }\n            // Now follow epsilon transitions from every NFA state, but make\n            // sure we only follow transitions that satisfy our flags.\n            qnext.clear();\n            for &ip in &*qcur {\n                self.follow_epsilons(usize_to_u32(ip), qnext, flags);\n            }\n            mem::swap(qcur, qnext);\n        }\n\n        // Now we set flags for immediately after the current byte. Since start\n        // states are processed separately, and are the only states that can\n        // have the StartText flag set, we therefore only need to worry about\n        // the StartLine flag here.\n        //\n        // We do also keep track of whether this DFA state contains a NFA state\n        // that is a matching state. This is precisely how we delay the DFA\n        // matching by one byte in order to process the special EOF sentinel\n        // byte. Namely, if this DFA state containing a matching NFA state,\n        // then it is the *next* DFA state that is marked as a match.\n        let mut empty_flags = EmptyFlags::default();\n        let mut state_flags = StateFlags::default();\n        empty_flags.start_line = b.as_byte().map_or(false, |b| b == b'\\n');\n        if b.is_ascii_word() {\n            state_flags.set_word();\n        }\n        // Now follow all epsilon transitions again, but only after consuming\n        // the current byte.\n        qnext.clear();\n        for &ip in &*qcur {\n            match self.prog[ip as usize] {\n                // These states never happen in a byte-based program.\n                Char(_) | Ranges(_) => unreachable!(),\n                // These states are handled when following epsilon transitions.\n                Save(_) | Split(_) | EmptyLook(_) => {}\n                Match(_) => {\n                    state_flags.set_match();\n                    if !self.continue_past_first_match() {\n                        break;\n                    } else if self.prog.matches.len() > 1\n                        && !qnext.contains(ip as usize)\n                    {\n                        // If we are continuing on to find other matches,\n                        // then keep a record of the match states we've seen.\n                        qnext.insert(ip);\n                    }\n                }\n                Bytes(ref inst) => {\n                    if b.as_byte().map_or(false, |b| inst.matches(b)) {\n                        self.follow_epsilons(\n                            inst.goto as InstPtr,\n                            qnext,\n                            empty_flags,\n                        );\n                    }\n                }\n            }\n        }\n\n        let cache = if b.is_eof() && self.prog.matches.len() > 1 {\n            // If we're processing the last byte of the input and we're\n            // matching a regex set, then make the next state contain the\n            // previous states transitions. We do this so that the main\n            // matching loop can extract all of the match instructions.\n            mem::swap(qcur, qnext);\n            // And don't cache this state because it's totally bunk.\n            false\n        } else {\n            true\n        };\n\n        // We've now built up the set of NFA states that ought to comprise the\n        // next DFA state, so try to find it in the cache, and if it doesn't\n        // exist, cache it.\n        //\n        // N.B. We pass `&mut si` here because the cache may clear itself if\n        // it has gotten too full. When that happens, the location of the\n        // current state may change.\n        let mut next =\n            match self.cached_state(qnext, state_flags, Some(&mut si)) {\n                None => return None,\n                Some(next) => next,\n            };\n        if (self.start & !STATE_START) == next {\n            // Start states can never be match states since all matches are\n            // delayed by one byte.\n            debug_assert!(!self.state(next).flags().is_match());\n            next = self.start_ptr(next);\n        }\n        if next <= STATE_MAX && self.state(next).flags().is_match() {\n            next |= STATE_MATCH;\n        }\n        debug_assert!(next != STATE_UNKNOWN);\n        // And now store our state in the current state's next list.\n        if cache {\n            let cls = self.byte_class(b);\n            self.cache.trans.set_next(si, cls, next);\n        }\n        Some(next)\n    }\n\n    /// Follows the epsilon transitions starting at (and including) `ip`. The\n    /// resulting states are inserted into the ordered set `q`.\n    ///\n    /// Conditional epsilon transitions (i.e., empty width assertions) are only\n    /// followed if they are satisfied by the given flags, which should\n    /// represent the flags set at the current location in the input.\n    ///\n    /// If the current location corresponds to the empty string, then only the\n    /// end line and/or end text flags may be set. If the current location\n    /// corresponds to a real byte in the input, then only the start line\n    /// and/or start text flags may be set.\n    ///\n    /// As an exception to the above, when finding the initial state, any of\n    /// the above flags may be set:\n    ///\n    /// If matching starts at the beginning of the input, then start text and\n    /// start line should be set. If the input is empty, then end text and end\n    /// line should also be set.\n    ///\n    /// If matching starts after the beginning of the input, then only start\n    /// line should be set if the preceding byte is `\\n`. End line should never\n    /// be set in this case. (Even if the proceding byte is a `\\n`, it will\n    /// be handled in a subsequent DFA state.)\n    fn follow_epsilons(\n        &mut self,\n        ip: InstPtr,\n        q: &mut SparseSet,\n        flags: EmptyFlags,\n    ) {\n        use prog::EmptyLook::*;\n        use prog::Inst::*;\n\n        // We need to traverse the NFA to follow epsilon transitions, so avoid\n        // recursion with an explicit stack.\n        self.cache.stack.push(ip);\n        while let Some(mut ip) = self.cache.stack.pop() {\n            // Try to munch through as many states as possible without\n            // pushes/pops to the stack.\n            loop {\n                // Don't visit states we've already added.\n                if q.contains(ip as usize) {\n                    break;\n                }\n                q.insert(ip as usize);\n                match self.prog[ip as usize] {\n                    Char(_) | Ranges(_) => unreachable!(),\n                    Match(_) | Bytes(_) => {\n                        break;\n                    }\n                    EmptyLook(ref inst) => {\n                        // Only follow empty assertion states if our flags\n                        // satisfy the assertion.\n                        match inst.look {\n                            StartLine if flags.start_line => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            EndLine if flags.end_line => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            StartText if flags.start => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            EndText if flags.end => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            WordBoundaryAscii if flags.word_boundary => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            NotWordBoundaryAscii\n                                if flags.not_word_boundary =>\n                            {\n                                ip = inst.goto as InstPtr;\n                            }\n                            WordBoundary if flags.word_boundary => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            NotWordBoundary if flags.not_word_boundary => {\n                                ip = inst.goto as InstPtr;\n                            }\n                            StartLine | EndLine | StartText | EndText\n                            | WordBoundaryAscii | NotWordBoundaryAscii\n                            | WordBoundary | NotWordBoundary => {\n                                break;\n                            }\n                        }\n                    }\n                    Save(ref inst) => {\n                        ip = inst.goto as InstPtr;\n                    }\n                    Split(ref inst) => {\n                        self.cache.stack.push(inst.goto2 as InstPtr);\n                        ip = inst.goto1 as InstPtr;\n                    }\n                }\n            }\n        }\n    }\n\n    /// Find a previously computed state matching the given set of instructions\n    /// and is_match bool.\n    ///\n    /// The given set of instructions should represent a single state in the\n    /// NFA along with all states reachable without consuming any input.\n    ///\n    /// The is_match bool should be true if and only if the preceding DFA state\n    /// contains an NFA matching state. The cached state produced here will\n    /// then signify a match. (This enables us to delay a match by one byte,\n    /// in order to account for the EOF sentinel byte.)\n    ///\n    /// If the cache is full, then it is wiped before caching a new state.\n    ///\n    /// The current state should be specified if it exists, since it will need\n    /// to be preserved if the cache clears itself. (Start states are\n    /// always saved, so they should not be passed here.) It takes a mutable\n    /// pointer to the index because if the cache is cleared, the state's\n    /// location may change.\n    fn cached_state(\n        &mut self,\n        q: &SparseSet,\n        mut state_flags: StateFlags,\n        current_state: Option<&mut StatePtr>,\n    ) -> Option<StatePtr> {\n        // If we couldn't come up with a non-empty key to represent this state,\n        // then it is dead and can never lead to a match.\n        //\n        // Note that inst_flags represent the set of empty width assertions\n        // in q. We use this as an optimization in exec_byte to determine when\n        // we should follow epsilon transitions at the empty string preceding\n        // the current byte.\n        let key = match self.cached_state_key(q, &mut state_flags) {\n            None => return Some(STATE_DEAD),\n            Some(v) => v,\n        };\n        // In the cache? Cool. Done.\n        if let Some(si) = self.cache.compiled.get_ptr(&key) {\n            return Some(si);\n        }\n        // If the cache has gotten too big, wipe it.\n        if self.approximate_size() > self.prog.dfa_size_limit\n            && !self.clear_cache_and_save(current_state)\n        {\n            // Ooops. DFA is giving up.\n            return None;\n        }\n        // Allocate room for our state and add it.\n        self.add_state(key)\n    }\n\n    /// Produces a key suitable for describing a state in the DFA cache.\n    ///\n    /// The key invariant here is that equivalent keys are produced for any two\n    /// sets of ordered NFA states (and toggling of whether the previous NFA\n    /// states contain a match state) that do not discriminate a match for any\n    /// input.\n    ///\n    /// Specifically, q should be an ordered set of NFA states and is_match\n    /// should be true if and only if the previous NFA states contained a match\n    /// state.\n    fn cached_state_key(\n        &mut self,\n        q: &SparseSet,\n        state_flags: &mut StateFlags,\n    ) -> Option<State> {\n        use prog::Inst::*;\n\n        // We need to build up enough information to recognize pre-built states\n        // in the DFA. Generally speaking, this includes every instruction\n        // except for those which are purely epsilon transitions, e.g., the\n        // Save and Split instructions.\n        //\n        // Empty width assertions are also epsilon transitions, but since they\n        // are conditional, we need to make them part of a state's key in the\n        // cache.\n\n        let mut insts =\n            mem::replace(&mut self.cache.insts_scratch_space, vec![]);\n        insts.clear();\n        // Reserve 1 byte for flags.\n        insts.push(0);\n\n        let mut prev = 0;\n        for &ip in q {\n            let ip = usize_to_u32(ip);\n            match self.prog[ip as usize] {\n                Char(_) | Ranges(_) => unreachable!(),\n                Save(_) | Split(_) => {}\n                Bytes(_) => push_inst_ptr(&mut insts, &mut prev, ip),\n                EmptyLook(_) => {\n                    state_flags.set_empty();\n                    push_inst_ptr(&mut insts, &mut prev, ip)\n                }\n                Match(_) => {\n                    push_inst_ptr(&mut insts, &mut prev, ip);\n                    if !self.continue_past_first_match() {\n                        break;\n                    }\n                }\n            }\n        }\n        // If we couldn't transition to any other instructions and we didn't\n        // see a match when expanding NFA states previously, then this is a\n        // dead state and no amount of additional input can transition out\n        // of this state.\n        let opt_state = if insts.len() == 1 && !state_flags.is_match() {\n            None\n        } else {\n            let StateFlags(f) = *state_flags;\n            insts[0] = f;\n            Some(State { data: Arc::from(&*insts) })\n        };\n        self.cache.insts_scratch_space = insts;\n        opt_state\n    }\n\n    /// Clears the cache, but saves and restores current_state if it is not\n    /// none.\n    ///\n    /// The current state must be provided here in case its location in the\n    /// cache changes.\n    ///\n    /// This returns false if the cache is not cleared and the DFA should\n    /// give up.\n    fn clear_cache_and_save(\n        &mut self,\n        current_state: Option<&mut StatePtr>,\n    ) -> bool {\n        if self.cache.compiled.is_empty() {\n            // Nothing to clear...\n            return true;\n        }\n        match current_state {\n            None => self.clear_cache(),\n            Some(si) => {\n                let cur = self.state(*si).clone();\n                if !self.clear_cache() {\n                    return false;\n                }\n                // The unwrap is OK because we just cleared the cache and\n                // therefore know that the next state pointer won't exceed\n                // STATE_MAX.\n                *si = self.restore_state(cur).unwrap();\n                true\n            }\n        }\n    }\n\n    /// Wipes the state cache, but saves and restores the current start state.\n    ///\n    /// This returns false if the cache is not cleared and the DFA should\n    /// give up.\n    fn clear_cache(&mut self) -> bool {\n        // Bail out of the DFA if we're moving too \"slowly.\"\n        // A heuristic from RE2: assume the DFA is too slow if it is processing\n        // 10 or fewer bytes per state.\n        // Additionally, we permit the cache to be flushed a few times before\n        // caling it quits.\n        let nstates = self.cache.compiled.len();\n        if self.cache.flush_count >= 3\n            && self.at >= self.last_cache_flush\n            && (self.at - self.last_cache_flush) <= 10 * nstates\n        {\n            return false;\n        }\n        // Update statistics tracking cache flushes.\n        self.last_cache_flush = self.at;\n        self.cache.flush_count += 1;\n\n        // OK, actually flush the cache.\n        let start = self.state(self.start & !STATE_START).clone();\n        let last_match = if self.last_match_si <= STATE_MAX {\n            Some(self.state(self.last_match_si).clone())\n        } else {\n            None\n        };\n        self.cache.reset_size();\n        self.cache.trans.clear();\n        self.cache.compiled.clear();\n        for s in &mut self.cache.start_states {\n            *s = STATE_UNKNOWN;\n        }\n        // The unwraps are OK because we just cleared the cache and therefore\n        // know that the next state pointer won't exceed STATE_MAX.\n        let start_ptr = self.restore_state(start).unwrap();\n        self.start = self.start_ptr(start_ptr);\n        if let Some(last_match) = last_match {\n            self.last_match_si = self.restore_state(last_match).unwrap();\n        }\n        true\n    }\n\n    /// Restores the given state back into the cache, and returns a pointer\n    /// to it.\n    fn restore_state(&mut self, state: State) -> Option<StatePtr> {\n        // If we've already stored this state, just return a pointer to it.\n        // None will be the wiser.\n        if let Some(si) = self.cache.compiled.get_ptr(&state) {\n            return Some(si);\n        }\n        self.add_state(state)\n    }\n\n    /// Returns the next state given the current state si and current byte\n    /// b. {qcur,qnext} are used as scratch space for storing ordered NFA\n    /// states.\n    ///\n    /// This tries to fetch the next state from the cache, but if that fails,\n    /// it computes the next state, caches it and returns a pointer to it.\n    ///\n    /// The pointer can be to a real state, or it can be STATE_DEAD.\n    /// STATE_UNKNOWN cannot be returned.\n    ///\n    /// None is returned if a new state could not be allocated (i.e., the DFA\n    /// ran out of space and thinks it's running too slowly).\n    fn next_state(\n        &mut self,\n        qcur: &mut SparseSet,\n        qnext: &mut SparseSet,\n        si: StatePtr,\n        b: Byte,\n    ) -> Option<StatePtr> {\n        if si == STATE_DEAD {\n            return Some(STATE_DEAD);\n        }\n        match self.cache.trans.next(si, self.byte_class(b)) {\n            STATE_UNKNOWN => self.exec_byte(qcur, qnext, si, b),\n            STATE_QUIT => None,\n            STATE_DEAD => Some(STATE_DEAD),\n            nsi => Some(nsi),\n        }\n    }\n\n    /// Computes and returns the start state, where searching begins at\n    /// position `at` in `text`. If the state has already been computed,\n    /// then it is pulled from the cache. If the state hasn't been cached,\n    /// then it is computed, cached and a pointer to it is returned.\n    ///\n    /// This may return STATE_DEAD but never STATE_UNKNOWN.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn start_state(\n        &mut self,\n        q: &mut SparseSet,\n        empty_flags: EmptyFlags,\n        state_flags: StateFlags,\n    ) -> Option<StatePtr> {\n        // Compute an index into our cache of start states based on the set\n        // of empty/state flags set at the current position in the input. We\n        // don't use every flag since not all flags matter. For example, since\n        // matches are delayed by one byte, start states can never be match\n        // states.\n        let flagi = {\n            (((empty_flags.start as u8) << 0)\n                | ((empty_flags.end as u8) << 1)\n                | ((empty_flags.start_line as u8) << 2)\n                | ((empty_flags.end_line as u8) << 3)\n                | ((empty_flags.word_boundary as u8) << 4)\n                | ((empty_flags.not_word_boundary as u8) << 5)\n                | ((state_flags.is_word() as u8) << 6)) as usize\n        };\n        match self.cache.start_states[flagi] {\n            STATE_UNKNOWN => {}\n            STATE_DEAD => return Some(STATE_DEAD),\n            si => return Some(si),\n        }\n        q.clear();\n        let start = usize_to_u32(self.prog.start);\n        self.follow_epsilons(start, q, empty_flags);\n        // Start states can never be match states because we delay every match\n        // by one byte. Given an empty string and an empty match, the match\n        // won't actually occur until the DFA processes the special EOF\n        // sentinel byte.\n        let sp = match self.cached_state(q, state_flags, None) {\n            None => return None,\n            Some(sp) => self.start_ptr(sp),\n        };\n        self.cache.start_states[flagi] = sp;\n        Some(sp)\n    }\n\n    /// Computes the set of starting flags for the given position in text.\n    ///\n    /// This should only be used when executing the DFA forwards over the\n    /// input.\n    fn start_flags(&self, text: &[u8], at: usize) -> (EmptyFlags, StateFlags) {\n        let mut empty_flags = EmptyFlags::default();\n        let mut state_flags = StateFlags::default();\n        empty_flags.start = at == 0;\n        empty_flags.end = text.is_empty();\n        empty_flags.start_line = at == 0 || text[at - 1] == b'\\n';\n        empty_flags.end_line = text.is_empty();\n\n        let is_word_last = at > 0 && Byte::byte(text[at - 1]).is_ascii_word();\n        let is_word = at < text.len() && Byte::byte(text[at]).is_ascii_word();\n        if is_word_last {\n            state_flags.set_word();\n        }\n        if is_word == is_word_last {\n            empty_flags.not_word_boundary = true;\n        } else {\n            empty_flags.word_boundary = true;\n        }\n        (empty_flags, state_flags)\n    }\n\n    /// Computes the set of starting flags for the given position in text.\n    ///\n    /// This should only be used when executing the DFA in reverse over the\n    /// input.\n    fn start_flags_reverse(\n        &self,\n        text: &[u8],\n        at: usize,\n    ) -> (EmptyFlags, StateFlags) {\n        let mut empty_flags = EmptyFlags::default();\n        let mut state_flags = StateFlags::default();\n        empty_flags.start = at == text.len();\n        empty_flags.end = text.is_empty();\n        empty_flags.start_line = at == text.len() || text[at] == b'\\n';\n        empty_flags.end_line = text.is_empty();\n\n        let is_word_last =\n            at < text.len() && Byte::byte(text[at]).is_ascii_word();\n        let is_word = at > 0 && Byte::byte(text[at - 1]).is_ascii_word();\n        if is_word_last {\n            state_flags.set_word();\n        }\n        if is_word == is_word_last {\n            empty_flags.not_word_boundary = true;\n        } else {\n            empty_flags.word_boundary = true;\n        }\n        (empty_flags, state_flags)\n    }\n\n    /// Returns a reference to a State given a pointer to it.\n    fn state(&self, si: StatePtr) -> &State {\n        self.cache.compiled.get_state(si).unwrap()\n    }\n\n    /// Adds the given state to the DFA.\n    ///\n    /// This allocates room for transitions out of this state in\n    /// self.cache.trans. The transitions can be set with the returned\n    /// StatePtr.\n    ///\n    /// If None is returned, then the state limit was reached and the DFA\n    /// should quit.\n    fn add_state(&mut self, state: State) -> Option<StatePtr> {\n        // This will fail if the next state pointer exceeds STATE_PTR. In\n        // practice, the cache limit will prevent us from ever getting here,\n        // but maybe callers will set the cache size to something ridiculous...\n        let si = match self.cache.trans.add() {\n            None => return None,\n            Some(si) => si,\n        };\n        // If the program has a Unicode word boundary, then set any transitions\n        // for non-ASCII bytes to STATE_QUIT. If the DFA stumbles over such a\n        // transition, then it will quit and an alternative matching engine\n        // will take over.\n        if self.prog.has_unicode_word_boundary {\n            for b in 128..256 {\n                let cls = self.byte_class(Byte::byte(b as u8));\n                self.cache.trans.set_next(si, cls, STATE_QUIT);\n            }\n        }\n        // Finally, put our actual state on to our heap of states and index it\n        // so we can find it later.\n        self.cache.size += self.cache.trans.state_heap_size()\n            + state.data.len()\n            + (2 * mem::size_of::<State>())\n            + mem::size_of::<StatePtr>();\n        self.cache.compiled.insert(state, si);\n        // Transition table and set of states and map should all be in sync.\n        debug_assert!(\n            self.cache.compiled.len() == self.cache.trans.num_states()\n        );\n        Some(si)\n    }\n\n    /// Quickly finds the next occurrence of any literal prefixes in the regex.\n    /// If there are no literal prefixes, then the current position is\n    /// returned. If there are literal prefixes and one could not be found,\n    /// then None is returned.\n    ///\n    /// This should only be called when the DFA is in a start state.\n    fn prefix_at(&self, text: &[u8], at: usize) -> Option<usize> {\n        self.prog.prefixes.find(&text[at..]).map(|(s, _)| at + s)\n    }\n\n    /// Returns the number of byte classes required to discriminate transitions\n    /// in each state.\n    ///\n    /// invariant: num_byte_classes() == len(State.next)\n    fn num_byte_classes(&self) -> usize {\n        // We add 1 to account for the special EOF byte.\n        (self.prog.byte_classes[255] as usize + 1) + 1\n    }\n\n    /// Given an input byte or the special EOF sentinel, return its\n    /// corresponding byte class.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn byte_class(&self, b: Byte) -> usize {\n        match b.as_byte() {\n            None => self.num_byte_classes() - 1,\n            Some(b) => self.u8_class(b),\n        }\n    }\n\n    /// Like byte_class, but explicitly for u8s.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn u8_class(&self, b: u8) -> usize {\n        self.prog.byte_classes[b as usize] as usize\n    }\n\n    /// Returns true if the DFA should continue searching past the first match.\n    ///\n    /// Leftmost first semantics in the DFA are preserved by not following NFA\n    /// transitions after the first match is seen.\n    ///\n    /// On occasion, we want to avoid leftmost first semantics to find either\n    /// the longest match (for reverse search) or all possible matches (for\n    /// regex sets).\n    fn continue_past_first_match(&self) -> bool {\n        self.prog.is_reverse || self.prog.matches.len() > 1\n    }\n\n    /// Returns true if there is a prefix we can quickly search for.\n    fn has_prefix(&self) -> bool {\n        !self.prog.is_reverse\n            && !self.prog.prefixes.is_empty()\n            && !self.prog.is_anchored_start\n    }\n\n    /// Sets the STATE_START bit in the given state pointer if and only if\n    /// we have a prefix to scan for.\n    ///\n    /// If there's no prefix, then it's a waste to treat the start state\n    /// specially.\n    fn start_ptr(&self, si: StatePtr) -> StatePtr {\n        if self.has_prefix() {\n            si | STATE_START\n        } else {\n            si\n        }\n    }\n\n    /// Approximate size returns the approximate heap space currently used by\n    /// the DFA. It is used to determine whether the DFA's state cache needs to\n    /// be wiped. Namely, it is possible that for certain regexes on certain\n    /// inputs, a new state could be created for every byte of input. (This is\n    /// bad for memory use, so we bound it with a cache.)\n    fn approximate_size(&self) -> usize {\n        self.cache.size + self.prog.approximate_size()\n    }\n}\n\n/// An abstraction for representing a map of states. The map supports two\n/// different ways of state lookup. One is fast constant time access via a\n/// state pointer. The other is a hashmap lookup based on the DFA's\n/// constituent NFA states.\n///\n/// A DFA state internally uses an Arc such that we only need to store the\n/// set of NFA states on the heap once, even though we support looking up\n/// states by two different means. A more natural way to express this might\n/// use raw pointers, but an Arc is safe and effectively achieves the same\n/// thing.\n#[derive(Debug)]\nstruct StateMap {\n    /// The keys are not actually static but rely on always pointing to a\n    /// buffer in `states` which will never be moved except when clearing\n    /// the map or on drop, in which case the keys of this map will be\n    /// removed before\n    map: HashMap<State, StatePtr>,\n    /// Our set of states. Note that `StatePtr / num_byte_classes` indexes\n    /// this Vec rather than just a `StatePtr`.\n    states: Vec<State>,\n    /// The number of byte classes in the DFA. Used to index `states`.\n    num_byte_classes: usize,\n}\n\nimpl StateMap {\n    fn new(num_byte_classes: usize) -> StateMap {\n        StateMap {\n            map: HashMap::new(),\n            states: vec![],\n            num_byte_classes: num_byte_classes,\n        }\n    }\n\n    fn len(&self) -> usize {\n        self.states.len()\n    }\n\n    fn is_empty(&self) -> bool {\n        self.states.is_empty()\n    }\n\n    fn get_ptr(&self, state: &State) -> Option<StatePtr> {\n        self.map.get(state).cloned()\n    }\n\n    fn get_state(&self, si: StatePtr) -> Option<&State> {\n        self.states.get(si as usize / self.num_byte_classes)\n    }\n\n    fn insert(&mut self, state: State, si: StatePtr) {\n        self.map.insert(state.clone(), si);\n        self.states.push(state);\n    }\n\n    fn clear(&mut self) {\n        self.map.clear();\n        self.states.clear();\n    }\n}\n\nimpl Transitions {\n    /// Create a new transition table.\n    ///\n    /// The number of byte classes corresponds to the stride. Every state will\n    /// have `num_byte_classes` slots for transitions.\n    fn new(num_byte_classes: usize) -> Transitions {\n        Transitions { table: vec![], num_byte_classes: num_byte_classes }\n    }\n\n    /// Returns the total number of states currently in this table.\n    fn num_states(&self) -> usize {\n        self.table.len() / self.num_byte_classes\n    }\n\n    /// Allocates room for one additional state and returns a pointer to it.\n    ///\n    /// If there's no more room, None is returned.\n    fn add(&mut self) -> Option<StatePtr> {\n        let si = self.table.len();\n        if si > STATE_MAX as usize {\n            return None;\n        }\n        self.table.extend(repeat(STATE_UNKNOWN).take(self.num_byte_classes));\n        Some(usize_to_u32(si))\n    }\n\n    /// Clears the table of all states.\n    fn clear(&mut self) {\n        self.table.clear();\n    }\n\n    /// Sets the transition from (si, cls) to next.\n    fn set_next(&mut self, si: StatePtr, cls: usize, next: StatePtr) {\n        self.table[si as usize + cls] = next;\n    }\n\n    /// Returns the transition corresponding to (si, cls).\n    fn next(&self, si: StatePtr, cls: usize) -> StatePtr {\n        self.table[si as usize + cls]\n    }\n\n    /// The heap size, in bytes, of a single state in the transition table.\n    fn state_heap_size(&self) -> usize {\n        self.num_byte_classes * mem::size_of::<StatePtr>()\n    }\n\n    /// Like `next`, but uses unchecked access and is therefore unsafe.\n    unsafe fn next_unchecked(&self, si: StatePtr, cls: usize) -> StatePtr {\n        debug_assert!((si as usize) < self.table.len());\n        debug_assert!(cls < self.num_byte_classes);\n        *self.table.get_unchecked(si as usize + cls)\n    }\n}\n\nimpl StateFlags {\n    fn is_match(&self) -> bool {\n        self.0 & 0b0000000_1 > 0\n    }\n\n    fn set_match(&mut self) {\n        self.0 |= 0b0000000_1;\n    }\n\n    fn is_word(&self) -> bool {\n        self.0 & 0b000000_1_0 > 0\n    }\n\n    fn set_word(&mut self) {\n        self.0 |= 0b000000_1_0;\n    }\n\n    fn has_empty(&self) -> bool {\n        self.0 & 0b00000_1_00 > 0\n    }\n\n    fn set_empty(&mut self) {\n        self.0 |= 0b00000_1_00;\n    }\n}\n\nimpl Byte {\n    fn byte(b: u8) -> Self {\n        Byte(b as u16)\n    }\n    fn eof() -> Self {\n        Byte(256)\n    }\n    fn is_eof(&self) -> bool {\n        self.0 == 256\n    }\n\n    fn is_ascii_word(&self) -> bool {\n        let b = match self.as_byte() {\n            None => return false,\n            Some(b) => b,\n        };\n        match b {\n            b'A'..=b'Z' | b'a'..=b'z' | b'0'..=b'9' | b'_' => true,\n            _ => false,\n        }\n    }\n\n    fn as_byte(&self) -> Option<u8> {\n        if self.is_eof() {\n            None\n        } else {\n            Some(self.0 as u8)\n        }\n    }\n}\n\nimpl fmt::Debug for State {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let ips: Vec<usize> = self.inst_ptrs().collect();\n        f.debug_struct(\"State\")\n            .field(\"flags\", &self.flags())\n            .field(\"insts\", &ips)\n            .finish()\n    }\n}\n\nimpl fmt::Debug for Transitions {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let mut fmtd = f.debug_map();\n        for si in 0..self.num_states() {\n            let s = si * self.num_byte_classes;\n            let e = s + self.num_byte_classes;\n            fmtd.entry(&si.to_string(), &TransitionsRow(&self.table[s..e]));\n        }\n        fmtd.finish()\n    }\n}\n\nstruct TransitionsRow<'a>(&'a [StatePtr]);\n\nimpl<'a> fmt::Debug for TransitionsRow<'a> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let mut fmtd = f.debug_map();\n        for (b, si) in self.0.iter().enumerate() {\n            match *si {\n                STATE_UNKNOWN => {}\n                STATE_DEAD => {\n                    fmtd.entry(&vb(b as usize), &\"DEAD\");\n                }\n                si => {\n                    fmtd.entry(&vb(b as usize), &si.to_string());\n                }\n            }\n        }\n        fmtd.finish()\n    }\n}\n\nimpl fmt::Debug for StateFlags {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.debug_struct(\"StateFlags\")\n            .field(\"is_match\", &self.is_match())\n            .field(\"is_word\", &self.is_word())\n            .field(\"has_empty\", &self.has_empty())\n            .finish()\n    }\n}\n\n/// Helper function for formatting a byte as a nice-to-read escaped string.\nfn vb(b: usize) -> String {\n    use std::ascii::escape_default;\n\n    if b > ::std::u8::MAX as usize {\n        \"EOF\".to_owned()\n    } else {\n        let escaped = escape_default(b as u8).collect::<Vec<u8>>();\n        String::from_utf8_lossy(&escaped).into_owned()\n    }\n}\n\nfn usize_to_u32(n: usize) -> u32 {\n    if (n as u64) > (::std::u32::MAX as u64) {\n        panic!(\"BUG: {} is too big to fit into u32\", n)\n    }\n    n as u32\n}\n\n#[allow(dead_code)] // useful for debugging\nfn show_state_ptr(si: StatePtr) -> String {\n    let mut s = format!(\"{:?}\", si & STATE_MAX);\n    if si == STATE_UNKNOWN {\n        s = format!(\"{} (unknown)\", s);\n    }\n    if si == STATE_DEAD {\n        s = format!(\"{} (dead)\", s);\n    }\n    if si == STATE_QUIT {\n        s = format!(\"{} (quit)\", s);\n    }\n    if si & STATE_START > 0 {\n        s = format!(\"{} (start)\", s);\n    }\n    if si & STATE_MATCH > 0 {\n        s = format!(\"{} (match)\", s);\n    }\n    s\n}\n\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\nfn write_vari32(data: &mut Vec<u8>, n: i32) {\n    let mut un = (n as u32) << 1;\n    if n < 0 {\n        un = !un;\n    }\n    write_varu32(data, un)\n}\n\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\nfn read_vari32(data: &[u8]) -> (i32, usize) {\n    let (un, i) = read_varu32(data);\n    let mut n = (un >> 1) as i32;\n    if un & 1 != 0 {\n        n = !n;\n    }\n    (n, i)\n}\n\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\nfn write_varu32(data: &mut Vec<u8>, mut n: u32) {\n    while n >= 0b1000_0000 {\n        data.push((n as u8) | 0b1000_0000);\n        n >>= 7;\n    }\n    data.push(n as u8);\n}\n\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\nfn read_varu32(data: &[u8]) -> (u32, usize) {\n    let mut n: u32 = 0;\n    let mut shift: u32 = 0;\n    for (i, &b) in data.iter().enumerate() {\n        if b < 0b1000_0000 {\n            return (n | ((b as u32) << shift), i + 1);\n        }\n        n |= ((b as u32) & 0b0111_1111) << shift;\n        shift += 7;\n    }\n    (0, 0)\n}\n\n#[cfg(test)]\nmod tests {\n    extern crate rand;\n\n    use super::{\n        push_inst_ptr, read_vari32, read_varu32, write_vari32, write_varu32,\n        State, StateFlags,\n    };\n    use quickcheck::{quickcheck, QuickCheck, StdGen};\n    use std::sync::Arc;\n\n    #[test]\n    fn prop_state_encode_decode() {\n        fn p(ips: Vec<u32>, flags: u8) -> bool {\n            let mut data = vec![flags];\n            let mut prev = 0;\n            for &ip in ips.iter() {\n                push_inst_ptr(&mut data, &mut prev, ip);\n            }\n            let state = State { data: Arc::from(&data[..]) };\n\n            let expected: Vec<usize> =\n                ips.into_iter().map(|ip| ip as usize).collect();\n            let got: Vec<usize> = state.inst_ptrs().collect();\n            expected == got && state.flags() == StateFlags(flags)\n        }\n        QuickCheck::new()\n            .gen(StdGen::new(self::rand::thread_rng(), 10_000))\n            .quickcheck(p as fn(Vec<u32>, u8) -> bool);\n    }\n\n    #[test]\n    fn prop_read_write_u32() {\n        fn p(n: u32) -> bool {\n            let mut buf = vec![];\n            write_varu32(&mut buf, n);\n            let (got, nread) = read_varu32(&buf);\n            nread == buf.len() && got == n\n        }\n        quickcheck(p as fn(u32) -> bool);\n    }\n\n    #[test]\n    fn prop_read_write_i32() {\n        fn p(n: i32) -> bool {\n            let mut buf = vec![];\n            write_vari32(&mut buf, n);\n            let (got, nread) = read_vari32(&buf);\n            nread == buf.len() && got == n\n        }\n        quickcheck(p as fn(i32) -> bool);\n    }\n}\n","traces":[{"line":57,"address":[5247232],"length":1,"stats":{"Line":8},"fn_name":"can_exec"},{"line":65,"address":[5247310,5247244],"length":1,"stats":{"Line":16},"fn_name":null},{"line":66,"address":[5247378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[5247464,5247538,5247361,5247536,5247405],"length":1,"stats":{"Line":26},"fn_name":null},{"line":69,"address":[5247524],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[5247486,5247526],"length":1,"stats":{"Line":9},"fn_name":null},{"line":74,"address":[5247457],"length":1,"stats":{"Line":9},"fn_name":null},{"line":217,"address":[5305312],"length":1,"stats":{"Line":2},"fn_name":"is_match<usize>"},{"line":218,"address":[5305333,5305340],"length":1,"stats":{"Line":3},"fn_name":null},{"line":219,"address":[5305321,5305335],"length":1,"stats":{"Line":5},"fn_name":null},{"line":220,"address":[5305342],"length":1,"stats":{"Line":2},"fn_name":null},{"line":228,"address":[5305376,5305485],"length":1,"stats":{"Line":2},"fn_name":"map<(usize, usize),usize,closure-0>"},{"line":229,"address":[5305517,5305422],"length":1,"stats":{"Line":2},"fn_name":null},{"line":230,"address":[5305503,5305380,5305431],"length":1,"stats":{"Line":6},"fn_name":null},{"line":231,"address":[5305524],"length":1,"stats":{"Line":0},"fn_name":null},{"line":232,"address":[5305413],"length":1,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[5305584],"length":1,"stats":{"Line":3},"fn_name":"set_non_match<usize>"},{"line":240,"address":[5305680,5305660],"length":1,"stats":{"Line":5},"fn_name":null},{"line":241,"address":[5305603,5305666],"length":1,"stats":{"Line":5},"fn_name":null},{"line":242,"address":[5305625],"length":1,"stats":{"Line":3},"fn_name":null},{"line":276,"address":[5247552],"length":1,"stats":{"Line":10},"fn_name":"push_inst_ptr"},{"line":277,"address":[5247666,5247636,5247570],"length":1,"stats":{"Line":10},"fn_name":null},{"line":278,"address":[5247613],"length":1,"stats":{"Line":10},"fn_name":null},{"line":279,"address":[5247629],"length":1,"stats":{"Line":10},"fn_name":null},{"line":290,"address":[5247680],"length":1,"stats":{"Line":10},"fn_name":"next"},{"line":291,"address":[5247689],"length":1,"stats":{"Line":10},"fn_name":null},{"line":292,"address":[5247754],"length":1,"stats":{"Line":10},"fn_name":null},{"line":294,"address":[5247782,5247730],"length":1,"stats":{"Line":20},"fn_name":null},{"line":295,"address":[5247801,5248037,5248067],"length":1,"stats":{"Line":10},"fn_name":null},{"line":296,"address":[5247868,5247832],"length":1,"stats":{"Line":10},"fn_name":null},{"line":297,"address":[5247851,5247953],"length":1,"stats":{"Line":10},"fn_name":null},{"line":298,"address":[5247993,5247910],"length":1,"stats":{"Line":20},"fn_name":null},{"line":299,"address":[5248009],"length":1,"stats":{"Line":10},"fn_name":null},{"line":300,"address":[5248015],"length":1,"stats":{"Line":10},"fn_name":null},{"line":305,"address":[5248080],"length":1,"stats":{"Line":10},"fn_name":"flags"},{"line":306,"address":[5248148,5248089,5248175],"length":1,"stats":{"Line":20},"fn_name":null},{"line":309,"address":[5248176],"length":1,"stats":{"Line":1},"fn_name":"inst_ptrs"},{"line":310,"address":[5248193],"length":1,"stats":{"Line":10},"fn_name":null},{"line":414,"address":[5248304,5248388],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":416,"address":[5248408,5249253,5248329],"length":1,"stats":{"Line":32},"fn_name":null},{"line":417,"address":[5248480],"length":1,"stats":{"Line":16},"fn_name":null},{"line":419,"address":[5248665],"length":1,"stats":{"Line":16},"fn_name":null},{"line":428,"address":[5248980,5248912],"length":1,"stats":{"Line":32},"fn_name":null},{"line":429,"address":[5248992],"length":1,"stats":{"Line":16},"fn_name":null},{"line":431,"address":[5249167],"length":1,"stats":{"Line":16},"fn_name":null},{"line":432,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":439,"address":[5249456],"length":1,"stats":{"Line":16},"fn_name":"reset_size"},{"line":440,"address":[5249622,5249465,5249522,5249718,5249748,5249658],"length":1,"stats":{"Line":48},"fn_name":null},{"line":441,"address":[5249688,5249545,5249594],"length":1,"stats":{"Line":32},"fn_name":null},{"line":447,"address":[4253090,4430111,4287339,4316228,4350481,4303560,4379372,4366702,4413899],"length":1,"stats":{"Line":0},"fn_name":null},{"line":454,"address":[4279118,4358481,4295339,4308007,4405678,4371151,4244869,4421899,4342260],"length":1,"stats":{"Line":31},"fn_name":null},{"line":455,"address":[4342292,4371183,4308039,4295371,4358513,4405710,4279150,4421931,4244901],"length":1,"stats":{"Line":31},"fn_name":null},{"line":463,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":465,"address":[4295526,4342447,4245056,4358668,4371338,4405865,4422086,4279305,4308194],"length":1,"stats":{"Line":31},"fn_name":null},{"line":466,"address":[4296592,4423152,4280371,4309260,4343513,4372404,4359734,4246122,4406931],"length":1,"stats":{"Line":34},"fn_name":null},{"line":467,"address":[4296627,4279456,4309295,4343456,4343548,4406016,4422237,4309203,4359677,4423095,4358819,4246157,4423187,4280406,4359769,4280314,4342598,4371489,4372439,4308345,4245207,4295677,4246065,4372347,4406874,4296535,4406966],"length":1,"stats":{"Line":65},"fn_name":null},{"line":468,"address":[4309217,4406993,4359691,4423189,4423214,4280328,4296549,4296629,4309297,4343550,4406968,4246159,4343575,4343470,4372361,4406888,4359796,4246184,4423109,4280433,4296654,4372441,4372466,4309322,4280408,4359771,4246079],"length":1,"stats":{"Line":34},"fn_name":null},{"line":469,"address":[4423227,4246095,4343588,4359707,4280344,4407006,4246197,4296565,4359809,4309233,4406904,4309335,4280446,4423125,4296667,4372479,4372377,4343486],"length":1,"stats":{"Line":34},"fn_name":null},{"line":470,"address":[4343499,4359720,4296578,4246108,4280357,4372390,4406917,4423138,4309246],"length":1,"stats":{"Line":34},"fn_name":null},{"line":472,"address":[4430053,4246129,4280378,4296599,4413841,4359741,4423159,4406938,4287281,4366644,4316170,4372411,4253032,4350423,4343520,4303502,4309267,4379314],"length":1,"stats":{"Line":34},"fn_name":null},{"line":473,"address":[4430022,4359839,4350392,4296697,4280476,4366613,4423257,4407036,4303471,4253001,4246227,4316139,4309365,4372509,4379283,4413810,4343618,4287250],"length":1,"stats":{"Line":68},"fn_name":null},{"line":477,"address":[4341257,4294830,4357972,4268371,4323719,4331511,4260581,4386863,4394828,4404675,4421390,4278115],"length":1,"stats":{"Line":0},"fn_name":null},{"line":484,"address":[4397757,4253663,4316801,4379945,4387910,4287912,4351054,4414472,4324593,4334339,4261453,4271197],"length":1,"stats":{"Line":30},"fn_name":null},{"line":485,"address":[4287944,4261485,4379977,4334371,4351086,4397789,4253695,4387942,4414504,4324625,4316833,4271229],"length":1,"stats":{"Line":30},"fn_name":null},{"line":493,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":495,"address":[4380132,4316988,4351241,4414659,4334526,4397944,4253850,4271384,4261640,4288099,4324780,4388097],"length":1,"stats":{"Line":30},"fn_name":null},{"line":496,"address":[4399010,4389163,4415725,4272450,4381198,4262706,4352307,4335592,4254916,4289165,4318054,4325846],"length":1,"stats":{"Line":32},"fn_name":null},{"line":497,"address":[4262741,4254001,4317997,4261791,4289108,4334677,4381141,4388248,4271535,4325881,4381233,4288250,4335627,4389106,4254951,4398095,4414810,4380283,4398953,4415668,4415760,4289200,4389198,4399045,4352250,4318089,4324931,4335535,4254859,4262649,4272393,4317139,4272485,4351392,4325789,4352342],"length":1,"stats":{"Line":62},"fn_name":null},{"line":498,"address":[4325803,4389225,4335654,4262768,4415762,4335629,4389120,4381260,4399072,4289202,4325883,4262743,4381155,4325908,4415787,4272407,4254953,4254978,4352344,4398967,4389200,4289122,4318091,4399047,4272487,4318116,4352264,4415682,4381235,4254873,4262663,4272512,4318011,4289227,4352369,4335549],"length":1,"stats":{"Line":32},"fn_name":null},{"line":499,"address":[4335565,4352382,4318027,4415698,4262679,4254991,4381273,4272525,4398983,4381171,4415800,4352280,4318129,4335667,4254889,4262781,4325819,4289138,4289240,4325921,4272423,4389136,4389238,4399085],"length":1,"stats":{"Line":32},"fn_name":null},{"line":500,"address":[4272436,4318040,4352293,4381184,4325832,4262692,4335578,4254902,4289151,4398996,4415711,4389149],"length":1,"stats":{"Line":32},"fn_name":null},{"line":502,"address":[4404617,4294772,4421332,4289172,4325853,4352314,4394770,4415732,4278057,4331453,4357914,4254923,4260523,4341199,4272457,4262713,4268313,4318061,4335599,4381205,4386805,4389170,4399017,4323661],"length":1,"stats":{"Line":32},"fn_name":null},{"line":503,"address":[4415830,4289270,4357883,4389268,4341168,4260492,4331422,4394739,4294741,4262811,4352412,4386774,4399115,4255021,4318159,4404586,4272555,4335697,4323630,4421301,4278026,4268282,4325951,4381303],"length":1,"stats":{"Line":64},"fn_name":null},{"line":507,"address":[4458374,4448739],"length":1,"stats":{"Line":0},"fn_name":null},{"line":514,"address":[4439669,4439787,4449437,4449319],"length":1,"stats":{"Line":2},"fn_name":null},{"line":515,"address":[4449393,4439743],"length":1,"stats":{"Line":2},"fn_name":null},{"line":516,"address":[4439825,4439772,4449475,4449422],"length":1,"stats":{"Line":4},"fn_name":null},{"line":524,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":526,"address":[4449607,4439957],"length":1,"stats":{"Line":2},"fn_name":null},{"line":527,"address":[4441023,4450673],"length":1,"stats":{"Line":4},"fn_name":null},{"line":528,"address":[4449758,4440966,4450708,4441058,4450616,4440108],"length":1,"stats":{"Line":6},"fn_name":null},{"line":529,"address":[4440980,4441085,4441060,4450630,4450735,4450710],"length":1,"stats":{"Line":4},"fn_name":null},{"line":530,"address":[4450646,4450748,4441098,4440996],"length":1,"stats":{"Line":4},"fn_name":null},{"line":531,"address":[4450659,4441009],"length":1,"stats":{"Line":4},"fn_name":null},{"line":533,"address":[4441030,4450680,4447940,4457590],"length":1,"stats":{"Line":4},"fn_name":null},{"line":534,"address":[4447902,4450778,4457552,4441128],"length":1,"stats":{"Line":6},"fn_name":null},{"line":535,"address":[4457630,4448659,4457576,4458294,4447980,4447926],"length":1,"stats":{"Line":8},"fn_name":null},{"line":536,"address":[4457641,4457753,4458050,4447991,4448103,4448400],"length":1,"stats":{"Line":10},"fn_name":null},{"line":537,"address":[4458397,4448074,4448762,4457724],"length":1,"stats":{"Line":2},"fn_name":null},{"line":539,"address":[4457690,4457780,4448130,4448040],"length":1,"stats":{"Line":4},"fn_name":null},{"line":540,"address":[4457758,4457843,4448193,4448108],"length":1,"stats":{"Line":4},"fn_name":null},{"line":541,"address":[4448405,4457813,4448163,4448654,4457892,4458055,4458289,4448242],"length":1,"stats":{"Line":12},"fn_name":null},{"line":542,"address":[4448792,4458089,4448512,4458159,4448439,4458427],"length":1,"stats":{"Line":8},"fn_name":null},{"line":543,"address":[4448608,4458461,4448826,4458249],"length":1,"stats":{"Line":4},"fn_name":null},{"line":548,"address":[4448661,4458296],"length":1,"stats":{"Line":2},"fn_name":null},{"line":555,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":593,"address":[4246470,4309450,4423342,4441213,4450863,4441371,4296782,4451021,4423500,4343703,4360082,4372752,4407279,4372594,4296940,4280719,4280561,4246312,4343861,4407121,4309608,4359924],"length":1,"stats":{"Line":38},"fn_name":null},{"line":599,"address":[4296822,4441253,4407161,4309490,4450903,4372634,4423382,4359964,4280601,4246352,4343743],"length":1,"stats":{"Line":38},"fn_name":null},{"line":600,"address":[4280633,4372666,4423414,4296854,4407193,4343775,4359996,4450935,4246384,4309522,4441285],"length":1,"stats":{"Line":38},"fn_name":null},{"line":601,"address":[4423478,4441349,4246448,4450999,4296918,4309586,4372730,4280697,4343839,4407257,4360060],"length":1,"stats":{"Line":38},"fn_name":null},{"line":602,"address":[4451053,4378406,4423532,4447025,4280751,4343859,4246502,4360114,4407277,4246468,4456675,4423498,4349515,4407311,4441369,4365736,4441403,4309606,4309640,4372784,4451019,4372750,4315262,4252124,4343893,4286373,4412933,4360080,4302594,4296972,4280717,4429154,4296938],"length":1,"stats":{"Line":109},"fn_name":null},{"line":615,"address":[4347062,4283920,4410480,4444572,4312809,4281011,4363283,4441663,4375953,4249671,4300141,4360374,4309900,4407571,4423792,4373044,4451313,4454222,4246762,4344153,4297232,4426701],"length":1,"stats":{"Line":60},"fn_name":null},{"line":617,"address":[4408266,4452008,4407697,4310026,4297927,4344848,4247457,4442358,4344279,4451439,4246888,4441789,4310595,4360500,4373170,4373739,4281137,4281706,4361069,4423918,4424487,4297358],"length":1,"stats":{"Line":66},"fn_name":null},{"line":618,"address":[4315735,4378879,4366209,4361076,4286846,4297934,4247464,4310602,4252597,4281713,4373746,4413406,4349988,4442365,4452015,4457148,4344855,4408273,4424494,4303067,4447498,4429618],"length":1,"stats":{"Line":33},"fn_name":null},{"line":619,"address":[4310653,4378911,4344906,4281764,4350020,4366241,4252629,4429650,4247515,4442416,4447530,4315767,4457180,4303099,4452066,4286878,4361127,4373797,4408324,4413438,4297985,4424545],"length":1,"stats":{"Line":33},"fn_name":null},{"line":620,"address":[4248271,4345662,4361883,4452822,4282520,4425301,4311409,4409080,4443172,4374553,4298741],"length":1,"stats":{"Line":31},"fn_name":null},{"line":621,"address":[4361910,4298768,4409107,4452849,4248298,4282547,4374580,4311436,4425328,4443199,4345689],"length":1,"stats":{"Line":31},"fn_name":null},{"line":623,"address":[4424688,4247658,4373940,4310796,4361839,4443128,4452209,4298697,4248227,4281907,4282476,4361270,4452778,4311365,4425257,4345618,4345049,4408467,4442559,4409036,4298128,4374509],"length":1,"stats":{"Line":44},"fn_name":null},{"line":624,"address":[4361946,4303131,4452885,4282583,4311472,4425364,4409043,4429682,4345625,4443235,4378943,4282483,4409143,4374616,4447562,4315799,4366273,4252661,4248234,4311372,4345725,4425264,4248334,4361846,4374516,4413470,4443135,4350052,4452785,4286910,4298704,4457212,4298804],"length":1,"stats":{"Line":44},"fn_name":null},{"line":625,"address":[4452893,4282591,4298812,4361954,4374624,4409151,4345733,4425372,4248342,4311480,4443243],"length":1,"stats":{"Line":22},"fn_name":null},{"line":626,"address":[4443873,4453523,4248972,4299442,4312110,4283221,4375254,4409781,4346363,4426002,4362584],"length":1,"stats":{"Line":10},"fn_name":null},{"line":628,"address":[4346319,4452910,4409737,4409168,4248928,4248359,4311497,4345750,4375210,4282608,4425958,4298829,4312066,4443260,4443829,4374641,4283177,4299398,4361971,4453479,4425389,4362540],"length":1,"stats":{"Line":40},"fn_name":null},{"line":629,"address":[4426015,4283234,4346376,4283184,4362547,4312073,4362597,4375217,4312123,4453536,4425965,4248985,4378975,4299405,4443836,4248935,4346326,4457244,4375267,4350084,4447594,4409744,4429714,4315831,4299455,4443886,4286942,4303163,4252693,4366305,4409794,4453486,4413502],"length":1,"stats":{"Line":40},"fn_name":null},{"line":630,"address":[4248993,4283242,4346384,4409802,4453544,4362605,4375275,4299463,4312131,4426023,4443894],"length":1,"stats":{"Line":20},"fn_name":null},{"line":631,"address":[4283872,4454174,4249623,4444524,4426653,4363235,4375905,4300093,4410432,4312761,4347014],"length":1,"stats":{"Line":6},"fn_name":null},{"line":632,"address":[4312788,4249650,4283899,4300120,4347041,4410459,4375932,4454201,4363262,4426680,4444551],"length":1,"stats":{"Line":6},"fn_name":null},{"line":634,"address":[4362622,4426040,4249010,4249579,4454130,4283259,4300049,4375861,4346970,4312148,4283828,4346401,4375292,4426609,4444480,4409819,4363191,4299480,4312717,4453561,4410388,4443911],"length":1,"stats":{"Line":41},"fn_name":null},{"line":635,"address":[4300056,4300133,4303195,4347054,4363198,4315863,4413534,4252725,4375945,4379007,4426616,4350116,4444487,4283835,4454137,4457276,4426693,4429746,4249586,4286974,4346977,4366337,4375868,4312801,4454214,4410395,4283912,4312724,4363275,4410472,4249663,4444564,4447626],"length":1,"stats":{"Line":43},"fn_name":null},{"line":637,"address":[4361912,4298770,4364684,4374582,4251072,4409109,4428102,4445973,4345691,4429152,4456673,4377354,4301542,4455623,4315260,4452851,4252122,4248300,4447023,4285321,4411881,4425330,4302592,4311438,4286371,4349513,4282549,4314210,4443201,4348463,4378404,4365734,4412931],"length":1,"stats":{"Line":83},"fn_name":null},{"line":642,"address":[4426732,4249702,4410511,4454253,4283951,4312840,4347093,4444603,4375984,4300172,4363314],"length":1,"stats":{"Line":21},"fn_name":null},{"line":643,"address":[4429778,4454272,4457308,4379039,4444622,4249721,4350148,4347112,4252757,4283970,4413566,4315895,4303227,4287006,4363333,4300191,4376003,4426751,4447658,4366369,4312859,4410530],"length":1,"stats":{"Line":21},"fn_name":null},{"line":644,"address":[4300286,4312954,4284065,4249816,4347207,4426846,4454367,4363428,4444717,4410625,4376098],"length":1,"stats":{"Line":21},"fn_name":null},{"line":645,"address":[4426948,4444819,4454469,4376200,4300388,4363530,4249918,4347309,4284167,4313056,4410727],"length":1,"stats":{"Line":7},"fn_name":null},{"line":647,"address":[4249830,4284079,4312968,4410639,4426860,4444731,4347221,4454381,4300300,4363442,4376112],"length":1,"stats":{"Line":16},"fn_name":null},{"line":648,"address":[4426878,4312986,4347239,4410657,4376130,4249848,4300318,4444749,4454399,4284097,4363460],"length":1,"stats":{"Line":16},"fn_name":null},{"line":654,"address":[4313000,4284206,4410766,4410671,4347253,4250099,4426892,4363474,4249957,4347490,4363711,4300427,4376144,4454508,4313237,4376239,4363569,4426987,4376381,4249862,4300332,4410908,4427129,4300569,4444858,4444763,4284111,4454650,4284348,4454413,4445000,4347348,4313095],"length":1,"stats":{"Line":34},"fn_name":null},{"line":655,"address":[4249962,4300432,4313100,4410771,4363574,4426992,4444863,4284211,4376244,4454513,4347353],"length":1,"stats":{"Line":2},"fn_name":null},{"line":656,"address":[4444917,4300486,4250016,4454567,4427046,4313154,4284265,4347407,4376298,4363628,4410825],"length":1,"stats":{"Line":8},"fn_name":null},{"line":657,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":658,"address":[4454646,4250095,4363707,4284344,4347486,4376377,4313233,4300565,4444996,4410904,4427125],"length":1,"stats":{"Line":2},"fn_name":null},{"line":659,"address":[4300571,4454652,4284350,4250101,4376383,4410910,4427131,4445002,4313239,4347492,4363713],"length":1,"stats":{"Line":0},"fn_name":null},{"line":667,"address":[4347529,4284387,4313276,4427168,4445039,4410947,4454689,4250138,4376420,4363750,4300608],"length":1,"stats":{"Line":16},"fn_name":null},{"line":668,"address":[4250307,4377253,4313300,4411116,4454792,4445142,4411050,4427337,4347632,4427271,4445208,4363919,4300777,4411780,4454713,4314109,4347698,4445063,4284411,4284556,4428001,4313445,4376523,4250241,4250971,4454858,4250162,4284490,4301441,4376589,4313379,4445872,4300711,4285220,4364583,4376444,4300632,4427192,4347553,4348362,4363853,4410971,4363774,4455522],"length":1,"stats":{"Line":57},"fn_name":null},{"line":669,"address":[4252789,4454804,4347596,4363865,4315927,4350180,4300675,4363817,4379071,4413598,4447690,4313343,4376535,4376487,4366401,4427283,4313391,4250205,4284502,4287038,4300723,4347644,4427235,4445106,4411014,4284454,4445154,4429810,4454756,4411062,4250253,4457340,4303259],"length":1,"stats":{"Line":32},"fn_name":null},{"line":672,"address":[4301383,4411722,4250913,4314051,4445814,4377195,4285162,4348304,4427943,4455464,4364525],"length":1,"stats":{"Line":9},"fn_name":null},{"line":673,"address":[4445239,4250338,4313476,4363950,4347729,4284587,4427368,4411147,4300808,4376620,4454889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":675,"address":[4285169,4314058,4350212,4348311,4411729,4377202,4429842,4445821,4379103,4447722,4364532,4250920,4457372,4315959,4287070,4366433,4303291,4413630,4427950,4252821,4455471,4301390],"length":1,"stats":{"Line":9},"fn_name":null},{"line":677,"address":[4428006,4250319,4377258,4314114,4454870,4285225,4300789,4427349,4348367,4411785,4445220,4455527,4313457,4347710,4364588,4284568,4411128,4250976,4301446,4376601,4363931,4445877],"length":1,"stats":{"Line":32},"fn_name":null},{"line":678,"address":[4250978,4429874,4287102,4350244,4303323,4366465,4314116,4411787,4428008,4413662,4447754,4364590,4252853,4457404,4379135,4301448,4315991,4348369,4445879,4285227,4377260,4455529],"length":1,"stats":{"Line":9},"fn_name":null},{"line":680,"address":[4375958,4315258,4349511,4252120,4456671,4455879,4365732,4347067,4412137,4447021,4348719,4410485,4377610,4412929,4428358,4454227,4314466,4300146,4283925,4285577,4429150,4378402,4286369,4444577,4426706,4312814,4301798,4364940,4251328,4446229,4249676,4363288,4302590],"length":1,"stats":{"Line":91},"fn_name":null},{"line":685,"address":[4446173,4455650,4251272,4428129,4314237,4285521,4285348,4348490,4301742,4301569,4364884,4428302,4314410,4446000,4364711,4377554,4377381,4411908,4412081,4455823,4251099,4348663],"length":1,"stats":{"Line":22},"fn_name":null},{"line":686,"address":[4285387,4348529,4446039,4314276,4251138,4377420,4301608,4411947,4428168,4455689,4364750],"length":1,"stats":{"Line":22},"fn_name":null},{"line":687,"address":[4428184,4348545,4285403,4314292,4364766,4301624,4446055,4251154,4411963,4455705,4377436],"length":1,"stats":{"Line":23},"fn_name":null},{"line":688,"address":[4251168,4455719,4428363,4301790,4364780,4285417,4455884,4348711,4446069,4251333,4364932,4377602,4364945,4348559,4411977,4301803,4377450,4285569,4301638,4314306,4446221,4285582,4348724,4428198,4377615,4412129,4412142,4428350,4314458,4251320,4314471,4446234,4455871],"length":1,"stats":{"Line":46},"fn_name":null},{"line":689,"address":[4348726,4301725,4301805,4412144,4428285,4428365,4412064,4251335,4446156,4455806,4364867,4364947,4455886,4251255,4377537,4446236,4314393,4348646,4285504,4377617,4285584,4314473],"length":1,"stats":{"Line":35},"fn_name":null},{"line":690,"address":[4301774,4364916,4428334,4446205,4348695,4455855,4377586,4251304,4314442,4412113,4285553],"length":1,"stats":{"Line":23},"fn_name":null},{"line":692,"address":[4301887,4377359,4251417,4285326,4285666,4314555,4377699,4428107,4455628,4455968,4445978,4251077,4364689,4411886,4365029,4348808,4412226,4428447,4446318,4314215,4348468,4301547],"length":1,"stats":{"Line":53},"fn_name":null},{"line":693,"address":[4251422,4455973,4348813,4412231,4377704,4428452,4365034,4301892,4314560,4446323,4285671],"length":1,"stats":{"Line":31},"fn_name":null},{"line":694,"address":[4428501,4285720,4314609,4456022,4446372,4348862,4301941,4365083,4251471,4377753,4412280],"length":1,"stats":{"Line":14},"fn_name":null},{"line":700,"address":[4350276,4446336,4348892,4456052,4251501,4316023,4348826,4301971,4366497,4413694,4377783,4252885,4303355,4428465,4314639,4446402,4377717,4251435,4412244,4314573,4287134,4455986,4285684,4365113,4379167,4428531,4412310,4285750,4365047,4447786,4301905,4457436,4429906],"length":1,"stats":{"Line":62},"fn_name":null},{"line":703,"address":[4285817,4348959,4428598,4456119,4251568,4302038,4365180,4412377,4446469,4314706,4377850],"length":1,"stats":{"Line":31},"fn_name":null},{"line":707,"address":[4314723,4412394,4365197,4446486,4377867,4428615,4456136,4251585,4285834,4302055,4348976],"length":1,"stats":{"Line":31},"fn_name":null},{"line":708,"address":[4377887,4456283,4412572,4251732,4251763,4446506,4446633,4348996,4365217,4428762,4456156,4251605,4446664,4285981,4365375,4365344,4314870,4285854,4428635,4302075,4314743,4314901,4302233,4412541,4349123,4378014,4378045,4286012,4302202,4428793,4412414,4456314,4349154],"length":1,"stats":{"Line":62},"fn_name":null},{"line":709,"address":[4378047,4365377,4446666,4412498,4285938,4251689,4251765,4428795,4456240,4456316,4365301,4314903,4349080,4302159,4412574,4302235,4377971,4286014,4428719,4446590,4349156,4314827],"length":1,"stats":{"Line":33},"fn_name":null},{"line":710,"address":[4365317,4456256,4365396,4314843,4251705,4349175,4412514,4428735,4302254,4377987,4428814,4446685,4456335,4412593,4285954,4349096,4302175,4446606,4251784,4378066,4286033,4314922],"length":1,"stats":{"Line":50},"fn_name":null},{"line":711,"address":[4349109,4412527,4302188,4314856,4446619,4285967,4456269,4378000,4251718,4428748,4365330],"length":1,"stats":{"Line":31},"fn_name":null},{"line":713,"address":[4428769,4456290,4251739,4315022,4349130,4251884,4286133,4349275,4302354,4285988,4378021,4446785,4456435,4365496,4378166,4412548,4314877,4302209,4446640,4412693,4365351,4428914],"length":1,"stats":{"Line":31},"fn_name":null},{"line":714,"address":[4365679,4446817,4349458,4315205,4286316,4251916,4349256,4365477,4429097,4456467,4302335,4252067,4428946,4412725,4412876,4315054,4378147,4378198,4412674,4286165,4349307,4302537,4428895,4378349,4446968,4446766,4456416,4286114,4365528,4251865,4315003,4456618,4302386],"length":1,"stats":{"Line":78},"fn_name":null},{"line":715,"address":[4365533,4302391,4428951,4378203,4286170,4349312,4315059,4412730,4251921,4446822,4456472],"length":1,"stats":{"Line":22},"fn_name":null},{"line":716,"address":[4412749,4315078,4286189,4316091,4456491,4302410,4287202,4350344,4366565,4378222,4303423,4379235,4252953,4413762,4349331,4428970,4447854,4365552,4446841,4457504,4251940,4429974],"length":1,"stats":{"Line":22},"fn_name":null},{"line":717,"address":[4315173,4429065,4286284,4349426,4446936,4365647,4378317,4302505,4252035,4412844,4456586],"length":1,"stats":{"Line":22},"fn_name":null},{"line":718,"address":[4378351,4315207,4412878,4365681,4286318,4252069,4429099,4446970,4456620,4302539,4349460],"length":1,"stats":{"Line":6},"fn_name":null},{"line":720,"address":[4252049,4286298,4412858,4315187,4378331,4365661,4429079,4349440,4456600,4302519,4446950],"length":1,"stats":{"Line":16},"fn_name":null},{"line":722,"address":[4429136,4302576,4378388,4252106,4286355,4315244,4349497,4412915,4456657,4365718,4447007],"length":1,"stats":{"Line":31},"fn_name":null},{"line":724,"address":[4251403,4301873,4377685,4428433,4285652,4314541,4446304,4412212,4365015,4348794,4455954],"length":1,"stats":{"Line":20},"fn_name":null},{"line":731,"address":[4343969,4280827,4407387,4246578,4309716,4372860,4451129,4423608,4360190,4441479,4297048],"length":1,"stats":{"Line":26},"fn_name":null},{"line":732,"address":[4349590,4280843,4365773,4423624,4302631,4360206,4429229,4343985,4297064,4315337,4252199,4412970,4407403,4429191,4252161,4309732,4456750,4413008,4451145,4378443,4456712,4447062,4286448,4378481,4441495,4315299,4302669,4286410,4447100,4365811,4372876,4349552,4246594],"length":1,"stats":{"Line":50},"fn_name":null},{"line":733,"address":[4252201,4302671,4349592,4429231,4365813,4315339,4373019,4280986,4413010,4378483,4441638,4456752,4309875,4246737,4423767,4360349,4297207,4286450,4344128,4407546,4447102,4451288],"length":1,"stats":{"Line":28},"fn_name":null},{"line":734,"address":[4315267,4286378,4349609,4456769,4252129,4456680,4302599,4349520,4447119,4252218,4315356,4365741,4378411,4302688,4286467,4429159,4413027,4412938,4447030,4365830,4429248,4378500],"length":1,"stats":{"Line":44},"fn_name":null},{"line":735,"address":[4378424,4286391,4315280,4349533,4365754,4302612,4252142,4412951,4447043,4456693,4429172],"length":1,"stats":{"Line":24},"fn_name":null},{"line":737,"address":[4302638,4429424,4252168,4412977,4315306,4252394,4315532,4413203,4302864,4349785,4429198,4286417,4349559,4378676,4447295,4456945,4456719,4366006,4447069,4286643,4378450,4365780],"length":1,"stats":{"Line":24},"fn_name":null},{"line":738,"address":[4456926,4378657,4413184,4315564,4302845,4252426,4315513,4429456,4447327,4456977,4349817,4366038,4447276,4286675,4349766,4413235,4302896,4252375,4378708,4286624,4365987,4429405],"length":1,"stats":{"Line":28},"fn_name":null},{"line":739,"address":[4378713,4286680,4429458,4315569,4302901,4349822,4252431,4447332,4413240,4366043,4456982],"length":1,"stats":{"Line":24},"fn_name":null},{"line":740,"address":[4349838,4366059,4413256,4302917,4429474,4378729,4447348,4286696,4315585,4456998,4252447],"length":1,"stats":{"Line":24},"fn_name":null},{"line":741,"address":[4315603,4413274,4429492,4252465,4366077,4349856,4302935,4447366,4457016,4378747,4286714],"length":1,"stats":{"Line":24},"fn_name":null},{"line":743,"address":[4413369,4303030,4447461,4315698,4349951,4366172,4286809,4429581,4252560,4457111,4378842],"length":1,"stats":{"Line":24},"fn_name":null},{"line":748,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":760,"address":[4389353,4416058,4272640,4399200,4289498,4318387,4381531,4255106,4335782,4399343,4335925,4262896,4289355,4255249,4263039,4318244,4326036,4326179,4272783,4352497,4352640,4381388,4389496,4415915],"length":1,"stats":{"Line":32},"fn_name":null},{"line":761,"address":[4262937,4381429,4318285,4255147,4272681,4335823,4389394,4399241,4326077,4415956,4352538,4289396],"length":1,"stats":{"Line":32},"fn_name":null},{"line":762,"address":[4335851,4272709,4289424,4318313,4326105,4381457,4352566,4255175,4262965,4389422,4399269,4415984],"length":1,"stats":{"Line":32},"fn_name":null},{"line":763,"address":[4255231,4272765,4326161,4335907,4318369,4352622,4399325,4263021,4389478,4289480,4381513,4416040],"length":1,"stats":{"Line":32},"fn_name":null},{"line":764,"address":[4277380,4263071,4352672,4416090,4263037,4389494,4399341,4340522,4318419,4394093,4352638,4294095,4267636,4420655,4255247,4386128,4322984,4272781,4326177,4318385,4330776,4289530,4403940,4416056,4255281,4259846,4272815,4357237,4389528,4381529,4381563,4399375,4326211,4289496,4335957,4335923],"length":1,"stats":{"Line":94},"fn_name":null},{"line":765,"address":[4399542,4258097,4392344,4265887,4355488,4418906,4321235,4416257,4384379,4402191,4272982,4289697,4255448,4329027,4275631,4263238,4292346,4318586,4326378,4352839,4336124,4381730,4338773,4389695],"length":1,"stats":{"Line":51},"fn_name":null},{"line":767,"address":[4318651,4277718,4260184,4326443,4416322,4255513,4273047,4267974,4289762,4294433,4323322,4381795,4386466,4352904,4389760,4394431,4263303,4336189,4404278,4340860,4357575,4399607,4420993,4331114],"length":1,"stats":{"Line":32},"fn_name":null},{"line":768,"address":[4256107,4318701,4263897,4336239,4353498,4382389,4389810,4400201,4390354,4416372,4327037,4273641,4326493,4416916,4290356,4352954,4399657,4336783,4255563,4289812,4273097,4319245,4381845,4263353],"length":1,"stats":{"Line":64},"fn_name":null},{"line":769,"address":[4353505,4390361,4327044,4336790,4382396,4416923,4400208,4256114,4290363,4263904,4319252,4273648],"length":1,"stats":{"Line":32},"fn_name":null},{"line":770,"address":[4353597,4417015,4263996,4290455,4273740,4256206,4390453,4382488,4400300,4327136,4336882,4319344],"length":1,"stats":{"Line":32},"fn_name":null},{"line":771,"address":[4319371,4273767,4264023,4336909,4382515,4400327,4256233,4353624,4290482,4327163,4417042,4390480],"length":1,"stats":{"Line":32},"fn_name":null},{"line":773,"address":[4386498,4273803,4400363,4331146,4319407,4421025,4327199,4277750,4323354,4416979,4404310,4390417,4260216,4390516,4273704,4400264,4353660,4327100,4336945,4382551,4264059,4290518,4256269,4357607,4417078,4319308,4336846,4382452,4290419,4294465,4263960,4340892,4268006,4256170,4353561,4394463],"length":1,"stats":{"Line":41},"fn_name":null},{"line":774,"address":[4319415,4353668,4400915,4400371,4354212,4417630,4274355,4391068,4327207,4256277,4256821,4291070,4273811,4417086,4264611,4337497,4383103,4290526,4264067,4327751,4319959,4382559,4390524,4336953],"length":1,"stats":{"Line":42},"fn_name":null},{"line":775,"address":[4256828,4337504,4291077,4327758,4391075,4400922,4417637,4264618,4274362,4319966,4354219,4383110],"length":1,"stats":{"Line":21},"fn_name":null},{"line":776,"address":[4256877,4320015,4274411,4391124,4337553,4417686,4291126,4327807,4264667,4354268,4383159,4400971],"length":1,"stats":{"Line":6},"fn_name":null},{"line":778,"address":[4291090,4337517,4291139,4383172,4400984,4327820,4417699,4268038,4323386,4294497,4337566,4256841,4264680,4354281,4404342,4260248,4327771,4383123,4320028,4319979,4394495,4277782,4391088,4400935,4417650,4421057,4256890,4391137,4357639,4340924,4274424,4386530,4331178,4264631,4274375,4354232],"length":1,"stats":{"Line":37},"fn_name":null},{"line":779,"address":[4274976,4383724,4354833,4400992,4256898,4320580,4264688,4320036,4337574,4354289,4257442,4291691,4338118,4391145,4418251,4274432,4328372,4265232,4291147,4401536,4327828,4391689,4417707,4383180],"length":1,"stats":{"Line":38},"fn_name":null},{"line":780,"address":[4320587,4257449,4328379,4274983,4418258,4354840,4338125,4291698,4265239,4383731,4391696,4401543],"length":1,"stats":{"Line":19},"fn_name":null},{"line":781,"address":[4338174,4391745,4354889,4383780,4401592,4418307,4275032,4291747,4265288,4320636,4328428,4257498],"length":1,"stats":{"Line":4},"fn_name":null},{"line":782,"address":[4391772,4383807,4275059,4401619,4320663,4265315,4338201,4257525,4354916,4418334,4328455,4291774],"length":1,"stats":{"Line":4},"fn_name":null},{"line":784,"address":[4328468,4331210,4257462,4404374,4265252,4386562,4338138,4275072,4391785,4401632,4265328,4294529,4401556,4291787,4354929,4383744,4357671,4323418,4268070,4277814,4257538,4383820,4328392,4354853,4394527,4391709,4418271,4320600,4291711,4320676,4340956,4274996,4338214,4418347,4260280,4421089],"length":1,"stats":{"Line":38},"fn_name":null},{"line":785,"address":[4338222,4355481,4291795,4401640,4265880,4329020,4320684,4391793,4418355,4418899,4321228,4292339,4265336,4383828,4384372,4392337,4258090,4328476,4402184,4354937,4275624,4338766,4257546,4275080],"length":1,"stats":{"Line":38},"fn_name":null},{"line":787,"address":[4403236,4403938,4419951,4259844,4420653,4356533,4266932,4273769,4386126,4330072,4340520,4290484,4330774,4327165,4322280,4267634,4394091,4400329,4390482,4259142,4256235,4385424,4336911,4276676,4319373,4417044,4294093,4322982,4382517,4264025,4277378,4293391,4339818,4353626,4357235,4393389],"length":1,"stats":{"Line":78},"fn_name":null},{"line":788,"address":[4392371,4275658,4292373,4355515,4265914,4329054,4258124,4338800,4384406,4321262,4418933,4402218],"length":1,"stats":{"Line":18},"fn_name":null},{"line":789,"address":[4392390,4404406,4294561,4421121,4418952,4357703,4268102,4331242,4292392,4260312,4258143,4275677,4384425,4386594,4402237,4277846,4265933,4394559,4321281,4329073,4323450,4355534,4338819,4340988],"length":1,"stats":{"Line":18},"fn_name":null},{"line":790,"address":[4275772,4321376,4258238,4419047,4338914,4384520,4392485,4402332,4292487,4266028,4329168,4355629],"length":1,"stats":{"Line":18},"fn_name":null},{"line":791,"address":[4402396,4266092,4275836,4384584,4419111,4392549,4258302,4321440,4338978,4292551,4329232,4355693],"length":1,"stats":{"Line":2},"fn_name":null},{"line":793,"address":[4384530,4321386,4275782,4266038,4392495,4338924,4355639,4258248,4329178,4402342,4419057,4292497],"length":1,"stats":{"Line":16},"fn_name":null},{"line":794,"address":[4419071,4258262,4292511,4402356,4338938,4329192,4384544,4355653,4392509,4266052,4275796,4321400],"length":1,"stats":{"Line":16},"fn_name":null},{"line":795,"address":[4384558,4392523,4402370,4329206,4419085,4266066,4338952,4258276,4275810,4292525,4321414,4355667],"length":1,"stats":{"Line":16},"fn_name":null},{"line":796,"address":[4419150,4292590,4392547,4402394,4275875,4392588,4276575,4321438,4259041,4266131,4329230,4258341,4355732,4384582,4393288,4419850,4329971,4266831,4321479,4338976,4403135,4275834,4293290,4402435,4292549,4385323,4339017,4329271,4419109,4356432,4266090,4339717,4384623,4322179,4258300,4355691],"length":1,"stats":{"Line":52},"fn_name":null},{"line":798,"address":[4275968,4341020,4384716,4277878,4321572,4292683,4331274,4355825,4394591,4404438,4421153,4357735,4258434,4260344,4329364,4294593,4402528,4392681,4339110,4266224,4386626,4268134,4419243,4323482],"length":1,"stats":{"Line":17},"fn_name":null},{"line":799,"address":[4276568,4259034,4339710,4329964,4356425,4385316,4393281,4403128,4322172,4419843,4293283,4266824],"length":1,"stats":{"Line":20},"fn_name":null},{"line":800,"address":[4321622,4355875,4292733,4329414,4402578,4392731,4384766,4419293,4339160,4258484,4276018,4266274],"length":1,"stats":{"Line":17},"fn_name":null},{"line":803,"address":[4385328,4392662,4266205,4402509,4393293,4403140,4322184,4419855,4321553,4329345,4339722,4266836,4419224,4339091,4276580,4292664,4355806,4293295,4259046,4258415,4329976,4275949,4384697,4356437],"length":1,"stats":{"Line":32},"fn_name":null},{"line":804,"address":[4268166,4357767,4421185,4393295,4403142,4260376,4339724,4293297,4341052,4266838,4356439,4259048,4404470,4331306,4385330,4294625,4323514,4329978,4386658,4394623,4419857,4276582,4277910,4322186],"length":1,"stats":{"Line":20},"fn_name":null},{"line":806,"address":[4384384,4322299,4258102,4403255,4329032,4265892,4385443,4259161,4339837,4330091,4356552,4266951,4392349,4418911,4419970,4292351,4293410,4355493,4393408,4275636,4276695,4321240,4338778,4402196],"length":1,"stats":{"Line":56},"fn_name":null},{"line":807,"address":[4293415,4403260,4330096,4339842,4266956,4356557,4259166,4393413,4419975,4385448,4276700,4322304],"length":1,"stats":{"Line":30},"fn_name":null},{"line":808,"address":[4267009,4293468,4330149,4339895,4393466,4259219,4276753,4356610,4385501,4403313,4420028,4322357],"length":1,"stats":{"Line":0},"fn_name":null},{"line":810,"address":[4339928,4322390,4323546,4330182,4403346,4357799,4356570,4356643,4330109,4393426,4419988,4259252,4266969,4268198,4385534,4403273,4420061,4267042,4339855,4276786,4421217,4276713,4331338,4341084,4404502,4394655,4260408,4294657,4259179,4277942,4293501,4385461,4393499,4322317,4386690,4293428],"length":1,"stats":{"Line":60},"fn_name":null},{"line":811,"address":[4330217,4403381,4293536,4339963,4276821,4259287,4385569,4356678,4420096,4267077,4393534,4322425],"length":1,"stats":{"Line":30},"fn_name":null},{"line":812,"address":[4267094,4293553,4330234,4259304,4322442,4385586,4403398,4420113,4276838,4339980,4356695,4393551],"length":1,"stats":{"Line":30},"fn_name":null},{"line":813,"address":[4339996,4385602,4420304,4356711,4393567,4403558,4393742,4340140,4277029,4385746,4393711,4259320,4403414,4356855,4267254,4322602,4403589,4259464,4267110,4322633,4293713,4330425,4276854,4259495,4276998,4322458,4267285,4420273,4293569,4340171,4293744,4330394,4420129,4385777,4330250,4356886],"length":1,"stats":{"Line":60},"fn_name":null},{"line":814,"address":[4393744,4293670,4385703,4385779,4403515,4420306,4340097,4322559,4276955,4330427,4340173,4259421,4293746,4267287,4330351,4403591,4277031,4259497,4356812,4356888,4267211,4322635,4420230,4393668],"length":1,"stats":{"Line":28},"fn_name":null},{"line":815,"address":[4277050,4385798,4420325,4259516,4293765,4267227,4356828,4403610,4393763,4340113,4293686,4259437,4267306,4356907,4276971,4330446,4403531,4420246,4330367,4340192,4385719,4322575,4393684,4322654],"length":1,"stats":{"Line":48},"fn_name":null},{"line":816,"address":[4276984,4385732,4403544,4420259,4340126,4393697,4330380,4293699,4267240,4259450,4356841,4322588],"length":1,"stats":{"Line":30},"fn_name":null},{"line":818,"address":[4340147,4393718,4267261,4322754,4293865,4330546,4277005,4330401,4357007,4267406,4322609,4385753,4340292,4393863,4356862,4403565,4403710,4420425,4293720,4259471,4259616,4385898,4420280,4277150],"length":1,"stats":{"Line":30},"fn_name":null},{"line":819,"address":[4259597,4277131,4403691,4277182,4322735,4277325,4293897,4330578,4322786,4330721,4340273,4267438,4385930,4393844,4293846,4340324,4259648,4340467,4267581,4394038,4322929,4385879,4420406,4357039,4330527,4403742,4356988,4259791,4267387,4357182,4386073,4403885,4294040,4420457,4393895,4420600],"length":1,"stats":{"Line":76},"fn_name":null},{"line":820,"address":[4357044,4293902,4420462,4322791,4393900,4403747,4267443,4385935,4277187,4330583,4259653,4340329],"length":1,"stats":{"Line":24},"fn_name":null},{"line":821,"address":[4277978,4331374,4267462,4404538,4259672,4341120,4357835,4385954,4393919,4294693,4340348,4323582,4394691,4420481,4277206,4293921,4357063,4386726,4322810,4421253,4268234,4260444,4403766,4330602],"length":1,"stats":{"Line":24},"fn_name":null},{"line":822,"address":[4340443,4259767,4386049,4267557,4322905,4330697,4394014,4403861,4357158,4420576,4277301,4294016],"length":1,"stats":{"Line":24},"fn_name":null},{"line":823,"address":[4420602,4357184,4322931,4386075,4340469,4330723,4394040,4277327,4267583,4294042,4403887,4259793],"length":1,"stats":{"Line":2},"fn_name":null},{"line":825,"address":[4357168,4394024,4403871,4340453,4259777,4420586,4277311,4386059,4322915,4330707,4294026,4267567],"length":1,"stats":{"Line":22},"fn_name":null},{"line":827,"address":[4420639,4277364,4340506,4322968,4267620,4357221,4294079,4330760,4386112,4394077,4259830,4403924],"length":1,"stats":{"Line":28},"fn_name":null},{"line":829,"address":[4356538,4385429,4293396,4330077,4339823,4266937,4322285,4419956,4393394,4403241,4259147,4276681],"length":1,"stats":{"Line":24},"fn_name":null},{"line":834,"address":[4340554,4277443,4294127,4357269,4420718,4340585,4386160,4335972,4267668,4323016,4352687,4277412,4330839,4318434,4357300,4394125,4404003,4259878,4381578,4416105,4267699,4259909,4403972,4272830,4294158,4323047,4386191,4399390,4420687,4289545,4389543,4255296,4326226,4330808,4394156,4263086],"length":1,"stats":{"Line":58},"fn_name":null},{"line":835,"address":[4272957,4323049,4263213,4326353,4389670,4255423,4294160,4394158,4318561,4399517,4404005,4352814,4340587,4330841,4357302,4277445,4381705,4259911,4386193,4289672,4336099,4267701,4416232,4420720],"length":1,"stats":{"Line":30},"fn_name":null},{"line":836,"address":[4330781,4357319,4386133,4322989,4294100,4340604,4259851,4323066,4386210,4277462,4394098,4404022,4420737,4277385,4259928,4357242,4267718,4394175,4403945,4340527,4330858,4267641,4294177,4420660],"length":1,"stats":{"Line":50},"fn_name":null},{"line":837,"address":[4267654,4323002,4294113,4340540,4386146,4357255,4394111,4403958,4420673,4259864,4277398,4330794],"length":1,"stats":{"Line":30},"fn_name":null},{"line":839,"address":[4259885,4394271,4277558,4323162,4294134,4260024,4267814,4277419,4403979,4340561,4357276,4394132,4330954,4404118,4267675,4323023,4330815,4357415,4294273,4420833,4386167,4386306,4340700,4420694],"length":1,"stats":{"Line":30},"fn_name":null},{"line":840,"address":[4260005,4404150,4420814,4267795,4386287,4260056,4330986,4340681,4277590,4323194,4340732,4323143,4294305,4357396,4357447,4394303,4420865,4330935,4394252,4267846,4294254,4404099,4386338,4277539],"length":1,"stats":{"Line":32},"fn_name":null},{"line":841,"address":[4357449,4394305,4277592,4404152,4420867,4386340,4294307,4267848,4260058,4330988,4340734,4323196],"length":1,"stats":{"Line":32},"fn_name":null},{"line":842,"address":[4294326,4260077,4340753,4277611,4267867,4386359,4404171,4331007,4323215,4394324,4420886,4357468],"length":1,"stats":{"Line":32},"fn_name":null},{"line":843,"address":[4323229,4340767,4277625,4404185,4394338,4420900,4331021,4260091,4386373,4267881,4294340,4357482],"length":1,"stats":{"Line":32},"fn_name":null},{"line":845,"address":[4386429,4394394,4267937,4420956,4340823,4294396,4277681,4357538,4404241,4331077,4323285,4260147],"length":1,"stats":{"Line":32},"fn_name":null},{"line":853,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":875,"address":[4320989,4445323,4393042,4353259,4274737,4419377,4376945,4339471,4297677,4319006,4392098,4291452,4298447,4345368,4336544,4274116,4401718,4453639,4313560,4327512,4328133,4281456,4312467,4281985,4313801,4327906,4383258,4410138,4275385,4353032,4383485,4329498,4284671,4282226,4321706,4402662,4282686,4444230,4443989,4276102,4292100,4298206,4375611,4255641,4445564,4256355,4281215,4391450,4275158,4443338,4400676,4263431,4407775,4426118,4443579,4390115,4265641,4383906,4346720,4273175,4411231,4354594,4326798,4248437,4362700,4290831,4337031,4362941,4390602,4418433,4291225,4266358,4441867,4451517,4248678,4451758,4257851,4255868,4389888,4409487,4337258,4257624,4390829,4442637,4258795,4382637,4338300,4298907,4362290,4391223,4344598,4353746,4346069,4264766,4353973,4337652,4327285,4356186,4400449,4417785,4425467,4426359,4274510,4455214,4399962,4417391,4293044,4364275,4374018,4283337,4382150,4385077,4424766,4453880,4361348,4364034,4355242,4273402,4329725,4354367,4374719,4299558,4249088,4360578,4249329,4452287,4264372,4374259,4373489,4392815,4452988,4250663,4374960,4328781,4409246,4276329,4297436,4453229,4290117,4311115,4336317,4417164,4273889,4266585,4375370,4283578,4409897,4246966,4310345,4264993,4284912,4401297,4362049,4424237,4401070,4299148,4299799,4256582,4427452,4384133,4348054,4290604,4418012,4247736,4355015,4250422,4355959,4399735,4427693,4339244,4344357,4265414,4289890,4321933,4328554,4416677,4346479,4320114,4345828,4338527,4310874,4408016,4382864,4311816,4320341,4258568,4423996,4300892,4312226,4376704,4345127,4247977,4442878,4264145,4319720,4416450,4282927,4337879,4373248,4257203,4452528,4256976,4310104,4384850,4425708,4311575,4454973,4318779,4263658,4319493,4418660,4442108,4391871,4408545,4326571,4292817,4301133,4291873,4320762,4347813,4401945,4247207,4419604,4402889,4381923,4411472,4408786,4361589,4425007,4360819],"length":1,"stats":{"Line":212},"fn_name":null},{"line":876,"address":[4326651,4374106,4364122,4418513,4338380,4256435,4424854,4345916,4258648,4290684,4249176,4265494,4382717,4392895,4337111,4264225,4282774,4311663,4339324,4319573,4408633,4266438,4427540,4299646,4310192,4391303,4336397,4300980,4353112,4355095,4402742,4250510,4327365,4274590,4424084,4292897,4444077,4321786,4313648,4416530,4347901,4320842,4312314,4407863,4298995,4376792,4411319,4255721,4327986,4451605,4337732,4445411,4291305,4291953,4360666,4273255,4344445,4409334,4443426,4297524,4289970,4248525,4329578,4284759,4247824,4362137,4275238,4263511,4419457,4401150,4353826,4374807,4383986,4356039,4390682,4310962,4426206,4455061,4318859,4257704,4400529,4282073,4401798,4441955,4257056,4346567,4354447,4276182,4383338,4389968,4264846,4273969,4373336,4442725,4453727,4417865,4417244,4281303,4382003,4384930,4247054,4283425,4362788,4328634,4391951,4399815,4361436,4409985,4452375,4298294,4425555,4453076,4345215,4320194,4375458],"length":1,"stats":{"Line":212},"fn_name":null},{"line":877,"address":[4247239,4374166,4451665,4453912,4344505,4401210,4339503,4453136,4257764,4274769,4327544,4444262,4311147,4327425,4360726,4390742,4362322,4353172,4401329,4374992,4337290,4313708,4347961,4390147,4281488,4392011,4402802,4424914,4425615,4417925,4292013,4338440,4417304,4336576,4328813,4425039,4321846,4360851,4424269,4281363,4299180,4298479,4275417,4392130,4375518,4382063,4329638,4364307,4319752,4401977,4250695,4293076,4274148,4453261,4282133,4248585,4425740,4426266,4384990,4353291,4455246,4391482,4427600,4453787,4320254,4310252,4445471,4283610,4362973,4264404,4257883,4284944,4297584,4376852,4291484,4364182,4291365,4273315,4263571,4256495,4283485,4249361,4292957,4390861,4249236,4393074,4409394,4443486,4263690,4282959,4382182,4273434,4410170,4442015,4407923,4374291,4443611,4345275,4297709,4311848,4337792,4418692,4355155,4328694,4328165,4282258,4376977,4248710,4452435,4326830,4247884,4257116,4383517,4266498,4452560,4373396,4418044,4301165,4336457,4311022,4337911,4416709,4321965,4299706,4424144,4290863,4344630,4399875,4248009,4356218,4442140,4346752,4373521,4247114,4418573,4319038,4417423,4274650,4290744,4320373,4402921,4410045,4361621,4385109,4276242,4356099,4301040,4451790,4321021,4265673,4255900,4318919,4290149,4353886,4355274,4311723,4298354,4264906,4310377,4390028,4409519,4257235,4400708,4401858,4292132,4354005,4408693,4276361,4391363,4320902,4319633,4328046,4375643,4426391,4348086,4416590,4362197,4442785,4258827,4312499,4361496,4265025,4399994,4408048,4455121,4290030,4411379,4299055,4419517,4274029,4329757,4275298,4383398,4265554,4400589,4362848,4337171,4345400,4384046,4408818,4266617,4346101,4258708,4346627,4312374,4338559,4442910,4382896,4256614,4427725,4384165,4374867,4345976,4382777,4250570,4313833,4354507,4445596,4264285,4444137,4255781,4299831,4326711,4282834,4284819,4354626,4339384,4419636,4411504,4392955],"length":1,"stats":{"Line":214},"fn_name":null},{"line":878,"address":[4390179,4247279,4319784,4408858,4281528,4297749,4442180,4356250,4345440,4353323,4248750,4346141,4292164,4257915,4264436,4326862,4274180,4391514,4348126,4364347,4382928,4390893,4299220,4400026,4419668,4248049,4263722,4310417,4346792,4377017,4402009,4424309,4426431,4257267,4384197,4402953,4452600,4250735,4275449,4265705,4360891,4249401,4328845,4408088,4425079,4455286,4354037,4375032,4276393,4393106,4451830,4363013,4411544,4321997,4282999,4383549,4453952,4425780,4401361,4327576,4344670,4293108,4453301,4290181,4274801,4298519,4416741,4400740,4282298,4301205,4373561,4409559,4410210,4418724,4273466,4385141,4255932,4290895,4392162,4313873,4336608,4361661,4355306,4417455,4427765,4337943,4319070,4338591,4291516,4320405,4284984,4258859,4266649,4283650,4354658,4299871,4382214,4444302,4311187,4328197,4375683,4321053,4445636,4311888,4374331,4337322,4265057,4418076,4339535,4443651,4442950,4312539,4362362,4256646,4329789],"length":1,"stats":{"Line":214},"fn_name":null},{"line":879,"address":[4256067,4373700,4403088,4364486,4300010,4327711,4283138,4311326,4391028,4417590,4297888,4385276,4382349,4258994,4453440,4291030,4442319,4443089,4329924,4392297,4425919,4416876,4377156,4266784,4383684,4337457,4426570,4248889,4393241,4298658,4356385,4336743,4314012,4390314,4283789,4264571,4401496,4249540,4328980,4361030,4383063,4338078,4282437,4455425,4363152,4322132,4263857,4418859,4454091,4281667,4293243,4345579,4409698,4425218,4400161,4452739,4355441,4258050,4312678,4444441,4265192,4312027,4290316,4451969,4348265,4257402,4275584,4299359,4362501,4256781,4410349,4265840,4443790,4424448,4339670,4402144,4291651,4248188,4354793,4374470,4310556,4408997,4375822,4346931,4408227,4320540,4338726,4276528,4375171,4419803,4326997,4274315,4247418,4411683,4384332,4344809,4328332,4285123,4361800,4321188,4427904,4445775,4400875,4418211,4391649,4273601,4292299,4346280,4250874,4354172,4353458,4301344,4274936,4319919,4319205],"length":1,"stats":{"Line":215},"fn_name":null},{"line":890,"address":[5249760],"length":1,"stats":{"Line":9},"fn_name":"exec_byte"},{"line":900,"address":[5249815],"length":1,"stats":{"Line":9},"fn_name":null},{"line":901,"address":[5250033,5249839,5250083],"length":1,"stats":{"Line":18},"fn_name":null},{"line":902,"address":[5250075],"length":1,"stats":{"Line":9},"fn_name":null},{"line":911,"address":[5250003,5250093],"length":1,"stats":{"Line":18},"fn_name":null},{"line":912,"address":[5250137],"length":1,"stats":{"Line":9},"fn_name":null},{"line":913,"address":[5250169,5250819],"length":1,"stats":{"Line":17},"fn_name":null},{"line":918,"address":[5250255],"length":1,"stats":{"Line":8},"fn_name":null},{"line":919,"address":[5250389,5250467,5250311],"length":1,"stats":{"Line":18},"fn_name":null},{"line":920,"address":[5250373],"length":1,"stats":{"Line":2},"fn_name":null},{"line":921,"address":[5250381],"length":1,"stats":{"Line":2},"fn_name":null},{"line":922,"address":[5250398,5250344],"length":1,"stats":{"Line":32},"fn_name":null},{"line":923,"address":[5250459],"length":1,"stats":{"Line":2},"fn_name":null},{"line":925,"address":[5250502,5250476],"length":1,"stats":{"Line":16},"fn_name":null},{"line":926,"address":[5250504],"length":1,"stats":{"Line":2},"fn_name":null},{"line":928,"address":[5250494],"length":1,"stats":{"Line":8},"fn_name":null},{"line":932,"address":[5250520],"length":1,"stats":{"Line":8},"fn_name":null},{"line":933,"address":[5250814,5250659,5250533],"length":1,"stats":{"Line":16},"fn_name":null},{"line":934,"address":[5250696],"length":1,"stats":{"Line":8},"fn_name":null},{"line":936,"address":[5250649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":949,"address":[5250821],"length":1,"stats":{"Line":9},"fn_name":null},{"line":950,"address":[5250877],"length":1,"stats":{"Line":9},"fn_name":null},{"line":951,"address":[5250889],"length":1,"stats":{"Line":27},"fn_name":null},{"line":952,"address":[5251033,5250985],"length":1,"stats":{"Line":18},"fn_name":null},{"line":953,"address":[5251020],"length":1,"stats":{"Line":9},"fn_name":null},{"line":957,"address":[5251043],"length":1,"stats":{"Line":9},"fn_name":null},{"line":958,"address":[5251787,5251056],"length":1,"stats":{"Line":17},"fn_name":null},{"line":959,"address":[5251278,5252823,5251203,5251399,5251431,5251244,5251618,5251785,5252795],"length":1,"stats":{"Line":47},"fn_name":null},{"line":963,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":964,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":965,"address":[5251436],"length":1,"stats":{"Line":2},"fn_name":null},{"line":966,"address":[5251457],"length":1,"stats":{"Line":2},"fn_name":null},{"line":967,"address":[5251510],"length":1,"stats":{"Line":2},"fn_name":null},{"line":968,"address":[5251484,5251559,5251515,5251590,5251616],"length":1,"stats":{"Line":12},"fn_name":null},{"line":969,"address":[5251548,5251588],"length":1,"stats":{"Line":4},"fn_name":null},{"line":973,"address":[5251611],"length":1,"stats":{"Line":2},"fn_name":null},{"line":976,"address":[5251343],"length":1,"stats":{"Line":9},"fn_name":null},{"line":977,"address":[5251373,5251623,5251783],"length":1,"stats":{"Line":46},"fn_name":null},{"line":978,"address":[5251733],"length":1,"stats":{"Line":10},"fn_name":null},{"line":979,"address":[5251693],"length":1,"stats":{"Line":8},"fn_name":null},{"line":980,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":981,"address":[5251703],"length":1,"stats":{"Line":8},"fn_name":null},{"line":988,"address":[5251246,5251792,5251889],"length":1,"stats":{"Line":20},"fn_name":null},{"line":993,"address":[5251907],"length":1,"stats":{"Line":2},"fn_name":null},{"line":995,"address":[5251912],"length":1,"stats":{"Line":2},"fn_name":null},{"line":997,"address":[5251881],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1007,"address":[5251920,5252051],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1008,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1009,"address":[5251987,5252053],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1010,"address":[5252003],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1012,"address":[5252086,5252032],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1015,"address":[5252091,5252188],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1016,"address":[5252222,5252162],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1018,"address":[5252229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1019,"address":[5252349],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1021,"address":[5252400,5252368],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1023,"address":[5252430,5252388,5252763],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1024,"address":[5252435,5252689],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1025,"address":[5252710],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1027,"address":[5252765],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1053,"address":[5252832],"length":1,"stats":{"Line":8},"fn_name":"follow_epsilons"},{"line":1064,"address":[5252889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1065,"address":[5252918,5252972,5252982],"length":1,"stats":{"Line":25},"fn_name":null},{"line":1068,"address":[5253595,5252980],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1070,"address":[5252984],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1071,"address":[5253032],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1073,"address":[5253014],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1074,"address":[5253600,5253628,5253581,5253228,5253075,5253533,5253039],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1076,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1077,"address":[5253260],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1079,"address":[5253272],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1082,"address":[5253380,5253330,5253351,5253432,5253501,5253478,5253409,5253524,5253455],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1083,"address":[5253356,5253332,5253294],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1084,"address":[5253344],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1086,"address":[5253385,5253361],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1087,"address":[5253373],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1089,"address":[5253390,5253411],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1090,"address":[5253402],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1092,"address":[5253434,5253413],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1093,"address":[5253425],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1095,"address":[5253457,5253436],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1096,"address":[5253448],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1098,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1099,"address":[5253480,5253459],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1101,"address":[5253471],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1103,"address":[5253503,5253482],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1104,"address":[5253494],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1106,"address":[5253505,5253526],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1107,"address":[5253517],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1109,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1110,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1111,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1112,"address":[5253528],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1116,"address":[5253540],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1117,"address":[5253573],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1119,"address":[5253158],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1120,"address":[5253196],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1121,"address":[5253588],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1146,"address":[5253632,5253701],"length":1,"stats":{"Line":9},"fn_name":"cached_state"},{"line":1159,"address":[5253664,5253806],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1160,"address":[5253857,5253716,5253808],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1161,"address":[5253736],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1164,"address":[5253879,5253782,5253920],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1165,"address":[5253931,5253963],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1168,"address":[5253908,5254042,5253968,5254003],"length":1,"stats":{"Line":19},"fn_name":null},{"line":1169,"address":[5253992,5254040],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1172,"address":[5254083],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1175,"address":[5254048,5254100],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1188,"address":[5254176,5254273],"length":1,"stats":{"Line":9},"fn_name":"cached_state_key"},{"line":1204,"address":[5254207],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1205,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1206,"address":[5254322],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1208,"address":[5254341],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1210,"address":[5254362],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1211,"address":[5254876,5254381],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1212,"address":[5254525,5254570],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1213,"address":[5254838,5254869,5255425,5254730,5254585,5254765,5254627,5254794],"length":1,"stats":{"Line":46},"fn_name":null},{"line":1215,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1216,"address":[5254787],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1218,"address":[5254804],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1219,"address":[5254831],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1221,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1222,"address":[5254723],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1223,"address":[5254848],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1224,"address":[5254871],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1233,"address":[5254881,5254539,5255019],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1234,"address":[5255007],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1236,"address":[5254965],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1237,"address":[5254974,5255030],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1238,"address":[5255032],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1240,"address":[5255144,5255267,5255339],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1241,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1252,"address":[5255530,5255488],"length":1,"stats":{"Line":2},"fn_name":"clear_cache_and_save"},{"line":1256,"address":[5255546,5255502],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1258,"address":[5255574],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1260,"address":[5255627,5255645,5255812],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1261,"address":[5255552,5255634],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1262,"address":[5255593],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1263,"address":[5255647,5255603],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1264,"address":[5255677],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1265,"address":[5255733,5255758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1270,"address":[5255698,5255763],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1271,"address":[5255802],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1280,"address":[5255935,5255872],"length":1,"stats":{"Line":2},"fn_name":"clear_cache"},{"line":1286,"address":[5255887],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1287,"address":[5256133,5256023,5256072,5255955],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1288,"address":[5256064],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1289,"address":[5257084,5255996,5256093],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1291,"address":[5256194],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1294,"address":[5256149],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1295,"address":[5257144,5256157,5256227],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1298,"address":[5256243],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1299,"address":[5256304,5256333],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1300,"address":[5256340],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1302,"address":[5256313],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1304,"address":[5256419],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1305,"address":[5256435],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1306,"address":[5256458],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1307,"address":[5256674,5256474,5256634],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1308,"address":[5256668],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1312,"address":[5256590,5256679],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1313,"address":[5256725],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1314,"address":[5256754],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1315,"address":[5256825],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1317,"address":[5256892],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1322,"address":[5257216,5257277],"length":1,"stats":{"Line":2},"fn_name":"restore_state"},{"line":1325,"address":[5257235,5257293,5257352],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1326,"address":[5257360],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1328,"address":[5257404,5257317],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1343,"address":[5257472],"length":1,"stats":{"Line":8},"fn_name":"next_state"},{"line":1350,"address":[5257504],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1351,"address":[5257788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1353,"address":[5257951,5257834,5257786,5257961,5257546,5257902],"length":1,"stats":{"Line":38},"fn_name":null},{"line":1354,"address":[5257847,5257909],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1355,"address":[5257953],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1356,"address":[5257963],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1357,"address":[5257886],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1368,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1379,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1380,"address":[4288508,4325107,4422425,4254201,4288426,4422389,4279592,4388384,4295829,4325131,4317275,4388400,4406192,4325095,4342734,4380541,4308497,4334813,4380459,4279656,4351528,4449894,4358971,4325119,4415068,4440272,4388424,4406180,4398353,4422373,4295935,4406152,4398295,4295841,4414986,4440308,4449910,4351592,4440284,4308545,4279632,4388412,4415010,4245383,4359019,4371747,4380483,4449934,4449922,4342856,4388448,4308533,4371689,4422413,4245371,4351580,4342750,4308481,4308521,4254189,4254137,4271711,4388506,4398247,4334829,4358995,4380419,4245395,4371677,4288414,4371641,4351544,4254165,4371625,4398259,4406216,4254177,4262049,4279608,4308603,4380435,4449958,4254153,4295865,4261967,4359007,4414974,4271671,4398283,4317339,4295877,4406274,4440260,4271687,4334853,4334841,4334865,4245359,4342774,4342798,4254259,4371653,4271699,4295813,4358955,4406168,4271735,4414962,4317315,4422401,4279620,4380447,4325189,4308509,4325067,4245343,4440296,4245407,4449946,4334877,4351568,4358983,4261991,4351650,4440366,4406204,4245465,4398271,4271723,4271793,4261927,4295853,4414998,4450016,4317397,4261943,4261979,4317327,4279714,4261955,4317303,4279644,4422437,4440244,4288450,4334935,4359077,4288438,4288386,4325083,4380471,4388436,4398231,4422495,4351556,4288402,4317291,4342762,4414946,4371665,4342786],"length":1,"stats":{"Line":461},"fn_name":null},{"line":1381,"address":[4308488,4279599,4288393,4271678,4325074,4351535,4371632,4254144,4342741,4358962,4422380,4334820,4295820,4317282,4380426,4388391,4406159,4440251,4261934,4245350,4398238,4449901,4414953],"length":1,"stats":{"Line":63},"fn_name":null},{"line":1382,"address":[4342752,4449912,4261945,4245361,4334831,4388402,4254155,4325085,4380437,4440262,4295831,4308499,4271689,4317293,4398249,4406170,4358973,4351546,4371643,4422391,4288404,4279610,4414964],"length":1,"stats":{"Line":65},"fn_name":null},{"line":1383,"address":[4406182,4371655,4358985,4325097,4288416,4351558,4414976,4317305,4254167,4380449,4422403,4279622,4388414,4308511,4440274,4398261,4449924,4334843,4261957,4295843,4271701,4342764,4245373],"length":1,"stats":{"Line":65},"fn_name":null},{"line":1384,"address":[4325109,4358997,4414988,4288428,4388426,4254179,4271713,4317317,4279634,4308523,4261969,4351570,4440286,4245385,4406194,4295855,4449936,4380461,4342776,4371667,4334855,4398273,4422415],"length":1,"stats":{"Line":65},"fn_name":null},{"line":1385,"address":[4449948,4317329,4295867,4288440,4371679,4351582,4254191,4440298,4422427,4380473,4279646,4325121,4415000,4261981,4245397,4334867,4308535,4359009,4342788,4388438,4271725,4398285,4406206],"length":1,"stats":{"Line":67},"fn_name":null},{"line":1386,"address":[4380508,4398320,4359044,4295902,4288475,4271760,4245432,4342823,4254226,4308570,4371714,4388473,4279681,4406241,4317364,4415035,4334902,4422462,4351617,4262016,4325156,4440333,4449983],"length":1,"stats":{"Line":69},"fn_name":null},{"line":1388,"address":[4398368,4371762,4317412,4359092,4254274,4262064,4325204,4380556,4271808,4351665,4450031,4279729,4245480,4288523,4308618,4334950,4342871,4388521,4415083,4422510,4295950,4406289,4440381],"length":1,"stats":{"Line":69},"fn_name":null},{"line":1389,"address":[4288578,4317467,4388576,4406344,4279784,4245535,4262119,4325259,4342926,4351720,4371817,4308673,4398423,4422565,4296005,4254329,4415138,4380611,4359147,4440436,4450086,4271863,4335005],"length":1,"stats":{"Line":69},"fn_name":null},{"line":1390,"address":[4309008,4325594,4359482,4372152,4380946,4280119,4245870,4415473,4262454,4440771,4288913,4254664,4272198,4422900,4343261,4398758,4296340,4335340,4406679,4450421,4352055,4388911,4317802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1391,"address":[4262168,4406393,4254378,4422614,4388625,4335054,4398472,4325308,4371866,4440485,4450135,4296054,4359196,4288627,4245584,4279833,4342975,4380660,4415187,4317516,4271912,4351769,4308722],"length":1,"stats":{"Line":42},"fn_name":null},{"line":1393,"address":[4406433,4296094,4398512,4422654,4245624,4317556,4262208,4271952,4351809,4371906,4335094,4254418,4359236,4415227,4279873,4325348,4288667,4450175,4380700,4343015,4308762,4388665,4440525],"length":1,"stats":{"Line":59},"fn_name":null},{"line":1394,"address":[4440532,4388672,4406440,4398519,4245631,4371913,4450182,4422661,4262215,4288674,4308769,4296101,4359243,4279880,4271959,4351816,4317563,4325355,4254425,4335101,4343022,4380707,4415234],"length":1,"stats":{"Line":59},"fn_name":null},{"line":1395,"address":[4371956,4272002,4359286,4279923,4388715,4406483,4317606,4440575,4398562,4415277,4422704,4325398,4254468,4296144,4450225,4262258,4380750,4288717,4308812,4335144,4245674,4351859,4343065],"length":1,"stats":{"Line":59},"fn_name":null},{"line":1400,"address":[4254565,4415374,4343424,4280282,4317965,4335241,4422801,4272361,4335503,4245771,4359645,4325757,4380847,4381109,4272099,4308909,4359383,4398921,4325495,4440934,4262355,4280020,4288814,4389074,4262617,4450584,4254827,4296503,4372315,4343162,4351956,4296241,4406580,4440672,4352218,4317703,4372053,4289076,4415636,4423063,4398659,4388812,4450322,4406842,4309171,4246033],"length":1,"stats":{"Line":60},"fn_name":null},{"line":1401,"address":[4280097,4289078,4343426,4272363,4343239,4440749,4372317,4262432,4296318,4254642,4309173,4335318,4325759,4389076,4280284,4288891,4325572,4398923,4406657,4415638,4415451,4380924,4450586,4254829,4372130,4272176,4406844,4317967,4388889,4317780,4246035,4352033,4359647,4352220,4423065,4245848,4381111,4335505,4422878,4440936,4262619,4308986,4398736,4450399,4296505,4359460],"length":1,"stats":{"Line":60},"fn_name":null},{"line":1402,"address":[4359511,4388940,4343290,4398787,4415502,4272227,4288942,4335369,4325623,4245899,4440800,4317831,4380975,4450450,4309037,4280148,4406708,4262483,4422929,4352084,4254693,4296369,4372181],"length":1,"stats":{"Line":60},"fn_name":null},{"line":1404,"address":[4398839,4359563,4288994,4309089,4280200,4325675,4440852,4296421,4343342,4245951,4262535,4335421,4415554,4272279,4372233,4406760,4254745,4381027,4422981,4450502,4317883,4352136,4388992],"length":1,"stats":{"Line":59},"fn_name":null},{"line":1405,"address":[4335483,4352198,4415616,4262597,4381089,4359625,4398901,4389054,4423043,4450564,4406822,4296483,4246013,4325737,4254807,4440914,4372295,4309151,4272341,4317945,4280262,4289056,4343404],"length":1,"stats":{"Line":60},"fn_name":null},{"line":1412,"address":[5257984],"length":1,"stats":{"Line":8},"fn_name":"start_flags"},{"line":1413,"address":[5258032],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1414,"address":[5258086],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1415,"address":[5258100],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1416,"address":[5258124],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1417,"address":[5258149,5258241,5258689],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1418,"address":[5258219,5258279],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1420,"address":[5258378,5258290,5258747],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1421,"address":[5258449,5258352,5258508,5258805,5258833],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1422,"address":[5258489,5258563,5258575],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1423,"address":[5258565],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1425,"address":[5258577,5258596],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1426,"address":[5258598],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1428,"address":[5258591],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1430,"address":[5258603],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1437,"address":[5258848],"length":1,"stats":{"Line":4},"fn_name":"start_flags_reverse"},{"line":1442,"address":[5258902],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1443,"address":[5258956],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1444,"address":[5258975],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1445,"address":[5259019],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1446,"address":[5259049,5259573,5259144],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1447,"address":[5259173,5259122],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1449,"address":[5259189,5259265,5259601],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1450,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1451,"address":[5259247,5259320,5259629,5259383],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1452,"address":[5259364,5259459,5259447],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1453,"address":[5259449],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1455,"address":[5259461,5259480],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1456,"address":[5259482],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1458,"address":[5259475],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1460,"address":[5259487],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1464,"address":[5259696],"length":1,"stats":{"Line":9},"fn_name":"state"},{"line":1465,"address":[5259709],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1476,"address":[5259776,5259863],"length":1,"stats":{"Line":8},"fn_name":"add_state"},{"line":1480,"address":[5259807,5259885,5259972],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1481,"address":[5259906,5259974],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1482,"address":[5259922],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1488,"address":[5260201,5259951,5260028],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1489,"address":[5260206,5260642,5260033],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1490,"address":[5260577,5260236],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1491,"address":[5260593],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1496,"address":[5260655,5260881,5261205,5261267,5260739,5260826],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1497,"address":[5260686],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1498,"address":[5260789,5261237],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1499,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1500,"address":[5260968],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1502,"address":[5261117,5261079],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1503,"address":[5261018],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1505,"address":[5261094],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1514,"address":[5261360],"length":1,"stats":{"Line":2},"fn_name":"prefix_at"},{"line":1515,"address":[5261406,5263707],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1522,"address":[5263776],"length":1,"stats":{"Line":2},"fn_name":"num_byte_classes"},{"line":1524,"address":[5263792,5263949,5263889],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1530,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1531,"address":[5252649,5260458,5257744,5257582,5260293,5252600,5260525,5252475,5257701],"length":1,"stats":{"Line":60},"fn_name":null},{"line":1532,"address":[5252651,5257746,5260527,5252612,5257601,5260470,5260342,5257710,5252494],"length":1,"stats":{"Line":32},"fn_name":null},{"line":1533,"address":[5252592,5260450,5252518,5257696,5260360,5257625],"length":1,"stats":{"Line":52},"fn_name":null},{"line":1539,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1540,"address":[5257659,5260402,5252555],"length":1,"stats":{"Line":26},"fn_name":null},{"line":1551,"address":[5263952],"length":1,"stats":{"Line":2},"fn_name":"continue_past_first_match"},{"line":1552,"address":[5263961,5264042],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1556,"address":[5264064],"length":1,"stats":{"Line":9},"fn_name":"has_prefix"},{"line":1557,"address":[5264149,5264073,5264185,5264128,5264200,5264206],"length":1,"stats":{"Line":30},"fn_name":null},{"line":1558,"address":[5264168,5264198],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1559,"address":[5264116],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1567,"address":[5264208],"length":1,"stats":{"Line":9},"fn_name":"start_ptr"},{"line":1568,"address":[5264252,5264225],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1569,"address":[5264258],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1571,"address":[5264248],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1580,"address":[5264288],"length":1,"stats":{"Line":9},"fn_name":"approximate_size"},{"line":1581,"address":[5264362,5264392,5264297],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1610,"address":[5264445,5264400],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":1612,"address":[5264415],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1613,"address":[5264462],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1618,"address":[5264576],"length":1,"stats":{"Line":9},"fn_name":"len"},{"line":1619,"address":[5264585],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1622,"address":[5264624],"length":1,"stats":{"Line":2},"fn_name":"is_empty"},{"line":1623,"address":[5264633],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1626,"address":[5264672],"length":1,"stats":{"Line":9},"fn_name":"get_ptr"},{"line":1627,"address":[5264686],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1630,"address":[5264736],"length":1,"stats":{"Line":9},"fn_name":"get_state"},{"line":1631,"address":[5264904,5264749,5264874],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1634,"address":[5264912,5264987],"length":1,"stats":{"Line":9},"fn_name":"insert"},{"line":1635,"address":[5264935,5265018],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1636,"address":[5265030],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1639,"address":[5265104],"length":1,"stats":{"Line":2},"fn_name":"clear"},{"line":1640,"address":[5265113],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1641,"address":[5265134],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1650,"address":[5265168],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":1651,"address":[5265180],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1655,"address":[5265264],"length":1,"stats":{"Line":9},"fn_name":"num_states"},{"line":1656,"address":[5265343,5265273,5265373],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1662,"address":[5265376],"length":1,"stats":{"Line":8},"fn_name":"add"},{"line":1663,"address":[5265385],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1664,"address":[5265417],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1665,"address":[5265451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1667,"address":[5265477,5265430],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1668,"address":[5265523],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1672,"address":[5265552],"length":1,"stats":{"Line":2},"fn_name":"clear"},{"line":1673,"address":[5265557],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1677,"address":[5265568],"length":1,"stats":{"Line":10},"fn_name":"set_next"},{"line":1678,"address":[5265668,5265698,5265590],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1682,"address":[5265712],"length":1,"stats":{"Line":9},"fn_name":"next"},{"line":1683,"address":[5265730,5265802,5265832],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1687,"address":[5265840],"length":1,"stats":{"Line":9},"fn_name":"state_heap_size"},{"line":1688,"address":[5265887,5265913,5265943,5265849],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1692,"address":[5265952],"length":1,"stats":{"Line":8},"fn_name":"next_unchecked"},{"line":1693,"address":[5265970,5266061],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1694,"address":[5266044,5266117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1695,"address":[5266248,5266218,5266096,5266151],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1700,"address":[5266256],"length":1,"stats":{"Line":8},"fn_name":"is_match"},{"line":1701,"address":[5266261],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1704,"address":[5266288],"length":1,"stats":{"Line":2},"fn_name":"set_match"},{"line":1705,"address":[5266293],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1708,"address":[5266304],"length":1,"stats":{"Line":8},"fn_name":"is_word"},{"line":1709,"address":[5266309],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1712,"address":[5266336],"length":1,"stats":{"Line":9},"fn_name":"set_word"},{"line":1713,"address":[5266341],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1716,"address":[5266352],"length":1,"stats":{"Line":9},"fn_name":"has_empty"},{"line":1717,"address":[5266357],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1720,"address":[5266384],"length":1,"stats":{"Line":8},"fn_name":"set_empty"},{"line":1721,"address":[5266389],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1726,"address":[5266400],"length":1,"stats":{"Line":8},"fn_name":"byte"},{"line":1727,"address":[5266409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1729,"address":[5266432],"length":1,"stats":{"Line":2},"fn_name":"eof"},{"line":1732,"address":[5266448],"length":1,"stats":{"Line":8},"fn_name":"is_eof"},{"line":1733,"address":[5266453],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1736,"address":[5266480],"length":1,"stats":{"Line":8},"fn_name":"is_ascii_word"},{"line":1737,"address":[5266489,5266540],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1738,"address":[5266542,5266502],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1739,"address":[5266516],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1741,"address":[5266618],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1742,"address":[5266620,5266528,5266565],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1743,"address":[5266613],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1747,"address":[5266640],"length":1,"stats":{"Line":8},"fn_name":"as_byte"},{"line":1748,"address":[5266690,5266654],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1749,"address":[5266692],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1751,"address":[5266678],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1757,"address":[5266720,5266776],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":1758,"address":[5266791,5266743],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1759,"address":[5266879,5266806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1760,"address":[5266844,5266872],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1761,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1767,"address":[5267056,5267100],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":1768,"address":[5267079],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1769,"address":[5267120,5267637,5267277],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1770,"address":[5267311,5267659],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1771,"address":[5267689,5267365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1772,"address":[5267399],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1774,"address":[5267257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1781,"address":[5267744,5267788],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":1782,"address":[5267767],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1783,"address":[5267808,5267979,5268400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1784,"address":[5268398,5268120,5268223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1785,"address":[5268045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1786,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1787,"address":[5268125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1789,"address":[5268091],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1790,"address":[5268100,5268257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1794,"address":[5267959],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1799,"address":[5268480],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":1800,"address":[5268744,5268507,5268569,5268659],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1801,"address":[5268539],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1802,"address":[5268624],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1803,"address":[5268709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1809,"address":[5268832,5268876],"length":1,"stats":{"Line":0},"fn_name":"vb"},{"line":1812,"address":[5269055,5268850,5268937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1813,"address":[5268924],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1815,"address":[5268939,5268896],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1816,"address":[5268955,5269023],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1820,"address":[5269088],"length":1,"stats":{"Line":8},"fn_name":"usize_to_u32"},{"line":1821,"address":[5269097],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1822,"address":[5269126],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1824,"address":[5269109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1828,"address":[5269403,5269264],"length":1,"stats":{"Line":0},"fn_name":"show_state_ptr"},{"line":1829,"address":[5269426,5269281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1830,"address":[5269576,5270989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1831,"address":[5269589,5269785,5270898],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1833,"address":[5271085,5269873],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1834,"address":[5269885,5270994],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1836,"address":[5270126,5271181],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1837,"address":[5270138,5271090],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1839,"address":[5270379,5271277],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1840,"address":[5270394,5271186],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1842,"address":[5271373,5270635],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1843,"address":[5270650,5271282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1849,"address":[5271504],"length":1,"stats":{"Line":10},"fn_name":"write_vari32"},{"line":1850,"address":[5271517],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1851,"address":[5271545],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1852,"address":[5271552],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1854,"address":[5271563],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1858,"address":[5271584],"length":1,"stats":{"Line":10},"fn_name":"read_vari32"},{"line":1859,"address":[5271598],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1860,"address":[5271630],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1861,"address":[5271649],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1862,"address":[5271659],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1864,"address":[5271670],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1868,"address":[5271712],"length":1,"stats":{"Line":10},"fn_name":"write_varu32"},{"line":1869,"address":[5271730,5271799],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1870,"address":[5271760],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1871,"address":[5271780],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1873,"address":[5271740],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1877,"address":[5271808],"length":1,"stats":{"Line":10},"fn_name":"read_varu32"},{"line":1878,"address":[5271831],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1879,"address":[5271839],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1880,"address":[5272327,5272019,5271847],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1881,"address":[5272086],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1882,"address":[5272235,5272332,5272160],"length":1,"stats":{"Line":20},"fn_name":null},{"line":1884,"address":[5272392,5272292,5272104],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1885,"address":[5272422,5272452,5272300],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1887,"address":[5271997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1902,"address":[4650005,4650000],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1903,"address":[5133888,5133776],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":1904,"address":[5133791],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1905,"address":[5133919],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1906,"address":[5134006,5134161,5133930,5134221],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1907,"address":[5134212],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1909,"address":[5134125,5134236],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1911,"address":[4650044,4650032],"length":1,"stats":{"Line":4},"fn_name":"{{closure}}"},{"line":1913,"address":[5134439],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1914,"address":[5134578,5134485,5134607],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1916,"address":[5133684,5133730],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1917,"address":[5133695],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1922,"address":[4650069,4650064],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1923,"address":[5134927,5134896],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":1924,"address":[5134907],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1925,"address":[5134948],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1926,"address":[5135004,5134955],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1927,"address":[5135050,5135143],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1929,"address":[5134881],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1933,"address":[4650096,4650101],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1934,"address":[5135200,5135231],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":1935,"address":[5135211],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1936,"address":[5135252],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1937,"address":[5135308,5135259],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1938,"address":[5135354,5135447],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1940,"address":[5135185],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":588,"coverable":684},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","error.rs"],"content":"use std::fmt;\nuse std::iter::repeat;\n\n/// An error that occurred during parsing or compiling a regular expression.\n#[derive(Clone, PartialEq)]\npub enum Error {\n    /// A syntax error.\n    Syntax(String),\n    /// The compiled program exceeded the set size limit.\n    /// The argument is the size limit imposed.\n    CompiledTooBig(usize),\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}\n\nimpl ::std::error::Error for Error {\n    // TODO: Remove this method entirely on the next breaking semver release.\n    #[allow(deprecated)]\n    fn description(&self) -> &str {\n        match *self {\n            Error::Syntax(ref err) => err,\n            Error::CompiledTooBig(_) => \"compiled program too big\",\n            Error::__Nonexhaustive => unreachable!(),\n        }\n    }\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            Error::Syntax(ref err) => err.fmt(f),\n            Error::CompiledTooBig(limit) => write!(\n                f,\n                \"Compiled regex exceeds size limit of {} bytes.\",\n                limit\n            ),\n            Error::__Nonexhaustive => unreachable!(),\n        }\n    }\n}\n\n// We implement our own Debug implementation so that we show nicer syntax\n// errors when people use `Regex::new(...).unwrap()`. It's a little weird,\n// but the `Syntax` variant is already storing a `String` anyway, so we might\n// as well format it nicely.\nimpl fmt::Debug for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            Error::Syntax(ref err) => {\n                let hr: String = repeat('~').take(79).collect();\n                writeln!(f, \"Syntax(\")?;\n                writeln!(f, \"{}\", hr)?;\n                writeln!(f, \"{}\", err)?;\n                writeln!(f, \"{}\", hr)?;\n                write!(f, \")\")?;\n                Ok(())\n            }\n            Error::CompiledTooBig(limit) => {\n                f.debug_tuple(\"CompiledTooBig\").field(&limit).finish()\n            }\n            Error::__Nonexhaustive => {\n                f.debug_tuple(\"__Nonexhaustive\").finish()\n            }\n        }\n    }\n}\n","traces":[{"line":24,"address":[4879968],"length":1,"stats":{"Line":0},"fn_name":"description"},{"line":25,"address":[5518424,5518480],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[5518361,5518431],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[5518489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[5518528],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":35,"address":[5518619,5518659,5518841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[5518551,5518626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[5518692,5518676],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[4880559,4880480],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":53,"address":[4881969,4882119,4882091,4880616],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4880503,4880626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[4880640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[4880708,4880934,4881009,4880967,4880801],"length":1,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[4881244,4880856,4881016],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4881295,4881523,4881166],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[5519829,5520147,5519958],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[4881724,4881923,4881809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[4881899],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4881989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[4882001],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[4882096,4880581],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":24},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","exec.rs"],"content":"use std::cell::RefCell;\nuse std::collections::HashMap;\nuse std::sync::Arc;\n\n#[cfg(feature = \"perf-literal\")]\nuse aho_corasick::{AhoCorasick, AhoCorasickBuilder, MatchKind};\nuse syntax::hir::literal::Literals;\nuse syntax::hir::Hir;\nuse syntax::ParserBuilder;\n\nuse backtrack;\nuse cache::{Cached, CachedGuard};\nuse compile::Compiler;\n#[cfg(feature = \"perf-dfa\")]\nuse dfa;\nuse error::Error;\nuse input::{ByteInput, CharInput};\nuse literal::LiteralSearcher;\nuse pikevm;\nuse prog::Program;\nuse re_builder::RegexOptions;\nuse re_bytes;\nuse re_set;\nuse re_trait::{Locations, RegularExpression, Slot};\nuse re_unicode;\nuse utf8::next_utf8;\n\n/// `Exec` manages the execution of a regular expression.\n///\n/// In particular, this manages the various compiled forms of a single regular\n/// expression and the choice of which matching engine to use to execute a\n/// regular expression.\npub struct Exec {\n    /// All read only state.\n    ro: Arc<ExecReadOnly>,\n    /// Caches for the various matching engines.\n    cache: Cached<ProgramCache>,\n}\n\n/// `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n/// means it is no longer Sync, but we can now avoid the overhead of\n/// synchronization to fetch the cache.\n#[derive(Debug)]\npub struct ExecNoSync<'c> {\n    /// All read only state.\n    ro: &'c Arc<ExecReadOnly>,\n    /// Caches for the various matching engines.\n    cache: CachedGuard<'c, ProgramCache>,\n}\n\n/// `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\npub struct ExecNoSyncStr<'c>(ExecNoSync<'c>);\n\n/// `ExecReadOnly` comprises all read only state for a regex. Namely, all such\n/// state is determined at compile time and never changes during search.\n#[derive(Debug)]\nstruct ExecReadOnly {\n    /// The original regular expressions given by the caller to compile.\n    res: Vec<String>,\n    /// A compiled program that is used in the NFA simulation and backtracking.\n    /// It can be byte-based or Unicode codepoint based.\n    ///\n    /// N.B. It is not possibly to make this byte-based from the public API.\n    /// It is only used for testing byte based programs in the NFA simulations.\n    nfa: Program,\n    /// A compiled byte based program for DFA execution. This is only used\n    /// if a DFA can be executed. (Currently, only word boundary assertions are\n    /// not supported.) Note that this program contains an embedded `.*?`\n    /// preceding the first capture group, unless the regex is anchored at the\n    /// beginning.\n    dfa: Program,\n    /// The same as above, except the program is reversed (and there is no\n    /// preceding `.*?`). This is used by the DFA to find the starting location\n    /// of matches.\n    dfa_reverse: Program,\n    /// A set of suffix literals extracted from the regex.\n    ///\n    /// Prefix literals are stored on the `Program`, since they are used inside\n    /// the matching engines.\n    suffixes: LiteralSearcher,\n    /// An Aho-Corasick automaton with leftmost-first match semantics.\n    ///\n    /// This is only set when the entire regex is a simple unanchored\n    /// alternation of literals. We could probably use it more circumstances,\n    /// but this is already hacky enough in this architecture.\n    ///\n    /// N.B. We use u32 as a state ID representation under the assumption that\n    /// if we were to exhaust the ID space, we probably would have long\n    /// surpassed the compilation size limit.\n    #[cfg(feature = \"perf-literal\")]\n    ac: Option<AhoCorasick<u32>>,\n    /// match_type encodes as much upfront knowledge about how we're going to\n    /// execute a search as possible.\n    match_type: MatchType,\n}\n\n/// Facilitates the construction of an executor by exposing various knobs\n/// to control how a regex is executed and what kinds of resources it's\n/// permitted to use.\npub struct ExecBuilder {\n    options: RegexOptions,\n    match_type: Option<MatchType>,\n    bytes: bool,\n    only_utf8: bool,\n}\n\n/// Parsed represents a set of parsed regular expressions and their detected\n/// literals.\nstruct Parsed {\n    exprs: Vec<Hir>,\n    prefixes: Literals,\n    suffixes: Literals,\n    bytes: bool,\n}\n\nimpl ExecBuilder {\n    /// Create a regex execution builder.\n    ///\n    /// This uses default settings for everything except the regex itself,\n    /// which must be provided. Further knobs can be set by calling methods,\n    /// and then finally, `build` to actually create the executor.\n    pub fn new(re: &str) -> Self {\n        Self::new_many(&[re])\n    }\n\n    /// Like new, but compiles the union of the given regular expressions.\n    ///\n    /// Note that when compiling 2 or more regular expressions, capture groups\n    /// are completely unsupported. (This means both `find` and `captures`\n    /// wont work.)\n    pub fn new_many<I, S>(res: I) -> Self\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {\n        let mut opts = RegexOptions::default();\n        opts.pats = res.into_iter().map(|s| s.as_ref().to_owned()).collect();\n        Self::new_options(opts)\n    }\n\n    /// Create a regex execution builder.\n    pub fn new_options(opts: RegexOptions) -> Self {\n        ExecBuilder {\n            options: opts,\n            match_type: None,\n            bytes: false,\n            only_utf8: true,\n        }\n    }\n\n    /// Set the matching engine to be automatically determined.\n    ///\n    /// This is the default state and will apply whatever optimizations are\n    /// possible, such as running a DFA.\n    ///\n    /// This overrides whatever was previously set via the `nfa` or\n    /// `bounded_backtracking` methods.\n    pub fn automatic(mut self) -> Self {\n        self.match_type = None;\n        self\n    }\n\n    /// Sets the matching engine to use the NFA algorithm no matter what\n    /// optimizations are possible.\n    ///\n    /// This overrides whatever was previously set via the `automatic` or\n    /// `bounded_backtracking` methods.\n    pub fn nfa(mut self) -> Self {\n        self.match_type = Some(MatchType::Nfa(MatchNfaType::PikeVM));\n        self\n    }\n\n    /// Sets the matching engine to use a bounded backtracking engine no\n    /// matter what optimizations are possible.\n    ///\n    /// One must use this with care, since the bounded backtracking engine\n    /// uses memory proportion to `len(regex) * len(text)`.\n    ///\n    /// This overrides whatever was previously set via the `automatic` or\n    /// `nfa` methods.\n    pub fn bounded_backtracking(mut self) -> Self {\n        self.match_type = Some(MatchType::Nfa(MatchNfaType::Backtrack));\n        self\n    }\n\n    /// Compiles byte based programs for use with the NFA matching engines.\n    ///\n    /// By default, the NFA engines match on Unicode scalar values. They can\n    /// be made to use byte based programs instead. In general, the byte based\n    /// programs are slower because of a less efficient encoding of character\n    /// classes.\n    ///\n    /// Note that this does not impact DFA matching engines, which always\n    /// execute on bytes.\n    pub fn bytes(mut self, yes: bool) -> Self {\n        self.bytes = yes;\n        self\n    }\n\n    /// When disabled, the program compiled may match arbitrary bytes.\n    ///\n    /// When enabled (the default), all compiled programs exclusively match\n    /// valid UTF-8 bytes.\n    pub fn only_utf8(mut self, yes: bool) -> Self {\n        self.only_utf8 = yes;\n        self\n    }\n\n    /// Set the Unicode flag.\n    pub fn unicode(mut self, yes: bool) -> Self {\n        self.options.unicode = yes;\n        self\n    }\n\n    /// Parse the current set of patterns into their AST and extract literals.\n    fn parse(&self) -> Result<Parsed, Error> {\n        let mut exprs = Vec::with_capacity(self.options.pats.len());\n        let mut prefixes = Some(Literals::empty());\n        let mut suffixes = Some(Literals::empty());\n        let mut bytes = false;\n        let is_set = self.options.pats.len() > 1;\n        // If we're compiling a regex set and that set has any anchored\n        // expressions, then disable all literal optimizations.\n        for pat in &self.options.pats {\n            let mut parser = ParserBuilder::new()\n                .octal(self.options.octal)\n                .case_insensitive(self.options.case_insensitive)\n                .multi_line(self.options.multi_line)\n                .dot_matches_new_line(self.options.dot_matches_new_line)\n                .swap_greed(self.options.swap_greed)\n                .ignore_whitespace(self.options.ignore_whitespace)\n                .unicode(self.options.unicode)\n                .allow_invalid_utf8(!self.only_utf8)\n                .nest_limit(self.options.nest_limit)\n                .build();\n            let expr =\n                parser.parse(pat).map_err(|e| Error::Syntax(e.to_string()))?;\n            bytes = bytes || !expr.is_always_utf8();\n\n            if cfg!(feature = \"perf-literal\") {\n                if !expr.is_anchored_start() && expr.is_any_anchored_start() {\n                    // Partial anchors unfortunately make it hard to use\n                    // prefixes, so disable them.\n                    prefixes = None;\n                } else if is_set && expr.is_anchored_start() {\n                    // Regex sets with anchors do not go well with literal\n                    // optimizations.\n                    prefixes = None;\n                }\n                prefixes = prefixes.and_then(|mut prefixes| {\n                    if !prefixes.union_prefixes(&expr) {\n                        None\n                    } else {\n                        Some(prefixes)\n                    }\n                });\n\n                if !expr.is_anchored_end() && expr.is_any_anchored_end() {\n                    // Partial anchors unfortunately make it hard to use\n                    // suffixes, so disable them.\n                    suffixes = None;\n                } else if is_set && expr.is_anchored_end() {\n                    // Regex sets with anchors do not go well with literal\n                    // optimizations.\n                    suffixes = None;\n                }\n                suffixes = suffixes.and_then(|mut suffixes| {\n                    if !suffixes.union_suffixes(&expr) {\n                        None\n                    } else {\n                        Some(suffixes)\n                    }\n                });\n            }\n            exprs.push(expr);\n        }\n        Ok(Parsed {\n            exprs: exprs,\n            prefixes: prefixes.unwrap_or_else(Literals::empty),\n            suffixes: suffixes.unwrap_or_else(Literals::empty),\n            bytes: bytes,\n        })\n    }\n\n    /// Build an executor that can run a regular expression.\n    pub fn build(self) -> Result<Exec, Error> {\n        // Special case when we have no patterns to compile.\n        // This can happen when compiling a regex set.\n        if self.options.pats.is_empty() {\n            let ro = Arc::new(ExecReadOnly {\n                res: vec![],\n                nfa: Program::new(),\n                dfa: Program::new(),\n                dfa_reverse: Program::new(),\n                suffixes: LiteralSearcher::empty(),\n                #[cfg(feature = \"perf-literal\")]\n                ac: None,\n                match_type: MatchType::Nothing,\n            });\n            return Ok(Exec { ro: ro, cache: Cached::new() });\n        }\n        let parsed = self.parse()?;\n        let mut nfa = Compiler::new()\n            .size_limit(self.options.size_limit)\n            .bytes(self.bytes || parsed.bytes)\n            .only_utf8(self.only_utf8)\n            .compile(&parsed.exprs)?;\n        let mut dfa = Compiler::new()\n            .size_limit(self.options.size_limit)\n            .dfa(true)\n            .only_utf8(self.only_utf8)\n            .compile(&parsed.exprs)?;\n        let mut dfa_reverse = Compiler::new()\n            .size_limit(self.options.size_limit)\n            .dfa(true)\n            .only_utf8(self.only_utf8)\n            .reverse(true)\n            .compile(&parsed.exprs)?;\n\n        #[cfg(feature = \"perf-literal\")]\n        let ac = self.build_aho_corasick(&parsed);\n        nfa.prefixes = LiteralSearcher::prefixes(parsed.prefixes);\n        dfa.prefixes = nfa.prefixes.clone();\n        dfa.dfa_size_limit = self.options.dfa_size_limit;\n        dfa_reverse.dfa_size_limit = self.options.dfa_size_limit;\n\n        let mut ro = ExecReadOnly {\n            res: self.options.pats,\n            nfa: nfa,\n            dfa: dfa,\n            dfa_reverse: dfa_reverse,\n            suffixes: LiteralSearcher::suffixes(parsed.suffixes),\n            #[cfg(feature = \"perf-literal\")]\n            ac: ac,\n            match_type: MatchType::Nothing,\n        };\n        ro.match_type = ro.choose_match_type(self.match_type);\n\n        let ro = Arc::new(ro);\n        Ok(Exec { ro: ro, cache: Cached::new() })\n    }\n\n    #[cfg(feature = \"perf-literal\")]\n    fn build_aho_corasick(&self, parsed: &Parsed) -> Option<AhoCorasick<u32>> {\n        if parsed.exprs.len() != 1 {\n            return None;\n        }\n        let lits = match alternation_literals(&parsed.exprs[0]) {\n            None => return None,\n            Some(lits) => lits,\n        };\n        // If we have a small number of literals, then let Teddy handle\n        // things (see literal/mod.rs).\n        if lits.len() <= 32 {\n            return None;\n        }\n        Some(\n            AhoCorasickBuilder::new()\n                .match_kind(MatchKind::LeftmostFirst)\n                .auto_configure(&lits)\n                // We always want this to reduce size, regardless\n                // of what auto-configure does.\n                .byte_classes(true)\n                .build_with_size::<u32, _, _>(&lits)\n                // This should never happen because we'd long exceed the\n                // compilation limit for regexes first.\n                .expect(\"AC automaton too big\"),\n        )\n    }\n}\n\nimpl<'c> RegularExpression for ExecNoSyncStr<'c> {\n    type Text = str;\n\n    fn slots_len(&self) -> usize {\n        self.0.slots_len()\n    }\n\n    fn next_after_empty(&self, text: &str, i: usize) -> usize {\n        next_utf8(text.as_bytes(), i)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn shortest_match_at(&self, text: &str, start: usize) -> Option<usize> {\n        self.0.shortest_match_at(text.as_bytes(), start)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_match_at(&self, text: &str, start: usize) -> bool {\n        self.0.is_match_at(text.as_bytes(), start)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_at(&self, text: &str, start: usize) -> Option<(usize, usize)> {\n        self.0.find_at(text.as_bytes(), start)\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn captures_read_at(\n        &self,\n        locs: &mut Locations,\n        text: &str,\n        start: usize,\n    ) -> Option<(usize, usize)> {\n        self.0.captures_read_at(locs, text.as_bytes(), start)\n    }\n}\n\nimpl<'c> RegularExpression for ExecNoSync<'c> {\n    type Text = [u8];\n\n    /// Returns the number of capture slots in the regular expression. (There\n    /// are two slots for every capture group, corresponding to possibly empty\n    /// start and end locations of the capture.)\n    fn slots_len(&self) -> usize {\n        self.ro.nfa.captures.len() * 2\n    }\n\n    fn next_after_empty(&self, _text: &[u8], i: usize) -> usize {\n        i + 1\n    }\n\n    /// Returns the end of a match location, possibly occurring before the\n    /// end location of the correct leftmost-first match.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn shortest_match_at(&self, text: &[u8], start: usize) -> Option<usize> {\n        if !self.is_anchor_end_match(text) {\n            return None;\n        }\n        match self.ro.match_type {\n            #[cfg(feature = \"perf-literal\")]\n            MatchType::Literal(ty) => {\n                self.find_literals(ty, text, start).map(|(_, e)| e)\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::Dfa | MatchType::DfaMany => {\n                match self.shortest_dfa(text, start) {\n                    dfa::Result::Match(end) => Some(end),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => self.shortest_nfa(text, start),\n                }\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaAnchoredReverse => {\n                match dfa::Fsm::reverse(\n                    &self.ro.dfa_reverse,\n                    self.cache.value(),\n                    true,\n                    &text[start..],\n                    text.len(),\n                ) {\n                    dfa::Result::Match(_) => Some(text.len()),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => self.shortest_nfa(text, start),\n                }\n            }\n            #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n            MatchType::DfaSuffix => {\n                match self.shortest_dfa_reverse_suffix(text, start) {\n                    dfa::Result::Match(e) => Some(e),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => self.shortest_nfa(text, start),\n                }\n            }\n            MatchType::Nfa(ty) => self.shortest_nfa_type(ty, text, start),\n            MatchType::Nothing => None,\n        }\n    }\n\n    /// Returns true if and only if the regex matches text.\n    ///\n    /// For single regular expressions, this is equivalent to calling\n    /// shortest_match(...).is_some().\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_match_at(&self, text: &[u8], start: usize) -> bool {\n        if !self.is_anchor_end_match(text) {\n            return false;\n        }\n        // We need to do this dance because shortest_match relies on the NFA\n        // filling in captures[1], but a RegexSet has no captures. In other\n        // words, a RegexSet can't (currently) use shortest_match. ---AG\n        match self.ro.match_type {\n            #[cfg(feature = \"perf-literal\")]\n            MatchType::Literal(ty) => {\n                self.find_literals(ty, text, start).is_some()\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::Dfa | MatchType::DfaMany => {\n                match self.shortest_dfa(text, start) {\n                    dfa::Result::Match(_) => true,\n                    dfa::Result::NoMatch(_) => false,\n                    dfa::Result::Quit => self.match_nfa(text, start),\n                }\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaAnchoredReverse => {\n                match dfa::Fsm::reverse(\n                    &self.ro.dfa_reverse,\n                    self.cache.value(),\n                    true,\n                    &text[start..],\n                    text.len(),\n                ) {\n                    dfa::Result::Match(_) => true,\n                    dfa::Result::NoMatch(_) => false,\n                    dfa::Result::Quit => self.match_nfa(text, start),\n                }\n            }\n            #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n            MatchType::DfaSuffix => {\n                match self.shortest_dfa_reverse_suffix(text, start) {\n                    dfa::Result::Match(_) => true,\n                    dfa::Result::NoMatch(_) => false,\n                    dfa::Result::Quit => self.match_nfa(text, start),\n                }\n            }\n            MatchType::Nfa(ty) => self.match_nfa_type(ty, text, start),\n            MatchType::Nothing => false,\n        }\n    }\n\n    /// Finds the start and end location of the leftmost-first match, starting\n    /// at the given location.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_at(&self, text: &[u8], start: usize) -> Option<(usize, usize)> {\n        if !self.is_anchor_end_match(text) {\n            return None;\n        }\n        match self.ro.match_type {\n            #[cfg(feature = \"perf-literal\")]\n            MatchType::Literal(ty) => self.find_literals(ty, text, start),\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::Dfa => match self.find_dfa_forward(text, start) {\n                dfa::Result::Match((s, e)) => Some((s, e)),\n                dfa::Result::NoMatch(_) => None,\n                dfa::Result::Quit => {\n                    self.find_nfa(MatchNfaType::Auto, text, start)\n                }\n            },\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaAnchoredReverse => {\n                match self.find_dfa_anchored_reverse(text, start) {\n                    dfa::Result::Match((s, e)) => Some((s, e)),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => {\n                        self.find_nfa(MatchNfaType::Auto, text, start)\n                    }\n                }\n            }\n            #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n            MatchType::DfaSuffix => {\n                match self.find_dfa_reverse_suffix(text, start) {\n                    dfa::Result::Match((s, e)) => Some((s, e)),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => {\n                        self.find_nfa(MatchNfaType::Auto, text, start)\n                    }\n                }\n            }\n            MatchType::Nfa(ty) => self.find_nfa(ty, text, start),\n            MatchType::Nothing => None,\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaMany => {\n                unreachable!(\"BUG: RegexSet cannot be used with find\")\n            }\n        }\n    }\n\n    /// Finds the start and end location of the leftmost-first match and also\n    /// fills in all matching capture groups.\n    ///\n    /// The number of capture slots given should be equal to the total number\n    /// of capture slots in the compiled program.\n    ///\n    /// Note that the first two slots always correspond to the start and end\n    /// locations of the overall match.\n    fn captures_read_at(\n        &self,\n        locs: &mut Locations,\n        text: &[u8],\n        start: usize,\n    ) -> Option<(usize, usize)> {\n        let slots = locs.as_slots();\n        for slot in slots.iter_mut() {\n            *slot = None;\n        }\n        // If the caller unnecessarily uses this, then we try to save them\n        // from themselves.\n        match slots.len() {\n            0 => return self.find_at(text, start),\n            2 => {\n                return self.find_at(text, start).map(|(s, e)| {\n                    slots[0] = Some(s);\n                    slots[1] = Some(e);\n                    (s, e)\n                });\n            }\n            _ => {} // fallthrough\n        }\n        if !self.is_anchor_end_match(text) {\n            return None;\n        }\n        match self.ro.match_type {\n            #[cfg(feature = \"perf-literal\")]\n            MatchType::Literal(ty) => {\n                self.find_literals(ty, text, start).and_then(|(s, e)| {\n                    self.captures_nfa_type(\n                        MatchNfaType::Auto,\n                        slots,\n                        text,\n                        s,\n                        e,\n                    )\n                })\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::Dfa => {\n                if self.ro.nfa.is_anchored_start {\n                    self.captures_nfa(slots, text, start)\n                } else {\n                    match self.find_dfa_forward(text, start) {\n                        dfa::Result::Match((s, e)) => self.captures_nfa_type(\n                            MatchNfaType::Auto,\n                            slots,\n                            text,\n                            s,\n                            e,\n                        ),\n                        dfa::Result::NoMatch(_) => None,\n                        dfa::Result::Quit => {\n                            self.captures_nfa(slots, text, start)\n                        }\n                    }\n                }\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaAnchoredReverse => {\n                match self.find_dfa_anchored_reverse(text, start) {\n                    dfa::Result::Match((s, e)) => self.captures_nfa_type(\n                        MatchNfaType::Auto,\n                        slots,\n                        text,\n                        s,\n                        e,\n                    ),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => self.captures_nfa(slots, text, start),\n                }\n            }\n            #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n            MatchType::DfaSuffix => {\n                match self.find_dfa_reverse_suffix(text, start) {\n                    dfa::Result::Match((s, e)) => self.captures_nfa_type(\n                        MatchNfaType::Auto,\n                        slots,\n                        text,\n                        s,\n                        e,\n                    ),\n                    dfa::Result::NoMatch(_) => None,\n                    dfa::Result::Quit => self.captures_nfa(slots, text, start),\n                }\n            }\n            MatchType::Nfa(ty) => {\n                self.captures_nfa_type(ty, slots, text, start, text.len())\n            }\n            MatchType::Nothing => None,\n            #[cfg(feature = \"perf-dfa\")]\n            MatchType::DfaMany => {\n                unreachable!(\"BUG: RegexSet cannot be used with captures\")\n            }\n        }\n    }\n}\n\nimpl<'c> ExecNoSync<'c> {\n    /// Finds the leftmost-first match using only literal search.\n    #[cfg(feature = \"perf-literal\")]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_literals(\n        &self,\n        ty: MatchLiteralType,\n        text: &[u8],\n        start: usize,\n    ) -> Option<(usize, usize)> {\n        use self::MatchLiteralType::*;\n        match ty {\n            Unanchored => {\n                let lits = &self.ro.nfa.prefixes;\n                lits.find(&text[start..]).map(|(s, e)| (start + s, start + e))\n            }\n            AnchoredStart => {\n                let lits = &self.ro.nfa.prefixes;\n                if start == 0 || !self.ro.nfa.is_anchored_start {\n                    lits.find_start(&text[start..])\n                        .map(|(s, e)| (start + s, start + e))\n                } else {\n                    None\n                }\n            }\n            AnchoredEnd => {\n                let lits = &self.ro.suffixes;\n                lits.find_end(&text[start..])\n                    .map(|(s, e)| (start + s, start + e))\n            }\n            AhoCorasick => self\n                .ro\n                .ac\n                .as_ref()\n                .unwrap()\n                .find(&text[start..])\n                .map(|m| (start + m.start(), start + m.end())),\n        }\n    }\n\n    /// Finds the leftmost-first match (start and end) using only the DFA.\n    ///\n    /// If the result returned indicates that the DFA quit, then another\n    /// matching engine should be used.\n    #[cfg(feature = \"perf-dfa\")]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_dfa_forward(\n        &self,\n        text: &[u8],\n        start: usize,\n    ) -> dfa::Result<(usize, usize)> {\n        use dfa::Result::*;\n        let end = match dfa::Fsm::forward(\n            &self.ro.dfa,\n            self.cache.value(),\n            false,\n            text,\n            start,\n        ) {\n            NoMatch(i) => return NoMatch(i),\n            Quit => return Quit,\n            Match(end) if start == end => return Match((start, start)),\n            Match(end) => end,\n        };\n        // Now run the DFA in reverse to find the start of the match.\n        match dfa::Fsm::reverse(\n            &self.ro.dfa_reverse,\n            self.cache.value(),\n            false,\n            &text[start..],\n            end - start,\n        ) {\n            Match(s) => Match((start + s, end)),\n            NoMatch(i) => NoMatch(i),\n            Quit => Quit,\n        }\n    }\n\n    /// Finds the leftmost-first match (start and end) using only the DFA,\n    /// but assumes the regex is anchored at the end and therefore starts at\n    /// the end of the regex and matches in reverse.\n    ///\n    /// If the result returned indicates that the DFA quit, then another\n    /// matching engine should be used.\n    #[cfg(feature = \"perf-dfa\")]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_dfa_anchored_reverse(\n        &self,\n        text: &[u8],\n        start: usize,\n    ) -> dfa::Result<(usize, usize)> {\n        use dfa::Result::*;\n        match dfa::Fsm::reverse(\n            &self.ro.dfa_reverse,\n            self.cache.value(),\n            false,\n            &text[start..],\n            text.len() - start,\n        ) {\n            Match(s) => Match((start + s, text.len())),\n            NoMatch(i) => NoMatch(i),\n            Quit => Quit,\n        }\n    }\n\n    /// Finds the end of the shortest match using only the DFA.\n    #[cfg(feature = \"perf-dfa\")]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn shortest_dfa(&self, text: &[u8], start: usize) -> dfa::Result<usize> {\n        dfa::Fsm::forward(&self.ro.dfa, self.cache.value(), true, text, start)\n    }\n\n    /// Finds the end of the shortest match using only the DFA by scanning for\n    /// suffix literals.\n    #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn shortest_dfa_reverse_suffix(\n        &self,\n        text: &[u8],\n        start: usize,\n    ) -> dfa::Result<usize> {\n        match self.exec_dfa_reverse_suffix(text, start) {\n            None => self.shortest_dfa(text, start),\n            Some(r) => r.map(|(_, end)| end),\n        }\n    }\n\n    /// Finds the end of the shortest match using only the DFA by scanning for\n    /// suffix literals. It also reports the start of the match.\n    ///\n    /// Note that if None is returned, then the optimization gave up to avoid\n    /// worst case quadratic behavior. A forward scanning DFA should be tried\n    /// next.\n    ///\n    /// If a match is returned and the full leftmost-first match is desired,\n    /// then a forward scan starting from the beginning of the match must be\n    /// done.\n    ///\n    /// If the result returned indicates that the DFA quit, then another\n    /// matching engine should be used.\n    #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn exec_dfa_reverse_suffix(\n        &self,\n        text: &[u8],\n        original_start: usize,\n    ) -> Option<dfa::Result<(usize, usize)>> {\n        use dfa::Result::*;\n\n        let lcs = self.ro.suffixes.lcs();\n        debug_assert!(lcs.len() >= 1);\n        let mut start = original_start;\n        let mut end = start;\n        let mut last_literal = start;\n        while end <= text.len() {\n            last_literal += match lcs.find(&text[last_literal..]) {\n                None => return Some(NoMatch(text.len())),\n                Some(i) => i,\n            };\n            end = last_literal + lcs.len();\n            match dfa::Fsm::reverse(\n                &self.ro.dfa_reverse,\n                self.cache.value(),\n                false,\n                &text[start..end],\n                end - start,\n            ) {\n                Match(0) | NoMatch(0) => return None,\n                Match(i) => return Some(Match((start + i, end))),\n                NoMatch(i) => {\n                    start += i;\n                    last_literal += 1;\n                    continue;\n                }\n                Quit => return Some(Quit),\n            };\n        }\n        Some(NoMatch(text.len()))\n    }\n\n    /// Finds the leftmost-first match (start and end) using only the DFA\n    /// by scanning for suffix literals.\n    ///\n    /// If the result returned indicates that the DFA quit, then another\n    /// matching engine should be used.\n    #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_dfa_reverse_suffix(\n        &self,\n        text: &[u8],\n        start: usize,\n    ) -> dfa::Result<(usize, usize)> {\n        use dfa::Result::*;\n\n        let match_start = match self.exec_dfa_reverse_suffix(text, start) {\n            None => return self.find_dfa_forward(text, start),\n            Some(Match((start, _))) => start,\n            Some(r) => return r,\n        };\n        // At this point, we've found a match. The only way to quit now\n        // without a match is if the DFA gives up (seems unlikely).\n        //\n        // Now run the DFA forwards to find the proper end of the match.\n        // (The suffix literal match can only indicate the earliest\n        // possible end location, which may appear before the end of the\n        // leftmost-first match.)\n        match dfa::Fsm::forward(\n            &self.ro.dfa,\n            self.cache.value(),\n            false,\n            text,\n            match_start,\n        ) {\n            NoMatch(_) => panic!(\"BUG: reverse match implies forward match\"),\n            Quit => Quit,\n            Match(e) => Match((match_start, e)),\n        }\n    }\n\n    /// Executes the NFA engine to return whether there is a match or not.\n    ///\n    /// Ideally, we could use shortest_nfa(...).is_some() and get the same\n    /// performance characteristics, but regex sets don't have captures, which\n    /// shortest_nfa depends on.\n    #[cfg(feature = \"perf-dfa\")]\n    fn match_nfa(&self, text: &[u8], start: usize) -> bool {\n        self.match_nfa_type(MatchNfaType::Auto, text, start)\n    }\n\n    /// Like match_nfa, but allows specification of the type of NFA engine.\n    fn match_nfa_type(\n        &self,\n        ty: MatchNfaType,\n        text: &[u8],\n        start: usize,\n    ) -> bool {\n        self.exec_nfa(\n            ty,\n            &mut [false],\n            &mut [],\n            true,\n            false,\n            text,\n            start,\n            text.len(),\n        )\n    }\n\n    /// Finds the shortest match using an NFA.\n    #[cfg(feature = \"perf-dfa\")]\n    fn shortest_nfa(&self, text: &[u8], start: usize) -> Option<usize> {\n        self.shortest_nfa_type(MatchNfaType::Auto, text, start)\n    }\n\n    /// Like shortest_nfa, but allows specification of the type of NFA engine.\n    fn shortest_nfa_type(\n        &self,\n        ty: MatchNfaType,\n        text: &[u8],\n        start: usize,\n    ) -> Option<usize> {\n        let mut slots = [None, None];\n        if self.exec_nfa(\n            ty,\n            &mut [false],\n            &mut slots,\n            true,\n            true,\n            text,\n            start,\n            text.len(),\n        ) {\n            slots[1]\n        } else {\n            None\n        }\n    }\n\n    /// Like find, but executes an NFA engine.\n    fn find_nfa(\n        &self,\n        ty: MatchNfaType,\n        text: &[u8],\n        start: usize,\n    ) -> Option<(usize, usize)> {\n        let mut slots = [None, None];\n        if self.exec_nfa(\n            ty,\n            &mut [false],\n            &mut slots,\n            false,\n            false,\n            text,\n            start,\n            text.len(),\n        ) {\n            match (slots[0], slots[1]) {\n                (Some(s), Some(e)) => Some((s, e)),\n                _ => None,\n            }\n        } else {\n            None\n        }\n    }\n\n    /// Like find_nfa, but fills in captures.\n    ///\n    /// `slots` should have length equal to `2 * nfa.captures.len()`.\n    #[cfg(feature = \"perf-dfa\")]\n    fn captures_nfa(\n        &self,\n        slots: &mut [Slot],\n        text: &[u8],\n        start: usize,\n    ) -> Option<(usize, usize)> {\n        self.captures_nfa_type(\n            MatchNfaType::Auto,\n            slots,\n            text,\n            start,\n            text.len(),\n        )\n    }\n\n    /// Like captures_nfa, but allows specification of type of NFA engine.\n    fn captures_nfa_type(\n        &self,\n        ty: MatchNfaType,\n        slots: &mut [Slot],\n        text: &[u8],\n        start: usize,\n        end: usize,\n    ) -> Option<(usize, usize)> {\n        if self.exec_nfa(\n            ty,\n            &mut [false],\n            slots,\n            false,\n            false,\n            text,\n            start,\n            end,\n        ) {\n            match (slots[0], slots[1]) {\n                (Some(s), Some(e)) => Some((s, e)),\n                _ => None,\n            }\n        } else {\n            None\n        }\n    }\n\n    fn exec_nfa(\n        &self,\n        mut ty: MatchNfaType,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        quit_after_match: bool,\n        quit_after_match_with_pos: bool,\n        text: &[u8],\n        start: usize,\n        end: usize,\n    ) -> bool {\n        use self::MatchNfaType::*;\n        if let Auto = ty {\n            if backtrack::should_exec(self.ro.nfa.len(), text.len()) {\n                ty = Backtrack;\n            } else {\n                ty = PikeVM;\n            }\n        }\n        // The backtracker can't return the shortest match position as it is\n        // implemented today. So if someone calls `shortest_match` and we need\n        // to run an NFA, then use the PikeVM.\n        if quit_after_match_with_pos || ty == PikeVM {\n            self.exec_pikevm(\n                matches,\n                slots,\n                quit_after_match,\n                text,\n                start,\n                end,\n            )\n        } else {\n            self.exec_backtrack(matches, slots, text, start, end)\n        }\n    }\n\n    /// Always run the NFA algorithm.\n    fn exec_pikevm(\n        &self,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        quit_after_match: bool,\n        text: &[u8],\n        start: usize,\n        end: usize,\n    ) -> bool {\n        if self.ro.nfa.uses_bytes() {\n            pikevm::Fsm::exec(\n                &self.ro.nfa,\n                self.cache.value(),\n                matches,\n                slots,\n                quit_after_match,\n                ByteInput::new(text, self.ro.nfa.only_utf8),\n                start,\n                end,\n            )\n        } else {\n            pikevm::Fsm::exec(\n                &self.ro.nfa,\n                self.cache.value(),\n                matches,\n                slots,\n                quit_after_match,\n                CharInput::new(text),\n                start,\n                end,\n            )\n        }\n    }\n\n    /// Always runs the NFA using bounded backtracking.\n    fn exec_backtrack(\n        &self,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        text: &[u8],\n        start: usize,\n        end: usize,\n    ) -> bool {\n        if self.ro.nfa.uses_bytes() {\n            backtrack::Bounded::exec(\n                &self.ro.nfa,\n                self.cache.value(),\n                matches,\n                slots,\n                ByteInput::new(text, self.ro.nfa.only_utf8),\n                start,\n                end,\n            )\n        } else {\n            backtrack::Bounded::exec(\n                &self.ro.nfa,\n                self.cache.value(),\n                matches,\n                slots,\n                CharInput::new(text),\n                start,\n                end,\n            )\n        }\n    }\n\n    /// Finds which regular expressions match the given text.\n    ///\n    /// `matches` should have length equal to the number of regexes being\n    /// searched.\n    ///\n    /// This is only useful when one wants to know which regexes in a set\n    /// match some text.\n    pub fn many_matches_at(\n        &self,\n        matches: &mut [bool],\n        text: &[u8],\n        start: usize,\n    ) -> bool {\n        use self::MatchType::*;\n        if !self.is_anchor_end_match(text) {\n            return false;\n        }\n        match self.ro.match_type {\n            #[cfg(feature = \"perf-literal\")]\n            Literal(ty) => {\n                debug_assert_eq!(matches.len(), 1);\n                matches[0] = self.find_literals(ty, text, start).is_some();\n                matches[0]\n            }\n            #[cfg(feature = \"perf-dfa\")]\n            Dfa | DfaAnchoredReverse | DfaMany => {\n                match dfa::Fsm::forward_many(\n                    &self.ro.dfa,\n                    self.cache.value(),\n                    matches,\n                    text,\n                    start,\n                ) {\n                    dfa::Result::Match(_) => true,\n                    dfa::Result::NoMatch(_) => false,\n                    dfa::Result::Quit => self.exec_nfa(\n                        MatchNfaType::Auto,\n                        matches,\n                        &mut [],\n                        false,\n                        false,\n                        text,\n                        start,\n                        text.len(),\n                    ),\n                }\n            }\n            #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n            DfaSuffix => {\n                match dfa::Fsm::forward_many(\n                    &self.ro.dfa,\n                    self.cache.value(),\n                    matches,\n                    text,\n                    start,\n                ) {\n                    dfa::Result::Match(_) => true,\n                    dfa::Result::NoMatch(_) => false,\n                    dfa::Result::Quit => self.exec_nfa(\n                        MatchNfaType::Auto,\n                        matches,\n                        &mut [],\n                        false,\n                        false,\n                        text,\n                        start,\n                        text.len(),\n                    ),\n                }\n            }\n            Nfa(ty) => self.exec_nfa(\n                ty,\n                matches,\n                &mut [],\n                false,\n                false,\n                text,\n                start,\n                text.len(),\n            ),\n            Nothing => false,\n        }\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_anchor_end_match(&self, text: &[u8]) -> bool {\n        #[cfg(not(feature = \"perf-literal\"))]\n        fn imp(_: &ExecReadOnly, _: &[u8]) -> bool {\n            true\n        }\n\n        #[cfg(feature = \"perf-literal\")]\n        fn imp(ro: &ExecReadOnly, text: &[u8]) -> bool {\n            // Only do this check if the haystack is big (>1MB).\n            if text.len() > (1 << 20) && ro.nfa.is_anchored_end {\n                let lcs = ro.suffixes.lcs();\n                if lcs.len() >= 1 && !lcs.is_suffix(text) {\n                    return false;\n                }\n            }\n            true\n        }\n\n        imp(&self.ro, text)\n    }\n\n    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {\n        &self.ro.nfa.capture_name_idx\n    }\n}\n\nimpl<'c> ExecNoSyncStr<'c> {\n    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {\n        self.0.capture_name_idx()\n    }\n}\n\nimpl Exec {\n    /// Get a searcher that isn't Sync.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn searcher(&self) -> ExecNoSync {\n        let create = || RefCell::new(ProgramCacheInner::new(&self.ro));\n        ExecNoSync {\n            ro: &self.ro, // a clone is too expensive here! (and not needed)\n            cache: self.cache.get_or(create),\n        }\n    }\n\n    /// Get a searcher that isn't Sync and can match on &str.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn searcher_str(&self) -> ExecNoSyncStr {\n        ExecNoSyncStr(self.searcher())\n    }\n\n    /// Build a Regex from this executor.\n    pub fn into_regex(self) -> re_unicode::Regex {\n        re_unicode::Regex::from(self)\n    }\n\n    /// Build a RegexSet from this executor.\n    pub fn into_regex_set(self) -> re_set::unicode::RegexSet {\n        re_set::unicode::RegexSet::from(self)\n    }\n\n    /// Build a Regex from this executor that can match arbitrary bytes.\n    pub fn into_byte_regex(self) -> re_bytes::Regex {\n        re_bytes::Regex::from(self)\n    }\n\n    /// Build a RegexSet from this executor that can match arbitrary bytes.\n    pub fn into_byte_regex_set(self) -> re_set::bytes::RegexSet {\n        re_set::bytes::RegexSet::from(self)\n    }\n\n    /// The original regular expressions given by the caller that were\n    /// compiled.\n    pub fn regex_strings(&self) -> &[String] {\n        &self.ro.res\n    }\n\n    /// Return a slice of capture names.\n    ///\n    /// Any capture that isn't named is None.\n    pub fn capture_names(&self) -> &[Option<String>] {\n        &self.ro.nfa.captures\n    }\n\n    /// Return a reference to named groups mapping (from group name to\n    /// group position).\n    pub fn capture_name_idx(&self) -> &Arc<HashMap<String, usize>> {\n        &self.ro.nfa.capture_name_idx\n    }\n}\n\nimpl Clone for Exec {\n    fn clone(&self) -> Exec {\n        Exec { ro: self.ro.clone(), cache: Cached::new() }\n    }\n}\n\nimpl ExecReadOnly {\n    fn choose_match_type(&self, hint: Option<MatchType>) -> MatchType {\n        if let Some(MatchType::Nfa(_)) = hint {\n            return hint.unwrap();\n        }\n        // If the NFA is empty, then we'll never match anything.\n        if self.nfa.insts.is_empty() {\n            return MatchType::Nothing;\n        }\n        if let Some(literalty) = self.choose_literal_match_type() {\n            return literalty;\n        }\n        if let Some(dfaty) = self.choose_dfa_match_type() {\n            return dfaty;\n        }\n        // We're so totally hosed.\n        MatchType::Nfa(MatchNfaType::Auto)\n    }\n\n    /// If a plain literal scan can be used, then a corresponding literal\n    /// search type is returned.\n    fn choose_literal_match_type(&self) -> Option<MatchType> {\n        #[cfg(not(feature = \"perf-literal\"))]\n        fn imp(_: &ExecReadOnly) -> Option<MatchType> {\n            None\n        }\n\n        #[cfg(feature = \"perf-literal\")]\n        fn imp(ro: &ExecReadOnly) -> Option<MatchType> {\n            // If our set of prefixes is complete, then we can use it to find\n            // a match in lieu of a regex engine. This doesn't quite work well\n            // in the presence of multiple regexes, so only do it when there's\n            // one.\n            //\n            // TODO(burntsushi): Also, don't try to match literals if the regex\n            // is partially anchored. We could technically do it, but we'd need\n            // to create two sets of literals: all of them and then the subset\n            // that aren't anchored. We would then only search for all of them\n            // when at the beginning of the input and use the subset in all\n            // other cases.\n            if ro.res.len() != 1 {\n                return None;\n            }\n            if ro.ac.is_some() {\n                return Some(MatchType::Literal(\n                    MatchLiteralType::AhoCorasick,\n                ));\n            }\n            if ro.nfa.prefixes.complete() {\n                return if ro.nfa.is_anchored_start {\n                    Some(MatchType::Literal(MatchLiteralType::AnchoredStart))\n                } else {\n                    Some(MatchType::Literal(MatchLiteralType::Unanchored))\n                };\n            }\n            if ro.suffixes.complete() {\n                return if ro.nfa.is_anchored_end {\n                    Some(MatchType::Literal(MatchLiteralType::AnchoredEnd))\n                } else {\n                    // This case shouldn't happen. When the regex isn't\n                    // anchored, then complete prefixes should imply complete\n                    // suffixes.\n                    Some(MatchType::Literal(MatchLiteralType::Unanchored))\n                };\n            }\n            None\n        }\n\n        imp(self)\n    }\n\n    /// If a DFA scan can be used, then choose the appropriate DFA strategy.\n    fn choose_dfa_match_type(&self) -> Option<MatchType> {\n        #[cfg(not(feature = \"perf-dfa\"))]\n        fn imp(_: &ExecReadOnly) -> Option<MatchType> {\n            None\n        }\n\n        #[cfg(feature = \"perf-dfa\")]\n        fn imp(ro: &ExecReadOnly) -> Option<MatchType> {\n            if !dfa::can_exec(&ro.dfa) {\n                return None;\n            }\n            // Regex sets require a slightly specialized path.\n            if ro.res.len() >= 2 {\n                return Some(MatchType::DfaMany);\n            }\n            // If the regex is anchored at the end but not the start, then\n            // just match in reverse from the end of the haystack.\n            if !ro.nfa.is_anchored_start && ro.nfa.is_anchored_end {\n                return Some(MatchType::DfaAnchoredReverse);\n            }\n            #[cfg(feature = \"perf-literal\")]\n            {\n                // If there's a longish suffix literal, then it might be faster\n                // to look for that first.\n                if ro.should_suffix_scan() {\n                    return Some(MatchType::DfaSuffix);\n                }\n            }\n            // Fall back to your garden variety forward searching lazy DFA.\n            Some(MatchType::Dfa)\n        }\n\n        imp(self)\n    }\n\n    /// Returns true if the program is amenable to suffix scanning.\n    ///\n    /// When this is true, as a heuristic, we assume it is OK to quickly scan\n    /// for suffix literals and then do a *reverse* DFA match from any matches\n    /// produced by the literal scan. (And then followed by a forward DFA\n    /// search, since the previously found suffix literal maybe not actually be\n    /// the end of a match.)\n    ///\n    /// This is a bit of a specialized optimization, but can result in pretty\n    /// big performance wins if 1) there are no prefix literals and 2) the\n    /// suffix literals are pretty rare in the text. (1) is obviously easy to\n    /// account for but (2) is harder. As a proxy, we assume that longer\n    /// strings are generally rarer, so we only enable this optimization when\n    /// we have a meaty suffix.\n    #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n    fn should_suffix_scan(&self) -> bool {\n        if self.suffixes.is_empty() {\n            return false;\n        }\n        let lcs_len = self.suffixes.lcs().char_len();\n        lcs_len >= 3 && lcs_len > self.dfa.prefixes.lcp().char_len()\n    }\n}\n\n#[derive(Clone, Copy, Debug)]\nenum MatchType {\n    /// A single or multiple literal search. This is only used when the regex\n    /// can be decomposed into a literal search.\n    #[cfg(feature = \"perf-literal\")]\n    Literal(MatchLiteralType),\n    /// A normal DFA search.\n    #[cfg(feature = \"perf-dfa\")]\n    Dfa,\n    /// A reverse DFA search starting from the end of a haystack.\n    #[cfg(feature = \"perf-dfa\")]\n    DfaAnchoredReverse,\n    /// A reverse DFA search with suffix literal scanning.\n    #[cfg(all(feature = \"perf-dfa\", feature = \"perf-literal\"))]\n    DfaSuffix,\n    /// Use the DFA on two or more regular expressions.\n    #[cfg(feature = \"perf-dfa\")]\n    DfaMany,\n    /// An NFA variant.\n    Nfa(MatchNfaType),\n    /// No match is ever possible, so don't ever try to search.\n    Nothing,\n}\n\n#[derive(Clone, Copy, Debug)]\n#[cfg(feature = \"perf-literal\")]\nenum MatchLiteralType {\n    /// Match literals anywhere in text.\n    Unanchored,\n    /// Match literals only at the start of text.\n    AnchoredStart,\n    /// Match literals only at the end of text.\n    AnchoredEnd,\n    /// Use an Aho-Corasick automaton. This requires `ac` to be Some on\n    /// ExecReadOnly.\n    AhoCorasick,\n}\n\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum MatchNfaType {\n    /// Choose between Backtrack and PikeVM.\n    Auto,\n    /// NFA bounded backtracking.\n    ///\n    /// (This is only set by tests, since it never makes sense to always want\n    /// backtracking.)\n    Backtrack,\n    /// The Pike VM.\n    ///\n    /// (This is only set by tests, since it never makes sense to always want\n    /// the Pike VM.)\n    PikeVM,\n}\n\n/// `ProgramCache` maintains reusable allocations for each matching engine\n/// available to a particular program.\npub type ProgramCache = RefCell<ProgramCacheInner>;\n\n#[derive(Debug)]\npub struct ProgramCacheInner {\n    pub pikevm: pikevm::Cache,\n    pub backtrack: backtrack::Cache,\n    #[cfg(feature = \"perf-dfa\")]\n    pub dfa: dfa::Cache,\n    #[cfg(feature = \"perf-dfa\")]\n    pub dfa_reverse: dfa::Cache,\n}\n\nimpl ProgramCacheInner {\n    fn new(ro: &ExecReadOnly) -> Self {\n        ProgramCacheInner {\n            pikevm: pikevm::Cache::new(&ro.nfa),\n            backtrack: backtrack::Cache::new(&ro.nfa),\n            #[cfg(feature = \"perf-dfa\")]\n            dfa: dfa::Cache::new(&ro.dfa),\n            #[cfg(feature = \"perf-dfa\")]\n            dfa_reverse: dfa::Cache::new(&ro.dfa_reverse),\n        }\n    }\n}\n\n/// Alternation literals checks if the given HIR is a simple alternation of\n/// literals, and if so, returns them. Otherwise, this returns None.\n#[cfg(feature = \"perf-literal\")]\nfn alternation_literals(expr: &Hir) -> Option<Vec<Vec<u8>>> {\n    use syntax::hir::{HirKind, Literal};\n\n    // This is pretty hacky, but basically, if `is_alternation_literal` is\n    // true, then we can make several assumptions about the structure of our\n    // HIR. This is what justifies the `unreachable!` statements below.\n    //\n    // This code should be refactored once we overhaul this crate's\n    // optimization pipeline, because this is a terribly inflexible way to go\n    // about things.\n\n    if !expr.is_alternation_literal() {\n        return None;\n    }\n    let alts = match *expr.kind() {\n        HirKind::Alternation(ref alts) => alts,\n        _ => return None, // one literal isn't worth it\n    };\n\n    let extendlit = |lit: &Literal, dst: &mut Vec<u8>| match *lit {\n        Literal::Unicode(c) => {\n            let mut buf = [0; 4];\n            dst.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());\n        }\n        Literal::Byte(b) => {\n            dst.push(b);\n        }\n    };\n\n    let mut lits = vec![];\n    for alt in alts {\n        let mut lit = vec![];\n        match *alt.kind() {\n            HirKind::Literal(ref x) => extendlit(x, &mut lit),\n            HirKind::Concat(ref exprs) => {\n                for e in exprs {\n                    match *e.kind() {\n                        HirKind::Literal(ref x) => extendlit(x, &mut lit),\n                        _ => unreachable!(\"expected literal, got {:?}\", e),\n                    }\n                }\n            }\n            _ => unreachable!(\"expected literal or concat, got {:?}\", alt),\n        }\n        lits.push(lit);\n    }\n    Some(lits)\n}\n\n#[cfg(test)]\nmod test {\n    #[test]\n    fn uppercut_s_backtracking_bytes_default_bytes_mismatch() {\n        use internal::ExecBuilder;\n\n        let backtrack_bytes_re = ExecBuilder::new(\"^S\")\n            .bounded_backtracking()\n            .only_utf8(false)\n            .build()\n            .map(|exec| exec.into_byte_regex())\n            .map_err(|err| format!(\"{}\", err))\n            .unwrap();\n\n        let default_bytes_re = ExecBuilder::new(\"^S\")\n            .only_utf8(false)\n            .build()\n            .map(|exec| exec.into_byte_regex())\n            .map_err(|err| format!(\"{}\", err))\n            .unwrap();\n\n        let input = vec![83, 83];\n\n        let s1 = backtrack_bytes_re.split(&input);\n        let s2 = default_bytes_re.split(&input);\n        for (chunk1, chunk2) in s1.zip(s2) {\n            assert_eq!(chunk1, chunk2);\n        }\n    }\n\n    #[test]\n    fn unicode_lit_star_backtracking_utf8bytes_default_utf8bytes_mismatch() {\n        use internal::ExecBuilder;\n\n        let backtrack_bytes_re = ExecBuilder::new(r\"^(?u:\\*)\")\n            .bounded_backtracking()\n            .bytes(true)\n            .build()\n            .map(|exec| exec.into_regex())\n            .map_err(|err| format!(\"{}\", err))\n            .unwrap();\n\n        let default_bytes_re = ExecBuilder::new(r\"^(?u:\\*)\")\n            .bytes(true)\n            .build()\n            .map(|exec| exec.into_regex())\n            .map_err(|err| format!(\"{}\", err))\n            .unwrap();\n\n        let input = \"**\";\n\n        let s1 = backtrack_bytes_re.split(input);\n        let s2 = default_bytes_re.split(input);\n        for (chunk1, chunk2) in s1.zip(s2) {\n            assert_eq!(chunk1, chunk2);\n        }\n    }\n}\n","traces":[{"line":122,"address":[4228800],"length":1,"stats":{"Line":7},"fn_name":"new"},{"line":123,"address":[4228817],"length":1,"stats":{"Line":7},"fn_name":null},{"line":131,"address":[4580848,4580920],"length":1,"stats":{"Line":23},"fn_name":"new_many<&[&str; 1],&&str>"},{"line":136,"address":[4580866],"length":1,"stats":{"Line":23},"fn_name":null},{"line":137,"address":[4580935,4581139,4581376,4581403],"length":1,"stats":{"Line":60},"fn_name":"{{closure}}<&[&str; 1],&&str>"},{"line":138,"address":[4581222],"length":1,"stats":{"Line":26},"fn_name":null},{"line":142,"address":[4228864],"length":1,"stats":{"Line":15},"fn_name":"new_options"},{"line":158,"address":[4228992],"length":1,"stats":{"Line":0},"fn_name":"automatic"},{"line":159,"address":[4228999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[4229018],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[4229056],"length":1,"stats":{"Line":5},"fn_name":"nfa"},{"line":169,"address":[4229063],"length":1,"stats":{"Line":5},"fn_name":null},{"line":170,"address":[4229103],"length":1,"stats":{"Line":5},"fn_name":null},{"line":181,"address":[4229136],"length":1,"stats":{"Line":6},"fn_name":"bounded_backtracking"},{"line":182,"address":[4229143],"length":1,"stats":{"Line":6},"fn_name":null},{"line":183,"address":[4229183],"length":1,"stats":{"Line":6},"fn_name":null},{"line":195,"address":[4229216],"length":1,"stats":{"Line":5},"fn_name":"bytes"},{"line":196,"address":[4229232],"length":1,"stats":{"Line":5},"fn_name":null},{"line":197,"address":[4229238],"length":1,"stats":{"Line":5},"fn_name":null},{"line":204,"address":[4229264],"length":1,"stats":{"Line":13},"fn_name":"only_utf8"},{"line":205,"address":[4229280],"length":1,"stats":{"Line":13},"fn_name":null},{"line":206,"address":[4229286],"length":1,"stats":{"Line":13},"fn_name":null},{"line":210,"address":[4229312],"length":1,"stats":{"Line":0},"fn_name":"unicode"},{"line":211,"address":[4229328],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[4229334],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[4229360,4229456],"length":1,"stats":{"Line":15},"fn_name":"parse"},{"line":217,"address":[4229471,4229378],"length":1,"stats":{"Line":30},"fn_name":null},{"line":218,"address":[4229501],"length":1,"stats":{"Line":15},"fn_name":null},{"line":219,"address":[4229576],"length":1,"stats":{"Line":15},"fn_name":null},{"line":220,"address":[4229651],"length":1,"stats":{"Line":15},"fn_name":null},{"line":221,"address":[4229713,4229659],"length":1,"stats":{"Line":30},"fn_name":null},{"line":224,"address":[4229996,4231953,4229751],"length":1,"stats":{"Line":29},"fn_name":null},{"line":225,"address":[4230030,4230216,4230069,4230183,4230147,4230315,4230108,4230352,4230282,4230249],"length":1,"stats":{"Line":150},"fn_name":null},{"line":226,"address":[4230065],"length":1,"stats":{"Line":15},"fn_name":null},{"line":227,"address":[4230104],"length":1,"stats":{"Line":15},"fn_name":null},{"line":228,"address":[4230143],"length":1,"stats":{"Line":15},"fn_name":null},{"line":229,"address":[4230179],"length":1,"stats":{"Line":15},"fn_name":null},{"line":230,"address":[4230212],"length":1,"stats":{"Line":15},"fn_name":null},{"line":231,"address":[4230245],"length":1,"stats":{"Line":15},"fn_name":null},{"line":232,"address":[4230278],"length":1,"stats":{"Line":15},"fn_name":null},{"line":233,"address":[4230311],"length":1,"stats":{"Line":15},"fn_name":null},{"line":234,"address":[4230349],"length":1,"stats":{"Line":15},"fn_name":null},{"line":236,"address":[4230405,4230494,4230653,4230774,4230900],"length":1,"stats":{"Line":60},"fn_name":null},{"line":237,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[4230634,4230924,4231008],"length":1,"stats":{"Line":27},"fn_name":null},{"line":241,"address":[4230981,4232527,4231249,4231016],"length":1,"stats":{"Line":34},"fn_name":null},{"line":244,"address":[4231106,4232442],"length":1,"stats":{"Line":8},"fn_name":null},{"line":245,"address":[4231144,4231100,4232617],"length":1,"stats":{"Line":25},"fn_name":null},{"line":248,"address":[4232532,4231211],"length":1,"stats":{"Line":8},"fn_name":null},{"line":250,"address":[4231251],"length":1,"stats":{"Line":18},"fn_name":null},{"line":251,"address":[4581800,4581703,4581644],"length":1,"stats":{"Line":27},"fn_name":null},{"line":252,"address":[4581807],"length":1,"stats":{"Line":8},"fn_name":null},{"line":254,"address":[4581729],"length":1,"stats":{"Line":9},"fn_name":null},{"line":258,"address":[4232707,4231666,4231410],"length":1,"stats":{"Line":26},"fn_name":null},{"line":261,"address":[4231523,4232622],"length":1,"stats":{"Line":8},"fn_name":null},{"line":262,"address":[4231517,4231561,4232797],"length":1,"stats":{"Line":25},"fn_name":null},{"line":265,"address":[4231628,4232712],"length":1,"stats":{"Line":8},"fn_name":null},{"line":267,"address":[4231668],"length":1,"stats":{"Line":18},"fn_name":null},{"line":268,"address":[4581943,4581884,4582040],"length":1,"stats":{"Line":27},"fn_name":null},{"line":269,"address":[4582047],"length":1,"stats":{"Line":8},"fn_name":null},{"line":271,"address":[4581969],"length":1,"stats":{"Line":9},"fn_name":null},{"line":275,"address":[4231827],"length":1,"stats":{"Line":9},"fn_name":null},{"line":277,"address":[4232079],"length":1,"stats":{"Line":14},"fn_name":null},{"line":278,"address":[4229874],"length":1,"stats":{"Line":14},"fn_name":null},{"line":279,"address":[4229914],"length":1,"stats":{"Line":14},"fn_name":null},{"line":280,"address":[4231958],"length":1,"stats":{"Line":14},"fn_name":null},{"line":281,"address":[4232072],"length":1,"stats":{"Line":14},"fn_name":null},{"line":286,"address":[4233056,4233233],"length":1,"stats":{"Line":15},"fn_name":"build"},{"line":289,"address":[4233080,4233255],"length":1,"stats":{"Line":30},"fn_name":null},{"line":290,"address":[4233435,4233787],"length":1,"stats":{"Line":16},"fn_name":null},{"line":291,"address":[4233287],"length":1,"stats":{"Line":8},"fn_name":null},{"line":292,"address":[4233314],"length":1,"stats":{"Line":8},"fn_name":null},{"line":293,"address":[4233329],"length":1,"stats":{"Line":8},"fn_name":null},{"line":294,"address":[4233363],"length":1,"stats":{"Line":8},"fn_name":null},{"line":295,"address":[4233393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[4233415],"length":1,"stats":{"Line":8},"fn_name":null},{"line":298,"address":[4233427],"length":1,"stats":{"Line":8},"fn_name":null},{"line":300,"address":[4233831,4233795],"length":1,"stats":{"Line":16},"fn_name":null},{"line":302,"address":[4234430,4234012,4233277,4234302],"length":1,"stats":{"Line":39},"fn_name":null},{"line":303,"address":[4234597,4234903,4234538,4234750,4234292,4234485,4234647,4234718],"length":1,"stats":{"Line":106},"fn_name":null},{"line":304,"address":[4234465],"length":1,"stats":{"Line":16},"fn_name":null},{"line":305,"address":[4234500],"length":1,"stats":{"Line":16},"fn_name":null},{"line":306,"address":[4234604,4234577],"length":1,"stats":{"Line":32},"fn_name":null},{"line":307,"address":[4234905,4234612,4235078,4237440,4234694,4234725],"length":1,"stats":{"Line":60},"fn_name":null},{"line":308,"address":[4234893,4235193,4235346,4235243,4235499,4235314,4235130],"length":1,"stats":{"Line":78},"fn_name":null},{"line":309,"address":[4235110],"length":1,"stats":{"Line":14},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[4235173,4235200],"length":1,"stats":{"Line":32},"fn_name":null},{"line":312,"address":[4235290,4235501,4235674,4237700,4235208,4235321],"length":1,"stats":{"Line":34},"fn_name":null},{"line":313,"address":[4235789,4235867,4235970,4235489,4235726,4235938,4236131],"length":1,"stats":{"Line":54},"fn_name":null},{"line":314,"address":[4235706],"length":1,"stats":{"Line":9},"fn_name":null},{"line":315,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[4235769],"length":1,"stats":{"Line":9},"fn_name":null},{"line":317,"address":[4235824],"length":1,"stats":{"Line":9},"fn_name":null},{"line":318,"address":[4236133,4237960,4236298,4235945,4235832,4235914],"length":1,"stats":{"Line":27},"fn_name":null},{"line":321,"address":[4236322,4236121],"length":1,"stats":{"Line":22},"fn_name":null},{"line":322,"address":[4238214,4236330],"length":1,"stats":{"Line":13},"fn_name":null},{"line":323,"address":[4238320,4238371,4236435],"length":1,"stats":{"Line":18},"fn_name":null},{"line":324,"address":[4238472],"length":1,"stats":{"Line":9},"fn_name":null},{"line":325,"address":[4238484],"length":1,"stats":{"Line":9},"fn_name":null},{"line":328,"address":[4238496],"length":1,"stats":{"Line":9},"fn_name":null},{"line":332,"address":[4238669],"length":1,"stats":{"Line":9},"fn_name":null},{"line":337,"address":[4236950,4236847],"length":1,"stats":{"Line":18},"fn_name":null},{"line":339,"address":[4236968],"length":1,"stats":{"Line":10},"fn_name":null},{"line":340,"address":[4237291,4237063],"length":1,"stats":{"Line":10},"fn_name":null},{"line":344,"address":[4239532,4239472],"length":1,"stats":{"Line":9},"fn_name":"build_aho_corasick"},{"line":345,"address":[4239552,4239498],"length":1,"stats":{"Line":18},"fn_name":null},{"line":346,"address":[4239598],"length":1,"stats":{"Line":14},"fn_name":null},{"line":348,"address":[4239729,4239618,4239574],"length":1,"stats":{"Line":18},"fn_name":null},{"line":349,"address":[4239753,4239633,4239736],"length":1,"stats":{"Line":39},"fn_name":null},{"line":350,"address":[4239653],"length":1,"stats":{"Line":13},"fn_name":null},{"line":354,"address":[4239779,4239708],"length":1,"stats":{"Line":26},"fn_name":null},{"line":355,"address":[4239809,4239827],"length":1,"stats":{"Line":26},"fn_name":null},{"line":358,"address":[4239832,4239785,4239902],"length":1,"stats":{"Line":24},"fn_name":null},{"line":359,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[4239861],"length":1,"stats":{"Line":8},"fn_name":null},{"line":363,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":364,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":375,"address":[4240080],"length":1,"stats":{"Line":9},"fn_name":"slots_len"},{"line":376,"address":[4240089],"length":1,"stats":{"Line":9},"fn_name":null},{"line":379,"address":[4240112],"length":1,"stats":{"Line":5},"fn_name":"next_after_empty"},{"line":380,"address":[4240196],"length":1,"stats":{"Line":5},"fn_name":null},{"line":384,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":389,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":394,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":395,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[5115393],"length":1,"stats":{"Line":14},"fn_name":null},{"line":415,"address":[4240224],"length":1,"stats":{"Line":15},"fn_name":"slots_len"},{"line":416,"address":[4240233,4240308,4240338],"length":1,"stats":{"Line":15},"fn_name":null},{"line":419,"address":[4240352],"length":1,"stats":{"Line":3},"fn_name":"next_after_empty"},{"line":420,"address":[4240433,4240376,4240403],"length":1,"stats":{"Line":3},"fn_name":null},{"line":426,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":427,"address":[5013397],"length":1,"stats":{"Line":8},"fn_name":null},{"line":428,"address":[5013468],"length":1,"stats":{"Line":0},"fn_name":null},{"line":430,"address":[5016844,5013497,5025455,5013403,5032886,5051418],"length":1,"stats":{"Line":17},"fn_name":null},{"line":432,"address":[5013419,5013512],"length":1,"stats":{"Line":10},"fn_name":null},{"line":433,"address":[4582112,4582126],"length":1,"stats":{"Line":6},"fn_name":"{{closure}}"},{"line":436,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":437,"address":[5025441,5025293,5025401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":438,"address":[5025309,5025405],"length":1,"stats":{"Line":6},"fn_name":null},{"line":439,"address":[5025443],"length":1,"stats":{"Line":2},"fn_name":null},{"line":440,"address":[5025380],"length":1,"stats":{"Line":2},"fn_name":null},{"line":444,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":445,"address":[5032826,5032718,5032872],"length":1,"stats":{"Line":4},"fn_name":null},{"line":446,"address":[5025460],"length":1,"stats":{"Line":2},"fn_name":null},{"line":447,"address":[5025479],"length":1,"stats":{"Line":2},"fn_name":null},{"line":448,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":449,"address":[5025508],"length":1,"stats":{"Line":2},"fn_name":null},{"line":450,"address":[5025590],"length":1,"stats":{"Line":2},"fn_name":null},{"line":452,"address":[5032734,5032846],"length":1,"stats":{"Line":4},"fn_name":null},{"line":453,"address":[5032874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":454,"address":[5032805],"length":1,"stats":{"Line":0},"fn_name":null},{"line":458,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":459,"address":[5051262,5051364,5051404],"length":1,"stats":{"Line":4},"fn_name":null},{"line":460,"address":[5051368,5051278],"length":1,"stats":{"Line":4},"fn_name":null},{"line":461,"address":[5051406],"length":1,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[5051343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":465,"address":[5051428],"length":1,"stats":{"Line":6},"fn_name":null},{"line":466,"address":[5013485],"length":1,"stats":{"Line":0},"fn_name":null},{"line":475,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":476,"address":[4500207],"length":1,"stats":{"Line":8},"fn_name":null},{"line":477,"address":[4500278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":482,"address":[4512212,4503640,4500213,4519598,4538085,4500299],"length":1,"stats":{"Line":20},"fn_name":null},{"line":484,"address":[4500229,4500314],"length":1,"stats":{"Line":10},"fn_name":null},{"line":485,"address":[4503617],"length":1,"stats":{"Line":2},"fn_name":null},{"line":488,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":489,"address":[4512190,4512202,4512089],"length":1,"stats":{"Line":4},"fn_name":null},{"line":490,"address":[4512105,4512194],"length":1,"stats":{"Line":4},"fn_name":null},{"line":491,"address":[4512204],"length":1,"stats":{"Line":2},"fn_name":null},{"line":492,"address":[4512144],"length":1,"stats":{"Line":0},"fn_name":null},{"line":496,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":497,"address":[4519475,4519576,4519588],"length":1,"stats":{"Line":0},"fn_name":null},{"line":498,"address":[4512217],"length":1,"stats":{"Line":0},"fn_name":null},{"line":499,"address":[4512236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":500,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":501,"address":[4512265],"length":1,"stats":{"Line":0},"fn_name":null},{"line":502,"address":[4512347],"length":1,"stats":{"Line":0},"fn_name":null},{"line":504,"address":[4519491,4519580],"length":1,"stats":{"Line":0},"fn_name":null},{"line":505,"address":[4519590],"length":1,"stats":{"Line":0},"fn_name":null},{"line":506,"address":[4519530],"length":1,"stats":{"Line":0},"fn_name":null},{"line":510,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":511,"address":[4538063,4537968,4538075],"length":1,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[4537984,4538067],"length":1,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[4538077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":514,"address":[4538017],"length":1,"stats":{"Line":0},"fn_name":null},{"line":517,"address":[4538095],"length":1,"stats":{"Line":6},"fn_name":null},{"line":518,"address":[4500291],"length":1,"stats":{"Line":8},"fn_name":null},{"line":525,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":526,"address":[4241101,4304245],"length":1,"stats":{"Line":23},"fn_name":null},{"line":527,"address":[4241183,4304319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":529,"address":[4304259,4244678,4367130,4303986,4261119,4367201,4241347,4268923,4304057,4304488,4307816,4332065,4324259,4241115],"length":1,"stats":{"Line":62},"fn_name":null},{"line":531,"address":[4241357,4304498,4304270,4241126],"length":1,"stats":{"Line":29},"fn_name":null},{"line":533,"address":[4261011,4324245,4324149,4261102],"length":1,"stats":{"Line":15},"fn_name":null},{"line":534,"address":[4324153,4261015,4324059,4260921],"length":1,"stats":{"Line":15},"fn_name":null},{"line":535,"address":[4324247,4261112],"length":1,"stats":{"Line":4},"fn_name":null},{"line":536,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":537,"address":[4261006,4324104],"length":1,"stats":{"Line":12},"fn_name":null},{"line":541,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":542,"address":[4268815,4331955,4332051,4268906],"length":1,"stats":{"Line":4},"fn_name":null},{"line":543,"address":[4268819,4331865,4331959,4268725],"length":1,"stats":{"Line":8},"fn_name":null},{"line":544,"address":[4268916,4332053],"length":1,"stats":{"Line":4},"fn_name":null},{"line":545,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":546,"address":[4331910,4268810],"length":1,"stats":{"Line":0},"fn_name":null},{"line":551,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":552,"address":[4303969,4367020,4303878,4367116],"length":1,"stats":{"Line":4},"fn_name":null},{"line":553,"address":[4367024,4303882,4303788,4366930],"length":1,"stats":{"Line":8},"fn_name":null},{"line":554,"address":[4303979,4367118],"length":1,"stats":{"Line":4},"fn_name":null},{"line":555,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":556,"address":[4366975,4303873],"length":1,"stats":{"Line":0},"fn_name":null},{"line":560,"address":[4367140,4303996],"length":1,"stats":{"Line":14},"fn_name":null},{"line":561,"address":[4304067,4367203],"length":1,"stats":{"Line":0},"fn_name":null},{"line":577,"address":[4240448],"length":1,"stats":{"Line":15},"fn_name":"captures_read_at"},{"line":583,"address":[4240513],"length":1,"stats":{"Line":15},"fn_name":null},{"line":584,"address":[4240736,4240805,4240553],"length":1,"stats":{"Line":30},"fn_name":null},{"line":585,"address":[4240770],"length":1,"stats":{"Line":15},"fn_name":null},{"line":589,"address":[4240705],"length":1,"stats":{"Line":15},"fn_name":null},{"line":590,"address":[4304095,4304076,4240957,4240818],"length":1,"stats":{"Line":15},"fn_name":null},{"line":591,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":592,"address":[4304101,4367217],"length":1,"stats":{"Line":32},"fn_name":null},{"line":593,"address":[4582183,4582376],"length":1,"stats":{"Line":8},"fn_name":null},{"line":594,"address":[4582269,4582403,4582431],"length":1,"stats":{"Line":8},"fn_name":null},{"line":595,"address":[4582343],"length":1,"stats":{"Line":8},"fn_name":null},{"line":600,"address":[4367276,4240849,4240952],"length":1,"stats":{"Line":45},"fn_name":null},{"line":601,"address":[4367316],"length":1,"stats":{"Line":0},"fn_name":null},{"line":603,"address":[4430792,4387552,4367460,4430592,4395459,4367282,4370891,4430809],"length":1,"stats":{"Line":35},"fn_name":null},{"line":605,"address":[4367470,4367336],"length":1,"stats":{"Line":18},"fn_name":null},{"line":606,"address":[4370812,4367483],"length":1,"stats":{"Line":9},"fn_name":null},{"line":607,"address":[4582496,4582463],"length":1,"stats":{"Line":4},"fn_name":null},{"line":608,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":609,"address":[4582469],"length":1,"stats":{"Line":2},"fn_name":null},{"line":610,"address":[4582480],"length":1,"stats":{"Line":2},"fn_name":null},{"line":611,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":612,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":617,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":618,"address":[4370896,4387550,4387270],"length":1,"stats":{"Line":7},"fn_name":null},{"line":619,"address":[4387205],"length":1,"stats":{"Line":2},"fn_name":null},{"line":621,"address":[4387529,4387546,4370941,4387203,4387388],"length":1,"stats":{"Line":10},"fn_name":null},{"line":622,"address":[4387275,4387392,4387480],"length":1,"stats":{"Line":12},"fn_name":null},{"line":623,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":624,"address":[4387432],"length":1,"stats":{"Line":4},"fn_name":null},{"line":625,"address":[4387448],"length":1,"stats":{"Line":4},"fn_name":null},{"line":626,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":627,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":629,"address":[4387539],"length":1,"stats":{"Line":2},"fn_name":null},{"line":630,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":631,"address":[4387318],"length":1,"stats":{"Line":0},"fn_name":null},{"line":637,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":638,"address":[4395438,4395297,4387557,4395455,4395182],"length":1,"stats":{"Line":6},"fn_name":null},{"line":639,"address":[4395301,4395184,4395389],"length":1,"stats":{"Line":6},"fn_name":null},{"line":640,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":641,"address":[4395341],"length":1,"stats":{"Line":2},"fn_name":null},{"line":642,"address":[4395357],"length":1,"stats":{"Line":2},"fn_name":null},{"line":643,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":644,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":646,"address":[4395448],"length":1,"stats":{"Line":0},"fn_name":null},{"line":647,"address":[4395227],"length":1,"stats":{"Line":0},"fn_name":null},{"line":651,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":652,"address":[4430588,4395464,4430442,4430571,4430333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":653,"address":[4430531,4430335,4430446],"length":1,"stats":{"Line":6},"fn_name":null},{"line":654,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":655,"address":[4430486],"length":1,"stats":{"Line":2},"fn_name":null},{"line":656,"address":[4430502],"length":1,"stats":{"Line":2},"fn_name":null},{"line":657,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":658,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":660,"address":[4430581],"length":1,"stats":{"Line":2},"fn_name":null},{"line":661,"address":[4430372],"length":1,"stats":{"Line":0},"fn_name":null},{"line":664,"address":[4430605],"length":1,"stats":{"Line":12},"fn_name":null},{"line":665,"address":[4430618],"length":1,"stats":{"Line":12},"fn_name":null},{"line":667,"address":[4430802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":680,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":687,"address":[4438568,4307635,4367816,4370363,4244226,4370631,4307367,4436021,4438836,4241679,4244497,4304820],"length":1,"stats":{"Line":22},"fn_name":null},{"line":688,"address":[4241441,4367554,4304582,4435783],"length":1,"stats":{"Line":15},"fn_name":null},{"line":689,"address":[4241694,4304835,4367831,4436036],"length":1,"stats":{"Line":13},"fn_name":null},{"line":690,"address":[4241713,4367850,4438523,4304854,4370318,4307322,4244181,4436055],"length":1,"stats":{"Line":29},"fn_name":null},{"line":692,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":693,"address":[4370376,4307380,4244239,4438581],"length":1,"stats":{"Line":6},"fn_name":null},{"line":694,"address":[4244255,4307396,4307489,4370392,4370485,4438690,4244351,4438597],"length":1,"stats":{"Line":8},"fn_name":null},{"line":695,"address":[4307606,4438807,4370497,4370602,4438702,4244468,4244363,4307501],"length":1,"stats":{"Line":12},"fn_name":null},{"line":696,"address":[4370586,4307590,4244452,4438791],"length":1,"stats":{"Line":12},"fn_name":null},{"line":698,"address":[4370473,4244344,4307477,4438678],"length":1,"stats":{"Line":2},"fn_name":null},{"line":701,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":702,"address":[4307648,4370644,4244510,4438849],"length":1,"stats":{"Line":6},"fn_name":null},{"line":703,"address":[4307677,4307787,4438988,4244649,4244539,4370673,4438878,4370783],"length":1,"stats":{"Line":12},"fn_name":null},{"line":704,"address":[4307771,4438972,4244633,4370767],"length":1,"stats":{"Line":10},"fn_name":null},{"line":706,"address":[4304735,4435936,4435992,4304634,4241650,4367731,4367630,4304791,4241594,4241493,4367787,4435835],"length":1,"stats":{"Line":12},"fn_name":null},{"line":707,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":708,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":711,"address":[4435882,4241540,4367677,4304681],"length":1,"stats":{"Line":4},"fn_name":null},{"line":712,"address":[4241634,4367771,4304775,4435976],"length":1,"stats":{"Line":8},"fn_name":null},{"line":722,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":728,"address":[4316267,4350520,4379411,4287378,4253186,4413995,4287435,4350577,4379468,4316324,4253129,4413938],"length":1,"stats":{"Line":21},"fn_name":null},{"line":729,"address":[4405556,4278996,4307885,4371005,4244747,4342138],"length":1,"stats":{"Line":19},"fn_name":null},{"line":730,"address":[4307907,4342160,4279018,4371051,4244769,4405578],"length":1,"stats":{"Line":19},"fn_name":null},{"line":731,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":732,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":733,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":735,"address":[4316326,4253188,4287437,4316283,4350536,4350579,4287394,4413954,4413997,4253145,4379427,4379470],"length":1,"stats":{"Line":31},"fn_name":null},{"line":736,"address":[4350620,4253229,4316367,4414038,4379511,4287478],"length":1,"stats":{"Line":12},"fn_name":null},{"line":737,"address":[4350634,4316381,4287492,4414052,4253243,4379525],"length":1,"stats":{"Line":14},"fn_name":null},{"line":738,"address":[4253372,4287621,4350763,4316510,4379654,4414181],"length":1,"stats":{"Line":14},"fn_name":null},{"line":741,"address":[4358011,4387103,4323758,4421630,4421500,4323829,4386902,4260821,4294869,4295070,4294940,4421429,4358082,4260691,4386973,4260620,4323959,4358212],"length":1,"stats":{"Line":32},"fn_name":null},{"line":742,"address":[4253404,4316542,4350795,4379686,4414213,4287653],"length":1,"stats":{"Line":14},"fn_name":null},{"line":743,"address":[4287683,4414243,4350825,4379716,4316572,4253434],"length":1,"stats":{"Line":14},"fn_name":null},{"line":744,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":745,"address":[4287721,4414281,4253472,4379754,4316610,4350863],"length":1,"stats":{"Line":14},"fn_name":null},{"line":746,"address":[4350925,4253534,4323999,4316672,4358252,4287783,4379816,4260861,4387143,4421670,4414343,4295110],"length":1,"stats":{"Line":14},"fn_name":null},{"line":748,"address":[4387173,4260636,4295140,4421700,4294885,4323774,4260698,4386918,4323836,4421445,4294947,4358027,4386980,4260891,4324029,4358089,4421507,4358282],"length":1,"stats":{"Line":32},"fn_name":null},{"line":749,"address":[4323961,4260823,4358214,4295072,4387105,4421632],"length":1,"stats":{"Line":0},"fn_name":null},{"line":750,"address":[4323817,4294928,4260679,4386961,4421488,4358070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":762,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":768,"address":[4395120,4395082,4331803,4394867,4394938,4268410,4268481,4268625,4268663,4331550,4331621,4331765],"length":1,"stats":{"Line":16},"fn_name":null},{"line":769,"address":[4387621,4261188,4324328],"length":1,"stats":{"Line":6},"fn_name":null},{"line":770,"address":[4387667,4261210,4324350],"length":1,"stats":{"Line":6},"fn_name":null},{"line":771,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":772,"address":[4261248,4324388,4387705],"length":1,"stats":{"Line":6},"fn_name":null},{"line":773,"address":[4387783,4331805,4395122,4261326,4268665,4324466],"length":1,"stats":{"Line":6},"fn_name":null},{"line":775,"address":[4268426,4395152,4268695,4331628,4394945,4331835,4331566,4268488,4394883],"length":1,"stats":{"Line":12},"fn_name":null},{"line":776,"address":[4331767,4395084,4268627],"length":1,"stats":{"Line":4},"fn_name":null},{"line":777,"address":[4268469,4331609,4394926],"length":1,"stats":{"Line":0},"fn_name":null},{"line":784,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":785,"address":[4503709,4529655],"length":1,"stats":{"Line":6},"fn_name":null},{"line":792,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":797,"address":[4529584],"length":1,"stats":{"Line":2},"fn_name":null},{"line":798,"address":[4529467,4537936],"length":1,"stats":{"Line":4},"fn_name":null},{"line":799,"address":[4529491],"length":1,"stats":{"Line":6},"fn_name":null},{"line":818,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":825,"address":[4395560,4332166,4269024],"length":1,"stats":{"Line":8},"fn_name":null},{"line":826,"address":[4395614,4395698,4269138,4269054,4332196,4332280],"length":1,"stats":{"Line":8},"fn_name":null},{"line":827,"address":[4332238,4269096,4395656],"length":1,"stats":{"Line":8},"fn_name":null},{"line":828,"address":[4269104,4332246,4395664],"length":1,"stats":{"Line":8},"fn_name":null},{"line":829,"address":[4269120,4332262,4395680],"length":1,"stats":{"Line":8},"fn_name":null},{"line":830,"address":[4332278,4395696,4269136,4332310,4395728,4269168],"length":1,"stats":{"Line":16},"fn_name":null},{"line":831,"address":[4333937,4270613,4397355,4270660,4333802,4332463,4341752,4278610,4395881,4333755,4405170,4397173,4397220,4269321,4270795],"length":1,"stats":{"Line":32},"fn_name":null},{"line":832,"address":[4333850,4397189,4270708,4397268,4333771,4270629],"length":1,"stats":{"Line":14},"fn_name":null},{"line":833,"address":[4270644,4397204,4333786],"length":1,"stats":{"Line":8},"fn_name":null},{"line":835,"address":[4341782,4333945,4405200,4270803,4278640,4397363],"length":1,"stats":{"Line":8},"fn_name":null},{"line":836,"address":[4278302,4341444,4278154,4404862,4341296,4404714],"length":1,"stats":{"Line":8},"fn_name":null},{"line":837,"address":[4334029,4397447,4270887],"length":1,"stats":{"Line":8},"fn_name":null},{"line":838,"address":[4334051,4270909,4397469],"length":1,"stats":{"Line":8},"fn_name":null},{"line":839,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":840,"address":[4334081,4397499,4270939],"length":1,"stats":{"Line":8},"fn_name":null},{"line":841,"address":[4278670,4397615,4334197,4271055,4341812,4405230],"length":1,"stats":{"Line":8},"fn_name":null},{"line":843,"address":[4278170,4404730,4404864,4341312,4341446,4278304],"length":1,"stats":{"Line":16},"fn_name":null},{"line":844,"address":[4278321,4341463,4278760,4341902,4404881,4405320],"length":1,"stats":{"Line":8},"fn_name":null},{"line":845,"address":[4341636,4405054,4278494],"length":1,"stats":{"Line":6},"fn_name":null},{"line":846,"address":[4278700,4341842,4405070,4405260,4278510,4341652],"length":1,"stats":{"Line":6},"fn_name":null},{"line":847,"address":[4278554,4278730,4341696,4341872,4405290,4405114],"length":1,"stats":{"Line":6},"fn_name":null},{"line":848,"address":[4278605,4341747,4405165],"length":1,"stats":{"Line":6},"fn_name":null},{"line":850,"address":[4341382,4404800,4278240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":853,"address":[4269235,4332377,4395795],"length":1,"stats":{"Line":0},"fn_name":null},{"line":863,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":870,"address":[4342072,4278930,4405490],"length":1,"stats":{"Line":0},"fn_name":null},{"line":871,"address":[4405350,4358312,4421730,4278790,4295170,4341932],"length":1,"stats":{"Line":12},"fn_name":null},{"line":872,"address":[4278814,4405374,4421737,4295177,4358319,4341956],"length":1,"stats":{"Line":12},"fn_name":null},{"line":873,"address":[4278829,4405389,4341971],"length":1,"stats":{"Line":6},"fn_name":null},{"line":882,"address":[4303599,4366882,4303740,4366741,4430150,4430285],"length":1,"stats":{"Line":12},"fn_name":null},{"line":883,"address":[4421769,4295209,4358351],"length":1,"stats":{"Line":6},"fn_name":null},{"line":884,"address":[4421799,4295239,4358381],"length":1,"stats":{"Line":6},"fn_name":null},{"line":885,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":886,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":887,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":889,"address":[4430166,4303615,4430289,4303744,4366757,4366886],"length":1,"stats":{"Line":6},"fn_name":null},{"line":890,"address":[4430319,4303774,4366916],"length":1,"stats":{"Line":0},"fn_name":null},{"line":891,"address":[4303656,4366798,4430201],"length":1,"stats":{"Line":6},"fn_name":null},{"line":901,"address":[4430944],"length":1,"stats":{"Line":0},"fn_name":"match_nfa"},{"line":902,"address":[4430975],"length":1,"stats":{"Line":0},"fn_name":null},{"line":906,"address":[4431040],"length":1,"stats":{"Line":6},"fn_name":"match_nfa_type"},{"line":912,"address":[4431175],"length":1,"stats":{"Line":6},"fn_name":null},{"line":913,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":914,"address":[4431090],"length":1,"stats":{"Line":6},"fn_name":null},{"line":915,"address":[4431100],"length":1,"stats":{"Line":6},"fn_name":null},{"line":918,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":919,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":920,"address":[4431112],"length":1,"stats":{"Line":6},"fn_name":null},{"line":926,"address":[4431296],"length":1,"stats":{"Line":2},"fn_name":"shortest_nfa"},{"line":927,"address":[4431327],"length":1,"stats":{"Line":2},"fn_name":null},{"line":931,"address":[4431392],"length":1,"stats":{"Line":8},"fn_name":"shortest_nfa_type"},{"line":937,"address":[4431442],"length":1,"stats":{"Line":8},"fn_name":null},{"line":938,"address":[4431615,4431722],"length":1,"stats":{"Line":14},"fn_name":null},{"line":939,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":940,"address":[4431530],"length":1,"stats":{"Line":8},"fn_name":null},{"line":941,"address":[4431546],"length":1,"stats":{"Line":8},"fn_name":null},{"line":944,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":945,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":946,"address":[4431559],"length":1,"stats":{"Line":8},"fn_name":null},{"line":948,"address":[4431724],"length":1,"stats":{"Line":9},"fn_name":null},{"line":950,"address":[4431713],"length":1,"stats":{"Line":6},"fn_name":null},{"line":955,"address":[4431792],"length":1,"stats":{"Line":9},"fn_name":"find_nfa"},{"line":961,"address":[4431844],"length":1,"stats":{"Line":9},"fn_name":null},{"line":962,"address":[4432031,4432148,4432343],"length":1,"stats":{"Line":27},"fn_name":null},{"line":963,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":964,"address":[4431932],"length":1,"stats":{"Line":9},"fn_name":null},{"line":965,"address":[4431948],"length":1,"stats":{"Line":9},"fn_name":null},{"line":968,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":969,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":970,"address":[4431964],"length":1,"stats":{"Line":9},"fn_name":null},{"line":972,"address":[4432153,4432243],"length":1,"stats":{"Line":9},"fn_name":null},{"line":973,"address":[4432245,4432217],"length":1,"stats":{"Line":18},"fn_name":null},{"line":974,"address":[4432236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":977,"address":[4432141],"length":1,"stats":{"Line":9},"fn_name":null},{"line":985,"address":[4432368],"length":1,"stats":{"Line":2},"fn_name":"captures_nfa"},{"line":991,"address":[4432503],"length":1,"stats":{"Line":2},"fn_name":null},{"line":992,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":993,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":994,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":995,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":996,"address":[4432419],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1001,"address":[4432560],"length":1,"stats":{"Line":14},"fn_name":"captures_nfa_type"},{"line":1009,"address":[4433052,4432666,4432795],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1010,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1011,"address":[4432651],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1012,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1015,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1016,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1017,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1019,"address":[4432809,4432955,4433075],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1020,"address":[4432932,4432957],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1021,"address":[4432948],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1024,"address":[4432788],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1028,"address":[4433136],"length":1,"stats":{"Line":15},"fn_name":"exec_nfa"},{"line":1040,"address":[4433293,4433526],"length":1,"stats":{"Line":23},"fn_name":null},{"line":1041,"address":[4433448,4433388,4433516],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1042,"address":[4433518],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1044,"address":[4433508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1050,"address":[4433532,4433795],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1051,"address":[4433693],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1052,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1053,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1054,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1055,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1056,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1057,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1060,"address":[4433653],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1065,"address":[4433840],"length":1,"stats":{"Line":11},"fn_name":"exec_pikevm"},{"line":1074,"address":[4434537,4434343,4433954],"length":1,"stats":{"Line":27},"fn_name":null},{"line":1076,"address":[4434111],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1077,"address":[4434137],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1078,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1079,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1080,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1081,"address":[4434170],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1082,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1083,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1087,"address":[4434085],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1088,"address":[4434361],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1089,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1090,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1091,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1092,"address":[4434402],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1093,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1094,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1100,"address":[4434576],"length":1,"stats":{"Line":12},"fn_name":"exec_backtrack"},{"line":1108,"address":[4434664,4435025,4435200],"length":1,"stats":{"Line":29},"fn_name":null},{"line":1110,"address":[4434813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1111,"address":[4434839],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1113,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1114,"address":[4434872],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1120,"address":[4434787],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1121,"address":[4435043],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1122,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1123,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1124,"address":[4435084],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1125,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1138,"address":[4435232],"length":1,"stats":{"Line":13},"fn_name":"many_matches_at"},{"line":1145,"address":[4435417],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1146,"address":[4435449],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1148,"address":[4458736,4458930,4435537,4449125,4439475,4435431],"length":1,"stats":{"Line":36},"fn_name":null},{"line":1150,"address":[4435552,4435488],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1151,"address":[4435588,4439029],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1152,"address":[4458937,4439017,4439356],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1153,"address":[4458967,4439439],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1156,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1157,"address":[4448876,4449001,4449123,4448978,4448988],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1158,"address":[4439488],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1159,"address":[4439526],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1161,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1162,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1164,"address":[4448892,4448980],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1165,"address":[4448993],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1166,"address":[4449042],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1167,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1168,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1169,"address":[4448931],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1172,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1173,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1174,"address":[4448962],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1179,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1180,"address":[4458608,4458734,4458508,4458598,4458618],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1181,"address":[4449138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1182,"address":[4449176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1183,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1184,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1185,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1187,"address":[4458524,4458600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1188,"address":[4458610],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1189,"address":[4458656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1190,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1191,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1192,"address":[4458557],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1195,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1196,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1197,"address":[4458585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1201,"address":[4458749,4458824],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1202,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1203,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1204,"address":[4458762],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1207,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1208,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1209,"address":[4458794],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1211,"address":[4435529],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1219,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1222,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1223,"address":[4459024],"length":1,"stats":{"Line":16},"fn_name":"imp"},{"line":1225,"address":[4459054,4459559],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1226,"address":[4459147],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1227,"address":[4459509,4459179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1228,"address":[4459561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1231,"address":[4459583],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1234,"address":[4241045,4240897,4304189,4435320],"length":1,"stats":{"Line":67},"fn_name":null},{"line":1237,"address":[4459600],"length":1,"stats":{"Line":8},"fn_name":"capture_name_idx"},{"line":1238,"address":[4459609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1243,"address":[4459648],"length":1,"stats":{"Line":5},"fn_name":"capture_name_idx"},{"line":1244,"address":[4459657],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1251,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1252,"address":[4499918,4538616],"length":1,"stats":{"Line":114},"fn_name":null},{"line":1254,"address":[4499926,4538624],"length":1,"stats":{"Line":82},"fn_name":null},{"line":1255,"address":[4538632,4499934],"length":1,"stats":{"Line":82},"fn_name":null},{"line":1261,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1262,"address":[5051832,5115898,5116106,5011983,5115238,5012559,5013125],"length":1,"stats":{"Line":34},"fn_name":null},{"line":1266,"address":[4459680],"length":1,"stats":{"Line":9},"fn_name":"into_regex"},{"line":1267,"address":[4459687],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1271,"address":[4459760],"length":1,"stats":{"Line":7},"fn_name":"into_regex_set"},{"line":1272,"address":[4459767],"length":1,"stats":{"Line":7},"fn_name":null},{"line":1276,"address":[4459840],"length":1,"stats":{"Line":5},"fn_name":"into_byte_regex"},{"line":1277,"address":[4459847],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1281,"address":[4459920],"length":1,"stats":{"Line":4},"fn_name":"into_byte_regex_set"},{"line":1282,"address":[4459927],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1287,"address":[4460000],"length":1,"stats":{"Line":8},"fn_name":"regex_strings"},{"line":1288,"address":[4460009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1294,"address":[4460064],"length":1,"stats":{"Line":8},"fn_name":"capture_names"},{"line":1295,"address":[4460073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1300,"address":[4460128],"length":1,"stats":{"Line":14},"fn_name":"capture_name_idx"},{"line":1301,"address":[4460137],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1306,"address":[4460213,4460176],"length":1,"stats":{"Line":0},"fn_name":"clone"},{"line":1307,"address":[4460193,4460288,4460230],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1312,"address":[4460320],"length":1,"stats":{"Line":9},"fn_name":"choose_match_type"},{"line":1313,"address":[4460342,4460398],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1314,"address":[4460456,4460411],"length":1,"stats":{"Line":14},"fn_name":null},{"line":1317,"address":[4460462,4460378],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1318,"address":[4460488],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1320,"address":[4460473,4460499,4460544],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1321,"address":[4460560],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1323,"address":[4460574,4460529,4460614],"length":1,"stats":{"Line":24},"fn_name":null},{"line":1324,"address":[4460630],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1327,"address":[4460599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1332,"address":[4460656],"length":1,"stats":{"Line":9},"fn_name":"choose_literal_match_type"},{"line":1333,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1334,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1335,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1338,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1339,"address":[4460704],"length":1,"stats":{"Line":9},"fn_name":"imp"},{"line":1351,"address":[4460713],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1352,"address":[4460777],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1354,"address":[4460799,4460757],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1355,"address":[4460824],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1356,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1359,"address":[4460810,4460856],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1360,"address":[4460955,4460892,4460927],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1361,"address":[4460929],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1363,"address":[4460901],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1366,"address":[4460867,4460964],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1367,"address":[4460985,4461048,4461053,4461020],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1368,"address":[4461022],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1373,"address":[4460994],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1376,"address":[4460970],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1379,"address":[4460665],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1383,"address":[4461056],"length":1,"stats":{"Line":0},"fn_name":"choose_dfa_match_type"},{"line":1384,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1386,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1389,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1390,"address":[4461104],"length":1,"stats":{"Line":8},"fn_name":"imp"},{"line":1391,"address":[4461113],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1392,"address":[4461176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1395,"address":[4461199,4461154],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1396,"address":[4461226],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1400,"address":[4461249,4461210],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1401,"address":[4461302],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1407,"address":[4461291,4461332],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1408,"address":[4461364],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1412,"address":[4461338],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1415,"address":[4461065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1433,"address":[4461392],"length":1,"stats":{"Line":9},"fn_name":"should_suffix_scan"},{"line":1434,"address":[4461401],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1435,"address":[4461463],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1437,"address":[4461487,4461442],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1438,"address":[4461507,4461562],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1511,"address":[4461600,4461654],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":1513,"address":[4461618],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1514,"address":[4461682],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1516,"address":[4461694],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1518,"address":[4461735],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1526,"address":[4462084,4462016],"length":1,"stats":{"Line":9},"fn_name":"alternation_literals"},{"line":1537,"address":[4462034,4462106],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1538,"address":[4462144],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1540,"address":[4462120],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1541,"address":[4462175,4462211],"length":1,"stats":{"Line":16},"fn_name":null},{"line":1542,"address":[4462194],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1545,"address":[4583531,4583698,4583456],"length":1,"stats":{"Line":21},"fn_name":"{{closure}}"},{"line":1546,"address":[4583478,4583545],"length":1,"stats":{"Line":19},"fn_name":null},{"line":1547,"address":[4583552],"length":1,"stats":{"Line":11},"fn_name":null},{"line":1548,"address":[4583592,4583692],"length":1,"stats":{"Line":22},"fn_name":null},{"line":1550,"address":[4583505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1551,"address":[4583517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1555,"address":[4462233],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1556,"address":[4462343,4462255,4462501,4463413],"length":1,"stats":{"Line":30},"fn_name":null},{"line":1557,"address":[4462535],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1558,"address":[4462778,4462554,4462912],"length":1,"stats":{"Line":29},"fn_name":null},{"line":1559,"address":[4462591,4462711],"length":1,"stats":{"Line":17},"fn_name":null},{"line":1560,"address":[4462788],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1561,"address":[4462800,4462917,4463137],"length":1,"stats":{"Line":21},"fn_name":null},{"line":1562,"address":[4462951],"length":1,"stats":{"Line":9},"fn_name":null},{"line":1563,"address":[4463070,4462980],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1570,"address":[4463338],"length":1,"stats":{"Line":12},"fn_name":null},{"line":1572,"address":[4462405],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1578,"address":[4497077,4497072],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1585,"address":[4497111,4497104],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"},{"line":1586,"address":[4497194,4497184],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":1592,"address":[4497424,4497431],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"},{"line":1593,"address":[4497504,4497514],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":1596,"address":[5574641],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1598,"address":[5574712],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1599,"address":[5574790],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1600,"address":[5575403,5574852,5575136],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1601,"address":[5575306,5575408],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1606,"address":[4497749,4497744],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":1613,"address":[4497783,4497776],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"},{"line":1614,"address":[4497856,4497866],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":1620,"address":[4498096,4498103],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"},{"line":1621,"address":[4498176,4498186],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":1624,"address":[5576183],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1626,"address":[5576228],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1627,"address":[5576238],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1628,"address":[5576838,5576571,5576291],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1629,"address":[5576741,5576843],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":436,"coverable":658},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","expand.rs"],"content":"use std::str;\n\nuse find_byte::find_byte;\n\nuse re_bytes;\nuse re_unicode;\n\npub fn expand_str(\n    caps: &re_unicode::Captures,\n    mut replacement: &str,\n    dst: &mut String,\n) {\n    while !replacement.is_empty() {\n        match find_byte(b'$', replacement.as_bytes()) {\n            None => break,\n            Some(i) => {\n                dst.push_str(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n            dst.push_str(\"$\");\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(!replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push_str(\"$\");\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => {\n                dst.push_str(caps.get(i).map(|m| m.as_str()).unwrap_or(\"\"));\n            }\n            Ref::Named(name) => {\n                dst.push_str(\n                    caps.name(name).map(|m| m.as_str()).unwrap_or(\"\"),\n                );\n            }\n        }\n    }\n    dst.push_str(replacement);\n}\n\npub fn expand_bytes(\n    caps: &re_bytes::Captures,\n    mut replacement: &[u8],\n    dst: &mut Vec<u8>,\n) {\n    while !replacement.is_empty() {\n        match find_byte(b'$', replacement) {\n            None => break,\n            Some(i) => {\n                dst.extend(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.get(1).map_or(false, |&b| b == b'$') {\n            dst.push(b'$');\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(!replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push(b'$');\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => {\n                dst.extend(caps.get(i).map(|m| m.as_bytes()).unwrap_or(b\"\"));\n            }\n            Ref::Named(name) => {\n                dst.extend(\n                    caps.name(name).map(|m| m.as_bytes()).unwrap_or(b\"\"),\n                );\n            }\n        }\n    }\n    dst.extend(replacement);\n}\n\n/// `CaptureRef` represents a reference to a capture group inside some text.\n/// The reference is either a capture group name or a number.\n///\n/// It is also tagged with the position in the text following the\n/// capture reference.\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\n\n/// A reference to a capture group in some text.\n///\n/// e.g., `$2`, `$foo`, `${foo}`.\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum Ref<'a> {\n    Named(&'a str),\n    Number(usize),\n}\n\nimpl<'a> From<&'a str> for Ref<'a> {\n    fn from(x: &'a str) -> Ref<'a> {\n        Ref::Named(x)\n    }\n}\n\nimpl From<usize> for Ref<'static> {\n    fn from(x: usize) -> Ref<'static> {\n        Ref::Number(x)\n    }\n}\n\n/// Parses a possible reference to a capture group name in the given text,\n/// starting at the beginning of `replacement`.\n///\n/// If no such valid reference could be found, None is returned.\nfn find_cap_ref<T: ?Sized + AsRef<[u8]>>(\n    replacement: &T,\n) -> Option<CaptureRef> {\n    let mut i = 0;\n    let rep: &[u8] = replacement.as_ref();\n    if rep.len() <= 1 || rep[0] != b'$' {\n        return None;\n    }\n    let mut brace = false;\n    i += 1;\n    if rep[i] == b'{' {\n        brace = true;\n        i += 1;\n    }\n    let mut cap_end = i;\n    while rep.get(cap_end).map_or(false, is_valid_cap_letter) {\n        cap_end += 1;\n    }\n    if cap_end == i {\n        return None;\n    }\n    // We just verified that the range 0..cap_end is valid ASCII, so it must\n    // therefore be valid UTF-8. If we really cared, we could avoid this UTF-8\n    // check with either unsafe or by parsing the number straight from &[u8].\n    let cap =\n        str::from_utf8(&rep[i..cap_end]).expect(\"valid UTF-8 capture name\");\n    if brace {\n        if !rep.get(cap_end).map_or(false, |&b| b == b'}') {\n            return None;\n        }\n        cap_end += 1;\n    }\n    Some(CaptureRef {\n        cap: match cap.parse::<u32>() {\n            Ok(i) => Ref::Number(i as usize),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n}\n\n/// Returns true if and only if the given byte is allowed in a capture name.\nfn is_valid_cap_letter(b: &u8) -> bool {\n    match *b {\n        b'0'..=b'9' | b'a'..=b'z' | b'A'..=b'Z' | b'_' => true,\n        _ => false,\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::{find_cap_ref, CaptureRef};\n\n    macro_rules! find {\n        ($name:ident, $text:expr) => {\n            #[test]\n            fn $name() {\n                assert_eq!(None, find_cap_ref($text));\n            }\n        };\n        ($name:ident, $text:expr, $capref:expr) => {\n            #[test]\n            fn $name() {\n                assert_eq!(Some($capref), find_cap_ref($text));\n            }\n        };\n    }\n\n    macro_rules! c {\n        ($name_or_number:expr, $pos:expr) => {\n            CaptureRef { cap: $name_or_number.into(), end: $pos }\n        };\n    }\n\n    find!(find_cap_ref1, \"$foo\", c!(\"foo\", 4));\n    find!(find_cap_ref2, \"${foo}\", c!(\"foo\", 6));\n    find!(find_cap_ref3, \"$0\", c!(0, 2));\n    find!(find_cap_ref4, \"$5\", c!(5, 2));\n    find!(find_cap_ref5, \"$10\", c!(10, 3));\n    // see https://github.com/rust-lang/regex/pull/585 for more on characters following numbers\n    find!(find_cap_ref6, \"$42a\", c!(\"42a\", 4));\n    find!(find_cap_ref7, \"${42}a\", c!(42, 5));\n    find!(find_cap_ref8, \"${42\");\n    find!(find_cap_ref9, \"${42 \");\n    find!(find_cap_ref10, \" $0 \");\n    find!(find_cap_ref11, \"$\");\n    find!(find_cap_ref12, \" \");\n    find!(find_cap_ref13, \"\");\n    find!(find_cap_ref14, \"$1-$2\", c!(1, 2));\n    find!(find_cap_ref15, \"$1_$2\", c!(\"1_\", 3));\n    find!(find_cap_ref16, \"$x-$y\", c!(\"x\", 2));\n    find!(find_cap_ref17, \"$x_$y\", c!(\"x_\", 3));\n}\n","traces":[{"line":8,"address":[5825376],"length":1,"stats":{"Line":6},"fn_name":"expand_str"},{"line":13,"address":[5825431,5826863],"length":1,"stats":{"Line":13},"fn_name":null},{"line":14,"address":[5825578,5825477,5825704],"length":1,"stats":{"Line":12},"fn_name":null},{"line":15,"address":[5825706,5825599],"length":1,"stats":{"Line":13},"fn_name":null},{"line":16,"address":[5825621],"length":1,"stats":{"Line":7},"fn_name":null},{"line":17,"address":[5825637,5825766],"length":1,"stats":{"Line":14},"fn_name":null},{"line":18,"address":[5825778],"length":1,"stats":{"Line":7},"fn_name":null},{"line":21,"address":[5509664,5509673],"length":1,"stats":{"Line":28},"fn_name":"{{closure}}"},{"line":22,"address":[5826055],"length":1,"stats":{"Line":7},"fn_name":null},{"line":23,"address":[5826075],"length":1,"stats":{"Line":7},"fn_name":null},{"line":24,"address":[5826141],"length":1,"stats":{"Line":7},"fn_name":null},{"line":26,"address":[5826150,5826013,5826189],"length":1,"stats":{"Line":14},"fn_name":null},{"line":27,"address":[5826278,5826158],"length":1,"stats":{"Line":7},"fn_name":null},{"line":28,"address":[5826219,5826287],"length":1,"stats":{"Line":14},"fn_name":null},{"line":30,"address":[5826260],"length":1,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[5826483],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[5826549],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[5826415,5826559],"length":1,"stats":{"Line":14},"fn_name":null},{"line":36,"address":[5826779,5826861,5826655],"length":1,"stats":{"Line":13},"fn_name":null},{"line":37,"address":[5826657,5826580],"length":1,"stats":{"Line":15},"fn_name":null},{"line":38,"address":[5509696,5509700],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":40,"address":[5826597],"length":1,"stats":{"Line":7},"fn_name":null},{"line":41,"address":[5826856],"length":1,"stats":{"Line":5},"fn_name":null},{"line":42,"address":[5509732,5509728],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":47,"address":[5825708],"length":1,"stats":{"Line":7},"fn_name":null},{"line":50,"address":[5826880],"length":1,"stats":{"Line":3},"fn_name":"expand_bytes"},{"line":55,"address":[5826935,5828195],"length":1,"stats":{"Line":9},"fn_name":null},{"line":56,"address":[5826982,5827129],"length":1,"stats":{"Line":3},"fn_name":null},{"line":57,"address":[5827024,5827131],"length":1,"stats":{"Line":8},"fn_name":null},{"line":58,"address":[5827046],"length":1,"stats":{"Line":3},"fn_name":null},{"line":59,"address":[5827062,5827192],"length":1,"stats":{"Line":6},"fn_name":null},{"line":60,"address":[5827205],"length":1,"stats":{"Line":3},"fn_name":null},{"line":63,"address":[5509760,5509769],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":64,"address":[5827396],"length":1,"stats":{"Line":5},"fn_name":null},{"line":65,"address":[5827414],"length":1,"stats":{"Line":5},"fn_name":null},{"line":66,"address":[5827480],"length":1,"stats":{"Line":5},"fn_name":null},{"line":68,"address":[5827489,5827528,5827360],"length":1,"stats":{"Line":6},"fn_name":null},{"line":69,"address":[5827497,5827608],"length":1,"stats":{"Line":3},"fn_name":null},{"line":70,"address":[5827617,5827558],"length":1,"stats":{"Line":12},"fn_name":null},{"line":72,"address":[5827592],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[5827813],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[5827879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[5827745,5827889],"length":1,"stats":{"Line":12},"fn_name":null},{"line":78,"address":[5827985,5828110,5828193],"length":1,"stats":{"Line":6},"fn_name":null},{"line":79,"address":[5827910,5827987],"length":1,"stats":{"Line":9},"fn_name":null},{"line":80,"address":[5509792,5509796],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":82,"address":[5827927],"length":1,"stats":{"Line":6},"fn_name":null},{"line":83,"address":[5828187],"length":1,"stats":{"Line":3},"fn_name":null},{"line":84,"address":[5509824,5509828],"length":1,"stats":{"Line":18},"fn_name":"{{closure}}"},{"line":89,"address":[5827133],"length":1,"stats":{"Line":6},"fn_name":null},{"line":113,"address":[5828208],"length":1,"stats":{"Line":1},"fn_name":"from"},{"line":114,"address":[5828224],"length":1,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[5828256],"length":1,"stats":{"Line":1},"fn_name":"from"},{"line":120,"address":[5828264],"length":1,"stats":{"Line":1},"fn_name":null},{"line":128,"address":[5511168,5509856],"length":1,"stats":{"Line":11},"fn_name":"find_cap_ref<[u8]>"},{"line":131,"address":[5511194,5509882],"length":1,"stats":{"Line":11},"fn_name":null},{"line":132,"address":[5511214,5509902],"length":1,"stats":{"Line":11},"fn_name":null},{"line":133,"address":[5511269,5512290,5510979,5509958],"length":1,"stats":{"Line":11},"fn_name":null},{"line":134,"address":[5510135,5511446,5510110,5511421],"length":1,"stats":{"Line":2},"fn_name":null},{"line":136,"address":[5511372,5510061],"length":1,"stats":{"Line":11},"fn_name":null},{"line":137,"address":[5512317,5510142,5510069,5511006,5511380,5511453],"length":1,"stats":{"Line":22},"fn_name":null},{"line":138,"address":[5510150,5511036,5512347,5511461],"length":1,"stats":{"Line":11},"fn_name":null},{"line":139,"address":[5511515,5510204],"length":1,"stats":{"Line":9},"fn_name":null},{"line":140,"address":[5511523,5511064,5512375,5510212],"length":1,"stats":{"Line":9},"fn_name":null},{"line":142,"address":[5510256,5511567],"length":1,"stats":{"Line":13},"fn_name":null},{"line":143,"address":[5510272,5510395,5511583,5511706],"length":1,"stats":{"Line":26},"fn_name":null},{"line":144,"address":[5510351,5511662,5511094,5512405],"length":1,"stats":{"Line":13},"fn_name":null},{"line":146,"address":[5511638,5510327],"length":1,"stats":{"Line":9},"fn_name":null},{"line":147,"address":[5511802,5510491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[5511715,5511814,5510404,5510503],"length":1,"stats":{"Line":22},"fn_name":null},{"line":154,"address":[5511899,5510588],"length":1,"stats":{"Line":13},"fn_name":null},{"line":155,"address":[5510600,5512480,5512489,5512512,5512521,5511911],"length":1,"stats":{"Line":27},"fn_name":"{{closure}}<str>"},{"line":156,"address":[5510695,5512006],"length":1,"stats":{"Line":1},"fn_name":null},{"line":158,"address":[5511154,5512465,5511966,5510655,5511124,5510711,5512435,5512022],"length":1,"stats":{"Line":18},"fn_name":null},{"line":160,"address":[5510863,5512174],"length":1,"stats":{"Line":13},"fn_name":null},{"line":161,"address":[5512124,5510729,5510813,5512040],"length":1,"stats":{"Line":26},"fn_name":null},{"line":162,"address":[5512069,5510758,5510817,5512128],"length":1,"stats":{"Line":25},"fn_name":null},{"line":163,"address":[5510780,5512091],"length":1,"stats":{"Line":13},"fn_name":null},{"line":165,"address":[5510855,5512166],"length":1,"stats":{"Line":13},"fn_name":null},{"line":170,"address":[5828288],"length":1,"stats":{"Line":13},"fn_name":"is_valid_cap_letter"},{"line":171,"address":[5828368],"length":1,"stats":{"Line":9},"fn_name":null},{"line":172,"address":[5828297,5828370],"length":1,"stats":{"Line":26},"fn_name":null},{"line":173,"address":[5828363],"length":1,"stats":{"Line":9},"fn_name":null},{"line":184,"address":[5588624,5589920,5589056,5590352,5588192,5589488],"length":1,"stats":{"Line":18},"fn_name":"find_cap_ref8"},{"line":185,"address":[5590053,5590363,5590481,5589934,5588206,5589621,5589070,5589189,5588638,5588325,5589502,5588757],"length":1,"stats":{"Line":6},"fn_name":null},{"line":190,"address":[5586544,5590768,5587648,5584336,5587088,5585456,5592432,5586000,5584896,5591872,5591312],"length":1,"stats":{"Line":33},"fn_name":"find_cap_ref1"},{"line":191,"address":[5592534,5585547,5586801,5587905,5591414,5586257,5584438,5587190,5585163,5591579,5584603,5592139,5585712,5587740,5592699,5591974,5586636,5587355,5584998,5590860,5586092,5591025],"length":1,"stats":{"Line":11},"fn_name":null},{"line":202,"address":[5584350],"length":1,"stats":{"Line":1},"fn_name":null},{"line":203,"address":[5584910],"length":1,"stats":{"Line":1},"fn_name":null},{"line":204,"address":[5585467],"length":1,"stats":{"Line":1},"fn_name":null},{"line":205,"address":[5586007],"length":1,"stats":{"Line":1},"fn_name":null},{"line":206,"address":[5586551],"length":1,"stats":{"Line":1},"fn_name":null},{"line":208,"address":[5587102],"length":1,"stats":{"Line":1},"fn_name":null},{"line":209,"address":[5587655],"length":1,"stats":{"Line":1},"fn_name":null},{"line":216,"address":[5590775],"length":1,"stats":{"Line":1},"fn_name":null},{"line":217,"address":[5591326],"length":1,"stats":{"Line":1},"fn_name":null},{"line":218,"address":[5591886],"length":1,"stats":{"Line":1},"fn_name":null},{"line":219,"address":[5592446],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":91,"coverable":98},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","find_byte.rs"],"content":"/// Searches for the given needle in the given haystack.\n///\n/// If the perf-literal feature is enabled, then this uses the super optimized\n/// memchr crate. Otherwise, it uses the naive byte-at-a-time implementation.\npub fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {\n    #[cfg(not(feature = \"perf-literal\"))]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        haystack.iter().position(|&b| b == needle)\n    }\n\n    #[cfg(feature = \"perf-literal\")]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        use memchr::memchr;\n        memchr(needle, haystack)\n    }\n\n    imp(needle, haystack)\n}\n","traces":[{"line":5,"address":[9951936],"length":1,"stats":{"Line":9},"fn_name":"find_byte"},{"line":12,"address":[5503104],"length":1,"stats":{"Line":9},"fn_name":"imp"},{"line":14,"address":[10300563],"length":1,"stats":{"Line":9},"fn_name":null},{"line":17,"address":[5503059],"length":1,"stats":{"Line":9},"fn_name":null}],"covered":4,"coverable":4},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","input.rs"],"content":"use std::char;\nuse std::cmp::Ordering;\nuse std::fmt;\nuse std::ops;\nuse std::u32;\n\nuse syntax;\n\nuse literal::LiteralSearcher;\nuse prog::InstEmptyLook;\nuse utf8::{decode_last_utf8, decode_utf8};\n\n/// Represents a location in the input.\n#[derive(Clone, Copy, Debug)]\npub struct InputAt {\n    pos: usize,\n    c: Char,\n    byte: Option<u8>,\n    len: usize,\n}\n\nimpl InputAt {\n    /// Returns true iff this position is at the beginning of the input.\n    pub fn is_start(&self) -> bool {\n        self.pos == 0\n    }\n\n    /// Returns true iff this position is past the end of the input.\n    pub fn is_end(&self) -> bool {\n        self.c.is_none() && self.byte.is_none()\n    }\n\n    /// Returns the character at this position.\n    ///\n    /// If this position is just before or after the input, then an absent\n    /// character is returned.\n    pub fn char(&self) -> Char {\n        self.c\n    }\n\n    /// Returns the byte at this position.\n    pub fn byte(&self) -> Option<u8> {\n        self.byte\n    }\n\n    /// Returns the UTF-8 width of the character at this position.\n    pub fn len(&self) -> usize {\n        self.len\n    }\n\n    /// Returns whether the UTF-8 width of the character at this position\n    /// is zero.\n    pub fn is_empty(&self) -> bool {\n        self.len == 0\n    }\n\n    /// Returns the byte offset of this position.\n    pub fn pos(&self) -> usize {\n        self.pos\n    }\n\n    /// Returns the byte offset of the next position in the input.\n    pub fn next_pos(&self) -> usize {\n        self.pos + self.len\n    }\n}\n\n/// An abstraction over input used in the matching engines.\npub trait Input: fmt::Debug {\n    /// Return an encoding of the position at byte offset `i`.\n    fn at(&self, i: usize) -> InputAt;\n\n    /// Return the Unicode character occurring next to `at`.\n    ///\n    /// If no such character could be decoded, then `Char` is absent.\n    fn next_char(&self, at: InputAt) -> Char;\n\n    /// Return the Unicode character occurring previous to `at`.\n    ///\n    /// If no such character could be decoded, then `Char` is absent.\n    fn previous_char(&self, at: InputAt) -> Char;\n\n    /// Return true if the given empty width instruction matches at the\n    /// input position given.\n    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool;\n\n    /// Scan the input for a matching prefix.\n    fn prefix_at(\n        &self,\n        prefixes: &LiteralSearcher,\n        at: InputAt,\n    ) -> Option<InputAt>;\n\n    /// The number of bytes in the input.\n    fn len(&self) -> usize;\n\n    /// Whether the input is empty.\n    fn is_empty(&self) -> bool {\n        self.len() == 0\n    }\n\n    /// Return the given input as a sequence of bytes.\n    fn as_bytes(&self) -> &[u8];\n}\n\nimpl<'a, T: Input> Input for &'a T {\n    fn at(&self, i: usize) -> InputAt {\n        (**self).at(i)\n    }\n\n    fn next_char(&self, at: InputAt) -> Char {\n        (**self).next_char(at)\n    }\n\n    fn previous_char(&self, at: InputAt) -> Char {\n        (**self).previous_char(at)\n    }\n\n    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {\n        (**self).is_empty_match(at, empty)\n    }\n\n    fn prefix_at(\n        &self,\n        prefixes: &LiteralSearcher,\n        at: InputAt,\n    ) -> Option<InputAt> {\n        (**self).prefix_at(prefixes, at)\n    }\n\n    fn len(&self) -> usize {\n        (**self).len()\n    }\n\n    fn as_bytes(&self) -> &[u8] {\n        (**self).as_bytes()\n    }\n}\n\n/// An input reader over characters.\n#[derive(Clone, Copy, Debug)]\npub struct CharInput<'t>(&'t [u8]);\n\nimpl<'t> CharInput<'t> {\n    /// Return a new character input reader for the given string.\n    pub fn new(s: &'t [u8]) -> CharInput<'t> {\n        CharInput(s)\n    }\n}\n\nimpl<'t> ops::Deref for CharInput<'t> {\n    type Target = [u8];\n\n    fn deref(&self) -> &[u8] {\n        self.0\n    }\n}\n\nimpl<'t> Input for CharInput<'t> {\n    fn at(&self, i: usize) -> InputAt {\n        if i >= self.len() {\n            InputAt { pos: self.len(), c: None.into(), byte: None, len: 0 }\n        } else {\n            let c = decode_utf8(&self[i..]).map(|(c, _)| c).into();\n            InputAt { pos: i, c: c, byte: None, len: c.len_utf8() }\n        }\n    }\n\n    fn next_char(&self, at: InputAt) -> Char {\n        at.char()\n    }\n\n    fn previous_char(&self, at: InputAt) -> Char {\n        decode_last_utf8(&self[..at.pos()]).map(|(c, _)| c).into()\n    }\n\n    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {\n        use prog::EmptyLook::*;\n        match empty.look {\n            StartLine => {\n                let c = self.previous_char(at);\n                at.pos() == 0 || c == '\\n'\n            }\n            EndLine => {\n                let c = self.next_char(at);\n                at.pos() == self.len() || c == '\\n'\n            }\n            StartText => at.pos() == 0,\n            EndText => at.pos() == self.len(),\n            WordBoundary => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_char() != c2.is_word_char()\n            }\n            NotWordBoundary => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_char() == c2.is_word_char()\n            }\n            WordBoundaryAscii => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_byte() != c2.is_word_byte()\n            }\n            NotWordBoundaryAscii => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_byte() == c2.is_word_byte()\n            }\n        }\n    }\n\n    fn prefix_at(\n        &self,\n        prefixes: &LiteralSearcher,\n        at: InputAt,\n    ) -> Option<InputAt> {\n        prefixes.find(&self[at.pos()..]).map(|(s, _)| self.at(at.pos() + s))\n    }\n\n    fn len(&self) -> usize {\n        self.0.len()\n    }\n\n    fn as_bytes(&self) -> &[u8] {\n        self.0\n    }\n}\n\n/// An input reader over bytes.\n#[derive(Clone, Copy, Debug)]\npub struct ByteInput<'t> {\n    text: &'t [u8],\n    only_utf8: bool,\n}\n\nimpl<'t> ByteInput<'t> {\n    /// Return a new byte-based input reader for the given string.\n    pub fn new(text: &'t [u8], only_utf8: bool) -> ByteInput<'t> {\n        ByteInput { text: text, only_utf8: only_utf8 }\n    }\n}\n\nimpl<'t> ops::Deref for ByteInput<'t> {\n    type Target = [u8];\n\n    fn deref(&self) -> &[u8] {\n        self.text\n    }\n}\n\nimpl<'t> Input for ByteInput<'t> {\n    fn at(&self, i: usize) -> InputAt {\n        if i >= self.len() {\n            InputAt { pos: self.len(), c: None.into(), byte: None, len: 0 }\n        } else {\n            InputAt {\n                pos: i,\n                c: None.into(),\n                byte: self.get(i).cloned(),\n                len: 1,\n            }\n        }\n    }\n\n    fn next_char(&self, at: InputAt) -> Char {\n        decode_utf8(&self[at.pos()..]).map(|(c, _)| c).into()\n    }\n\n    fn previous_char(&self, at: InputAt) -> Char {\n        decode_last_utf8(&self[..at.pos()]).map(|(c, _)| c).into()\n    }\n\n    fn is_empty_match(&self, at: InputAt, empty: &InstEmptyLook) -> bool {\n        use prog::EmptyLook::*;\n        match empty.look {\n            StartLine => {\n                let c = self.previous_char(at);\n                at.pos() == 0 || c == '\\n'\n            }\n            EndLine => {\n                let c = self.next_char(at);\n                at.pos() == self.len() || c == '\\n'\n            }\n            StartText => at.pos() == 0,\n            EndText => at.pos() == self.len(),\n            WordBoundary => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_char() != c2.is_word_char()\n            }\n            NotWordBoundary => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                c1.is_word_char() == c2.is_word_char()\n            }\n            WordBoundaryAscii => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                if self.only_utf8 {\n                    // If we must match UTF-8, then we can't match word\n                    // boundaries at invalid UTF-8.\n                    if c1.is_none() && !at.is_start() {\n                        return false;\n                    }\n                    if c2.is_none() && !at.is_end() {\n                        return false;\n                    }\n                }\n                c1.is_word_byte() != c2.is_word_byte()\n            }\n            NotWordBoundaryAscii => {\n                let (c1, c2) = (self.previous_char(at), self.next_char(at));\n                if self.only_utf8 {\n                    // If we must match UTF-8, then we can't match word\n                    // boundaries at invalid UTF-8.\n                    if c1.is_none() && !at.is_start() {\n                        return false;\n                    }\n                    if c2.is_none() && !at.is_end() {\n                        return false;\n                    }\n                }\n                c1.is_word_byte() == c2.is_word_byte()\n            }\n        }\n    }\n\n    fn prefix_at(\n        &self,\n        prefixes: &LiteralSearcher,\n        at: InputAt,\n    ) -> Option<InputAt> {\n        prefixes.find(&self[at.pos()..]).map(|(s, _)| self.at(at.pos() + s))\n    }\n\n    fn len(&self) -> usize {\n        self.text.len()\n    }\n\n    fn as_bytes(&self) -> &[u8] {\n        self.text\n    }\n}\n\n/// An inline representation of `Option<char>`.\n///\n/// This eliminates the need to do case analysis on `Option<char>` to determine\n/// ordinality with other characters.\n///\n/// (The `Option<char>` is not related to encoding. Instead, it is used in the\n/// matching engines to represent the beginning and ending boundaries of the\n/// search text.)\n#[derive(Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord)]\npub struct Char(u32);\n\nimpl fmt::Debug for Char {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match char::from_u32(self.0) {\n            None => write!(f, \"Empty\"),\n            Some(c) => write!(f, \"{:?}\", c),\n        }\n    }\n}\n\nimpl Char {\n    /// Returns true iff the character is absent.\n    #[inline]\n    pub fn is_none(self) -> bool {\n        self.0 == u32::MAX\n    }\n\n    /// Returns the length of the character's UTF-8 encoding.\n    ///\n    /// If the character is absent, then `1` is returned.\n    #[inline]\n    pub fn len_utf8(self) -> usize {\n        char::from_u32(self.0).map_or(1, |c| c.len_utf8())\n    }\n\n    /// Returns true iff the character is a word character.\n    ///\n    /// If the character is absent, then false is returned.\n    pub fn is_word_char(self) -> bool {\n        // is_word_character can panic if the Unicode data for \\w isn't\n        // available. However, our compiler ensures that if a Unicode word\n        // boundary is used, then the data must also be available. If it isn't,\n        // then the compiler returns an error.\n        char::from_u32(self.0).map_or(false, syntax::is_word_character)\n    }\n\n    /// Returns true iff the byte is a word byte.\n    ///\n    /// If the byte is absent, then false is returned.\n    pub fn is_word_byte(self) -> bool {\n        match char::from_u32(self.0) {\n            Some(c) if c <= '\\u{7F}' => syntax::is_word_byte(c as u8),\n            None | Some(_) => false,\n        }\n    }\n}\n\nimpl From<char> for Char {\n    fn from(c: char) -> Char {\n        Char(c as u32)\n    }\n}\n\nimpl From<Option<char>> for Char {\n    fn from(c: Option<char>) -> Char {\n        c.map_or(Char(u32::MAX), |c| c.into())\n    }\n}\n\nimpl PartialEq<char> for Char {\n    #[inline]\n    fn eq(&self, other: &char) -> bool {\n        self.0 == *other as u32\n    }\n}\n\nimpl PartialEq<Char> for char {\n    #[inline]\n    fn eq(&self, other: &Char) -> bool {\n        *self as u32 == other.0\n    }\n}\n\nimpl PartialOrd<char> for Char {\n    #[inline]\n    fn partial_cmp(&self, other: &char) -> Option<Ordering> {\n        self.0.partial_cmp(&(*other as u32))\n    }\n}\n\nimpl PartialOrd<Char> for char {\n    #[inline]\n    fn partial_cmp(&self, other: &Char) -> Option<Ordering> {\n        (*self as u32).partial_cmp(&other.0)\n    }\n}\n","traces":[{"line":24,"address":[5860736],"length":1,"stats":{"Line":12},"fn_name":"is_start"},{"line":25,"address":[5860741],"length":1,"stats":{"Line":12},"fn_name":null},{"line":29,"address":[5860768],"length":1,"stats":{"Line":2},"fn_name":"is_end"},{"line":30,"address":[5860777,5860855],"length":1,"stats":{"Line":4},"fn_name":null},{"line":37,"address":[5860880],"length":1,"stats":{"Line":11},"fn_name":"char"},{"line":38,"address":[5860885],"length":1,"stats":{"Line":11},"fn_name":null},{"line":42,"address":[5860896],"length":1,"stats":{"Line":13},"fn_name":"byte"},{"line":43,"address":[5860901],"length":1,"stats":{"Line":13},"fn_name":null},{"line":47,"address":[5860912],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":48,"address":[5860917],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[5860928],"length":1,"stats":{"Line":0},"fn_name":"is_empty"},{"line":54,"address":[5860933],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[5860960],"length":1,"stats":{"Line":9},"fn_name":"pos"},{"line":59,"address":[5860965],"length":1,"stats":{"Line":9},"fn_name":null},{"line":63,"address":[5860976],"length":1,"stats":{"Line":14},"fn_name":"next_pos"},{"line":64,"address":[5861015,5860985,5861045],"length":1,"stats":{"Line":14},"fn_name":null},{"line":98,"address":[4715536,4715584],"length":1,"stats":{"Line":0},"fn_name":"is_empty<regex::input::ByteInput>"},{"line":99,"address":[4715545,4715593],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":132,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":146,"address":[5861056],"length":1,"stats":{"Line":13},"fn_name":"new"},{"line":147,"address":[5861070],"length":1,"stats":{"Line":13},"fn_name":null},{"line":154,"address":[5861104],"length":1,"stats":{"Line":13},"fn_name":"deref"},{"line":155,"address":[5861109],"length":1,"stats":{"Line":13},"fn_name":null},{"line":160,"address":[5861120],"length":1,"stats":{"Line":13},"fn_name":"at"},{"line":161,"address":[5861300,5861151],"length":1,"stats":{"Line":23},"fn_name":null},{"line":162,"address":[5861221],"length":1,"stats":{"Line":10},"fn_name":null},{"line":164,"address":[4715645,4715632],"length":1,"stats":{"Line":52},"fn_name":"{{closure}}"},{"line":165,"address":[5861424],"length":1,"stats":{"Line":13},"fn_name":null},{"line":169,"address":[5861520],"length":1,"stats":{"Line":9},"fn_name":"next_char"},{"line":170,"address":[5861529],"length":1,"stats":{"Line":9},"fn_name":null},{"line":173,"address":[5861552],"length":1,"stats":{"Line":8},"fn_name":"previous_char"},{"line":174,"address":[4715664,4715677],"length":1,"stats":{"Line":25},"fn_name":"{{closure}}"},{"line":177,"address":[5861712],"length":1,"stats":{"Line":9},"fn_name":"is_empty_match"},{"line":179,"address":[5862332,5861865,5862175,5862570,5862265,5863048,5862810,5862007],"length":1,"stats":{"Line":42},"fn_name":null},{"line":180,"address":[5861735],"length":1,"stats":{"Line":9},"fn_name":null},{"line":181,"address":[5861875],"length":1,"stats":{"Line":4},"fn_name":null},{"line":182,"address":[5861946,5862020],"length":1,"stats":{"Line":8},"fn_name":null},{"line":184,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[5862046],"length":1,"stats":{"Line":4},"fn_name":null},{"line":186,"address":[5862117,5862188],"length":1,"stats":{"Line":8},"fn_name":null},{"line":188,"address":[5862233],"length":1,"stats":{"Line":7},"fn_name":null},{"line":189,"address":[5862278],"length":1,"stats":{"Line":6},"fn_name":null},{"line":190,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[5862345],"length":1,"stats":{"Line":8},"fn_name":null},{"line":192,"address":[5862523],"length":1,"stats":{"Line":8},"fn_name":null},{"line":194,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[5862583],"length":1,"stats":{"Line":7},"fn_name":null},{"line":196,"address":[5862761],"length":1,"stats":{"Line":9},"fn_name":null},{"line":198,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[5862823],"length":1,"stats":{"Line":4},"fn_name":null},{"line":200,"address":[5863001],"length":1,"stats":{"Line":4},"fn_name":null},{"line":202,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[5861797,5863061],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[5863174],"length":1,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[5863248],"length":1,"stats":{"Line":6},"fn_name":"prefix_at"},{"line":214,"address":[4715696,4715723],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":217,"address":[5865728],"length":1,"stats":{"Line":13},"fn_name":"len"},{"line":218,"address":[5865737],"length":1,"stats":{"Line":13},"fn_name":null},{"line":221,"address":[5865776],"length":1,"stats":{"Line":0},"fn_name":"as_bytes"},{"line":222,"address":[5865781],"length":1,"stats":{"Line":0},"fn_name":null},{"line":235,"address":[5865792],"length":1,"stats":{"Line":12},"fn_name":"new"},{"line":243,"address":[5865840],"length":1,"stats":{"Line":13},"fn_name":"deref"},{"line":244,"address":[5865845],"length":1,"stats":{"Line":13},"fn_name":null},{"line":249,"address":[5865856],"length":1,"stats":{"Line":13},"fn_name":"at"},{"line":250,"address":[5865878,5866021],"length":1,"stats":{"Line":24},"fn_name":null},{"line":251,"address":[5865942],"length":1,"stats":{"Line":11},"fn_name":null},{"line":255,"address":[5865921],"length":1,"stats":{"Line":13},"fn_name":null},{"line":256,"address":[5866028],"length":1,"stats":{"Line":13},"fn_name":null},{"line":262,"address":[5866160],"length":1,"stats":{"Line":5},"fn_name":"next_char"},{"line":263,"address":[4715856,4715869],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}"},{"line":266,"address":[5866320],"length":1,"stats":{"Line":5},"fn_name":"previous_char"},{"line":267,"address":[4715901,4715888],"length":1,"stats":{"Line":13},"fn_name":"{{closure}}"},{"line":270,"address":[5866480],"length":1,"stats":{"Line":6},"fn_name":"is_empty_match"},{"line":272,"address":[5866952,5867045,5868073,5866778,5867112,5867590,5868474,5866633,5868479,5867350],"length":1,"stats":{"Line":24},"fn_name":null},{"line":273,"address":[5866503],"length":1,"stats":{"Line":6},"fn_name":null},{"line":274,"address":[5866643],"length":1,"stats":{"Line":2},"fn_name":null},{"line":275,"address":[5866791,5866714],"length":1,"stats":{"Line":4},"fn_name":null},{"line":277,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[5866820],"length":1,"stats":{"Line":2},"fn_name":null},{"line":279,"address":[5866891,5866965],"length":1,"stats":{"Line":4},"fn_name":null},{"line":281,"address":[5867013],"length":1,"stats":{"Line":5},"fn_name":null},{"line":282,"address":[5867058],"length":1,"stats":{"Line":4},"fn_name":null},{"line":283,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[5867125],"length":1,"stats":{"Line":2},"fn_name":null},{"line":285,"address":[5867303],"length":1,"stats":{"Line":2},"fn_name":null},{"line":287,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":288,"address":[5867363],"length":1,"stats":{"Line":2},"fn_name":null},{"line":289,"address":[5867541],"length":1,"stats":{"Line":3},"fn_name":null},{"line":291,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":292,"address":[5867603],"length":1,"stats":{"Line":2},"fn_name":null},{"line":293,"address":[5868016,5867789],"length":1,"stats":{"Line":4},"fn_name":null},{"line":296,"address":[5867812],"length":1,"stats":{"Line":2},"fn_name":null},{"line":297,"address":[5867911,5867941],"length":1,"stats":{"Line":4},"fn_name":null},{"line":299,"address":[5867943,5867900],"length":1,"stats":{"Line":2},"fn_name":null},{"line":300,"address":[5868018],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[5868032],"length":1,"stats":{"Line":2},"fn_name":null},{"line":305,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[5868086,5866565],"length":1,"stats":{"Line":6},"fn_name":null},{"line":307,"address":[5868207,5868415],"length":1,"stats":{"Line":3},"fn_name":null},{"line":310,"address":[5868230],"length":1,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[5868329],"length":1,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[5868318,5868342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[5868417],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[5868431],"length":1,"stats":{"Line":3},"fn_name":null},{"line":322,"address":[5868480],"length":1,"stats":{"Line":4},"fn_name":"prefix_at"},{"line":327,"address":[4715920,4715947],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":330,"address":[5870960],"length":1,"stats":{"Line":13},"fn_name":"len"},{"line":331,"address":[5870969],"length":1,"stats":{"Line":13},"fn_name":null},{"line":334,"address":[5871008],"length":1,"stats":{"Line":0},"fn_name":"as_bytes"},{"line":335,"address":[5871013],"length":1,"stats":{"Line":0},"fn_name":null},{"line":351,"address":[5871024],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":352,"address":[5871327,5871161,5871235,5871047],"length":1,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[5871063,5871168],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[5871242,5871091],"length":1,"stats":{"Line":0},"fn_name":null},{"line":362,"address":[5871360],"length":1,"stats":{"Line":2},"fn_name":"is_none"},{"line":363,"address":[5871367],"length":1,"stats":{"Line":2},"fn_name":null},{"line":370,"address":[5871392],"length":1,"stats":{"Line":13},"fn_name":"len_utf8"},{"line":371,"address":[4716088,4716080],"length":1,"stats":{"Line":39},"fn_name":"{{closure}}"},{"line":377,"address":[5871440],"length":1,"stats":{"Line":9},"fn_name":"is_word_char"},{"line":382,"address":[5871448],"length":1,"stats":{"Line":9},"fn_name":null},{"line":388,"address":[5871488],"length":1,"stats":{"Line":7},"fn_name":"is_word_byte"},{"line":389,"address":[5871496,5871528,5871574],"length":1,"stats":{"Line":13},"fn_name":null},{"line":390,"address":[5871505,5871530],"length":1,"stats":{"Line":14},"fn_name":null},{"line":391,"address":[5871576],"length":1,"stats":{"Line":7},"fn_name":null},{"line":397,"address":[5871600],"length":1,"stats":{"Line":13},"fn_name":"from"},{"line":398,"address":[5871605],"length":1,"stats":{"Line":13},"fn_name":null},{"line":403,"address":[5871616],"length":1,"stats":{"Line":15},"fn_name":"from"},{"line":404,"address":[4716120,4716112],"length":1,"stats":{"Line":41},"fn_name":"{{closure}}"},{"line":410,"address":[5871648],"length":1,"stats":{"Line":6},"fn_name":"eq"},{"line":411,"address":[5871661],"length":1,"stats":{"Line":6},"fn_name":null},{"line":417,"address":[5871696],"length":1,"stats":{"Line":9},"fn_name":"eq"},{"line":418,"address":[5871709],"length":1,"stats":{"Line":9},"fn_name":null},{"line":424,"address":[5871728],"length":1,"stats":{"Line":10},"fn_name":"partial_cmp"},{"line":425,"address":[5871742],"length":1,"stats":{"Line":12},"fn_name":null},{"line":431,"address":[5871776],"length":1,"stats":{"Line":10},"fn_name":"partial_cmp"},{"line":432,"address":[5871790],"length":1,"stats":{"Line":10},"fn_name":null}],"covered":104,"coverable":149},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","literal","imp.rs"],"content":"use std::cmp;\nuse std::mem;\n\nuse aho_corasick::{self, packed, AhoCorasick, AhoCorasickBuilder};\nuse memchr::{memchr, memchr2, memchr3};\nuse syntax::hir::literal::{Literal, Literals};\n\nuse freqs::BYTE_FREQUENCIES;\n\n/// A prefix extracted from a compiled regular expression.\n///\n/// A regex prefix is a set of literal strings that *must* be matched at the\n/// beginning of a regex in order for the entire regex to match. Similarly\n/// for a regex suffix.\n#[derive(Clone, Debug)]\npub struct LiteralSearcher {\n    complete: bool,\n    lcp: FreqyPacked,\n    lcs: FreqyPacked,\n    matcher: Matcher,\n}\n\n#[derive(Clone, Debug)]\nenum Matcher {\n    /// No literals. (Never advances through the input.)\n    Empty,\n    /// A set of four or more single byte literals.\n    Bytes(SingleByteSet),\n    /// A single substring, find using memchr and frequency analysis.\n    FreqyPacked(FreqyPacked),\n    /// A single substring, find using Boyer-Moore.\n    BoyerMoore(BoyerMooreSearch),\n    /// An Aho-Corasick automaton.\n    AC { ac: AhoCorasick<u32>, lits: Vec<Literal> },\n    /// A packed multiple substring searcher, using SIMD.\n    ///\n    /// Note that Aho-Corasick will actually use this packed searcher\n    /// internally automatically, however, there is some overhead associated\n    /// with going through the Aho-Corasick machinery. So using the packed\n    /// searcher directly results in some gains.\n    Packed { s: packed::Searcher, lits: Vec<Literal> },\n}\n\nimpl LiteralSearcher {\n    /// Returns a matcher that never matches and never advances the input.\n    pub fn empty() -> Self {\n        Self::new(Literals::empty(), Matcher::Empty)\n    }\n\n    /// Returns a matcher for literal prefixes from the given set.\n    pub fn prefixes(lits: Literals) -> Self {\n        let matcher = Matcher::prefixes(&lits);\n        Self::new(lits, matcher)\n    }\n\n    /// Returns a matcher for literal suffixes from the given set.\n    pub fn suffixes(lits: Literals) -> Self {\n        let matcher = Matcher::suffixes(&lits);\n        Self::new(lits, matcher)\n    }\n\n    fn new(lits: Literals, matcher: Matcher) -> Self {\n        let complete = lits.all_complete();\n        LiteralSearcher {\n            complete: complete,\n            lcp: FreqyPacked::new(lits.longest_common_prefix().to_vec()),\n            lcs: FreqyPacked::new(lits.longest_common_suffix().to_vec()),\n            matcher: matcher,\n        }\n    }\n\n    /// Returns true if all matches comprise the entire regular expression.\n    ///\n    /// This does not necessarily mean that a literal match implies a match\n    /// of the regular expression. For example, the regular expresison `^a`\n    /// is comprised of a single complete literal `a`, but the regular\n    /// expression demands that it only match at the beginning of a string.\n    pub fn complete(&self) -> bool {\n        self.complete && !self.is_empty()\n    }\n\n    /// Find the position of a literal in `haystack` if it exists.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn find(&self, haystack: &[u8]) -> Option<(usize, usize)> {\n        use self::Matcher::*;\n        match self.matcher {\n            Empty => Some((0, 0)),\n            Bytes(ref sset) => sset.find(haystack).map(|i| (i, i + 1)),\n            FreqyPacked(ref s) => s.find(haystack).map(|i| (i, i + s.len())),\n            BoyerMoore(ref s) => s.find(haystack).map(|i| (i, i + s.len())),\n            AC { ref ac, .. } => {\n                ac.find(haystack).map(|m| (m.start(), m.end()))\n            }\n            Packed { ref s, .. } => {\n                s.find(haystack).map(|m| (m.start(), m.end()))\n            }\n        }\n    }\n\n    /// Like find, except matches must start at index `0`.\n    pub fn find_start(&self, haystack: &[u8]) -> Option<(usize, usize)> {\n        for lit in self.iter() {\n            if lit.len() > haystack.len() {\n                continue;\n            }\n            if lit == &haystack[0..lit.len()] {\n                return Some((0, lit.len()));\n            }\n        }\n        None\n    }\n\n    /// Like find, except matches must end at index `haystack.len()`.\n    pub fn find_end(&self, haystack: &[u8]) -> Option<(usize, usize)> {\n        for lit in self.iter() {\n            if lit.len() > haystack.len() {\n                continue;\n            }\n            if lit == &haystack[haystack.len() - lit.len()..] {\n                return Some((haystack.len() - lit.len(), haystack.len()));\n            }\n        }\n        None\n    }\n\n    /// Returns an iterator over all literals to be matched.\n    pub fn iter(&self) -> LiteralIter {\n        match self.matcher {\n            Matcher::Empty => LiteralIter::Empty,\n            Matcher::Bytes(ref sset) => LiteralIter::Bytes(&sset.dense),\n            Matcher::FreqyPacked(ref s) => LiteralIter::Single(&s.pat),\n            Matcher::BoyerMoore(ref s) => LiteralIter::Single(&s.pattern),\n            Matcher::AC { ref lits, .. } => LiteralIter::AC(lits),\n            Matcher::Packed { ref lits, .. } => LiteralIter::Packed(lits),\n        }\n    }\n\n    /// Returns a matcher for the longest common prefix of this matcher.\n    pub fn lcp(&self) -> &FreqyPacked {\n        &self.lcp\n    }\n\n    /// Returns a matcher for the longest common suffix of this matcher.\n    pub fn lcs(&self) -> &FreqyPacked {\n        &self.lcs\n    }\n\n    /// Returns true iff this prefix is empty.\n    pub fn is_empty(&self) -> bool {\n        self.len() == 0\n    }\n\n    /// Returns the number of prefixes in this machine.\n    pub fn len(&self) -> usize {\n        use self::Matcher::*;\n        match self.matcher {\n            Empty => 0,\n            Bytes(ref sset) => sset.dense.len(),\n            FreqyPacked(_) => 1,\n            BoyerMoore(_) => 1,\n            AC { ref ac, .. } => ac.pattern_count(),\n            Packed { ref lits, .. } => lits.len(),\n        }\n    }\n\n    /// Return the approximate heap usage of literals in bytes.\n    pub fn approximate_size(&self) -> usize {\n        use self::Matcher::*;\n        match self.matcher {\n            Empty => 0,\n            Bytes(ref sset) => sset.approximate_size(),\n            FreqyPacked(ref single) => single.approximate_size(),\n            BoyerMoore(ref single) => single.approximate_size(),\n            AC { ref ac, .. } => ac.heap_bytes(),\n            Packed { ref s, .. } => s.heap_bytes(),\n        }\n    }\n}\n\nimpl Matcher {\n    fn prefixes(lits: &Literals) -> Self {\n        let sset = SingleByteSet::prefixes(lits);\n        Matcher::new(lits, sset)\n    }\n\n    fn suffixes(lits: &Literals) -> Self {\n        let sset = SingleByteSet::suffixes(lits);\n        Matcher::new(lits, sset)\n    }\n\n    fn new(lits: &Literals, sset: SingleByteSet) -> Self {\n        if lits.literals().is_empty() {\n            return Matcher::Empty;\n        }\n        if sset.dense.len() >= 26 {\n            // Avoid trying to match a large number of single bytes.\n            // This is *very* sensitive to a frequency analysis comparison\n            // between the bytes in sset and the composition of the haystack.\n            // No matter the size of sset, if its members all are rare in the\n            // haystack, then it'd be worth using it. How to tune this... IDK.\n            // ---AG\n            return Matcher::Empty;\n        }\n        if sset.complete {\n            return Matcher::Bytes(sset);\n        }\n        if lits.literals().len() == 1 {\n            let lit = lits.literals()[0].to_vec();\n            if BoyerMooreSearch::should_use(lit.as_slice()) {\n                return Matcher::BoyerMoore(BoyerMooreSearch::new(lit));\n            } else {\n                return Matcher::FreqyPacked(FreqyPacked::new(lit));\n            }\n        }\n\n        let pats = lits.literals().to_owned();\n        let is_aho_corasick_fast = sset.dense.len() <= 1 && sset.all_ascii;\n        if lits.literals().len() <= 100 && !is_aho_corasick_fast {\n            let mut builder = packed::Config::new()\n                .match_kind(packed::MatchKind::LeftmostFirst)\n                .builder();\n            if let Some(s) = builder.extend(&pats).build() {\n                return Matcher::Packed { s, lits: pats };\n            }\n        }\n        let ac = AhoCorasickBuilder::new()\n            .match_kind(aho_corasick::MatchKind::LeftmostFirst)\n            .dfa(true)\n            .build_with_size::<u32, _, _>(&pats)\n            .unwrap();\n        Matcher::AC { ac, lits: pats }\n    }\n}\n\npub enum LiteralIter<'a> {\n    Empty,\n    Bytes(&'a [u8]),\n    Single(&'a [u8]),\n    AC(&'a [Literal]),\n    Packed(&'a [Literal]),\n}\n\nimpl<'a> Iterator for LiteralIter<'a> {\n    type Item = &'a [u8];\n\n    fn next(&mut self) -> Option<Self::Item> {\n        match *self {\n            LiteralIter::Empty => None,\n            LiteralIter::Bytes(ref mut many) => {\n                if many.is_empty() {\n                    None\n                } else {\n                    let next = &many[0..1];\n                    *many = &many[1..];\n                    Some(next)\n                }\n            }\n            LiteralIter::Single(ref mut one) => {\n                if one.is_empty() {\n                    None\n                } else {\n                    let next = &one[..];\n                    *one = &[];\n                    Some(next)\n                }\n            }\n            LiteralIter::AC(ref mut lits) => {\n                if lits.is_empty() {\n                    None\n                } else {\n                    let next = &lits[0];\n                    *lits = &lits[1..];\n                    Some(&**next)\n                }\n            }\n            LiteralIter::Packed(ref mut lits) => {\n                if lits.is_empty() {\n                    None\n                } else {\n                    let next = &lits[0];\n                    *lits = &lits[1..];\n                    Some(&**next)\n                }\n            }\n        }\n    }\n}\n\n#[derive(Clone, Debug)]\nstruct SingleByteSet {\n    sparse: Vec<bool>,\n    dense: Vec<u8>,\n    complete: bool,\n    all_ascii: bool,\n}\n\nimpl SingleByteSet {\n    fn new() -> SingleByteSet {\n        SingleByteSet {\n            sparse: vec![false; 256],\n            dense: vec![],\n            complete: true,\n            all_ascii: true,\n        }\n    }\n\n    fn prefixes(lits: &Literals) -> SingleByteSet {\n        let mut sset = SingleByteSet::new();\n        for lit in lits.literals() {\n            sset.complete = sset.complete && lit.len() == 1;\n            if let Some(&b) = lit.get(0) {\n                if !sset.sparse[b as usize] {\n                    if b > 0x7F {\n                        sset.all_ascii = false;\n                    }\n                    sset.dense.push(b);\n                    sset.sparse[b as usize] = true;\n                }\n            }\n        }\n        sset\n    }\n\n    fn suffixes(lits: &Literals) -> SingleByteSet {\n        let mut sset = SingleByteSet::new();\n        for lit in lits.literals() {\n            sset.complete = sset.complete && lit.len() == 1;\n            if let Some(&b) = lit.get(lit.len().checked_sub(1).unwrap()) {\n                if !sset.sparse[b as usize] {\n                    if b > 0x7F {\n                        sset.all_ascii = false;\n                    }\n                    sset.dense.push(b);\n                    sset.sparse[b as usize] = true;\n                }\n            }\n        }\n        sset\n    }\n\n    /// Faster find that special cases certain sizes to use memchr.\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find(&self, text: &[u8]) -> Option<usize> {\n        match self.dense.len() {\n            0 => None,\n            1 => memchr(self.dense[0], text),\n            2 => memchr2(self.dense[0], self.dense[1], text),\n            3 => memchr3(self.dense[0], self.dense[1], self.dense[2], text),\n            _ => self._find(text),\n        }\n    }\n\n    /// Generic find that works on any sized set.\n    fn _find(&self, haystack: &[u8]) -> Option<usize> {\n        for (i, &b) in haystack.iter().enumerate() {\n            if self.sparse[b as usize] {\n                return Some(i);\n            }\n        }\n        None\n    }\n\n    fn approximate_size(&self) -> usize {\n        (self.dense.len() * mem::size_of::<u8>())\n            + (self.sparse.len() * mem::size_of::<bool>())\n    }\n}\n\n/// Provides an implementation of fast subtring search using frequency\n/// analysis.\n///\n/// memchr is so fast that we do everything we can to keep the loop in memchr\n/// for as long as possible. The easiest way to do this is to intelligently\n/// pick the byte to send to memchr. The best byte is the byte that occurs\n/// least frequently in the haystack. Since doing frequency analysis on the\n/// haystack is far too expensive, we compute a set of fixed frequencies up\n/// front and hard code them in src/freqs.rs. Frequency analysis is done via\n/// scripts/frequencies.py.\n#[derive(Clone, Debug)]\npub struct FreqyPacked {\n    /// The pattern.\n    pat: Vec<u8>,\n    /// The number of Unicode characters in the pattern. This is useful for\n    /// determining the effective length of a pattern when deciding which\n    /// optimizations to perform. A trailing incomplete UTF-8 sequence counts\n    /// as one character.\n    char_len: usize,\n    /// The rarest byte in the pattern, according to pre-computed frequency\n    /// analysis.\n    rare1: u8,\n    /// The offset of the rarest byte in `pat`.\n    rare1i: usize,\n    /// The second rarest byte in the pattern, according to pre-computed\n    /// frequency analysis. (This may be equivalent to the rarest byte.)\n    ///\n    /// The second rarest byte is used as a type of guard for quickly detecting\n    /// a mismatch after memchr locates an instance of the rarest byte. This\n    /// is a hedge against pathological cases where the pre-computed frequency\n    /// analysis may be off. (But of course, does not prevent *all*\n    /// pathological cases.)\n    rare2: u8,\n    /// The offset of the second rarest byte in `pat`.\n    rare2i: usize,\n}\n\nimpl FreqyPacked {\n    fn new(pat: Vec<u8>) -> FreqyPacked {\n        if pat.is_empty() {\n            return FreqyPacked::empty();\n        }\n\n        // Find the rarest two bytes. Try to make them distinct (but it's not\n        // required).\n        let mut rare1 = pat[0];\n        let mut rare2 = pat[0];\n        for b in pat[1..].iter().cloned() {\n            if freq_rank(b) < freq_rank(rare1) {\n                rare1 = b;\n            }\n        }\n        for &b in &pat {\n            if rare1 == rare2 {\n                rare2 = b\n            } else if b != rare1 && freq_rank(b) < freq_rank(rare2) {\n                rare2 = b;\n            }\n        }\n\n        // And find the offsets of their last occurrences.\n        let rare1i = pat.iter().rposition(|&b| b == rare1).unwrap();\n        let rare2i = pat.iter().rposition(|&b| b == rare2).unwrap();\n\n        let char_len = char_len_lossy(&pat);\n        FreqyPacked {\n            pat: pat,\n            char_len: char_len,\n            rare1: rare1,\n            rare1i: rare1i,\n            rare2: rare2,\n            rare2i: rare2i,\n        }\n    }\n\n    fn empty() -> FreqyPacked {\n        FreqyPacked {\n            pat: vec![],\n            char_len: 0,\n            rare1: 0,\n            rare1i: 0,\n            rare2: 0,\n            rare2i: 0,\n        }\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn find(&self, haystack: &[u8]) -> Option<usize> {\n        let pat = &*self.pat;\n        if haystack.len() < pat.len() || pat.is_empty() {\n            return None;\n        }\n        let mut i = self.rare1i;\n        while i < haystack.len() {\n            i += match memchr(self.rare1, &haystack[i..]) {\n                None => return None,\n                Some(i) => i,\n            };\n            let start = i - self.rare1i;\n            let end = start + pat.len();\n            if end > haystack.len() {\n                return None;\n            }\n            let aligned = &haystack[start..end];\n            if aligned[self.rare2i] == self.rare2 && aligned == &*self.pat {\n                return Some(start);\n            }\n            i += 1;\n        }\n        None\n    }\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn is_suffix(&self, text: &[u8]) -> bool {\n        if text.len() < self.len() {\n            return false;\n        }\n        text[text.len() - self.len()..] == *self.pat\n    }\n\n    pub fn len(&self) -> usize {\n        self.pat.len()\n    }\n\n    pub fn char_len(&self) -> usize {\n        self.char_len\n    }\n\n    fn approximate_size(&self) -> usize {\n        self.pat.len() * mem::size_of::<u8>()\n    }\n}\n\nfn char_len_lossy(bytes: &[u8]) -> usize {\n    String::from_utf8_lossy(bytes).chars().count()\n}\n\n/// An implementation of Tuned Boyer-Moore as laid out by\n/// Andrew Hume and Daniel Sunday in \"Fast String Searching\".\n/// O(n) in the size of the input.\n///\n/// Fast string searching algorithms come in many variations,\n/// but they can generally be described in terms of three main\n/// components.\n///\n/// The skip loop is where the string searcher wants to spend\n/// as much time as possible. Exactly which character in the\n/// pattern the skip loop examines varies from algorithm to\n/// algorithm, but in the simplest case this loop repeated\n/// looks at the last character in the pattern and jumps\n/// forward in the input if it is not in the pattern.\n/// Robert Boyer and J Moore called this the \"fast\" loop in\n/// their original paper.\n///\n/// The match loop is responsible for actually examining the\n/// whole potentially matching substring. In order to fail\n/// faster, the match loop sometimes has a guard test attached.\n/// The guard test uses frequency analysis of the different\n/// characters in the pattern to choose the least frequency\n/// occurring character and use it to find match failures\n/// as quickly as possible.\n///\n/// The shift rule governs how the algorithm will shuffle its\n/// test window in the event of a failure during the match loop.\n/// Certain shift rules allow the worst-case run time of the\n/// algorithm to be shown to be O(n) in the size of the input\n/// rather than O(nm) in the size of the input and the size\n/// of the pattern (as naive Boyer-Moore is).\n///\n/// \"Fast String Searching\", in addition to presenting a tuned\n/// algorithm, provides a comprehensive taxonomy of the many\n/// different flavors of string searchers. Under that taxonomy\n/// TBM, the algorithm implemented here, uses an unrolled fast\n/// skip loop with memchr fallback, a forward match loop with guard,\n/// and the mini Sunday's delta shift rule. To unpack that you'll have to\n/// read the paper.\n#[derive(Clone, Debug)]\npub struct BoyerMooreSearch {\n    /// The pattern we are going to look for in the haystack.\n    pattern: Vec<u8>,\n\n    /// The skip table for the skip loop.\n    ///\n    /// Maps the character at the end of the input\n    /// to a shift.\n    skip_table: Vec<usize>,\n\n    /// The guard character (least frequently occurring char).\n    guard: u8,\n    /// The reverse-index of the guard character in the pattern.\n    guard_reverse_idx: usize,\n\n    /// Daniel Sunday's mini generalized delta2 shift table.\n    ///\n    /// We use a skip loop, so we only have to provide a shift\n    /// for the skip char (last char). This is why it is a mini\n    /// shift rule.\n    md2_shift: usize,\n}\n\nimpl BoyerMooreSearch {\n    /// Create a new string searcher, performing whatever\n    /// compilation steps are required.\n    fn new(pattern: Vec<u8>) -> Self {\n        debug_assert!(!pattern.is_empty());\n\n        let (g, gi) = Self::select_guard(pattern.as_slice());\n        let skip_table = Self::compile_skip_table(pattern.as_slice());\n        let md2_shift = Self::compile_md2_shift(pattern.as_slice());\n        BoyerMooreSearch {\n            pattern: pattern,\n            skip_table: skip_table,\n            guard: g,\n            guard_reverse_idx: gi,\n            md2_shift: md2_shift,\n        }\n    }\n\n    /// Find the pattern in `haystack`, returning the offset\n    /// of the start of the first occurrence of the pattern\n    /// in `haystack`.\n    #[inline]\n    fn find(&self, haystack: &[u8]) -> Option<usize> {\n        if haystack.len() < self.pattern.len() {\n            return None;\n        }\n\n        let mut window_end = self.pattern.len() - 1;\n\n        // Inspired by the grep source. It is a way\n        // to do correct loop unrolling without having to place\n        // a crashpad of terminating charicters at the end in\n        // the way described in the Fast String Searching paper.\n        const NUM_UNROLL: usize = 10;\n        // 1 for the initial position, and 1 for the md2 shift\n        let short_circut = (NUM_UNROLL + 2) * self.pattern.len();\n\n        if haystack.len() > short_circut {\n            // just 1 for the md2 shift\n            let backstop =\n                haystack.len() - ((NUM_UNROLL + 1) * self.pattern.len());\n            loop {\n                window_end =\n                    match self.skip_loop(haystack, window_end, backstop) {\n                        Some(i) => i,\n                        None => return None,\n                    };\n                if window_end >= backstop {\n                    break;\n                }\n\n                if self.check_match(haystack, window_end) {\n                    return Some(window_end - (self.pattern.len() - 1));\n                } else {\n                    let skip = self.skip_table[haystack[window_end] as usize];\n                    window_end +=\n                        if skip == 0 { self.md2_shift } else { skip };\n                    continue;\n                }\n            }\n        }\n\n        // now process the input after the backstop\n        while window_end < haystack.len() {\n            let mut skip = self.skip_table[haystack[window_end] as usize];\n            if skip == 0 {\n                if self.check_match(haystack, window_end) {\n                    return Some(window_end - (self.pattern.len() - 1));\n                } else {\n                    skip = self.md2_shift;\n                }\n            }\n            window_end += skip;\n        }\n\n        None\n    }\n\n    fn len(&self) -> usize {\n        return self.pattern.len();\n    }\n\n    /// The key heuristic behind which the BoyerMooreSearch lives.\n    ///\n    /// See `rust-lang/regex/issues/408`.\n    ///\n    /// Tuned Boyer-Moore is actually pretty slow! It turns out a handrolled\n    /// platform-specific memchr routine with a bit of frequency\n    /// analysis sprinkled on top actually wins most of the time.\n    /// However, there are a few cases where Tuned Boyer-Moore still\n    /// wins.\n    ///\n    /// If the haystack is random, frequency analysis doesn't help us,\n    /// so Boyer-Moore will win for sufficiently large needles.\n    /// Unfortunately, there is no obvious way to determine this\n    /// ahead of time.\n    ///\n    /// If the pattern itself consists of very common characters,\n    /// frequency analysis won't get us anywhere. The most extreme\n    /// example of this is a pattern like `eeeeeeeeeeeeeeee`. Fortunately,\n    /// this case is wholly determined by the pattern, so we can actually\n    /// implement the heuristic.\n    ///\n    /// A third case is if the pattern is sufficiently long. The idea\n    /// here is that once the pattern gets long enough the Tuned\n    /// Boyer-Moore skip loop will start making strides long enough\n    /// to beat the asm deep magic that is memchr.\n    fn should_use(pattern: &[u8]) -> bool {\n        // The minimum pattern length required to use TBM.\n        const MIN_LEN: usize = 9;\n        // The minimum frequency rank (lower is rarer) that every byte in the\n        // pattern must have in order to use TBM. That is, if the pattern\n        // contains _any_ byte with a lower rank, then TBM won't be used.\n        const MIN_CUTOFF: usize = 150;\n        // The maximum frequency rank for any byte.\n        const MAX_CUTOFF: usize = 255;\n        // The scaling factor used to determine the actual cutoff frequency\n        // to use (keeping in mind that the minimum frequency rank is bounded\n        // by MIN_CUTOFF). This scaling factor is an attempt to make TBM more\n        // likely to be used as the pattern grows longer. That is, longer\n        // patterns permit somewhat less frequent bytes than shorter patterns,\n        // under the assumption that TBM gets better as the pattern gets\n        // longer.\n        const LEN_CUTOFF_PROPORTION: usize = 4;\n\n        let scaled_rank = pattern.len().wrapping_mul(LEN_CUTOFF_PROPORTION);\n        let cutoff = cmp::max(\n            MIN_CUTOFF,\n            MAX_CUTOFF - cmp::min(MAX_CUTOFF, scaled_rank),\n        );\n        // The pattern must be long enough to be worthwhile. e.g., memchr will\n        // be faster on `e` because it is short even though e is quite common.\n        pattern.len() > MIN_LEN\n            // all the bytes must be more common than the cutoff.\n            && pattern.iter().all(|c| freq_rank(*c) >= cutoff)\n    }\n\n    /// Check to see if there is a match at the given position\n    #[inline]\n    fn check_match(&self, haystack: &[u8], window_end: usize) -> bool {\n        // guard test\n        if haystack[window_end - self.guard_reverse_idx] != self.guard {\n            return false;\n        }\n\n        // match loop\n        let window_start = window_end - (self.pattern.len() - 1);\n        for i in 0..self.pattern.len() {\n            if self.pattern[i] != haystack[window_start + i] {\n                return false;\n            }\n        }\n\n        true\n    }\n\n    /// Skip forward according to the shift table.\n    ///\n    /// Returns the offset of the next occurrence\n    /// of the last char in the pattern, or the none\n    /// if it never reappears. If `skip_loop` hits the backstop\n    /// it will leave early.\n    #[inline]\n    fn skip_loop(\n        &self,\n        haystack: &[u8],\n        mut window_end: usize,\n        backstop: usize,\n    ) -> Option<usize> {\n        let window_end_snapshot = window_end;\n        let skip_of = |we: usize| -> usize {\n            // Unsafe might make this faster, but the benchmarks\n            // were hard to interpret.\n            self.skip_table[haystack[we] as usize]\n        };\n\n        loop {\n            let mut skip = skip_of(window_end);\n            window_end += skip;\n            skip = skip_of(window_end);\n            window_end += skip;\n            if skip != 0 {\n                skip = skip_of(window_end);\n                window_end += skip;\n                skip = skip_of(window_end);\n                window_end += skip;\n                skip = skip_of(window_end);\n                window_end += skip;\n                if skip != 0 {\n                    skip = skip_of(window_end);\n                    window_end += skip;\n                    skip = skip_of(window_end);\n                    window_end += skip;\n                    skip = skip_of(window_end);\n                    window_end += skip;\n                    if skip != 0 {\n                        skip = skip_of(window_end);\n                        window_end += skip;\n                        skip = skip_of(window_end);\n                        window_end += skip;\n\n                        // If ten iterations did not make at least 16 words\n                        // worth of progress, we just fall back on memchr.\n                        if window_end - window_end_snapshot\n                            > 16 * mem::size_of::<usize>()\n                        {\n                            // Returning a window_end >= backstop will\n                            // immediatly break us out of the inner loop in\n                            // `find`.\n                            if window_end >= backstop {\n                                return Some(window_end);\n                            }\n\n                            continue; // we made enough progress\n                        } else {\n                            // In case we are already there, and so that\n                            // we will catch the guard char.\n                            window_end = window_end\n                                .checked_sub(1 + self.guard_reverse_idx)\n                                .unwrap_or(0);\n\n                            match memchr(self.guard, &haystack[window_end..]) {\n                                None => return None,\n                                Some(g_idx) => {\n                                    return Some(\n                                        window_end\n                                            + g_idx\n                                            + self.guard_reverse_idx,\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            return Some(window_end);\n        }\n    }\n\n    /// Compute the ufast skip table.\n    fn compile_skip_table(pattern: &[u8]) -> Vec<usize> {\n        let mut tab = vec![pattern.len(); 256];\n\n        // For every char in the pattern, we write a skip\n        // that will line us up with the rightmost occurrence.\n        //\n        // N.B. the sentinel (0) is written by the last\n        // loop iteration.\n        for (i, c) in pattern.iter().enumerate() {\n            tab[*c as usize] = (pattern.len() - 1) - i;\n        }\n\n        tab\n    }\n\n    /// Select the guard character based off of the precomputed\n    /// frequency table.\n    fn select_guard(pattern: &[u8]) -> (u8, usize) {\n        let mut rarest = pattern[0];\n        let mut rarest_rev_idx = pattern.len() - 1;\n        for (i, c) in pattern.iter().enumerate() {\n            if freq_rank(*c) < freq_rank(rarest) {\n                rarest = *c;\n                rarest_rev_idx = (pattern.len() - 1) - i;\n            }\n        }\n\n        (rarest, rarest_rev_idx)\n    }\n\n    /// If there is another occurrence of the skip\n    /// char, shift to it, otherwise just shift to\n    /// the next window.\n    fn compile_md2_shift(pattern: &[u8]) -> usize {\n        let shiftc = *pattern.last().unwrap();\n\n        // For a pattern of length 1 we will never apply the\n        // shift rule, so we use a poison value on the principle\n        // that failing fast is a good thing.\n        if pattern.len() == 1 {\n            return 0xDEADBEAF;\n        }\n\n        let mut i = pattern.len() - 2;\n        while i > 0 {\n            if pattern[i] == shiftc {\n                return (pattern.len() - 1) - i;\n            }\n            i -= 1;\n        }\n\n        // The skip char never re-occurs in the pattern, so\n        // we can just shift the whole window length.\n        pattern.len() - 1\n    }\n\n    fn approximate_size(&self) -> usize {\n        (self.pattern.len() * mem::size_of::<u8>())\n            + (256 * mem::size_of::<usize>()) // skip table\n    }\n}\n\nfn freq_rank(b: u8) -> usize {\n    BYTE_FREQUENCIES[b as usize] as usize\n}\n\n#[cfg(test)]\nmod tests {\n    use super::{BoyerMooreSearch, FreqyPacked};\n\n    //\n    // Unit Tests\n    //\n\n    // The \"hello, world\" of string searching\n    #[test]\n    fn bm_find_subs() {\n        let searcher = BoyerMooreSearch::new(Vec::from(&b\"pattern\"[..]));\n        let haystack = b\"I keep seeing patterns in this text\";\n        assert_eq!(14, searcher.find(haystack).unwrap());\n    }\n\n    #[test]\n    fn bm_find_no_subs() {\n        let searcher = BoyerMooreSearch::new(Vec::from(&b\"pattern\"[..]));\n        let haystack = b\"I keep seeing needles in this text\";\n        assert_eq!(None, searcher.find(haystack));\n    }\n\n    //\n    // Regression Tests\n    //\n\n    #[test]\n    fn bm_skip_reset_bug() {\n        let haystack = vec![0, 0, 0, 0, 0, 1, 1, 0];\n        let needle = vec![0, 1, 1, 0];\n\n        let searcher = BoyerMooreSearch::new(needle);\n        let offset = searcher.find(haystack.as_slice()).unwrap();\n        assert_eq!(4, offset);\n    }\n\n    #[test]\n    fn bm_backstop_underflow_bug() {\n        let haystack = vec![0, 0];\n        let needle = vec![0, 0];\n\n        let searcher = BoyerMooreSearch::new(needle);\n        let offset = searcher.find(haystack.as_slice()).unwrap();\n        assert_eq!(0, offset);\n    }\n\n    #[test]\n    fn bm_naive_off_by_one_bug() {\n        let haystack = vec![91];\n        let needle = vec![91];\n\n        let naive_offset = naive_find(&needle, &haystack).unwrap();\n        assert_eq!(0, naive_offset);\n    }\n\n    #[test]\n    fn bm_memchr_fallback_indexing_bug() {\n        let mut haystack = vec![\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let needle = vec![1, 1, 1, 1, 32, 32, 87];\n        let needle_start = haystack.len();\n        haystack.extend(needle.clone());\n\n        let searcher = BoyerMooreSearch::new(needle);\n        assert_eq!(needle_start, searcher.find(haystack.as_slice()).unwrap());\n    }\n\n    #[test]\n    fn bm_backstop_boundary() {\n        let haystack = b\"\\\n// aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ne_data.clone_created(entity_id, entity_to_add.entity_id);\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\"\n        .to_vec();\n        let needle = b\"clone_created\".to_vec();\n\n        let searcher = BoyerMooreSearch::new(needle);\n        let result = searcher.find(&haystack);\n        assert_eq!(Some(43), result);\n    }\n\n    #[test]\n    fn bm_win_gnu_indexing_bug() {\n        let haystack_raw = vec![\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let needle = vec![1, 1, 1, 1, 1, 1, 1];\n        let haystack = haystack_raw.as_slice();\n\n        BoyerMooreSearch::new(needle.clone()).find(haystack);\n    }\n\n    //\n    // QuickCheck Properties\n    //\n\n    use quickcheck::TestResult;\n\n    fn naive_find(needle: &[u8], haystack: &[u8]) -> Option<usize> {\n        assert!(needle.len() <= haystack.len());\n\n        for i in 0..(haystack.len() - (needle.len() - 1)) {\n            if haystack[i] == needle[0]\n                && &haystack[i..(i + needle.len())] == needle\n            {\n                return Some(i);\n            }\n        }\n\n        None\n    }\n\n    quickcheck! {\n        fn qc_bm_equals_nieve_find(pile1: Vec<u8>, pile2: Vec<u8>) -> TestResult {\n            if pile1.len() == 0 || pile2.len() == 0 {\n                return TestResult::discard();\n            }\n\n            let (needle, haystack) = if pile1.len() < pile2.len() {\n                (pile1, pile2.as_slice())\n            } else {\n                (pile2, pile1.as_slice())\n            };\n\n            let searcher = BoyerMooreSearch::new(needle.clone());\n            TestResult::from_bool(\n                searcher.find(haystack) == naive_find(&needle, haystack))\n        }\n\n        fn qc_bm_equals_single(pile1: Vec<u8>, pile2: Vec<u8>) -> TestResult {\n            if pile1.len() == 0 || pile2.len() == 0 {\n                return TestResult::discard();\n            }\n\n            let (needle, haystack) = if pile1.len() < pile2.len() {\n                (pile1, pile2.as_slice())\n            } else {\n                (pile2, pile1.as_slice())\n            };\n\n            let bm_searcher = BoyerMooreSearch::new(needle.clone());\n            let freqy_memchr = FreqyPacked::new(needle);\n            TestResult::from_bool(\n                bm_searcher.find(haystack) == freqy_memchr.find(haystack))\n        }\n\n        fn qc_bm_finds_trailing_needle(\n            haystack_pre: Vec<u8>,\n            needle: Vec<u8>\n        ) -> TestResult {\n            if needle.len() == 0 {\n                return TestResult::discard();\n            }\n\n            let mut haystack = haystack_pre.clone();\n            let searcher = BoyerMooreSearch::new(needle.clone());\n\n            if haystack.len() >= needle.len() &&\n                searcher.find(haystack.as_slice()).is_some() {\n                return TestResult::discard();\n            }\n\n            haystack.extend(needle.clone());\n\n            // What if the the tail of the haystack can start the\n            // needle?\n            let start = haystack_pre.len()\n                .checked_sub(needle.len())\n                .unwrap_or(0);\n            for i in 0..(needle.len() - 1) {\n                if searcher.find(&haystack[(i + start)..]).is_some() {\n                    return TestResult::discard();\n                }\n            }\n\n            TestResult::from_bool(\n                searcher.find(haystack.as_slice())\n                        .map(|x| x == haystack_pre.len())\n                        .unwrap_or(false))\n        }\n\n        // qc_equals_* is only testing the negative case as @burntsushi\n        // pointed out in https://github.com/rust-lang/regex/issues/446.\n        // This quickcheck prop represents an effort to force testing of\n        // the positive case. qc_bm_finds_first and qc_bm_finds_trailing_needle\n        // already check some of the positive cases, but they don't cover\n        // cases where the needle is in the middle of haystack. This prop\n        // fills that hole.\n        fn qc_bm_finds_subslice(\n            haystack: Vec<u8>,\n            needle_start: usize,\n            needle_length: usize\n        ) -> TestResult {\n            if haystack.len() == 0 {\n                return TestResult::discard();\n            }\n\n            let needle_start = needle_start % haystack.len();\n            let needle_length = needle_length % (haystack.len() - needle_start);\n\n            if needle_length == 0 {\n                return TestResult::discard();\n            }\n\n            let needle = &haystack[needle_start..(needle_start + needle_length)];\n\n            let bm_searcher = BoyerMooreSearch::new(needle.to_vec());\n\n            let start = naive_find(&needle, &haystack);\n            match start {\n                None => TestResult::from_bool(false),\n                Some(nf_start) =>\n                    TestResult::from_bool(\n                        nf_start <= needle_start\n                            && bm_searcher.find(&haystack) == start\n                    )\n            }\n        }\n\n        fn qc_bm_finds_first(needle: Vec<u8>) -> TestResult {\n            if needle.len() == 0 {\n                return TestResult::discard();\n            }\n\n            let mut haystack = needle.clone();\n            let searcher = BoyerMooreSearch::new(needle.clone());\n            haystack.extend(needle);\n\n            TestResult::from_bool(\n                searcher.find(haystack.as_slice())\n                        .map(|x| x == 0)\n                        .unwrap_or(false))\n        }\n    }\n}\n","traces":[{"line":46,"address":[4687888],"length":1,"stats":{"Line":14},"fn_name":"empty"},{"line":47,"address":[4687906],"length":1,"stats":{"Line":14},"fn_name":null},{"line":51,"address":[4687984,4688048],"length":1,"stats":{"Line":13},"fn_name":"prefixes"},{"line":52,"address":[4688002],"length":1,"stats":{"Line":13},"fn_name":null},{"line":53,"address":[4688063],"length":1,"stats":{"Line":9},"fn_name":null},{"line":57,"address":[4688256,4688320],"length":1,"stats":{"Line":9},"fn_name":"suffixes"},{"line":58,"address":[4688274],"length":1,"stats":{"Line":9},"fn_name":null},{"line":59,"address":[4688335],"length":1,"stats":{"Line":9},"fn_name":null},{"line":62,"address":[4688528,4688584],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":63,"address":[4688546,4688603],"length":1,"stats":{"Line":28},"fn_name":null},{"line":66,"address":[4688612,4688663],"length":1,"stats":{"Line":28},"fn_name":null},{"line":67,"address":[4688750,4688712],"length":1,"stats":{"Line":28},"fn_name":null},{"line":78,"address":[4689024],"length":1,"stats":{"Line":9},"fn_name":"complete"},{"line":79,"address":[4689033,4689097],"length":1,"stats":{"Line":12},"fn_name":null},{"line":84,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[4437032,4368128,4370241,4438350,4370145,4368203,4305132,4305831,4436333,4305207,4438446,4242066,4436408,4244008,4244104,4368827,4307245,4242690,4241991,4307149],"length":1,"stats":{"Line":69},"fn_name":null},{"line":87,"address":[4305006,4305139,4368135,4436340,4241865,4436207,4368002,4241998],"length":1,"stats":{"Line":25},"fn_name":null},{"line":88,"address":[4305818,4436421,4305220,4242677,4368216,4242079,4437019,4368814],"length":1,"stats":{"Line":64},"fn_name":null},{"line":89,"address":[4242703,4437045,4243971,4305844,4370108,4307112,4438313,4368840],"length":1,"stats":{"Line":59},"fn_name":null},{"line":90,"address":[4438363,4370158,4244021,4307162],"length":1,"stats":{"Line":18},"fn_name":null},{"line":91,"address":[4244114,4370251,4438456,4307255],"length":1,"stats":{"Line":16},"fn_name":null},{"line":92,"address":[4307269,4438470,4244128,4370265],"length":1,"stats":{"Line":34},"fn_name":null},{"line":94,"address":[4436266,4368061,4241924,4305065],"length":1,"stats":{"Line":18},"fn_name":null},{"line":95,"address":[4436280,4241938,4305079,4368075],"length":1,"stats":{"Line":34},"fn_name":null},{"line":101,"address":[4689120],"length":1,"stats":{"Line":3},"fn_name":"find_start"},{"line":102,"address":[4689312,4689614,4689154],"length":1,"stats":{"Line":4},"fn_name":null},{"line":103,"address":[4689378],"length":1,"stats":{"Line":3},"fn_name":null},{"line":104,"address":[4689470],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[4689482,4689441],"length":1,"stats":{"Line":6},"fn_name":null},{"line":107,"address":[4689619,4689660],"length":1,"stats":{"Line":6},"fn_name":null},{"line":110,"address":[4689300],"length":1,"stats":{"Line":1},"fn_name":null},{"line":114,"address":[4689728],"length":1,"stats":{"Line":2},"fn_name":"find_end"},{"line":115,"address":[4689938,4689762,4690271],"length":1,"stats":{"Line":2},"fn_name":null},{"line":116,"address":[4690004],"length":1,"stats":{"Line":2},"fn_name":null},{"line":117,"address":[4690090],"length":1,"stats":{"Line":2},"fn_name":null},{"line":119,"address":[4690095,4690451,4690077],"length":1,"stats":{"Line":4},"fn_name":null},{"line":120,"address":[4690286,4690481,4690312,4690511],"length":1,"stats":{"Line":4},"fn_name":null},{"line":123,"address":[4689926],"length":1,"stats":{"Line":2},"fn_name":null},{"line":127,"address":[4690512],"length":1,"stats":{"Line":3},"fn_name":"iter"},{"line":128,"address":[4690707,4690628,4690923,4690614,4690780,4690853],"length":1,"stats":{"Line":7},"fn_name":null},{"line":129,"address":[4690621,4690527],"length":1,"stats":{"Line":3},"fn_name":null},{"line":130,"address":[4690638],"length":1,"stats":{"Line":3},"fn_name":null},{"line":131,"address":[4690717],"length":1,"stats":{"Line":2},"fn_name":null},{"line":132,"address":[4690790],"length":1,"stats":{"Line":2},"fn_name":null},{"line":133,"address":[4690860],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[4690576,4690935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[4690976],"length":1,"stats":{"Line":2},"fn_name":"lcp"},{"line":140,"address":[4690981],"length":1,"stats":{"Line":2},"fn_name":null},{"line":144,"address":[4691008],"length":1,"stats":{"Line":8},"fn_name":"lcs"},{"line":145,"address":[4691013],"length":1,"stats":{"Line":8},"fn_name":null},{"line":149,"address":[4691040],"length":1,"stats":{"Line":13},"fn_name":"is_empty"},{"line":150,"address":[4691049],"length":1,"stats":{"Line":13},"fn_name":null},{"line":154,"address":[4691088],"length":1,"stats":{"Line":13},"fn_name":"len"},{"line":156,"address":[4691172,4691210,4691161,4691232,4691221,4691263],"length":1,"stats":{"Line":41},"fn_name":null},{"line":157,"address":[4691163,4691097],"length":1,"stats":{"Line":21},"fn_name":null},{"line":158,"address":[4691179],"length":1,"stats":{"Line":9},"fn_name":null},{"line":159,"address":[4691212],"length":1,"stats":{"Line":8},"fn_name":null},{"line":160,"address":[4691223],"length":1,"stats":{"Line":8},"fn_name":null},{"line":161,"address":[4691239],"length":1,"stats":{"Line":8},"fn_name":null},{"line":162,"address":[4691134],"length":1,"stats":{"Line":9},"fn_name":null},{"line":167,"address":[4691280],"length":1,"stats":{"Line":9},"fn_name":"approximate_size"},{"line":169,"address":[4691356,4691491,4691398,4691367,4691429,4691460],"length":1,"stats":{"Line":14},"fn_name":null},{"line":170,"address":[4691289,4691358],"length":1,"stats":{"Line":17},"fn_name":null},{"line":171,"address":[4691374],"length":1,"stats":{"Line":2},"fn_name":null},{"line":172,"address":[4691405],"length":1,"stats":{"Line":2},"fn_name":null},{"line":173,"address":[4691436],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[4691467],"length":1,"stats":{"Line":2},"fn_name":null},{"line":175,"address":[4691326],"length":1,"stats":{"Line":2},"fn_name":null},{"line":181,"address":[4691520],"length":1,"stats":{"Line":13},"fn_name":"prefixes"},{"line":182,"address":[4691538],"length":1,"stats":{"Line":13},"fn_name":null},{"line":183,"address":[4691566],"length":1,"stats":{"Line":9},"fn_name":null},{"line":186,"address":[4691632],"length":1,"stats":{"Line":9},"fn_name":"suffixes"},{"line":187,"address":[4691650],"length":1,"stats":{"Line":9},"fn_name":null},{"line":188,"address":[4691678],"length":1,"stats":{"Line":9},"fn_name":null},{"line":191,"address":[4691872,4691744],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":192,"address":[4691903,4691770,4691947],"length":1,"stats":{"Line":27},"fn_name":null},{"line":193,"address":[4691995],"length":1,"stats":{"Line":8},"fn_name":null},{"line":195,"address":[4692028,4691961],"length":1,"stats":{"Line":18},"fn_name":null},{"line":202,"address":[4692058],"length":1,"stats":{"Line":8},"fn_name":null},{"line":204,"address":[4692042],"length":1,"stats":{"Line":9},"fn_name":null},{"line":205,"address":[4692105],"length":1,"stats":{"Line":9},"fn_name":null},{"line":207,"address":[4692070,4692228],"length":1,"stats":{"Line":16},"fn_name":null},{"line":208,"address":[4692315,4694158],"length":1,"stats":{"Line":8},"fn_name":null},{"line":209,"address":[4692493],"length":1,"stats":{"Line":8},"fn_name":null},{"line":210,"address":[4692749,4692625],"length":1,"stats":{"Line":16},"fn_name":null},{"line":212,"address":[4692762,4692559],"length":1,"stats":{"Line":16},"fn_name":null},{"line":216,"address":[4692833,4692277],"length":1,"stats":{"Line":16},"fn_name":null},{"line":217,"address":[4692856,4692958],"length":1,"stats":{"Line":16},"fn_name":null},{"line":218,"address":[4692966,4692918],"length":1,"stats":{"Line":16},"fn_name":null},{"line":219,"address":[4693060],"length":1,"stats":{"Line":8},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[4693225,4693166,4693283],"length":1,"stats":{"Line":24},"fn_name":null},{"line":223,"address":[4693356],"length":1,"stats":{"Line":8},"fn_name":null},{"line":226,"address":[4693579],"length":1,"stats":{"Line":8},"fn_name":null},{"line":227,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[4694272],"length":1,"stats":{"Line":3},"fn_name":"next"},{"line":247,"address":[4694393,4694407,4694737,4694951,4695219,4695445],"length":1,"stats":{"Line":5},"fn_name":null},{"line":248,"address":[4694287,4694395],"length":1,"stats":{"Line":3},"fn_name":null},{"line":249,"address":[4694420],"length":1,"stats":{"Line":3},"fn_name":null},{"line":250,"address":[4694442,4694585],"length":1,"stats":{"Line":5},"fn_name":null},{"line":251,"address":[4694573],"length":1,"stats":{"Line":2},"fn_name":null},{"line":253,"address":[4694499,4694605],"length":1,"stats":{"Line":6},"fn_name":null},{"line":254,"address":[4694637],"length":1,"stats":{"Line":3},"fn_name":null},{"line":255,"address":[4694713],"length":1,"stats":{"Line":3},"fn_name":null},{"line":258,"address":[4694750],"length":1,"stats":{"Line":2},"fn_name":null},{"line":259,"address":[4694772,4694875],"length":1,"stats":{"Line":3},"fn_name":null},{"line":260,"address":[4694863],"length":1,"stats":{"Line":1},"fn_name":null},{"line":262,"address":[4694885,4694829],"length":1,"stats":{"Line":4},"fn_name":null},{"line":263,"address":[4694909],"length":1,"stats":{"Line":2},"fn_name":null},{"line":264,"address":[4694935],"length":1,"stats":{"Line":2},"fn_name":null},{"line":267,"address":[4694964],"length":1,"stats":{"Line":0},"fn_name":null},{"line":268,"address":[4694986,4695066],"length":1,"stats":{"Line":0},"fn_name":null},{"line":269,"address":[4695054],"length":1,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[4695525,4695083,4695027,4695498],"length":1,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[4695094],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[4695161],"length":1,"stats":{"Line":0},"fn_name":null},{"line":276,"address":[4694338],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[4695231,4694360,4695288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[4695276],"length":1,"stats":{"Line":0},"fn_name":null},{"line":280,"address":[4695249,4695471,4695308],"length":1,"stats":{"Line":0},"fn_name":null},{"line":281,"address":[4695319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":282,"address":[4695389],"length":1,"stats":{"Line":0},"fn_name":null},{"line":298,"address":[4695576,4695536],"length":1,"stats":{"Line":13},"fn_name":"new"},{"line":300,"address":[4695545],"length":1,"stats":{"Line":13},"fn_name":null},{"line":301,"address":[4695588],"length":1,"stats":{"Line":13},"fn_name":null},{"line":307,"address":[4695712,4695761],"length":1,"stats":{"Line":13},"fn_name":"prefixes"},{"line":308,"address":[4695754],"length":1,"stats":{"Line":13},"fn_name":null},{"line":309,"address":[4696417,4695856,4695955,4695776],"length":1,"stats":{"Line":35},"fn_name":null},{"line":310,"address":[4695997,4696090],"length":1,"stats":{"Line":18},"fn_name":null},{"line":311,"address":[4696415,4696124,4696069],"length":1,"stats":{"Line":27},"fn_name":null},{"line":312,"address":[4696243],"length":1,"stats":{"Line":9},"fn_name":null},{"line":313,"address":[4696304],"length":1,"stats":{"Line":9},"fn_name":null},{"line":314,"address":[4696318],"length":1,"stats":{"Line":8},"fn_name":null},{"line":316,"address":[4696330],"length":1,"stats":{"Line":9},"fn_name":null},{"line":317,"address":[4696359],"length":1,"stats":{"Line":9},"fn_name":null},{"line":321,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":324,"address":[4696448,4696497],"length":1,"stats":{"Line":9},"fn_name":"suffixes"},{"line":325,"address":[4696490],"length":1,"stats":{"Line":9},"fn_name":null},{"line":326,"address":[4696613,4696512,4696721,4697332],"length":1,"stats":{"Line":27},"fn_name":null},{"line":327,"address":[4696871,4696763],"length":1,"stats":{"Line":18},"fn_name":null},{"line":328,"address":[4697330,4696844,4696908],"length":1,"stats":{"Line":27},"fn_name":null},{"line":329,"address":[4697156],"length":1,"stats":{"Line":9},"fn_name":null},{"line":330,"address":[4697217],"length":1,"stats":{"Line":9},"fn_name":null},{"line":331,"address":[4697231],"length":1,"stats":{"Line":8},"fn_name":null},{"line":333,"address":[4697243],"length":1,"stats":{"Line":9},"fn_name":null},{"line":334,"address":[4697272],"length":1,"stats":{"Line":9},"fn_name":null},{"line":338,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[4436700,4305499,4436829,4368276,4242139,4436481,4368624,4436624,4305423,4305406,4242265,4242487,4305280,4368495,4436607,4242358,4368419,4305628,4368402,4242282],"length":1,"stats":{"Line":80},"fn_name":null},{"line":345,"address":[4436612,4242179,4305411,4368407,4368316,4305320,4436521,4242270],"length":1,"stats":{"Line":24},"fn_name":null},{"line":346,"address":[4436637,4368432,4242295,4305436],"length":1,"stats":{"Line":25},"fn_name":null},{"line":347,"address":[4368508,4305512,4436713,4242371],"length":1,"stats":{"Line":15},"fn_name":null},{"line":348,"address":[4436842,4368637,4305641,4242500],"length":1,"stats":{"Line":10},"fn_name":null},{"line":349,"address":[4242244,4305385,4368381,4436586],"length":1,"stats":{"Line":16},"fn_name":null},{"line":354,"address":[4697360],"length":1,"stats":{"Line":8},"fn_name":"_find"},{"line":355,"address":[4697671,4697554,4697396],"length":1,"stats":{"Line":16},"fn_name":null},{"line":356,"address":[4697635],"length":1,"stats":{"Line":8},"fn_name":null},{"line":357,"address":[4697681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":360,"address":[4697540],"length":1,"stats":{"Line":8},"fn_name":null},{"line":363,"address":[4697728],"length":1,"stats":{"Line":2},"fn_name":"approximate_size"},{"line":364,"address":[4697912,4698002,4697972,4697888,4697794,4697737],"length":1,"stats":{"Line":6},"fn_name":null},{"line":365,"address":[4697817,4697942,4697860],"length":1,"stats":{"Line":4},"fn_name":null},{"line":407,"address":[4698016,4698071],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":408,"address":[4698093,4698026],"length":1,"stats":{"Line":28},"fn_name":null},{"line":409,"address":[4698157],"length":1,"stats":{"Line":14},"fn_name":null},{"line":414,"address":[4698115,4698204],"length":1,"stats":{"Line":18},"fn_name":null},{"line":415,"address":[4698213],"length":1,"stats":{"Line":9},"fn_name":null},{"line":416,"address":[4698613,4698262,4698728],"length":1,"stats":{"Line":18},"fn_name":null},{"line":417,"address":[4698643],"length":1,"stats":{"Line":9},"fn_name":null},{"line":418,"address":[4698721],"length":1,"stats":{"Line":9},"fn_name":null},{"line":421,"address":[4698741,4698871,4699078,4698578],"length":1,"stats":{"Line":27},"fn_name":null},{"line":422,"address":[4698961,4699076,4698906],"length":1,"stats":{"Line":27},"fn_name":null},{"line":423,"address":[4698954],"length":1,"stats":{"Line":9},"fn_name":null},{"line":424,"address":[4698963,4698936],"length":1,"stats":{"Line":18},"fn_name":null},{"line":425,"address":[4699069],"length":1,"stats":{"Line":9},"fn_name":null},{"line":430,"address":[4699083,4698833],"length":1,"stats":{"Line":40},"fn_name":null},{"line":431,"address":[4699241],"length":1,"stats":{"Line":30},"fn_name":null},{"line":433,"address":[4699422],"length":1,"stats":{"Line":10},"fn_name":null},{"line":444,"address":[4699648],"length":1,"stats":{"Line":14},"fn_name":"empty"},{"line":446,"address":[4699655],"length":1,"stats":{"Line":14},"fn_name":null},{"line":456,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":457,"address":[4222313],"length":1,"stats":{"Line":27},"fn_name":null},{"line":458,"address":[4222392],"length":1,"stats":{"Line":27},"fn_name":null},{"line":459,"address":[4222614],"length":1,"stats":{"Line":12},"fn_name":null},{"line":461,"address":[4222596],"length":1,"stats":{"Line":27},"fn_name":null},{"line":462,"address":[4222612,4222631,4223604],"length":1,"stats":{"Line":75},"fn_name":null},{"line":463,"address":[4222720,4223609,4222997,4222940],"length":1,"stats":{"Line":81},"fn_name":null},{"line":464,"address":[4222972,4222909],"length":1,"stats":{"Line":42},"fn_name":null},{"line":465,"address":[4222924],"length":1,"stats":{"Line":27},"fn_name":null},{"line":467,"address":[4223641,4223005],"length":1,"stats":{"Line":27},"fn_name":null},{"line":468,"address":[4223051,4223673],"length":1,"stats":{"Line":27},"fn_name":null},{"line":469,"address":[4223126],"length":1,"stats":{"Line":29},"fn_name":null},{"line":470,"address":[4223349],"length":1,"stats":{"Line":2},"fn_name":null},{"line":472,"address":[4223182],"length":1,"stats":{"Line":29},"fn_name":null},{"line":473,"address":[4223366,4223303,4223705],"length":1,"stats":{"Line":57},"fn_name":null},{"line":474,"address":[4223566],"length":1,"stats":{"Line":29},"fn_name":null},{"line":476,"address":[4223528,4223735,4223596],"length":1,"stats":{"Line":42},"fn_name":null},{"line":478,"address":[4222703],"length":1,"stats":{"Line":0},"fn_name":null},{"line":482,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":483,"address":[4459253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":484,"address":[4459344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":486,"address":[4459468,4459300,4459369],"length":1,"stats":{"Line":0},"fn_name":null},{"line":489,"address":[4699760],"length":1,"stats":{"Line":10},"fn_name":"len"},{"line":490,"address":[4699769],"length":1,"stats":{"Line":10},"fn_name":null},{"line":493,"address":[4699792],"length":1,"stats":{"Line":8},"fn_name":"char_len"},{"line":494,"address":[4699797],"length":1,"stats":{"Line":8},"fn_name":null},{"line":497,"address":[4699808],"length":1,"stats":{"Line":2},"fn_name":"approximate_size"},{"line":498,"address":[4699817,4699913,4699857,4699883],"length":1,"stats":{"Line":4},"fn_name":null},{"line":502,"address":[4699973,4699920],"length":1,"stats":{"Line":10},"fn_name":"char_len_lossy"},{"line":503,"address":[4699934,4699990,4700057],"length":1,"stats":{"Line":32},"fn_name":null},{"line":572,"address":[4700155,4700112],"length":1,"stats":{"Line":9},"fn_name":"new"},{"line":573,"address":[4700219,4700122,4700174],"length":1,"stats":{"Line":18},"fn_name":null},{"line":575,"address":[4700262,4700202],"length":1,"stats":{"Line":18},"fn_name":null},{"line":576,"address":[4700325],"length":1,"stats":{"Line":9},"fn_name":null},{"line":577,"address":[4700369,4700429],"length":1,"stats":{"Line":19},"fn_name":null},{"line":591,"address":[4700688],"length":1,"stats":{"Line":7},"fn_name":"find"},{"line":592,"address":[4700727],"length":1,"stats":{"Line":8},"fn_name":null},{"line":593,"address":[4700836],"length":1,"stats":{"Line":0},"fn_name":null},{"line":596,"address":[4702231,4700817,4700880],"length":1,"stats":{"Line":16},"fn_name":null},{"line":604,"address":[4700930,4702261],"length":1,"stats":{"Line":8},"fn_name":null},{"line":606,"address":[4701017,4701396],"length":1,"stats":{"Line":9},"fn_name":null},{"line":608,"address":[4701073,4702291],"length":1,"stats":{"Line":1},"fn_name":null},{"line":609,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":610,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":611,"address":[4701315],"length":1,"stats":{"Line":1},"fn_name":null},{"line":612,"address":[4701205,4701297],"length":1,"stats":{"Line":1},"fn_name":null},{"line":613,"address":[4701266,4701299],"length":1,"stats":{"Line":2},"fn_name":null},{"line":614,"address":[4701343,4701283],"length":1,"stats":{"Line":2},"fn_name":null},{"line":616,"address":[4701331],"length":1,"stats":{"Line":1},"fn_name":null},{"line":617,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":620,"address":[4701350,4701408],"length":1,"stats":{"Line":2},"fn_name":null},{"line":621,"address":[4702351,4701482],"length":1,"stats":{"Line":1},"fn_name":null},{"line":623,"address":[4701422,4702411,4701640],"length":1,"stats":{"Line":2},"fn_name":null},{"line":624,"address":[4701728,4702445],"length":1,"stats":{"Line":1},"fn_name":null},{"line":625,"address":[4701682],"length":1,"stats":{"Line":1},"fn_name":null},{"line":626,"address":[4701774],"length":1,"stats":{"Line":1},"fn_name":null},{"line":632,"address":[4701779,4702226],"length":1,"stats":{"Line":11},"fn_name":null},{"line":633,"address":[4702475,4701861],"length":1,"stats":{"Line":7},"fn_name":null},{"line":634,"address":[4701970,4702057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":635,"address":[4701986],"length":1,"stats":{"Line":7},"fn_name":null},{"line":636,"address":[4702506,4702059],"length":1,"stats":{"Line":7},"fn_name":null},{"line":638,"address":[4702045],"length":1,"stats":{"Line":1},"fn_name":null},{"line":641,"address":[4702596,4702566,4702182],"length":1,"stats":{"Line":4},"fn_name":null},{"line":644,"address":[4701836],"length":1,"stats":{"Line":1},"fn_name":null},{"line":647,"address":[4702608],"length":1,"stats":{"Line":6},"fn_name":"len"},{"line":648,"address":[4702617],"length":1,"stats":{"Line":6},"fn_name":null},{"line":676,"address":[4702640],"length":1,"stats":{"Line":8},"fn_name":"should_use"},{"line":694,"address":[4702667],"length":1,"stats":{"Line":8},"fn_name":null},{"line":696,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":697,"address":[4702706,4702915,4702945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":701,"address":[4702909,4702788,4702868],"length":1,"stats":{"Line":24},"fn_name":null},{"line":703,"address":[4702815,4702876],"length":1,"stats":{"Line":32},"fn_name":null},{"line":708,"address":[4702960],"length":1,"stats":{"Line":7},"fn_name":"check_match"},{"line":710,"address":[4702999,4703555],"length":1,"stats":{"Line":7},"fn_name":null},{"line":711,"address":[4703115],"length":1,"stats":{"Line":1},"fn_name":null},{"line":715,"address":[4703148,4703613,4703099],"length":1,"stats":{"Line":14},"fn_name":null},{"line":716,"address":[4703379,4703219,4703537],"length":1,"stats":{"Line":14},"fn_name":null},{"line":717,"address":[4703425,4703673],"length":1,"stats":{"Line":7},"fn_name":null},{"line":718,"address":[4703542],"length":1,"stats":{"Line":1},"fn_name":null},{"line":722,"address":[4703366],"length":1,"stats":{"Line":7},"fn_name":null},{"line":732,"address":[4703744],"length":1,"stats":{"Line":1},"fn_name":"skip_loop"},{"line":738,"address":[4703791],"length":1,"stats":{"Line":1},"fn_name":null},{"line":739,"address":[4703807],"length":1,"stats":{"Line":2},"fn_name":null},{"line":742,"address":[4724990,4725103,4725131],"length":1,"stats":{"Line":1},"fn_name":null},{"line":745,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":746,"address":[4703855],"length":1,"stats":{"Line":1},"fn_name":null},{"line":747,"address":[4703900,4705604],"length":1,"stats":{"Line":1},"fn_name":null},{"line":748,"address":[4703952],"length":1,"stats":{"Line":1},"fn_name":null},{"line":749,"address":[4704013,4705634],"length":1,"stats":{"Line":1},"fn_name":null},{"line":750,"address":[4704065,4705569],"length":1,"stats":{"Line":2},"fn_name":null},{"line":751,"address":[4704081],"length":1,"stats":{"Line":1},"fn_name":null},{"line":752,"address":[4704142,4705664],"length":1,"stats":{"Line":1},"fn_name":null},{"line":753,"address":[4704194],"length":1,"stats":{"Line":1},"fn_name":null},{"line":754,"address":[4705694,4704255],"length":1,"stats":{"Line":1},"fn_name":null},{"line":755,"address":[4704307],"length":1,"stats":{"Line":1},"fn_name":null},{"line":756,"address":[4705724,4704368],"length":1,"stats":{"Line":1},"fn_name":null},{"line":757,"address":[4704786,4704420],"length":1,"stats":{"Line":3},"fn_name":null},{"line":758,"address":[4704436],"length":1,"stats":{"Line":1},"fn_name":null},{"line":759,"address":[4704497,4705754],"length":1,"stats":{"Line":1},"fn_name":null},{"line":760,"address":[4704549],"length":1,"stats":{"Line":1},"fn_name":null},{"line":761,"address":[4704610,4705784],"length":1,"stats":{"Line":1},"fn_name":null},{"line":762,"address":[4704662],"length":1,"stats":{"Line":1},"fn_name":null},{"line":763,"address":[4704723,4705814],"length":1,"stats":{"Line":1},"fn_name":null},{"line":764,"address":[4704775],"length":1,"stats":{"Line":1},"fn_name":null},{"line":765,"address":[4704791],"length":1,"stats":{"Line":1},"fn_name":null},{"line":766,"address":[4704852,4705844],"length":1,"stats":{"Line":1},"fn_name":null},{"line":767,"address":[4704904],"length":1,"stats":{"Line":1},"fn_name":null},{"line":768,"address":[4705874,4704959],"length":1,"stats":{"Line":1},"fn_name":null},{"line":772,"address":[4705110,4705005,4705904],"length":1,"stats":{"Line":2},"fn_name":null},{"line":773,"address":[4705073,4705934],"length":1,"stats":{"Line":1},"fn_name":null},{"line":778,"address":[4705173],"length":1,"stats":{"Line":0},"fn_name":null},{"line":779,"address":[4705188],"length":1,"stats":{"Line":0},"fn_name":null},{"line":782,"address":[4705183],"length":1,"stats":{"Line":0},"fn_name":null},{"line":786,"address":[4705115,4705252],"length":1,"stats":{"Line":2},"fn_name":null},{"line":787,"address":[4705964,4705123],"length":1,"stats":{"Line":1},"fn_name":null},{"line":788,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":790,"address":[4705489,4705311],"length":1,"stats":{"Line":1},"fn_name":null},{"line":791,"address":[4705431,4705491],"length":1,"stats":{"Line":2},"fn_name":null},{"line":792,"address":[4705446],"length":1,"stats":{"Line":1},"fn_name":null},{"line":793,"address":[4705547],"length":1,"stats":{"Line":1},"fn_name":null},{"line":794,"address":[4705462,4705994,4706054,4705521],"length":1,"stats":{"Line":2},"fn_name":null},{"line":795,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":796,"address":[4705508],"length":1,"stats":{"Line":1},"fn_name":null},{"line":805,"address":[4705571],"length":1,"stats":{"Line":1},"fn_name":null},{"line":810,"address":[4706064,4706129],"length":1,"stats":{"Line":10},"fn_name":"compile_skip_table"},{"line":811,"address":[4706095,4706154],"length":1,"stats":{"Line":20},"fn_name":null},{"line":818,"address":[4706164,4706237,4706407,4706622],"length":1,"stats":{"Line":30},"fn_name":null},{"line":819,"address":[4706647,4706473],"length":1,"stats":{"Line":10},"fn_name":null},{"line":822,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":827,"address":[4706720],"length":1,"stats":{"Line":9},"fn_name":"select_guard"},{"line":828,"address":[4707293,4706747],"length":1,"stats":{"Line":9},"fn_name":null},{"line":829,"address":[4706787,4707320],"length":1,"stats":{"Line":9},"fn_name":null},{"line":830,"address":[4707066,4707288,4706857],"length":1,"stats":{"Line":20},"fn_name":null},{"line":831,"address":[4707132],"length":1,"stats":{"Line":10},"fn_name":null},{"line":832,"address":[4707195],"length":1,"stats":{"Line":9},"fn_name":null},{"line":833,"address":[4707214,4707410,4707350],"length":1,"stats":{"Line":9},"fn_name":null},{"line":837,"address":[4707025],"length":1,"stats":{"Line":9},"fn_name":null},{"line":843,"address":[4707424],"length":1,"stats":{"Line":10},"fn_name":"compile_md2_shift"},{"line":844,"address":[4707457],"length":1,"stats":{"Line":10},"fn_name":null},{"line":849,"address":[4707520],"length":1,"stats":{"Line":10},"fn_name":null},{"line":850,"address":[4707565,4707596],"length":1,"stats":{"Line":10},"fn_name":null},{"line":853,"address":[4707552,4707603,4707923],"length":1,"stats":{"Line":20},"fn_name":null},{"line":854,"address":[4707872,4707639],"length":1,"stats":{"Line":19},"fn_name":null},{"line":855,"address":[4707676,4707953],"length":1,"stats":{"Line":9},"fn_name":null},{"line":856,"address":[4707772,4707981],"length":1,"stats":{"Line":9},"fn_name":null},{"line":858,"address":[4707864,4708041,4707729],"length":1,"stats":{"Line":18},"fn_name":null},{"line":863,"address":[4707660,4708101,4707882,4708071],"length":1,"stats":{"Line":2},"fn_name":null},{"line":866,"address":[4708112],"length":1,"stats":{"Line":0},"fn_name":"approximate_size"},{"line":867,"address":[4708320,4708161,4708121,4708260,4708350,4708236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":868,"address":[4708290,4708203],"length":1,"stats":{"Line":0},"fn_name":null},{"line":872,"address":[4708352],"length":1,"stats":{"Line":10},"fn_name":"freq_rank"},{"line":873,"address":[4708451,4708367,4708479],"length":1,"stats":{"Line":10},"fn_name":null},{"line":886,"address":[4213029,4212976],"length":1,"stats":{"Line":3},"fn_name":"bm_find_subs"},{"line":887,"address":[4212997,4213044],"length":1,"stats":{"Line":2},"fn_name":null},{"line":888,"address":[4213091],"length":1,"stats":{"Line":1},"fn_name":null},{"line":889,"address":[4213207,4213324,4213106],"length":1,"stats":{"Line":2},"fn_name":null},{"line":893,"address":[4213730,4213680],"length":1,"stats":{"Line":3},"fn_name":"bm_find_no_subs"},{"line":894,"address":[4213701,4213745],"length":1,"stats":{"Line":2},"fn_name":null},{"line":895,"address":[4213789],"length":1,"stats":{"Line":1},"fn_name":null},{"line":896,"address":[4213804,4213995,4214019],"length":1,"stats":{"Line":2},"fn_name":null},{"line":904,"address":[4214448,4214368],"length":1,"stats":{"Line":3},"fn_name":"bm_skip_reset_bug"},{"line":905,"address":[4214375],"length":1,"stats":{"Line":1},"fn_name":null},{"line":906,"address":[4214473],"length":1,"stats":{"Line":1},"fn_name":null},{"line":908,"address":[4214550],"length":1,"stats":{"Line":1},"fn_name":null},{"line":909,"address":[4214613,4214683],"length":1,"stats":{"Line":2},"fn_name":null},{"line":910,"address":[4214840,4214729],"length":1,"stats":{"Line":1},"fn_name":null},{"line":914,"address":[4215216,4215272],"length":1,"stats":{"Line":3},"fn_name":"bm_backstop_underflow_bug"},{"line":915,"address":[4215223],"length":1,"stats":{"Line":1},"fn_name":null},{"line":916,"address":[4215297],"length":1,"stats":{"Line":1},"fn_name":null},{"line":918,"address":[4215366],"length":1,"stats":{"Line":1},"fn_name":null},{"line":919,"address":[4215429,4215499],"length":1,"stats":{"Line":2},"fn_name":null},{"line":920,"address":[4215656,4215545],"length":1,"stats":{"Line":1},"fn_name":null},{"line":924,"address":[4216032,4216085],"length":1,"stats":{"Line":3},"fn_name":"bm_naive_off_by_one_bug"},{"line":925,"address":[4216039],"length":1,"stats":{"Line":1},"fn_name":null},{"line":926,"address":[4216105],"length":1,"stats":{"Line":1},"fn_name":null},{"line":928,"address":[4216305,4216173],"length":1,"stats":{"Line":2},"fn_name":null},{"line":929,"address":[4216483,4216368],"length":1,"stats":{"Line":1},"fn_name":null},{"line":933,"address":[4217312,4216864],"length":1,"stats":{"Line":3},"fn_name":"bm_memchr_fallback_indexing_bug"},{"line":934,"address":[4216871],"length":1,"stats":{"Line":1},"fn_name":null},{"line":941,"address":[4217426,4217337],"length":1,"stats":{"Line":2},"fn_name":null},{"line":942,"address":[4217434],"length":1,"stats":{"Line":1},"fn_name":null},{"line":943,"address":[4217471],"length":1,"stats":{"Line":1},"fn_name":null},{"line":945,"address":[4217521],"length":1,"stats":{"Line":1},"fn_name":null},{"line":946,"address":[4217592,4217662,4217820],"length":1,"stats":{"Line":2},"fn_name":null},{"line":950,"address":[4218310,4218272],"length":1,"stats":{"Line":3},"fn_name":"bm_backstop_boundary"},{"line":951,"address":[4218286],"length":1,"stats":{"Line":1},"fn_name":null},{"line":958,"address":[4218325],"length":1,"stats":{"Line":1},"fn_name":null},{"line":960,"address":[4218356],"length":1,"stats":{"Line":1},"fn_name":null},{"line":961,"address":[4218427,4218517],"length":1,"stats":{"Line":2},"fn_name":null},{"line":962,"address":[4218538,4218668],"length":1,"stats":{"Line":1},"fn_name":null},{"line":966,"address":[4219056,4219441],"length":1,"stats":{"Line":3},"fn_name":"bm_win_gnu_indexing_bug"},{"line":967,"address":[4219063],"length":1,"stats":{"Line":1},"fn_name":null},{"line":973,"address":[4219466],"length":1,"stats":{"Line":1},"fn_name":null},{"line":974,"address":[4219548],"length":1,"stats":{"Line":1},"fn_name":null},{"line":976,"address":[4219601,4219678],"length":1,"stats":{"Line":2},"fn_name":null},{"line":985,"address":[4211936],"length":1,"stats":{"Line":1},"fn_name":"naive_find"},{"line":986,"address":[4212104,4211975],"length":1,"stats":{"Line":1},"fn_name":null},{"line":988,"address":[4212815,4212761,4212091,4212134,4212369],"length":1,"stats":{"Line":3},"fn_name":null},{"line":989,"address":[4212748,4212875,4212411,4212481],"length":1,"stats":{"Line":3},"fn_name":null},{"line":990,"address":[4212588,4212933,4212963,4212452],"length":1,"stats":{"Line":2},"fn_name":null},{"line":992,"address":[4212771],"length":1,"stats":{"Line":1},"fn_name":null},{"line":996,"address":[4212352],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1001,"address":[4220015,4219850,4220044],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1002,"address":[4220076],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1005,"address":[4220522,4220162,4220406,4220052,4220501],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1006,"address":[4220268,4220408],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1008,"address":[4220427,4220503,4220201],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1011,"address":[4220658,4220586],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1012,"address":[4220871],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1013,"address":[4220793,4220683],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1017,"address":[4221402,4221434,4221226],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1018,"address":[4221469],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1021,"address":[4221927,4221826,4221948,4221442,4221555],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1022,"address":[4221676,4221828],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1024,"address":[4221847,4221603,4221929],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1027,"address":[4222020,4222098],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1028,"address":[4222105],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1029,"address":[4223874],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1030,"address":[4223818,4222192,4222241],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1037,"address":[4224359,4224282],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1038,"address":[4224461,4224426],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1041,"address":[4224399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1042,"address":[4224498],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1044,"address":[4224645,4224725,4224567,4224844],"length":1,"stats":{"Line":4},"fn_name":null},{"line":1045,"address":[4224756,4224622],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1046,"address":[4224884,4224939],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1049,"address":[4224960,4224857],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1053,"address":[4225037,4224967],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1054,"address":[4224994],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1056,"address":[4225866,4225111,4225357,4225570],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1057,"address":[4225898,4225399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1058,"address":[4225575],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1062,"address":[4225707],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1063,"address":[4225650,4225337,4225617],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1064,"address":[4225642],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1080,"address":[4226080,4225994],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1081,"address":[4226131,4226166],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1084,"address":[4226192,4227076,4226104],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1085,"address":[4227108,4226242],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1087,"address":[4226371],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1088,"address":[4226423],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1091,"address":[4227168,4226455,4226401],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1093,"address":[4226550],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1095,"address":[4226740,4226622],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1096,"address":[4226807,4227018],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1097,"address":[4227054,4226761,4226809],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1098,"address":[4226776],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1099,"address":[4226882],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1100,"address":[4226800,4227005,4226833],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1101,"address":[4226853,4226927],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1107,"address":[4227258,4227328],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1108,"address":[4227355],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1111,"address":[4227334],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1112,"address":[4227405],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1113,"address":[4227465],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1115,"address":[4227636],"length":1,"stats":{"Line":1},"fn_name":null},{"line":1116,"address":[4227570,4227526],"length":1,"stats":{"Line":2},"fn_name":null},{"line":1117,"address":[5306601,5306592],"length":1,"stats":{"Line":2},"fn_name":"{{closure}}"}],"covered":393,"coverable":439},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","literal","mod.rs"],"content":"pub use self::imp::*;\n\n#[cfg(feature = \"perf-literal\")]\nmod imp;\n\n#[allow(missing_docs)]\n#[cfg(not(feature = \"perf-literal\"))]\nmod imp {\n    use syntax::hir::literal::Literals;\n\n    #[derive(Clone, Debug)]\n    pub struct LiteralSearcher(());\n\n    impl LiteralSearcher {\n        pub fn empty() -> Self {\n            LiteralSearcher(())\n        }\n\n        pub fn prefixes(_: Literals) -> Self {\n            LiteralSearcher(())\n        }\n\n        pub fn suffixes(_: Literals) -> Self {\n            LiteralSearcher(())\n        }\n\n        pub fn complete(&self) -> bool {\n            false\n        }\n\n        pub fn find(&self, _: &[u8]) -> Option<(usize, usize)> {\n            unreachable!()\n        }\n\n        pub fn find_start(&self, _: &[u8]) -> Option<(usize, usize)> {\n            unreachable!()\n        }\n\n        pub fn find_end(&self, _: &[u8]) -> Option<(usize, usize)> {\n            unreachable!()\n        }\n\n        pub fn is_empty(&self) -> bool {\n            true\n        }\n\n        pub fn len(&self) -> usize {\n            0\n        }\n\n        pub fn approximate_size(&self) -> usize {\n            0\n        }\n    }\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":8},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","pattern.rs"],"content":"use std::str::pattern::{Pattern, SearchStep, Searcher};\n\nuse re_unicode::{Matches, Regex};\n\npub struct RegexSearcher<'r, 't> {\n    haystack: &'t str,\n    it: Matches<'r, 't>,\n    last_step_end: usize,\n    next_match: Option<(usize, usize)>,\n}\n\nimpl<'r, 't> Pattern<'t> for &'r Regex {\n    type Searcher = RegexSearcher<'r, 't>;\n\n    fn into_searcher(self, haystack: &'t str) -> RegexSearcher<'r, 't> {\n        RegexSearcher {\n            haystack: haystack,\n            it: self.find_iter(haystack),\n            last_step_end: 0,\n            next_match: None,\n        }\n    }\n}\n\nunsafe impl<'r, 't> Searcher<'t> for RegexSearcher<'r, 't> {\n    #[inline]\n    fn haystack(&self) -> &'t str {\n        self.haystack\n    }\n\n    #[inline]\n    fn next(&mut self) -> SearchStep {\n        if let Some((s, e)) = self.next_match {\n            self.next_match = None;\n            self.last_step_end = e;\n            return SearchStep::Match(s, e);\n        }\n        match self.it.next() {\n            None => {\n                if self.last_step_end < self.haystack().len() {\n                    let last = self.last_step_end;\n                    self.last_step_end = self.haystack().len();\n                    SearchStep::Reject(last, self.haystack().len())\n                } else {\n                    SearchStep::Done\n                }\n            }\n            Some(m) => {\n                let (s, e) = (m.start(), m.end());\n                if s == self.last_step_end {\n                    self.last_step_end = e;\n                    SearchStep::Match(s, e)\n                } else {\n                    self.next_match = Some((s, e));\n                    let last = self.last_step_end;\n                    self.last_step_end = s;\n                    SearchStep::Reject(last, s)\n                }\n            }\n        }\n    }\n}\n","traces":[{"line":15,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":25},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","pikevm.rs"],"content":"// This module implements the Pike VM. That is, it guarantees linear time\n// search of a regex on any text with memory use proportional to the size of\n// the regex.\n//\n// It is equal in power to the backtracking engine in this crate, except the\n// backtracking engine is typically faster on small regexes/texts at the\n// expense of a bigger memory footprint.\n//\n// It can do more than the DFA can (specifically, record capture locations\n// and execute Unicode word boundary assertions), but at a slower speed.\n// Specifically, the Pike VM exectues a DFA implicitly by repeatedly expanding\n// epsilon transitions. That is, the Pike VM engine can be in multiple states\n// at once where as the DFA is only ever in one state at a time.\n//\n// Therefore, the Pike VM is generally treated as the fallback when the other\n// matching engines either aren't feasible to run or are insufficient.\n\nuse std::mem;\n\nuse exec::ProgramCache;\nuse input::{Input, InputAt};\nuse prog::{InstPtr, Program};\nuse re_trait::Slot;\nuse sparse::SparseSet;\n\n/// An NFA simulation matching engine.\n#[derive(Debug)]\npub struct Fsm<'r, I> {\n    /// The sequence of opcodes (among other things) that is actually executed.\n    ///\n    /// The program may be byte oriented or Unicode codepoint oriented.\n    prog: &'r Program,\n    /// An explicit stack used for following epsilon transitions. (This is\n    /// borrowed from the cache.)\n    stack: &'r mut Vec<FollowEpsilon>,\n    /// The input to search.\n    input: I,\n}\n\n/// A cached allocation that can be reused on each execution.\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// A pair of ordered sets for tracking NFA states.\n    clist: Threads,\n    nlist: Threads,\n    /// An explicit stack used for following epsilon transitions.\n    stack: Vec<FollowEpsilon>,\n}\n\n/// An ordered set of NFA states and their captures.\n#[derive(Clone, Debug)]\nstruct Threads {\n    /// An ordered set of opcodes (each opcode is an NFA state).\n    set: SparseSet,\n    /// Captures for every NFA state.\n    ///\n    /// It is stored in row-major order, where the columns are the capture\n    /// slots and the rows are the states.\n    caps: Vec<Slot>,\n    /// The number of capture slots stored per thread. (Every capture has\n    /// two slots.)\n    slots_per_thread: usize,\n}\n\n/// A representation of an explicit stack frame when following epsilon\n/// transitions. This is used to avoid recursion.\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Follow transitions at the given instruction pointer.\n    IP(InstPtr),\n    /// Restore the capture slot with the given position in the input.\n    Capture { slot: usize, pos: Slot },\n}\n\nimpl Cache {\n    /// Create a new allocation used by the NFA machine to record execution\n    /// and captures.\n    pub fn new(_prog: &Program) -> Self {\n        Cache { clist: Threads::new(), nlist: Threads::new(), stack: vec![] }\n    }\n}\n\nimpl<'r, I: Input> Fsm<'r, I> {\n    /// Execute the NFA matching engine.\n    ///\n    /// If there's a match, `exec` returns `true` and populates the given\n    /// captures accordingly.\n    pub fn exec(\n        prog: &'r Program,\n        cache: &ProgramCache,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        quit_after_match: bool,\n        input: I,\n        start: usize,\n        end: usize,\n    ) -> bool {\n        let mut cache = cache.borrow_mut();\n        let cache = &mut cache.pikevm;\n        cache.clist.resize(prog.len(), prog.captures.len());\n        cache.nlist.resize(prog.len(), prog.captures.len());\n        let at = input.at(start);\n        Fsm { prog: prog, stack: &mut cache.stack, input: input }.exec_(\n            &mut cache.clist,\n            &mut cache.nlist,\n            matches,\n            slots,\n            quit_after_match,\n            at,\n            end,\n        )\n    }\n\n    fn exec_(\n        &mut self,\n        mut clist: &mut Threads,\n        mut nlist: &mut Threads,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        quit_after_match: bool,\n        mut at: InputAt,\n        end: usize,\n    ) -> bool {\n        let mut matched = false;\n        let mut all_matched = false;\n        clist.set.clear();\n        nlist.set.clear();\n        'LOOP: loop {\n            if clist.set.is_empty() {\n                // Three ways to bail out when our current set of threads is\n                // empty.\n                //\n                // 1. We have a match---so we're done exploring any possible\n                //    alternatives. Time to quit. (We can't do this if we're\n                //    looking for matches for multiple regexes, unless we know\n                //    they all matched.)\n                //\n                // 2. If the expression starts with a '^' we can terminate as\n                //    soon as the last thread dies.\n                if (matched && matches.len() <= 1)\n                    || all_matched\n                    || (!at.is_start() && self.prog.is_anchored_start)\n                {\n                    break;\n                }\n\n                // 3. If there's a literal prefix for the program, try to\n                //    jump ahead quickly. If it can't be found, then we can\n                //    bail out early.\n                if !self.prog.prefixes.is_empty() {\n                    at = match self.input.prefix_at(&self.prog.prefixes, at) {\n                        None => break,\n                        Some(at) => at,\n                    };\n                }\n            }\n\n            // This simulates a preceding '.*?' for every regex by adding\n            // a state starting at the current position in the input for the\n            // beginning of the program only if we don't already have a match.\n            if clist.set.is_empty()\n                || (!self.prog.is_anchored_start && !all_matched)\n            {\n                self.add(&mut clist, slots, 0, at);\n            }\n            // The previous call to \"add\" actually inspects the position just\n            // before the current character. For stepping through the machine,\n            // we can to look at the current character, so we advance the\n            // input.\n            let at_next = self.input.at(at.next_pos());\n            for i in 0..clist.set.len() {\n                let ip = clist.set[i];\n                if self.step(\n                    &mut nlist,\n                    matches,\n                    slots,\n                    clist.caps(ip),\n                    ip,\n                    at,\n                    at_next,\n                ) {\n                    matched = true;\n                    all_matched = all_matched || matches.iter().all(|&b| b);\n                    if quit_after_match {\n                        // If we only care if a match occurs (not its\n                        // position), then we can quit right now.\n                        break 'LOOP;\n                    }\n                    if self.prog.matches.len() == 1 {\n                        // We don't need to check the rest of the threads\n                        // in this set because we've matched something\n                        // (\"leftmost-first\"). However, we still need to check\n                        // threads in the next set to support things like\n                        // greedy matching.\n                        //\n                        // This is only true on normal regexes. For regex sets,\n                        // we need to mush on to observe other matches.\n                        break;\n                    }\n                }\n            }\n            if at.pos() >= end {\n                break;\n            }\n            at = at_next;\n            mem::swap(clist, nlist);\n            nlist.set.clear();\n        }\n        matched\n    }\n\n    /// Step through the input, one token (byte or codepoint) at a time.\n    ///\n    /// nlist is the set of states that will be processed on the next token\n    /// in the input.\n    ///\n    /// caps is the set of captures passed by the caller of the NFA. They are\n    /// written to only when a match state is visited.\n    ///\n    /// thread_caps is the set of captures set for the current NFA state, ip.\n    ///\n    /// at and at_next are the current and next positions in the input. at or\n    /// at_next may be EOF.\n    fn step(\n        &mut self,\n        nlist: &mut Threads,\n        matches: &mut [bool],\n        slots: &mut [Slot],\n        thread_caps: &mut [Option<usize>],\n        ip: usize,\n        at: InputAt,\n        at_next: InputAt,\n    ) -> bool {\n        use prog::Inst::*;\n        match self.prog[ip] {\n            Match(match_slot) => {\n                if match_slot < matches.len() {\n                    matches[match_slot] = true;\n                }\n                for (slot, val) in slots.iter_mut().zip(thread_caps.iter()) {\n                    *slot = *val;\n                }\n                true\n            }\n            Char(ref inst) => {\n                if inst.c == at.char() {\n                    self.add(nlist, thread_caps, inst.goto, at_next);\n                }\n                false\n            }\n            Ranges(ref inst) => {\n                if inst.matches(at.char()) {\n                    self.add(nlist, thread_caps, inst.goto, at_next);\n                }\n                false\n            }\n            Bytes(ref inst) => {\n                if let Some(b) = at.byte() {\n                    if inst.matches(b) {\n                        self.add(nlist, thread_caps, inst.goto, at_next);\n                    }\n                }\n                false\n            }\n            EmptyLook(_) | Save(_) | Split(_) => false,\n        }\n    }\n\n    /// Follows epsilon transitions and adds them for processing to nlist,\n    /// starting at and including ip.\n    fn add(\n        &mut self,\n        nlist: &mut Threads,\n        thread_caps: &mut [Option<usize>],\n        ip: usize,\n        at: InputAt,\n    ) {\n        self.stack.push(FollowEpsilon::IP(ip));\n        while let Some(frame) = self.stack.pop() {\n            match frame {\n                FollowEpsilon::IP(ip) => {\n                    self.add_step(nlist, thread_caps, ip, at);\n                }\n                FollowEpsilon::Capture { slot, pos } => {\n                    thread_caps[slot] = pos;\n                }\n            }\n        }\n    }\n\n    /// A helper function for add that avoids excessive pushing to the stack.\n    fn add_step(\n        &mut self,\n        nlist: &mut Threads,\n        thread_caps: &mut [Option<usize>],\n        mut ip: usize,\n        at: InputAt,\n    ) {\n        // Instead of pushing and popping to the stack, we mutate ip as we\n        // traverse the set of states. We only push to the stack when we\n        // absolutely need recursion (restoring captures or following a\n        // branch).\n        use prog::Inst::*;\n        loop {\n            // Don't visit states we've already added.\n            if nlist.set.contains(ip) {\n                return;\n            }\n            nlist.set.insert(ip);\n            match self.prog[ip] {\n                EmptyLook(ref inst) => {\n                    if self.input.is_empty_match(at, inst) {\n                        ip = inst.goto;\n                    }\n                }\n                Save(ref inst) => {\n                    if inst.slot < thread_caps.len() {\n                        self.stack.push(FollowEpsilon::Capture {\n                            slot: inst.slot,\n                            pos: thread_caps[inst.slot],\n                        });\n                        thread_caps[inst.slot] = Some(at.pos());\n                    }\n                    ip = inst.goto;\n                }\n                Split(ref inst) => {\n                    self.stack.push(FollowEpsilon::IP(inst.goto2));\n                    ip = inst.goto1;\n                }\n                Match(_) | Char(_) | Ranges(_) | Bytes(_) => {\n                    let t = &mut nlist.caps(ip);\n                    for (slot, val) in t.iter_mut().zip(thread_caps.iter()) {\n                        *slot = *val;\n                    }\n                    return;\n                }\n            }\n        }\n    }\n}\n\nimpl Threads {\n    fn new() -> Self {\n        Threads { set: SparseSet::new(0), caps: vec![], slots_per_thread: 0 }\n    }\n\n    fn resize(&mut self, num_insts: usize, ncaps: usize) {\n        if num_insts == self.set.capacity() {\n            return;\n        }\n        self.slots_per_thread = ncaps * 2;\n        self.set = SparseSet::new(num_insts);\n        self.caps = vec![None; self.slots_per_thread * num_insts];\n    }\n\n    fn caps(&mut self, pc: usize) -> &mut [Option<usize>] {\n        let i = pc * self.slots_per_thread;\n        &mut self.caps[i..i + self.slots_per_thread]\n    }\n}\n","traces":[{"line":78,"address":[5768704,5768747],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":79,"address":[5768767,5768928,5768722],"length":1,"stats":{"Line":32},"fn_name":null},{"line":88,"address":[5148240,5147416,5148476,5147200],"length":1,"stats":{"Line":14},"fn_name":"exec<regex::input::ByteInput>"},{"line":98,"address":[5147439,5148370,5147303,5148499],"length":1,"stats":{"Line":30},"fn_name":null},{"line":99,"address":[5148531,5147471],"length":1,"stats":{"Line":15},"fn_name":null},{"line":100,"address":[5147593,5148653],"length":1,"stats":{"Line":15},"fn_name":null},{"line":101,"address":[5148783,5148721,5147723,5147661],"length":1,"stats":{"Line":30},"fn_name":null},{"line":102,"address":[5147810,5148870],"length":1,"stats":{"Line":15},"fn_name":null},{"line":103,"address":[5148882,5148993,5147822,5147964],"length":1,"stats":{"Line":30},"fn_name":null},{"line":104,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[5148957,5147928],"length":1,"stats":{"Line":15},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[5148961,5147932],"length":1,"stats":{"Line":15},"fn_name":null},{"line":110,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[5151424,5149264],"length":1,"stats":{"Line":15},"fn_name":"exec_<regex::input::ByteInput>"},{"line":124,"address":[5149378,5151538],"length":1,"stats":{"Line":15},"fn_name":null},{"line":125,"address":[5151546,5149386],"length":1,"stats":{"Line":15},"fn_name":null},{"line":126,"address":[5151554,5149394],"length":1,"stats":{"Line":15},"fn_name":null},{"line":127,"address":[5151634,5149474],"length":1,"stats":{"Line":15},"fn_name":null},{"line":128,"address":[5151389,5149490,5153549,5151650],"length":1,"stats":{"Line":30},"fn_name":null},{"line":129,"address":[5152315,5149516,5150155,5151676],"length":1,"stats":{"Line":27},"fn_name":null},{"line":140,"address":[5151778,5149618,5149803,5149557,5151717,5151963],"length":1,"stats":{"Line":45},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[5149829,5151921,5149761,5151989,5151761,5149601],"length":1,"stats":{"Line":33},"fn_name":null},{"line":144,"address":[5149865,5152025],"length":1,"stats":{"Line":5},"fn_name":null},{"line":150,"address":[5149879,5150146,5149845,5152005,5152039,5152306],"length":1,"stats":{"Line":39},"fn_name":null},{"line":151,"address":[5150148,5152058,5152263,5152308,5150103,5149898],"length":1,"stats":{"Line":18},"fn_name":null},{"line":152,"address":[5152142,5149982,5150150,5152310],"length":1,"stats":{"Line":15},"fn_name":null},{"line":153,"address":[5150007,5152167],"length":1,"stats":{"Line":9},"fn_name":null},{"line":161,"address":[5152317,5152556,5152449,5150229,5150396,5152389,5150289,5150157],"length":1,"stats":{"Line":53},"fn_name":null},{"line":162,"address":[5152370,5150254,5152414,5150210],"length":1,"stats":{"Line":29},"fn_name":null},{"line":164,"address":[5152468,5150308],"length":1,"stats":{"Line":12},"fn_name":null},{"line":170,"address":[5150406,5152566],"length":1,"stats":{"Line":16},"fn_name":null},{"line":171,"address":[5151231,5153391,5150470,5152630],"length":1,"stats":{"Line":32},"fn_name":null},{"line":172,"address":[5151422,5150738,5153554,5150672,5151394,5152898,5153582,5152832],"length":1,"stats":{"Line":32},"fn_name":null},{"line":173,"address":[5151224,5153121,5150961,5153384],"length":1,"stats":{"Line":19},"fn_name":null},{"line":174,"address":[5150776,5152936],"length":1,"stats":{"Line":16},"fn_name":null},{"line":175,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[5150784,5152944],"length":1,"stats":{"Line":16},"fn_name":null},{"line":178,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[5150828,5152988],"length":1,"stats":{"Line":16},"fn_name":null},{"line":180,"address":[5150863,5153023],"length":1,"stats":{"Line":16},"fn_name":null},{"line":182,"address":[5153195,5151035],"length":1,"stats":{"Line":14},"fn_name":null},{"line":183,"address":[5151145,5151043,5153203,5153305,5153584,5153632,5153645,5153597],"length":1,"stats":{"Line":60},"fn_name":"{{closure}}<regex::input::CharInput>"},{"line":184,"address":[5153299,5151139],"length":1,"stats":{"Line":16},"fn_name":null},{"line":187,"address":[5151206,5153366],"length":1,"stats":{"Line":11},"fn_name":null},{"line":189,"address":[5151180,5151218,5153340,5153378],"length":1,"stats":{"Line":18},"fn_name":null},{"line":198,"address":[5151226,5153386],"length":1,"stats":{"Line":9},"fn_name":null},{"line":202,"address":[5151249,5152873,5153409,5150713],"length":1,"stats":{"Line":28},"fn_name":null},{"line":203,"address":[5153528,5151368],"length":1,"stats":{"Line":12},"fn_name":null},{"line":205,"address":[5151254,5153414],"length":1,"stats":{"Line":14},"fn_name":null},{"line":206,"address":[5153505,5151345],"length":1,"stats":{"Line":15},"fn_name":null},{"line":207,"address":[5151373,5153533],"length":1,"stats":{"Line":15},"fn_name":null},{"line":209,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[5153680,5155216],"length":1,"stats":{"Line":16},"fn_name":"step<regex::input::CharInput>"},{"line":235,"address":[5156650,5153936,5155883,5153796,5154002,5154347,5156685,5156200,5156404,5155538,5155332,5155114,5155472,5155149,5154868,5154664],"length":1,"stats":{"Line":65},"fn_name":null},{"line":236,"address":[5154012,5155496,5153960,5155548],"length":1,"stats":{"Line":29},"fn_name":null},{"line":237,"address":[5154063,5155599],"length":1,"stats":{"Line":13},"fn_name":null},{"line":238,"address":[5154104,5155640,5155180,5155211,5156716,5156747],"length":1,"stats":{"Line":14},"fn_name":null},{"line":240,"address":[5154153,5154438,5154352,5155888,5155974,5155689],"length":1,"stats":{"Line":28},"fn_name":null},{"line":241,"address":[5155960,5154424],"length":1,"stats":{"Line":14},"fn_name":null},{"line":243,"address":[5155875,5154339],"length":1,"stats":{"Line":14},"fn_name":null},{"line":245,"address":[5154451,5155987],"length":1,"stats":{"Line":5},"fn_name":null},{"line":246,"address":[5154654,5156190,5154484,5156020],"length":1,"stats":{"Line":10},"fn_name":null},{"line":247,"address":[5154563,5156099],"length":1,"stats":{"Line":5},"fn_name":null},{"line":249,"address":[5154656,5156192],"length":1,"stats":{"Line":5},"fn_name":null},{"line":251,"address":[5154677,5156213],"length":1,"stats":{"Line":8},"fn_name":null},{"line":252,"address":[5156394,5154723,5156259,5154858],"length":1,"stats":{"Line":14},"fn_name":null},{"line":253,"address":[5156303,5154767],"length":1,"stats":{"Line":8},"fn_name":null},{"line":255,"address":[5154860,5156396],"length":1,"stats":{"Line":6},"fn_name":null},{"line":257,"address":[5154881,5156417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":258,"address":[5155104,5154919,5156640,5156455],"length":1,"stats":{"Line":15},"fn_name":null},{"line":259,"address":[5154982,5155102,5156518,5156638],"length":1,"stats":{"Line":15},"fn_name":null},{"line":260,"address":[5156547,5155011],"length":1,"stats":{"Line":7},"fn_name":null},{"line":263,"address":[5156642,5155106],"length":1,"stats":{"Line":7},"fn_name":null},{"line":265,"address":[5156652,5155116],"length":1,"stats":{"Line":16},"fn_name":null},{"line":271,"address":[5156752,5157216],"length":1,"stats":{"Line":13},"fn_name":"add<regex::input::ByteInput>"},{"line":278,"address":[5156799,5157263],"length":1,"stats":{"Line":13},"fn_name":null},{"line":279,"address":[5157322,5157386,5156922,5157177,5156858,5157641],"length":1,"stats":{"Line":41},"fn_name":null},{"line":280,"address":[5157606,5157048,5157142,5157512],"length":1,"stats":{"Line":15},"fn_name":null},{"line":281,"address":[5156948,5157412,5157514,5157050],"length":1,"stats":{"Line":26},"fn_name":null},{"line":282,"address":[5157535,5157071],"length":1,"stats":{"Line":13},"fn_name":null},{"line":284,"address":[5157427,5156963],"length":1,"stats":{"Line":15},"fn_name":null},{"line":285,"address":[5157480,5157674,5157149,5157182,5157016,5157646,5157210,5157613],"length":1,"stats":{"Line":31},"fn_name":null},{"line":292,"address":[5159120,5157680],"length":1,"stats":{"Line":13},"fn_name":"add_step<regex::input::ByteInput>"},{"line":304,"address":[5159017,5160457],"length":1,"stats":{"Line":16},"fn_name":null},{"line":306,"address":[5159215,5157775],"length":1,"stats":{"Line":13},"fn_name":null},{"line":307,"address":[5159277,5157837],"length":1,"stats":{"Line":10},"fn_name":null},{"line":309,"address":[5157819,5159259],"length":1,"stats":{"Line":13},"fn_name":null},{"line":310,"address":[5159022,5159581,5157897,5158141,5158544,5159295,5157855,5157987,5159984,5160103,5158663,5159337,5159427,5160462],"length":1,"stats":{"Line":68},"fn_name":null},{"line":311,"address":[5157945,5159385,5159437,5157997],"length":1,"stats":{"Line":27},"fn_name":null},{"line":312,"address":[5159478,5158038],"length":1,"stats":{"Line":11},"fn_name":null},{"line":313,"address":[5159570,5158130],"length":1,"stats":{"Line":11},"fn_name":null},{"line":316,"address":[5158154,5159594],"length":1,"stats":{"Line":16},"fn_name":null},{"line":317,"address":[5158190,5159630],"length":1,"stats":{"Line":16},"fn_name":null},{"line":318,"address":[5158258,5159698,5158348,5159788],"length":1,"stats":{"Line":32},"fn_name":null},{"line":319,"address":[5158267,5159707],"length":1,"stats":{"Line":16},"fn_name":null},{"line":320,"address":[5158271,5160496,5159711,5159056],"length":1,"stats":{"Line":16},"fn_name":null},{"line":322,"address":[5160558,5160527,5159118,5159850,5158410,5159087],"length":1,"stats":{"Line":16},"fn_name":null},{"line":324,"address":[5158533,5159973],"length":1,"stats":{"Line":16},"fn_name":null},{"line":326,"address":[5158557,5159997],"length":1,"stats":{"Line":12},"fn_name":null},{"line":327,"address":[5160041,5158601],"length":1,"stats":{"Line":12},"fn_name":null},{"line":328,"address":[5158652,5160092],"length":1,"stats":{"Line":12},"fn_name":null},{"line":330,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[5158668,5160108],"length":1,"stats":{"Line":13},"fn_name":null},{"line":332,"address":[5160452,5160161,5159012,5158926,5158721,5160366],"length":1,"stats":{"Line":26},"fn_name":null},{"line":333,"address":[5158998,5160438],"length":1,"stats":{"Line":13},"fn_name":null},{"line":335,"address":[5160361,5158921],"length":1,"stats":{"Line":13},"fn_name":null},{"line":343,"address":[5769028,5768992],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":344,"address":[5769128,5769045,5769003],"length":1,"stats":{"Line":32},"fn_name":null},{"line":347,"address":[5769152,5769216],"length":1,"stats":{"Line":11},"fn_name":"resize"},{"line":348,"address":[5769183,5769241],"length":1,"stats":{"Line":22},"fn_name":null},{"line":349,"address":[5769279],"length":1,"stats":{"Line":9},"fn_name":null},{"line":351,"address":[5769298,5769583,5769251],"length":1,"stats":{"Line":22},"fn_name":null},{"line":352,"address":[5769384,5769302],"length":1,"stats":{"Line":11},"fn_name":null},{"line":353,"address":[5769436,5769329,5769633],"length":1,"stats":{"Line":22},"fn_name":null},{"line":356,"address":[5769696],"length":1,"stats":{"Line":9},"fn_name":"caps"},{"line":357,"address":[5769859,5769710],"length":1,"stats":{"Line":9},"fn_name":null},{"line":358,"address":[5769919,5769750,5769889],"length":1,"stats":{"Line":9},"fn_name":null}],"covered":111,"coverable":122},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","prog.rs"],"content":"use std::cmp::Ordering;\nuse std::collections::HashMap;\nuse std::fmt;\nuse std::mem;\nuse std::ops::Deref;\nuse std::slice;\nuse std::sync::Arc;\n\nuse input::Char;\nuse literal::LiteralSearcher;\n\n/// `InstPtr` represents the index of an instruction in a regex program.\npub type InstPtr = usize;\n\n/// Program is a sequence of instructions and various facts about thos\n/// instructions.\n#[derive(Clone)]\npub struct Program {\n    /// A sequence of instructions that represents an NFA.\n    pub insts: Vec<Inst>,\n    /// Pointers to each Match instruction in the sequence.\n    ///\n    /// This is always length 1 unless this program represents a regex set.\n    pub matches: Vec<InstPtr>,\n    /// The ordered sequence of all capture groups extracted from the AST.\n    /// Unnamed groups are `None`.\n    pub captures: Vec<Option<String>>,\n    /// Pointers to all named capture groups into `captures`.\n    pub capture_name_idx: Arc<HashMap<String, usize>>,\n    /// A pointer to the start instruction. This can vary depending on how\n    /// the program was compiled. For example, programs for use with the DFA\n    /// engine have a `.*?` inserted at the beginning of unanchored regular\n    /// expressions. The actual starting point of the program is after the\n    /// `.*?`.\n    pub start: InstPtr,\n    /// A set of equivalence classes for discriminating bytes in the compiled\n    /// program.\n    pub byte_classes: Vec<u8>,\n    /// When true, this program can only match valid UTF-8.\n    pub only_utf8: bool,\n    /// When true, this program uses byte range instructions instead of Unicode\n    /// range instructions.\n    pub is_bytes: bool,\n    /// When true, the program is compiled for DFA matching. For example, this\n    /// implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n    /// regexes.\n    pub is_dfa: bool,\n    /// When true, the program matches text in reverse (for use only in the\n    /// DFA).\n    pub is_reverse: bool,\n    /// Whether the regex must match from the start of the input.\n    pub is_anchored_start: bool,\n    /// Whether the regex must match at the end of the input.\n    pub is_anchored_end: bool,\n    /// Whether this program contains a Unicode word boundary instruction.\n    pub has_unicode_word_boundary: bool,\n    /// A possibly empty machine for very quickly matching prefix literals.\n    pub prefixes: LiteralSearcher,\n    /// A limit on the size of the cache that the DFA is allowed to use while\n    /// matching.\n    ///\n    /// The cache limit specifies approximately how much space we're willing to\n    /// give to the state cache. Once the state cache exceeds the size, it is\n    /// wiped and all states must be re-computed.\n    ///\n    /// Note that this value does not impact correctness. It can be set to 0\n    /// and the DFA will run just fine. (It will only ever store exactly one\n    /// state in the cache, and will likely run very slowly, but it will work.)\n    ///\n    /// Also note that this limit is *per thread of execution*. That is,\n    /// if the same regex is used to search text across multiple threads\n    /// simultaneously, then the DFA cache is not shared. Instead, copies are\n    /// made.\n    pub dfa_size_limit: usize,\n}\n\nimpl Program {\n    /// Creates an empty instruction sequence. Fields are given default\n    /// values.\n    pub fn new() -> Self {\n        Program {\n            insts: vec![],\n            matches: vec![],\n            captures: vec![],\n            capture_name_idx: Arc::new(HashMap::new()),\n            start: 0,\n            byte_classes: vec![0; 256],\n            only_utf8: true,\n            is_bytes: false,\n            is_dfa: false,\n            is_reverse: false,\n            is_anchored_start: false,\n            is_anchored_end: false,\n            has_unicode_word_boundary: false,\n            prefixes: LiteralSearcher::empty(),\n            dfa_size_limit: 2 * (1 << 20),\n        }\n    }\n\n    /// If pc is an index to a no-op instruction (like Save), then return the\n    /// next pc that is not a no-op instruction.\n    pub fn skip(&self, mut pc: usize) -> usize {\n        loop {\n            match self[pc] {\n                Inst::Save(ref i) => pc = i.goto,\n                _ => return pc,\n            }\n        }\n    }\n\n    /// Return true if and only if an execution engine at instruction `pc` will\n    /// always lead to a match.\n    pub fn leads_to_match(&self, pc: usize) -> bool {\n        if self.matches.len() > 1 {\n            // If we have a regex set, then we have more than one ending\n            // state, so leading to one of those states is generally\n            // meaningless.\n            return false;\n        }\n        match self[self.skip(pc)] {\n            Inst::Match(_) => true,\n            _ => false,\n        }\n    }\n\n    /// Returns true if the current configuration demands that an implicit\n    /// `.*?` be prepended to the instruction sequence.\n    pub fn needs_dotstar(&self) -> bool {\n        self.is_dfa && !self.is_reverse && !self.is_anchored_start\n    }\n\n    /// Returns true if this program uses Byte instructions instead of\n    /// Char/Range instructions.\n    pub fn uses_bytes(&self) -> bool {\n        self.is_bytes || self.is_dfa\n    }\n\n    /// Returns true if this program exclusively matches valid UTF-8 bytes.\n    ///\n    /// That is, if an invalid UTF-8 byte is seen, then no match is possible.\n    pub fn only_utf8(&self) -> bool {\n        self.only_utf8\n    }\n\n    /// Return the approximate heap usage of this instruction sequence in\n    /// bytes.\n    pub fn approximate_size(&self) -> usize {\n        // The only instruction that uses heap space is Ranges (for\n        // Unicode codepoint programs) to store non-overlapping codepoint\n        // ranges. To keep this operation constant time, we ignore them.\n        (self.len() * mem::size_of::<Inst>())\n            + (self.matches.len() * mem::size_of::<InstPtr>())\n            + (self.captures.len() * mem::size_of::<Option<String>>())\n            + (self.capture_name_idx.len()\n                * (mem::size_of::<String>() + mem::size_of::<usize>()))\n            + (self.byte_classes.len() * mem::size_of::<u8>())\n            + self.prefixes.approximate_size()\n    }\n}\n\nimpl Deref for Program {\n    type Target = [Inst];\n\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn deref(&self) -> &Self::Target {\n        &*self.insts\n    }\n}\n\nimpl fmt::Debug for Program {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        use self::Inst::*;\n\n        fn with_goto(cur: usize, goto: usize, fmtd: String) -> String {\n            if goto == cur + 1 {\n                fmtd\n            } else {\n                format!(\"{} (goto: {})\", fmtd, goto)\n            }\n        }\n\n        fn visible_byte(b: u8) -> String {\n            use std::ascii::escape_default;\n            let escaped = escape_default(b).collect::<Vec<u8>>();\n            String::from_utf8_lossy(&escaped).into_owned()\n        }\n\n        for (pc, inst) in self.iter().enumerate() {\n            match *inst {\n                Match(slot) => write!(f, \"{:04} Match({:?})\", pc, slot)?,\n                Save(ref inst) => {\n                    let s = format!(\"{:04} Save({})\", pc, inst.slot);\n                    write!(f, \"{}\", with_goto(pc, inst.goto, s))?;\n                }\n                Split(ref inst) => {\n                    write!(\n                        f,\n                        \"{:04} Split({}, {})\",\n                        pc, inst.goto1, inst.goto2\n                    )?;\n                }\n                EmptyLook(ref inst) => {\n                    let s = format!(\"{:?}\", inst.look);\n                    write!(f, \"{:04} {}\", pc, with_goto(pc, inst.goto, s))?;\n                }\n                Char(ref inst) => {\n                    let s = format!(\"{:?}\", inst.c);\n                    write!(f, \"{:04} {}\", pc, with_goto(pc, inst.goto, s))?;\n                }\n                Ranges(ref inst) => {\n                    let ranges = inst\n                        .ranges\n                        .iter()\n                        .map(|r| format!(\"{:?}-{:?}\", r.0, r.1))\n                        .collect::<Vec<String>>()\n                        .join(\", \");\n                    write!(\n                        f,\n                        \"{:04} {}\",\n                        pc,\n                        with_goto(pc, inst.goto, ranges)\n                    )?;\n                }\n                Bytes(ref inst) => {\n                    let s = format!(\n                        \"Bytes({}, {})\",\n                        visible_byte(inst.start),\n                        visible_byte(inst.end)\n                    );\n                    write!(f, \"{:04} {}\", pc, with_goto(pc, inst.goto, s))?;\n                }\n            }\n            if pc == self.start {\n                write!(f, \" (start)\")?;\n            }\n            write!(f, \"\\n\")?;\n        }\n        Ok(())\n    }\n}\n\nimpl<'a> IntoIterator for &'a Program {\n    type Item = &'a Inst;\n    type IntoIter = slice::Iter<'a, Inst>;\n    fn into_iter(self) -> Self::IntoIter {\n        self.iter()\n    }\n}\n\n/// Inst is an instruction code in a Regex program.\n///\n/// Regrettably, a regex program either contains Unicode codepoint\n/// instructions (Char and Ranges) or it contains byte instructions (Bytes).\n/// A regex program can never contain both.\n///\n/// It would be worth investigating splitting this into two distinct types and\n/// then figuring out how to make the matching engines polymorphic over those\n/// types without sacrificing performance.\n///\n/// Other than the benefit of moving invariants into the type system, another\n/// benefit is the decreased size. If we remove the `Char` and `Ranges`\n/// instructions from the `Inst` enum, then its size shrinks from 40 bytes to\n/// 24 bytes. (This is because of the removal of a `Vec` in the `Ranges`\n/// variant.) Given that byte based machines are typically much bigger than\n/// their Unicode analogues (because they can decode UTF-8 directly), this ends\n/// up being a pretty significant savings.\n#[derive(Clone, Debug)]\npub enum Inst {\n    /// Match indicates that the program has reached a match state.\n    ///\n    /// The number in the match corresponds to the Nth logical regular\n    /// expression in this program. This index is always 0 for normal regex\n    /// programs. Values greater than 0 appear when compiling regex sets, and\n    /// each match instruction gets its own unique value. The value corresponds\n    /// to the Nth regex in the set.\n    Match(usize),\n    /// Save causes the program to save the current location of the input in\n    /// the slot indicated by InstSave.\n    Save(InstSave),\n    /// Split causes the program to diverge to one of two paths in the\n    /// program, preferring goto1 in InstSplit.\n    Split(InstSplit),\n    /// EmptyLook represents a zero-width assertion in a regex program. A\n    /// zero-width assertion does not consume any of the input text.\n    EmptyLook(InstEmptyLook),\n    /// Char requires the regex program to match the character in InstChar at\n    /// the current position in the input.\n    Char(InstChar),\n    /// Ranges requires the regex program to match the character at the current\n    /// position in the input with one of the ranges specified in InstRanges.\n    Ranges(InstRanges),\n    /// Bytes is like Ranges, except it expresses a single byte range. It is\n    /// used in conjunction with Split instructions to implement multi-byte\n    /// character classes.\n    Bytes(InstBytes),\n}\n\nimpl Inst {\n    /// Returns true if and only if this is a match instruction.\n    pub fn is_match(&self) -> bool {\n        match *self {\n            Inst::Match(_) => true,\n            _ => false,\n        }\n    }\n}\n\n/// Representation of the Save instruction.\n#[derive(Clone, Debug)]\npub struct InstSave {\n    /// The next location to execute in the program.\n    pub goto: InstPtr,\n    /// The capture slot (there are two slots for every capture in a regex,\n    /// including the zeroth capture for the entire match).\n    pub slot: usize,\n}\n\n/// Representation of the Split instruction.\n#[derive(Clone, Debug)]\npub struct InstSplit {\n    /// The first instruction to try. A match resulting from following goto1\n    /// has precedence over a match resulting from following goto2.\n    pub goto1: InstPtr,\n    /// The second instruction to try. A match resulting from following goto1\n    /// has precedence over a match resulting from following goto2.\n    pub goto2: InstPtr,\n}\n\n/// Representation of the `EmptyLook` instruction.\n#[derive(Clone, Debug)]\npub struct InstEmptyLook {\n    /// The next location to execute in the program if this instruction\n    /// succeeds.\n    pub goto: InstPtr,\n    /// The type of zero-width assertion to check.\n    pub look: EmptyLook,\n}\n\n/// The set of zero-width match instructions.\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum EmptyLook {\n    /// Start of line or input.\n    StartLine,\n    /// End of line or input.\n    EndLine,\n    /// Start of input.\n    StartText,\n    /// End of input.\n    EndText,\n    /// Word character on one side and non-word character on other.\n    WordBoundary,\n    /// Word character on both sides or non-word character on both sides.\n    NotWordBoundary,\n    /// ASCII word boundary.\n    WordBoundaryAscii,\n    /// Not ASCII word boundary.\n    NotWordBoundaryAscii,\n}\n\n/// Representation of the Char instruction.\n#[derive(Clone, Debug)]\npub struct InstChar {\n    /// The next location to execute in the program if this instruction\n    /// succeeds.\n    pub goto: InstPtr,\n    /// The character to test.\n    pub c: char,\n}\n\n/// Representation of the Ranges instruction.\n#[derive(Clone, Debug)]\npub struct InstRanges {\n    /// The next location to execute in the program if this instruction\n    /// succeeds.\n    pub goto: InstPtr,\n    /// The set of Unicode scalar value ranges to test.\n    pub ranges: Vec<(char, char)>,\n}\n\nimpl InstRanges {\n    /// Tests whether the given input character matches this instruction.\n    pub fn matches(&self, c: Char) -> bool {\n        // This speeds up the `match_class_unicode` benchmark by checking\n        // some common cases quickly without binary search. e.g., Matching\n        // a Unicode class on predominantly ASCII text.\n        for r in self.ranges.iter().take(4) {\n            if c < r.0 {\n                return false;\n            }\n            if c <= r.1 {\n                return true;\n            }\n        }\n        self.ranges\n            .binary_search_by(|r| {\n                if r.1 < c {\n                    Ordering::Less\n                } else if r.0 > c {\n                    Ordering::Greater\n                } else {\n                    Ordering::Equal\n                }\n            })\n            .is_ok()\n    }\n\n    /// Return the number of distinct characters represented by all of the\n    /// ranges.\n    pub fn num_chars(&self) -> usize {\n        self.ranges\n            .iter()\n            .map(|&(s, e)| 1 + (e as u32) - (s as u32))\n            .sum::<u32>() as usize\n    }\n}\n\n/// Representation of the Bytes instruction.\n#[derive(Clone, Debug)]\npub struct InstBytes {\n    /// The next location to execute in the program if this instruction\n    /// succeeds.\n    pub goto: InstPtr,\n    /// The start (inclusive) of this byte range.\n    pub start: u8,\n    /// The end (inclusive) of this byte range.\n    pub end: u8,\n}\n\nimpl InstBytes {\n    /// Returns true if and only if the given byte is in this range.\n    pub fn matches(&self, byte: u8) -> bool {\n        self.start <= byte && byte <= self.end\n    }\n}\n","traces":[{"line":80,"address":[4628448,4628491],"length":1,"stats":{"Line":14},"fn_name":"new"},{"line":82,"address":[4628466],"length":1,"stats":{"Line":14},"fn_name":null},{"line":83,"address":[4628506],"length":1,"stats":{"Line":14},"fn_name":null},{"line":84,"address":[4628527],"length":1,"stats":{"Line":14},"fn_name":null},{"line":85,"address":[4628605,4628576,4628551],"length":1,"stats":{"Line":42},"fn_name":null},{"line":87,"address":[4628610],"length":1,"stats":{"Line":14},"fn_name":null},{"line":95,"address":[4628656],"length":1,"stats":{"Line":14},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[4629072],"length":1,"stats":{"Line":0},"fn_name":"skip"},{"line":103,"address":[4629233],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[4629125,4629238,4629266],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[4629158,4629194],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[4629179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[4629280],"length":1,"stats":{"Line":0},"fn_name":"leads_to_match"},{"line":114,"address":[4629294],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[4629374],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[4629403,4629467,4629372,4629476,4629504],"length":1,"stats":{"Line":1},"fn_name":"needs_dotstar"},{"line":121,"address":[4629469,4629441],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[4629462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[4629504],"length":1,"stats":{"Line":15},"fn_name":"needs_dotstar"},{"line":129,"address":[4629576,4629513],"length":1,"stats":{"Line":32},"fn_name":null},{"line":134,"address":[4629632],"length":1,"stats":{"Line":16},"fn_name":"uses_bytes"},{"line":135,"address":[4629641],"length":1,"stats":{"Line":16},"fn_name":null},{"line":141,"address":[4629712],"length":1,"stats":{"Line":8},"fn_name":"only_utf8"},{"line":142,"address":[4629717],"length":1,"stats":{"Line":8},"fn_name":null},{"line":147,"address":[4629744],"length":1,"stats":{"Line":9},"fn_name":"approximate_size"},{"line":151,"address":[4630529,4630447,4630148,4630498,4630799,4629824,4630859,4630022,4629881,4630649,4630332,4630739,4630589],"length":1,"stats":{"Line":62},"fn_name":null},{"line":152,"address":[4629981,4629914,4630559],"length":1,"stats":{"Line":18},"fn_name":null},{"line":153,"address":[4630113,4630053,4630619],"length":1,"stats":{"Line":18},"fn_name":null},{"line":154,"address":[4630300,4630176,4630709],"length":1,"stats":{"Line":18},"fn_name":null},{"line":155,"address":[4630270,4630679],"length":1,"stats":{"Line":9},"fn_name":null},{"line":156,"address":[4630769,4630360,4630415],"length":1,"stats":{"Line":18},"fn_name":null},{"line":157,"address":[4630475],"length":1,"stats":{"Line":9},"fn_name":null},{"line":165,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":166,"address":[4570694,4569638,4576998,4574854],"length":1,"stats":{"Line":163},"fn_name":null},{"line":171,"address":[4630954,4630864],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":174,"address":[4637584,4637676],"length":1,"stats":{"Line":0},"fn_name":"with_goto"},{"line":175,"address":[4637607,4637893,4638153,4637701],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[4637853],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[4637733,4637908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[4638208,4638253],"length":1,"stats":{"Line":0},"fn_name":"visible_byte"},{"line":184,"address":[4638265,4638223],"length":1,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[4638281,4638344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[4630985,4631171,4637276,4630952,4630887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[4632701,4633192,4635916,4634101,4631771,4636958,4634983,4631355],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[4631806,4631237,4631372,4631776],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[4631842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[4631856],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[4632242],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[4632721],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[4632751,4633197],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[4632735],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[4632742],"length":1,"stats":{"Line":0},"fn_name":null},{"line":202,"address":[4633233],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[4633247],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[4633491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[4634121],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[4634135],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[4634373],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[4634996],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[4635010],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[4626208,4626241],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":217,"address":[4635393,4635829,4635529],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[4635285],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[4635292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[4631288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[4635956],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[4631309],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[4635929],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[4636414],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[4636960,4637118],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[4637120,4636995],"length":1,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[4637153,4637281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[4631158],"length":1,"stats":{"Line":0},"fn_name":null},{"line":245,"address":[4638416],"length":1,"stats":{"Line":8},"fn_name":"into_iter"},{"line":246,"address":[4638462],"length":1,"stats":{"Line":9},"fn_name":null},{"line":300,"address":[4638496],"length":1,"stats":{"Line":2},"fn_name":"is_match"},{"line":301,"address":[4638516],"length":1,"stats":{"Line":2},"fn_name":null},{"line":302,"address":[4638505,4638518],"length":1,"stats":{"Line":4},"fn_name":null},{"line":303,"address":[4638511],"length":1,"stats":{"Line":2},"fn_name":null},{"line":382,"address":[4638544],"length":1,"stats":{"Line":10},"fn_name":"matches"},{"line":386,"address":[4638915,4638563,4638780],"length":1,"stats":{"Line":18},"fn_name":null},{"line":387,"address":[4638814],"length":1,"stats":{"Line":10},"fn_name":null},{"line":388,"address":[4638879,4638903],"length":1,"stats":{"Line":16},"fn_name":null},{"line":390,"address":[4638909,4638854],"length":1,"stats":{"Line":24},"fn_name":null},{"line":391,"address":[4638920],"length":1,"stats":{"Line":6},"fn_name":null},{"line":394,"address":[4638940,4638751],"length":1,"stats":{"Line":20},"fn_name":null},{"line":395,"address":[4626496],"length":1,"stats":{"Line":20},"fn_name":"{{closure}}"},{"line":396,"address":[4626510,4626589,4626613],"length":1,"stats":{"Line":26},"fn_name":null},{"line":397,"address":[4626584],"length":1,"stats":{"Line":10},"fn_name":null},{"line":398,"address":[4626595,4626567,4626606],"length":1,"stats":{"Line":16},"fn_name":null},{"line":399,"address":[4626608],"length":1,"stats":{"Line":6},"fn_name":null},{"line":401,"address":[4626601],"length":1,"stats":{"Line":4},"fn_name":null},{"line":409,"address":[4639008],"length":1,"stats":{"Line":0},"fn_name":"num_chars"},{"line":410,"address":[4639017],"length":1,"stats":{"Line":0},"fn_name":null},{"line":411,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":412,"address":[4626624,4626638],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":413,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":431,"address":[4639136],"length":1,"stats":{"Line":11},"fn_name":"matches"},{"line":432,"address":[4639150],"length":1,"stats":{"Line":11},"fn_name":null}],"covered":44,"coverable":104},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","re_builder.rs"],"content":"/// The set of user configurable options for compiling zero or more regexes.\n#[derive(Clone, Debug)]\n#[allow(missing_docs)]\npub struct RegexOptions {\n    pub pats: Vec<String>,\n    pub size_limit: usize,\n    pub dfa_size_limit: usize,\n    pub nest_limit: u32,\n    pub case_insensitive: bool,\n    pub multi_line: bool,\n    pub dot_matches_new_line: bool,\n    pub swap_greed: bool,\n    pub ignore_whitespace: bool,\n    pub unicode: bool,\n    pub octal: bool,\n}\n\nimpl Default for RegexOptions {\n    fn default() -> Self {\n        RegexOptions {\n            pats: vec![],\n            size_limit: 10 * (1 << 20),\n            dfa_size_limit: 2 * (1 << 20),\n            nest_limit: 250,\n            case_insensitive: false,\n            multi_line: false,\n            dot_matches_new_line: false,\n            swap_greed: false,\n            ignore_whitespace: false,\n            unicode: true,\n            octal: false,\n        }\n    }\n}\n\nmacro_rules! define_builder {\n    ($name:ident, $regex_mod:ident, $only_utf8:expr) => {\n        pub mod $name {\n            use super::RegexOptions;\n            use error::Error;\n            use exec::ExecBuilder;\n\n            use $regex_mod::Regex;\n\n            /// A configurable builder for a regular expression.\n            ///\n            /// A builder can be used to configure how the regex is built, for example, by\n            /// setting the default flags (which can be overridden in the expression\n            /// itself) or setting various limits.\n            pub struct RegexBuilder(RegexOptions);\n\n            impl RegexBuilder {\n                /// Create a new regular expression builder with the given pattern.\n                ///\n                /// If the pattern is invalid, then an error will be returned when\n                /// `build` is called.\n                pub fn new(pattern: &str) -> RegexBuilder {\n                    let mut builder = RegexBuilder(RegexOptions::default());\n                    builder.0.pats.push(pattern.to_owned());\n                    builder\n                }\n\n                /// Consume the builder and compile the regular expression.\n                ///\n                /// Note that calling `as_str` on the resulting `Regex` will produce the\n                /// pattern given to `new` verbatim. Notably, it will not incorporate any\n                /// of the flags set on this builder.\n                pub fn build(&self) -> Result<Regex, Error> {\n                    ExecBuilder::new_options(self.0.clone())\n                        .only_utf8($only_utf8)\n                        .build()\n                        .map(Regex::from)\n                }\n\n                /// Set the value for the case insensitive (`i`) flag.\n                ///\n                /// When enabled, letters in the pattern will match both upper case and\n                /// lower case variants.\n                pub fn case_insensitive(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexBuilder {\n                    self.0.case_insensitive = yes;\n                    self\n                }\n\n                /// Set the value for the multi-line matching (`m`) flag.\n                ///\n                /// When enabled, `^` matches the beginning of lines and `$` matches the\n                /// end of lines.\n                ///\n                /// By default, they match beginning/end of the input.\n                pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {\n                    self.0.multi_line = yes;\n                    self\n                }\n\n                /// Set the value for the any character (`s`) flag, where in `.` matches\n                /// anything when `s` is set and matches anything except for new line when\n                /// it is not set (the default).\n                ///\n                /// N.B. \"matches anything\" means \"any byte\" when Unicode is disabled and\n                /// means \"any valid UTF-8 encoding of any Unicode scalar value\" when\n                /// Unicode is enabled.\n                pub fn dot_matches_new_line(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexBuilder {\n                    self.0.dot_matches_new_line = yes;\n                    self\n                }\n\n                /// Set the value for the greedy swap (`U`) flag.\n                ///\n                /// When enabled, a pattern like `a*` is lazy (tries to find shortest\n                /// match) and `a*?` is greedy (tries to find longest match).\n                ///\n                /// By default, `a*` is greedy and `a*?` is lazy.\n                pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {\n                    self.0.swap_greed = yes;\n                    self\n                }\n\n                /// Set the value for the ignore whitespace (`x`) flag.\n                ///\n                /// When enabled, whitespace such as new lines and spaces will be ignored\n                /// between expressions of the pattern, and `#` can be used to start a\n                /// comment until the next new line.\n                pub fn ignore_whitespace(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexBuilder {\n                    self.0.ignore_whitespace = yes;\n                    self\n                }\n\n                /// Set the value for the Unicode (`u`) flag.\n                ///\n                /// Enabled by default. When disabled, character classes such as `\\w` only\n                /// match ASCII word characters instead of all Unicode word characters.\n                pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {\n                    self.0.unicode = yes;\n                    self\n                }\n\n                /// Whether to support octal syntax or not.\n                ///\n                /// Octal syntax is a little-known way of uttering Unicode codepoints in\n                /// a regular expression. For example, `a`, `\\x61`, `\\u0061` and\n                /// `\\141` are all equivalent regular expressions, where the last example\n                /// shows octal syntax.\n                ///\n                /// While supporting octal syntax isn't in and of itself a problem, it does\n                /// make good error messages harder. That is, in PCRE based regex engines,\n                /// syntax like `\\0` invokes a backreference, which is explicitly\n                /// unsupported in Rust's regex engine. However, many users expect it to\n                /// be supported. Therefore, when octal support is disabled, the error\n                /// message will explicitly mention that backreferences aren't supported.\n                ///\n                /// Octal syntax is disabled by default.\n                pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {\n                    self.0.octal = yes;\n                    self\n                }\n\n                /// Set the approximate size limit of the compiled regular expression.\n                ///\n                /// This roughly corresponds to the number of bytes occupied by a single\n                /// compiled program. If the program exceeds this number, then a\n                /// compilation error is returned.\n                pub fn size_limit(\n                    &mut self,\n                    limit: usize,\n                ) -> &mut RegexBuilder {\n                    self.0.size_limit = limit;\n                    self\n                }\n\n                /// Set the approximate size of the cache used by the DFA.\n                ///\n                /// This roughly corresponds to the number of bytes that the DFA will\n                /// use while searching.\n                ///\n                /// Note that this is a *per thread* limit. There is no way to set a global\n                /// limit. In particular, if a regex is used from multiple threads\n                /// simultaneously, then each thread may use up to the number of bytes\n                /// specified here.\n                pub fn dfa_size_limit(\n                    &mut self,\n                    limit: usize,\n                ) -> &mut RegexBuilder {\n                    self.0.dfa_size_limit = limit;\n                    self\n                }\n\n                /// Set the nesting limit for this parser.\n                ///\n                /// The nesting limit controls how deep the abstract syntax tree is allowed\n                /// to be. If the AST exceeds the given limit (e.g., with too many nested\n                /// groups), then an error is returned by the parser.\n                ///\n                /// The purpose of this limit is to act as a heuristic to prevent stack\n                /// overflow for consumers that do structural induction on an `Ast` using\n                /// explicit recursion. While this crate never does this (instead using\n                /// constant stack space and moving the call stack to the heap), other\n                /// crates may.\n                ///\n                /// This limit is not checked until the entire Ast is parsed. Therefore,\n                /// if callers want to put a limit on the amount of heap space used, then\n                /// they should impose a limit on the length, in bytes, of the concrete\n                /// pattern string. In particular, this is viable since this parser\n                /// implementation will limit itself to heap space proportional to the\n                /// length of the pattern string.\n                ///\n                /// Note that a nest limit of `0` will return a nest limit error for most\n                /// patterns but not all. For example, a nest limit of `0` permits `a` but\n                /// not `ab`, since `ab` requires a concatenation, which results in a nest\n                /// depth of `1`. In general, a nest limit is not something that manifests\n                /// in an obvious way in the concrete syntax, therefore, it should not be\n                /// used in a granular way.\n                pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {\n                    self.0.nest_limit = limit;\n                    self\n                }\n            }\n        }\n    };\n}\n\ndefine_builder!(bytes, re_bytes, false);\ndefine_builder!(unicode, re_unicode, true);\n\nmacro_rules! define_set_builder {\n    ($name:ident, $regex_mod:ident, $only_utf8:expr) => {\n        pub mod $name {\n            use super::RegexOptions;\n            use error::Error;\n            use exec::ExecBuilder;\n\n            use re_set::$regex_mod::RegexSet;\n\n            /// A configurable builder for a set of regular expressions.\n            ///\n            /// A builder can be used to configure how the regexes are built, for example,\n            /// by setting the default flags (which can be overridden in the expression\n            /// itself) or setting various limits.\n            pub struct RegexSetBuilder(RegexOptions);\n\n            impl RegexSetBuilder {\n                /// Create a new regular expression builder with the given pattern.\n                ///\n                /// If the pattern is invalid, then an error will be returned when\n                /// `build` is called.\n                pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n                where\n                    S: AsRef<str>,\n                    I: IntoIterator<Item = S>,\n                {\n                    let mut builder = RegexSetBuilder(RegexOptions::default());\n                    for pat in patterns {\n                        builder.0.pats.push(pat.as_ref().to_owned());\n                    }\n                    builder\n                }\n\n                /// Consume the builder and compile the regular expressions into a set.\n                pub fn build(&self) -> Result<RegexSet, Error> {\n                    ExecBuilder::new_options(self.0.clone())\n                        .only_utf8($only_utf8)\n                        .build()\n                        .map(RegexSet::from)\n                }\n\n                /// Set the value for the case insensitive (`i`) flag.\n                pub fn case_insensitive(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexSetBuilder {\n                    self.0.case_insensitive = yes;\n                    self\n                }\n\n                /// Set the value for the multi-line matching (`m`) flag.\n                pub fn multi_line(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexSetBuilder {\n                    self.0.multi_line = yes;\n                    self\n                }\n\n                /// Set the value for the any character (`s`) flag, where in `.` matches\n                /// anything when `s` is set and matches anything except for new line when\n                /// it is not set (the default).\n                ///\n                /// N.B. \"matches anything\" means \"any byte\" for `regex::bytes::RegexSet`\n                /// expressions and means \"any Unicode scalar value\" for `regex::RegexSet`\n                /// expressions.\n                pub fn dot_matches_new_line(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexSetBuilder {\n                    self.0.dot_matches_new_line = yes;\n                    self\n                }\n\n                /// Set the value for the greedy swap (`U`) flag.\n                pub fn swap_greed(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexSetBuilder {\n                    self.0.swap_greed = yes;\n                    self\n                }\n\n                /// Set the value for the ignore whitespace (`x`) flag.\n                pub fn ignore_whitespace(\n                    &mut self,\n                    yes: bool,\n                ) -> &mut RegexSetBuilder {\n                    self.0.ignore_whitespace = yes;\n                    self\n                }\n\n                /// Set the value for the Unicode (`u`) flag.\n                pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {\n                    self.0.unicode = yes;\n                    self\n                }\n\n                /// Whether to support octal syntax or not.\n                ///\n                /// Octal syntax is a little-known way of uttering Unicode codepoints in\n                /// a regular expression. For example, `a`, `\\x61`, `\\u0061` and\n                /// `\\141` are all equivalent regular expressions, where the last example\n                /// shows octal syntax.\n                ///\n                /// While supporting octal syntax isn't in and of itself a problem, it does\n                /// make good error messages harder. That is, in PCRE based regex engines,\n                /// syntax like `\\0` invokes a backreference, which is explicitly\n                /// unsupported in Rust's regex engine. However, many users expect it to\n                /// be supported. Therefore, when octal support is disabled, the error\n                /// message will explicitly mention that backreferences aren't supported.\n                ///\n                /// Octal syntax is disabled by default.\n                pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {\n                    self.0.octal = yes;\n                    self\n                }\n\n                /// Set the approximate size limit of the compiled regular expression.\n                ///\n                /// This roughly corresponds to the number of bytes occupied by a single\n                /// compiled program. If the program exceeds this number, then a\n                /// compilation error is returned.\n                pub fn size_limit(\n                    &mut self,\n                    limit: usize,\n                ) -> &mut RegexSetBuilder {\n                    self.0.size_limit = limit;\n                    self\n                }\n\n                /// Set the approximate size of the cache used by the DFA.\n                ///\n                /// This roughly corresponds to the number of bytes that the DFA will\n                /// use while searching.\n                ///\n                /// Note that this is a *per thread* limit. There is no way to set a global\n                /// limit. In particular, if a regex is used from multiple threads\n                /// simultaneously, then each thread may use up to the number of bytes\n                /// specified here.\n                pub fn dfa_size_limit(\n                    &mut self,\n                    limit: usize,\n                ) -> &mut RegexSetBuilder {\n                    self.0.dfa_size_limit = limit;\n                    self\n                }\n\n                /// Set the nesting limit for this parser.\n                ///\n                /// The nesting limit controls how deep the abstract syntax tree is allowed\n                /// to be. If the AST exceeds the given limit (e.g., with too many nested\n                /// groups), then an error is returned by the parser.\n                ///\n                /// The purpose of this limit is to act as a heuristic to prevent stack\n                /// overflow for consumers that do structural induction on an `Ast` using\n                /// explicit recursion. While this crate never does this (instead using\n                /// constant stack space and moving the call stack to the heap), other\n                /// crates may.\n                ///\n                /// This limit is not checked until the entire Ast is parsed. Therefore,\n                /// if callers want to put a limit on the amount of heap space used, then\n                /// they should impose a limit on the length, in bytes, of the concrete\n                /// pattern string. In particular, this is viable since this parser\n                /// implementation will limit itself to heap space proportional to the\n                /// length of the pattern string.\n                ///\n                /// Note that a nest limit of `0` will return a nest limit error for most\n                /// patterns but not all. For example, a nest limit of `0` permits `a` but\n                /// not `ab`, since `ab` requires a concatenation, which results in a nest\n                /// depth of `1`. In general, a nest limit is not something that manifests\n                /// in an obvious way in the concrete syntax, therefore, it should not be\n                /// used in a granular way.\n                pub fn nest_limit(\n                    &mut self,\n                    limit: u32,\n                ) -> &mut RegexSetBuilder {\n                    self.0.nest_limit = limit;\n                    self\n                }\n            }\n        }\n    };\n}\n\ndefine_set_builder!(set_bytes, bytes, false);\ndefine_set_builder!(set_unicode, unicode, true);\n","traces":[{"line":19,"address":[5126496],"length":1,"stats":{"Line":15},"fn_name":"default"},{"line":21,"address":[5126503],"length":1,"stats":{"Line":15},"fn_name":null},{"line":22,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[4717546,4717488],"length":1,"stats":{"Line":17},"fn_name":"new"},{"line":58,"address":[4717511,4717561],"length":1,"stats":{"Line":35},"fn_name":null},{"line":59,"address":[4717620],"length":1,"stats":{"Line":18},"fn_name":null},{"line":68,"address":[4717696],"length":1,"stats":{"Line":17},"fn_name":"build"},{"line":69,"address":[4717714],"length":1,"stats":{"Line":17},"fn_name":null},{"line":79,"address":[4717824],"length":1,"stats":{"Line":0},"fn_name":"case_insensitive"},{"line":83,"address":[4717841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[4717872],"length":1,"stats":{"Line":0},"fn_name":"multi_line"},{"line":94,"address":[4717889],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[4717920],"length":1,"stats":{"Line":0},"fn_name":"dot_matches_new_line"},{"line":109,"address":[4717937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[4717968],"length":1,"stats":{"Line":0},"fn_name":"swap_greed"},{"line":120,"address":[4717985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[4718016],"length":1,"stats":{"Line":0},"fn_name":"ignore_whitespace"},{"line":133,"address":[4718033],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[4718064],"length":1,"stats":{"Line":0},"fn_name":"unicode"},{"line":142,"address":[4718081],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[4718112],"length":1,"stats":{"Line":1},"fn_name":"octal"},{"line":162,"address":[4718129],"length":1,"stats":{"Line":1},"fn_name":null},{"line":171,"address":[4718160],"length":1,"stats":{"Line":0},"fn_name":"size_limit"},{"line":175,"address":[4718173],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[4718192],"length":1,"stats":{"Line":0},"fn_name":"dfa_size_limit"},{"line":192,"address":[4718205],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[4718224],"length":1,"stats":{"Line":0},"fn_name":"nest_limit"},{"line":222,"address":[4718236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[7749376,7749465,7749984,7750576,7750652,7750060],"length":1,"stats":{"Line":7},"fn_name":"new<&[&str],&&str>"},{"line":259,"address":[7750002,7750075,7749402,7749480,7750594,7750667],"length":1,"stats":{"Line":14},"fn_name":null},{"line":260,"address":[7750115,7750189,7750413,7750816,7749602,7750220,7749826,7751009,7749523,7749633,7750707,7750785],"length":1,"stats":{"Line":26},"fn_name":null},{"line":261,"address":[7749792,7750966,7750310,7750370,7750906,7749783,7750379,7750975,7749723],"length":1,"stats":{"Line":15},"fn_name":null},{"line":267,"address":[4879392],"length":1,"stats":{"Line":3},"fn_name":"build"},{"line":268,"address":[4946018],"length":1,"stats":{"Line":3},"fn_name":null},{"line":275,"address":[4879536],"length":1,"stats":{"Line":0},"fn_name":"case_insensitive"},{"line":279,"address":[4879553],"length":1,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[4879584],"length":1,"stats":{"Line":0},"fn_name":"multi_line"},{"line":288,"address":[4879601],"length":1,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[4879632],"length":1,"stats":{"Line":0},"fn_name":"dot_matches_new_line"},{"line":303,"address":[4879649],"length":1,"stats":{"Line":0},"fn_name":null},{"line":308,"address":[4879680],"length":1,"stats":{"Line":0},"fn_name":"swap_greed"},{"line":312,"address":[4879697],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[4879728],"length":1,"stats":{"Line":0},"fn_name":"ignore_whitespace"},{"line":321,"address":[4879745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[4879776],"length":1,"stats":{"Line":0},"fn_name":"unicode"},{"line":327,"address":[4879793],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[4879824],"length":1,"stats":{"Line":0},"fn_name":"octal"},{"line":347,"address":[4879841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":356,"address":[4879872],"length":1,"stats":{"Line":0},"fn_name":"size_limit"},{"line":360,"address":[4879885],"length":1,"stats":{"Line":0},"fn_name":null},{"line":373,"address":[4879904],"length":1,"stats":{"Line":0},"fn_name":"dfa_size_limit"},{"line":377,"address":[4879917],"length":1,"stats":{"Line":0},"fn_name":null},{"line":406,"address":[4879936],"length":1,"stats":{"Line":0},"fn_name":"nest_limit"},{"line":410,"address":[4879948],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":15,"coverable":55},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","re_bytes.rs"],"content":"use std::borrow::Cow;\nuse std::collections::HashMap;\nuse std::fmt;\nuse std::ops::{Index, Range};\nuse std::str::FromStr;\nuse std::sync::Arc;\n\nuse find_byte::find_byte;\n\nuse error::Error;\nuse exec::{Exec, ExecNoSync};\nuse expand::expand_bytes;\nuse re_builder::bytes::RegexBuilder;\nuse re_trait::{self, RegularExpression, SubCapturesPosIter};\n\n/// Match represents a single match of a regex in a haystack.\n///\n/// The lifetime parameter `'t` refers to the lifetime of the matched text.\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub struct Match<'t> {\n    text: &'t [u8],\n    start: usize,\n    end: usize,\n}\n\nimpl<'t> Match<'t> {\n    /// Returns the starting byte offset of the match in the haystack.\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.start\n    }\n\n    /// Returns the ending byte offset of the match in the haystack.\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.end\n    }\n\n    /// Returns the range over the starting and ending byte offsets of the\n    /// match in the haystack.\n    #[inline]\n    pub fn range(&self) -> Range<usize> {\n        self.start..self.end\n    }\n\n    /// Returns the matched text.\n    #[inline]\n    pub fn as_bytes(&self) -> &'t [u8] {\n        &self.text[self.range()]\n    }\n\n    /// Creates a new match from the given haystack and byte offsets.\n    #[inline]\n    fn new(haystack: &'t [u8], start: usize, end: usize) -> Match<'t> {\n        Match { text: haystack, start: start, end: end }\n    }\n}\n\nimpl<'t> From<Match<'t>> for Range<usize> {\n    fn from(m: Match<'t>) -> Range<usize> {\n        m.range()\n    }\n}\n\n/// A compiled regular expression for matching arbitrary bytes.\n///\n/// It can be used to search, split or replace text. All searching is done with\n/// an implicit `.*?` at the beginning and end of an expression. To force an\n/// expression to match the whole string (or a prefix or a suffix), you must\n/// use an anchor like `^` or `$` (or `\\A` and `\\z`).\n///\n/// Like the `Regex` type in the parent module, matches with this regex return\n/// byte offsets into the search text. **Unlike** the parent `Regex` type,\n/// these byte offsets may not correspond to UTF-8 sequence boundaries since\n/// the regexes in this module can match arbitrary bytes.\n#[derive(Clone)]\npub struct Regex(Exec);\n\nimpl fmt::Display for Regex {\n    /// Shows the original regular expression.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.as_str())\n    }\n}\n\nimpl fmt::Debug for Regex {\n    /// Shows the original regular expression.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Display::fmt(self, f)\n    }\n}\n\n/// A constructor for Regex from an Exec.\n///\n/// This is hidden because Exec isn't actually part of the public API.\n#[doc(hidden)]\nimpl From<Exec> for Regex {\n    fn from(exec: Exec) -> Regex {\n        Regex(exec)\n    }\n}\n\nimpl FromStr for Regex {\n    type Err = Error;\n\n    /// Attempts to parse a string into a regular expression\n    fn from_str(s: &str) -> Result<Regex, Error> {\n        Regex::new(s)\n    }\n}\n\n/// Core regular expression methods.\nimpl Regex {\n    /// Compiles a regular expression. Once compiled, it can be used repeatedly\n    /// to search, split or replace text in a string.\n    ///\n    /// If an invalid expression is given, then an error is returned.\n    pub fn new(re: &str) -> Result<Regex, Error> {\n        RegexBuilder::new(re).build()\n    }\n\n    /// Returns true if and only if the regex matches the string given.\n    ///\n    /// It is recommended to use this method if all you need to do is test\n    /// a match, since the underlying matching engine may be able to do less\n    /// work.\n    ///\n    /// # Example\n    ///\n    /// Test if some text contains at least one word with exactly 13 ASCII word\n    /// bytes:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let text = b\"I categorically deny having triskaidekaphobia.\";\n    /// assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));\n    /// # }\n    /// ```\n    pub fn is_match(&self, text: &[u8]) -> bool {\n        self.is_match_at(text, 0)\n    }\n\n    /// Returns the start and end byte range of the leftmost-first match in\n    /// `text`. If no match exists, then `None` is returned.\n    ///\n    /// Note that this should only be used if you want to discover the position\n    /// of the match. Testing the existence of a match is faster if you use\n    /// `is_match`.\n    ///\n    /// # Example\n    ///\n    /// Find the start and end location of the first word with exactly 13\n    /// ASCII word bytes:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let text = b\"I categorically deny having triskaidekaphobia.\";\n    /// let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();\n    /// assert_eq!((mat.start(), mat.end()), (2, 15));\n    /// # }\n    /// ```\n    pub fn find<'t>(&self, text: &'t [u8]) -> Option<Match<'t>> {\n        self.find_at(text, 0)\n    }\n\n    /// Returns an iterator for each successive non-overlapping match in\n    /// `text`, returning the start and end byte indices with respect to\n    /// `text`.\n    ///\n    /// # Example\n    ///\n    /// Find the start and end location of every word with exactly 13 ASCII\n    /// word bytes:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let text = b\"Retroactively relinquishing remunerations is reprehensible.\";\n    /// for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {\n    ///     println!(\"{:?}\", mat);\n    /// }\n    /// # }\n    /// ```\n    pub fn find_iter<'r, 't>(&'r self, text: &'t [u8]) -> Matches<'r, 't> {\n        Matches(self.0.searcher().find_iter(text))\n    }\n\n    /// Returns the capture groups corresponding to the leftmost-first\n    /// match in `text`. Capture group `0` always corresponds to the entire\n    /// match. If no match is found, then `None` is returned.\n    ///\n    /// You should only use `captures` if you need access to the location of\n    /// capturing group matches. Otherwise, `find` is faster for discovering\n    /// the location of the overall match.\n    ///\n    /// # Examples\n    ///\n    /// Say you have some text with movie names and their release years,\n    /// like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text\n    /// looking like that, while also extracting the movie name and its release\n    /// year separately.\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\n    /// let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";\n    /// let caps = re.captures(text).unwrap();\n    /// assert_eq!(caps.get(1).unwrap().as_bytes(), &b\"Citizen Kane\"[..]);\n    /// assert_eq!(caps.get(2).unwrap().as_bytes(), &b\"1941\"[..]);\n    /// assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);\n    /// // You can also access the groups by index using the Index notation.\n    /// // Note that this will panic on an invalid index.\n    /// assert_eq!(&caps[1], b\"Citizen Kane\");\n    /// assert_eq!(&caps[2], b\"1941\");\n    /// assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");\n    /// # }\n    /// ```\n    ///\n    /// Note that the full match is at capture group `0`. Each subsequent\n    /// capture group is indexed by the order of its opening `(`.\n    ///\n    /// We can make this example a bit clearer by using *named* capture groups:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")\n    ///                .unwrap();\n    /// let text = b\"Not my favorite movie: 'Citizen Kane' (1941).\";\n    /// let caps = re.captures(text).unwrap();\n    /// assert_eq!(caps.name(\"title\").unwrap().as_bytes(), b\"Citizen Kane\");\n    /// assert_eq!(caps.name(\"year\").unwrap().as_bytes(), b\"1941\");\n    /// assert_eq!(caps.get(0).unwrap().as_bytes(), &b\"'Citizen Kane' (1941)\"[..]);\n    /// // You can also access the groups by name using the Index notation.\n    /// // Note that this will panic on an invalid group name.\n    /// assert_eq!(&caps[\"title\"], b\"Citizen Kane\");\n    /// assert_eq!(&caps[\"year\"], b\"1941\");\n    /// assert_eq!(&caps[0], b\"'Citizen Kane' (1941)\");\n    ///\n    /// # }\n    /// ```\n    ///\n    /// Here we name the capture groups, which we can access with the `name`\n    /// method or the `Index` notation with a `&str`. Note that the named\n    /// capture groups are still accessible with `get` or the `Index` notation\n    /// with a `usize`.\n    ///\n    /// The `0`th capture group is always unnamed, so it must always be\n    /// accessed with `get(0)` or `[0]`.\n    pub fn captures<'t>(&self, text: &'t [u8]) -> Option<Captures<'t>> {\n        let mut locs = self.capture_locations();\n        self.captures_read_at(&mut locs, text, 0).map(move |_| Captures {\n            text: text,\n            locs: locs.0,\n            named_groups: self.0.capture_name_idx().clone(),\n        })\n    }\n\n    /// Returns an iterator over all the non-overlapping capture groups matched\n    /// in `text`. This is operationally the same as `find_iter`, except it\n    /// yields information about capturing group matches.\n    ///\n    /// # Example\n    ///\n    /// We can use this to find all movie titles and their release years in\n    /// some text, where the movie is formatted like \"'Title' (xxxx)\":\n    ///\n    /// ```rust\n    /// # extern crate regex; use std::str; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")\n    ///                .unwrap();\n    /// let text = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n    /// for caps in re.captures_iter(text) {\n    ///     let title = str::from_utf8(&caps[\"title\"]).unwrap();\n    ///     let year = str::from_utf8(&caps[\"year\"]).unwrap();\n    ///     println!(\"Movie: {:?}, Released: {:?}\", title, year);\n    /// }\n    /// // Output:\n    /// // Movie: Citizen Kane, Released: 1941\n    /// // Movie: The Wizard of Oz, Released: 1939\n    /// // Movie: M, Released: 1931\n    /// # }\n    /// ```\n    pub fn captures_iter<'r, 't>(\n        &'r self,\n        text: &'t [u8],\n    ) -> CaptureMatches<'r, 't> {\n        CaptureMatches(self.0.searcher().captures_iter(text))\n    }\n\n    /// Returns an iterator of substrings of `text` delimited by a match of the\n    /// regular expression. Namely, each element of the iterator corresponds to\n    /// text that *isn't* matched by the regular expression.\n    ///\n    /// This method will *not* copy the text given.\n    ///\n    /// # Example\n    ///\n    /// To split a string delimited by arbitrary amounts of spaces or tabs:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"[ \\t]+\").unwrap();\n    /// let fields: Vec<&[u8]> = re.split(b\"a b \\t  c\\td    e\").collect();\n    /// assert_eq!(fields, vec![\n    ///     &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],\n    /// ]);\n    /// # }\n    /// ```\n    pub fn split<'r, 't>(&'r self, text: &'t [u8]) -> Split<'r, 't> {\n        Split { finder: self.find_iter(text), last: 0 }\n    }\n\n    /// Returns an iterator of at most `limit` substrings of `text` delimited\n    /// by a match of the regular expression. (A `limit` of `0` will return no\n    /// substrings.) Namely, each element of the iterator corresponds to text\n    /// that *isn't* matched by the regular expression. The remainder of the\n    /// string that is not split will be the last element in the iterator.\n    ///\n    /// This method will *not* copy the text given.\n    ///\n    /// # Example\n    ///\n    /// Get the first two words in some text:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"\\W+\").unwrap();\n    /// let fields: Vec<&[u8]> = re.splitn(b\"Hey! How are you?\", 3).collect();\n    /// assert_eq!(fields, vec![&b\"Hey\"[..], &b\"How\"[..], &b\"are you?\"[..]]);\n    /// # }\n    /// ```\n    pub fn splitn<'r, 't>(\n        &'r self,\n        text: &'t [u8],\n        limit: usize,\n    ) -> SplitN<'r, 't> {\n        SplitN { splits: self.split(text), n: limit }\n    }\n\n    /// Replaces the leftmost-first match with the replacement provided. The\n    /// replacement can be a regular byte string (where `$N` and `$name` are\n    /// expanded to match capture groups) or a function that takes the matches'\n    /// `Captures` and returns the replaced byte string.\n    ///\n    /// If no match is found, then a copy of the byte string is returned\n    /// unchanged.\n    ///\n    /// # Replacement string syntax\n    ///\n    /// All instances of `$name` in the replacement text is replaced with the\n    /// corresponding capture group `name`.\n    ///\n    /// `name` may be an integer corresponding to the index of the\n    /// capture group (counted by order of opening parenthesis where `0` is the\n    /// entire match) or it can be a name (consisting of letters, digits or\n    /// underscores) corresponding to a named capture group.\n    ///\n    /// If `name` isn't a valid capture group (whether the name doesn't exist\n    /// or isn't a valid index), then it is replaced with the empty string.\n    ///\n    /// The longest possible name is used. e.g., `$1a` looks up the capture\n    /// group named `1a` and not the capture group at index `1`. To exert more\n    /// precise control over the name, use braces, e.g., `${1}a`.\n    ///\n    /// To write a literal `$` use `$$`.\n    ///\n    /// # Examples\n    ///\n    /// Note that this function is polymorphic with respect to the replacement.\n    /// In typical usage, this can just be a normal byte string:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(\"[^01]+\").unwrap();\n    /// assert_eq!(re.replace(b\"1078910\", &b\"\"[..]), &b\"1010\"[..]);\n    /// # }\n    /// ```\n    ///\n    /// But anything satisfying the `Replacer` trait will work. For example, a\n    /// closure of type `|&Captures| -> Vec<u8>` provides direct access to the\n    /// captures corresponding to a match. This allows one to access capturing\n    /// group matches easily:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # use regex::bytes::Captures; fn main() {\n    /// let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\n    /// let result = re.replace(b\"Springsteen, Bruce\", |caps: &Captures| {\n    ///     let mut replacement = caps[2].to_owned();\n    ///     replacement.push(b' ');\n    ///     replacement.extend(&caps[1]);\n    ///     replacement\n    /// });\n    /// assert_eq!(result, &b\"Bruce Springsteen\"[..]);\n    /// # }\n    /// ```\n    ///\n    /// But this is a bit cumbersome to use all the time. Instead, a simple\n    /// syntax is supported that expands `$name` into the corresponding capture\n    /// group. Here's the last example, but using this expansion technique\n    /// with named capture groups:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();\n    /// let result = re.replace(b\"Springsteen, Bruce\", &b\"$first $last\"[..]);\n    /// assert_eq!(result, &b\"Bruce Springsteen\"[..]);\n    /// # }\n    /// ```\n    ///\n    /// Note that using `$2` instead of `$first` or `$1` instead of `$last`\n    /// would produce the same result. To write a literal `$` use `$$`.\n    ///\n    /// Sometimes the replacement string requires use of curly braces to\n    /// delineate a capture group replacement and surrounding literal text.\n    /// For example, if we wanted to join two words together with an\n    /// underscore:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();\n    /// let result = re.replace(b\"deep fried\", &b\"${first}_$second\"[..]);\n    /// assert_eq!(result, &b\"deep_fried\"[..]);\n    /// # }\n    /// ```\n    ///\n    /// Without the curly braces, the capture group name `first_` would be\n    /// used, and since it doesn't exist, it would be replaced with the empty\n    /// string.\n    ///\n    /// Finally, sometimes you just want to replace a literal string with no\n    /// regard for capturing group expansion. This can be done by wrapping a\n    /// byte string with `NoExpand`:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// use regex::bytes::NoExpand;\n    ///\n    /// let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\n    /// let result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));\n    /// assert_eq!(result, &b\"$2 $last\"[..]);\n    /// # }\n    /// ```\n    pub fn replace<'t, R: Replacer>(\n        &self,\n        text: &'t [u8],\n        rep: R,\n    ) -> Cow<'t, [u8]> {\n        self.replacen(text, 1, rep)\n    }\n\n    /// Replaces all non-overlapping matches in `text` with the replacement\n    /// provided. This is the same as calling `replacen` with `limit` set to\n    /// `0`.\n    ///\n    /// See the documentation for `replace` for details on how to access\n    /// capturing group matches in the replacement text.\n    pub fn replace_all<'t, R: Replacer>(\n        &self,\n        text: &'t [u8],\n        rep: R,\n    ) -> Cow<'t, [u8]> {\n        self.replacen(text, 0, rep)\n    }\n\n    /// Replaces at most `limit` non-overlapping matches in `text` with the\n    /// replacement provided. If `limit` is 0, then all non-overlapping matches\n    /// are replaced.\n    ///\n    /// See the documentation for `replace` for details on how to access\n    /// capturing group matches in the replacement text.\n    pub fn replacen<'t, R: Replacer>(\n        &self,\n        text: &'t [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'t, [u8]> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(text).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(text);\n            }\n            let mut new = Vec::with_capacity(text.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                if limit > 0 && i >= limit {\n                    break;\n                }\n                new.extend_from_slice(&text[last_match..m.start()]);\n                new.extend_from_slice(&rep);\n                last_match = m.end();\n            }\n            new.extend_from_slice(&text[last_match..]);\n            return Cow::Owned(new);\n        }\n\n        // The slower path, which we use if the replacement needs access to\n        // capture groups.\n        let mut it = self.captures_iter(text).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(text);\n        }\n        let mut new = Vec::with_capacity(text.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            if limit > 0 && i >= limit {\n                break;\n            }\n            // unwrap on 0 is OK because captures only reports matches\n            let m = cap.get(0).unwrap();\n            new.extend_from_slice(&text[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n        }\n        new.extend_from_slice(&text[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\n/// Advanced or \"lower level\" search methods.\nimpl Regex {\n    /// Returns the end location of a match in the text given.\n    ///\n    /// This method may have the same performance characteristics as\n    /// `is_match`, except it provides an end location for a match. In\n    /// particular, the location returned *may be shorter* than the proper end\n    /// of the leftmost-first match.\n    ///\n    /// # Example\n    ///\n    /// Typically, `a+` would match the entire first sequence of `a` in some\n    /// text, but `shortest_match` can give up as soon as it sees the first\n    /// `a`.\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::bytes::Regex;\n    /// # fn main() {\n    /// let text = b\"aaaaa\";\n    /// let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);\n    /// assert_eq!(pos, Some(1));\n    /// # }\n    /// ```\n    pub fn shortest_match(&self, text: &[u8]) -> Option<usize> {\n        self.shortest_match_at(text, 0)\n    }\n\n    /// Returns the same as shortest_match, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn shortest_match_at(\n        &self,\n        text: &[u8],\n        start: usize,\n    ) -> Option<usize> {\n        self.0.searcher().shortest_match_at(text, start)\n    }\n\n    /// Returns the same as is_match, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn is_match_at(&self, text: &[u8], start: usize) -> bool {\n        self.shortest_match_at(text, start).is_some()\n    }\n\n    /// Returns the same as find, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn find_at<'t>(\n        &self,\n        text: &'t [u8],\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.0\n            .searcher()\n            .find_at(text, start)\n            .map(|(s, e)| Match::new(text, s, e))\n    }\n\n    /// This is like `captures`, but uses\n    /// [`CaptureLocations`](struct.CaptureLocations.html)\n    /// instead of\n    /// [`Captures`](struct.Captures.html) in order to amortize allocations.\n    ///\n    /// To create a `CaptureLocations` value, use the\n    /// `Regex::capture_locations` method.\n    ///\n    /// This returns the overall match if this was successful, which is always\n    /// equivalence to the `0`th capture group.\n    pub fn captures_read<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t [u8],\n    ) -> Option<Match<'t>> {\n        self.captures_read_at(locs, text, 0)\n    }\n\n    /// Returns the same as `captures_read`, but starts the search at the given\n    /// offset and populates the capture locations given.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn captures_read_at<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t [u8],\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.0\n            .searcher()\n            .captures_read_at(&mut locs.0, text, start)\n            .map(|(s, e)| Match::new(text, s, e))\n    }\n\n    /// An undocumented alias for `captures_read_at`.\n    ///\n    /// The `regex-capi` crate previously used this routine, so to avoid\n    /// breaking that crate, we continue to provide the name as an undocumented\n    /// alias.\n    #[doc(hidden)]\n    pub fn read_captures_at<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t [u8],\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.captures_read_at(locs, text, start)\n    }\n}\n\n/// Auxiliary methods.\nimpl Regex {\n    /// Returns the original string of this regex.\n    pub fn as_str(&self) -> &str {\n        &self.0.regex_strings()[0]\n    }\n\n    /// Returns an iterator over the capture names.\n    pub fn capture_names(&self) -> CaptureNames {\n        CaptureNames(self.0.capture_names().iter())\n    }\n\n    /// Returns the number of captures.\n    pub fn captures_len(&self) -> usize {\n        self.0.capture_names().len()\n    }\n\n    /// Returns an empty set of capture locations that can be reused in\n    /// multiple calls to `captures_read` or `captures_read_at`.\n    pub fn capture_locations(&self) -> CaptureLocations {\n        CaptureLocations(self.0.searcher().locations())\n    }\n\n    /// An alias for `capture_locations` to preserve backward compatibility.\n    ///\n    /// The `regex-capi` crate uses this method, so to avoid breaking that\n    /// crate, we continue to export it as an undocumented API.\n    #[doc(hidden)]\n    pub fn locations(&self) -> CaptureLocations {\n        CaptureLocations(self.0.searcher().locations())\n    }\n}\n\n/// An iterator over all non-overlapping matches for a particular string.\n///\n/// The iterator yields a tuple of integers corresponding to the start and end\n/// of the match. The indices are byte offsets. The iterator stops when no more\n/// matches can be found.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the matched byte string.\npub struct Matches<'r, 't>(re_trait::Matches<'t, ExecNoSync<'r>>);\n\nimpl<'r, 't> Iterator for Matches<'r, 't> {\n    type Item = Match<'t>;\n\n    fn next(&mut self) -> Option<Match<'t>> {\n        let text = self.0.text();\n        self.0.next().map(|(s, e)| Match::new(text, s, e))\n    }\n}\n\n/// An iterator that yields all non-overlapping capture groups matching a\n/// particular regular expression.\n///\n/// The iterator stops when no more matches can be found.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the matched byte string.\npub struct CaptureMatches<'r, 't>(\n    re_trait::CaptureMatches<'t, ExecNoSync<'r>>,\n);\n\nimpl<'r, 't> Iterator for CaptureMatches<'r, 't> {\n    type Item = Captures<'t>;\n\n    fn next(&mut self) -> Option<Captures<'t>> {\n        self.0.next().map(|locs| Captures {\n            text: self.0.text(),\n            locs: locs,\n            named_groups: self.0.regex().capture_name_idx().clone(),\n        })\n    }\n}\n\n/// Yields all substrings delimited by a regular expression match.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the byte string being split.\npub struct Split<'r, 't> {\n    finder: Matches<'r, 't>,\n    last: usize,\n}\n\nimpl<'r, 't> Iterator for Split<'r, 't> {\n    type Item = &'t [u8];\n\n    fn next(&mut self) -> Option<&'t [u8]> {\n        let text = self.finder.0.text();\n        match self.finder.next() {\n            None => {\n                if self.last > text.len() {\n                    None\n                } else {\n                    let s = &text[self.last..];\n                    self.last = text.len() + 1; // Next call will return None\n                    Some(s)\n                }\n            }\n            Some(m) => {\n                let matched = &text[self.last..m.start()];\n                self.last = m.end();\n                Some(matched)\n            }\n        }\n    }\n}\n\n/// Yields at most `N` substrings delimited by a regular expression match.\n///\n/// The last substring will be whatever remains after splitting.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the byte string being split.\npub struct SplitN<'r, 't> {\n    splits: Split<'r, 't>,\n    n: usize,\n}\n\nimpl<'r, 't> Iterator for SplitN<'r, 't> {\n    type Item = &'t [u8];\n\n    fn next(&mut self) -> Option<&'t [u8]> {\n        if self.n == 0 {\n            return None;\n        }\n\n        self.n -= 1;\n        if self.n > 0 {\n            return self.splits.next();\n        }\n\n        let text = self.splits.finder.0.text();\n        if self.splits.last > text.len() {\n            // We've already returned all substrings.\n            None\n        } else {\n            // self.n == 0, so future calls will return None immediately\n            Some(&text[self.splits.last..])\n        }\n    }\n}\n\n/// An iterator over the names of all possible captures.\n///\n/// `None` indicates an unnamed capture; the first element (capture 0, the\n/// whole matched region) is always unnamed.\n///\n/// `'r` is the lifetime of the compiled regular expression.\npub struct CaptureNames<'r>(::std::slice::Iter<'r, Option<String>>);\n\nimpl<'r> Iterator for CaptureNames<'r> {\n    type Item = Option<&'r str>;\n\n    fn next(&mut self) -> Option<Option<&'r str>> {\n        self.0\n            .next()\n            .as_ref()\n            .map(|slot| slot.as_ref().map(|name| name.as_ref()))\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.0.size_hint()\n    }\n}\n\n/// CaptureLocations is a low level representation of the raw offsets of each\n/// submatch.\n///\n/// You can think of this as a lower level\n/// [`Captures`](struct.Captures.html), where this type does not support\n/// named capturing groups directly and it does not borrow the text that these\n/// offsets were matched on.\n///\n/// Primarily, this type is useful when using the lower level `Regex` APIs\n/// such as `read_captures`, which permits amortizing the allocation in which\n/// capture match locations are stored.\n///\n/// In order to build a value of this type, you'll need to call the\n/// `capture_locations` method on the `Regex` being used to execute the search.\n/// The value returned can then be reused in subsequent searches.\n#[derive(Clone, Debug)]\npub struct CaptureLocations(re_trait::Locations);\n\n/// A type alias for `CaptureLocations` for backwards compatibility.\n///\n/// Previously, we exported `CaptureLocations` as `Locations` in an\n/// undocumented API. To prevent breaking that code (e.g., in `regex-capi`),\n/// we continue re-exporting the same undocumented API.\n#[doc(hidden)]\npub type Locations = CaptureLocations;\n\nimpl CaptureLocations {\n    /// Returns the start and end positions of the Nth capture group. Returns\n    /// `None` if `i` is not a valid capture group or if the capture group did\n    /// not match anything. The positions returned are *always* byte indices\n    /// with respect to the original string matched.\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        self.0.pos(i)\n    }\n\n    /// Returns the total number of capturing groups.\n    ///\n    /// This is always at least `1` since every regex has at least `1`\n    /// capturing group that corresponds to the entire match.\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.len()\n    }\n\n    /// An alias for the `get` method for backwards compatibility.\n    ///\n    /// Previously, we exported `get` as `pos` in an undocumented API. To\n    /// prevent breaking that code (e.g., in `regex-capi`), we continue\n    /// re-exporting the same undocumented API.\n    #[doc(hidden)]\n    #[inline]\n    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {\n        self.get(i)\n    }\n}\n\n/// Captures represents a group of captured byte strings for a single match.\n///\n/// The 0th capture always corresponds to the entire match. Each subsequent\n/// index corresponds to the next capture group in the regex. If a capture\n/// group is named, then the matched byte string is *also* available via the\n/// `name` method. (Note that the 0th capture is always unnamed and so must be\n/// accessed with the `get` method.)\n///\n/// Positions returned from a capture group are always byte indices.\n///\n/// `'t` is the lifetime of the matched text.\npub struct Captures<'t> {\n    text: &'t [u8],\n    locs: re_trait::Locations,\n    named_groups: Arc<HashMap<String, usize>>,\n}\n\nimpl<'t> Captures<'t> {\n    /// Returns the match associated with the capture group at index `i`. If\n    /// `i` does not correspond to a capture group, or if the capture group\n    /// did not participate in the match, then `None` is returned.\n    ///\n    /// # Examples\n    ///\n    /// Get the text of the match with a default of an empty string if this\n    /// group didn't participate in the match:\n    ///\n    /// ```rust\n    /// # use regex::bytes::Regex;\n    /// let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\n    /// let caps = re.captures(b\"abc123\").unwrap();\n    ///\n    /// let text1 = caps.get(1).map_or(&b\"\"[..], |m| m.as_bytes());\n    /// let text2 = caps.get(2).map_or(&b\"\"[..], |m| m.as_bytes());\n    /// assert_eq!(text1, &b\"123\"[..]);\n    /// assert_eq!(text2, &b\"\"[..]);\n    /// ```\n    pub fn get(&self, i: usize) -> Option<Match<'t>> {\n        self.locs.pos(i).map(|(s, e)| Match::new(self.text, s, e))\n    }\n\n    /// Returns the match for the capture group named `name`. If `name` isn't a\n    /// valid capture group or didn't match anything, then `None` is returned.\n    pub fn name(&self, name: &str) -> Option<Match<'t>> {\n        self.named_groups.get(name).and_then(|&i| self.get(i))\n    }\n\n    /// An iterator that yields all capturing matches in the order in which\n    /// they appear in the regex. If a particular capture group didn't\n    /// participate in the match, then `None` is yielded for that capture.\n    ///\n    /// The first match always corresponds to the overall match of the regex.\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 't> {\n        SubCaptureMatches { caps: self, it: self.locs.iter() }\n    }\n\n    /// Expands all instances of `$name` in `replacement` to the corresponding\n    /// capture group `name`, and writes them to the `dst` buffer given.\n    ///\n    /// `name` may be an integer corresponding to the index of the\n    /// capture group (counted by order of opening parenthesis where `0` is the\n    /// entire match) or it can be a name (consisting of letters, digits or\n    /// underscores) corresponding to a named capture group.\n    ///\n    /// If `name` isn't a valid capture group (whether the name doesn't exist\n    /// or isn't a valid index), then it is replaced with the empty string.\n    ///\n    /// The longest possible name is used. e.g., `$1a` looks up the capture\n    /// group named `1a` and not the capture group at index `1`. To exert more\n    /// precise control over the name, use braces, e.g., `${1}a`.\n    ///\n    /// To write a literal `$` use `$$`.\n    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {\n        expand_bytes(self, replacement, dst)\n    }\n\n    /// Returns the number of captured groups.\n    ///\n    /// This is always at least `1`, since every regex has at least one capture\n    /// group that corresponds to the full match.\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.locs.len()\n    }\n}\n\nimpl<'t> fmt::Debug for Captures<'t> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.debug_tuple(\"Captures\").field(&CapturesDebug(self)).finish()\n    }\n}\n\nstruct CapturesDebug<'c, 't: 'c>(&'c Captures<'t>);\n\nimpl<'c, 't> fmt::Debug for CapturesDebug<'c, 't> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fn escape_bytes(bytes: &[u8]) -> String {\n            let mut s = String::new();\n            for &b in bytes {\n                s.push_str(&escape_byte(b));\n            }\n            s\n        }\n\n        fn escape_byte(byte: u8) -> String {\n            use std::ascii::escape_default;\n\n            let escaped: Vec<u8> = escape_default(byte).collect();\n            String::from_utf8_lossy(&escaped).into_owned()\n        }\n\n        // We'd like to show something nice here, even if it means an\n        // allocation to build a reverse index.\n        let slot_to_name: HashMap<&usize, &String> =\n            self.0.named_groups.iter().map(|(a, b)| (b, a)).collect();\n        let mut map = f.debug_map();\n        for (slot, m) in self.0.locs.iter().enumerate() {\n            let m = m.map(|(s, e)| escape_bytes(&self.0.text[s..e]));\n            if let Some(name) = slot_to_name.get(&slot) {\n                map.entry(&name, &m);\n            } else {\n                map.entry(&slot, &m);\n            }\n        }\n        map.finish()\n    }\n}\n\n/// Get a group by index.\n///\n/// `'t` is the lifetime of the matched text.\n///\n/// The text can't outlive the `Captures` object if this method is\n/// used, because of how `Index` is defined (normally `a[i]` is part\n/// of `a` and can't outlive it); to do that, use `get()` instead.\n///\n/// # Panics\n///\n/// If there is no group at the given index.\nimpl<'t> Index<usize> for Captures<'t> {\n    type Output = [u8];\n\n    fn index(&self, i: usize) -> &[u8] {\n        self.get(i)\n            .map(|m| m.as_bytes())\n            .unwrap_or_else(|| panic!(\"no group at index '{}'\", i))\n    }\n}\n\n/// Get a group by name.\n///\n/// `'t` is the lifetime of the matched text and `'i` is the lifetime\n/// of the group name (the index).\n///\n/// The text can't outlive the `Captures` object if this method is\n/// used, because of how `Index` is defined (normally `a[i]` is part\n/// of `a` and can't outlive it); to do that, use `name` instead.\n///\n/// # Panics\n///\n/// If there is no group named by the given value.\nimpl<'t, 'i> Index<&'i str> for Captures<'t> {\n    type Output = [u8];\n\n    fn index<'a>(&'a self, name: &'i str) -> &'a [u8] {\n        self.name(name)\n            .map(|m| m.as_bytes())\n            .unwrap_or_else(|| panic!(\"no group named '{}'\", name))\n    }\n}\n\n/// An iterator that yields all capturing matches in the order in which they\n/// appear in the regex.\n///\n/// If a particular capture group didn't participate in the match, then `None`\n/// is yielded for that capture. The first match always corresponds to the\n/// overall match of the regex.\n///\n/// The lifetime `'c` corresponds to the lifetime of the `Captures` value, and\n/// the lifetime `'t` corresponds to the originally matched text.\npub struct SubCaptureMatches<'c, 't: 'c> {\n    caps: &'c Captures<'t>,\n    it: SubCapturesPosIter<'c>,\n}\n\nimpl<'c, 't> Iterator for SubCaptureMatches<'c, 't> {\n    type Item = Option<Match<'t>>;\n\n    fn next(&mut self) -> Option<Option<Match<'t>>> {\n        self.it\n            .next()\n            .map(|cap| cap.map(|(s, e)| Match::new(self.caps.text, s, e)))\n    }\n}\n\n/// Replacer describes types that can be used to replace matches in a byte\n/// string.\n///\n/// In general, users of this crate shouldn't need to implement this trait,\n/// since implementations are already provided for `&[u8]` and\n/// `FnMut(&Captures) -> Vec<u8>` (or any `FnMut(&Captures) -> T`\n/// where `T: AsRef<[u8]>`), which covers most use cases.\npub trait Replacer {\n    /// Appends text to `dst` to replace the current match.\n    ///\n    /// The current match is represented by `caps`, which is guaranteed to\n    /// have a match at capture group `0`.\n    ///\n    /// For example, a no-op replacement would be\n    /// `dst.extend(&caps[0])`.\n    fn replace_append(&mut self, caps: &Captures, dst: &mut Vec<u8>);\n\n    /// Return a fixed unchanging replacement byte string.\n    ///\n    /// When doing replacements, if access to `Captures` is not needed (e.g.,\n    /// the replacement byte string does not need `$` expansion), then it can\n    /// be beneficial to avoid finding sub-captures.\n    ///\n    /// In general, this is called once for every call to `replacen`.\n    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {\n        None\n    }\n\n    /// Return a `Replacer` that borrows and wraps this `Replacer`.\n    ///\n    /// This is useful when you want to take a generic `Replacer` (which might\n    /// not be cloneable) and use it without consuming it, so it can be used\n    /// more than once.\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// use regex::bytes::{Regex, Replacer};\n    ///\n    /// fn replace_all_twice<R: Replacer>(\n    ///     re: Regex,\n    ///     src: &[u8],\n    ///     mut rep: R,\n    /// ) -> Vec<u8> {\n    ///     let dst = re.replace_all(src, rep.by_ref());\n    ///     let dst = re.replace_all(&dst, rep.by_ref());\n    ///     dst.into_owned()\n    /// }\n    /// ```\n    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {\n        ReplacerRef(self)\n    }\n}\n\n/// By-reference adaptor for a `Replacer`\n///\n/// Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).\n#[derive(Debug)]\npub struct ReplacerRef<'a, R: ?Sized + 'a>(&'a mut R);\n\nimpl<'a, R: Replacer + ?Sized + 'a> Replacer for ReplacerRef<'a, R> {\n    fn replace_append(&mut self, caps: &Captures, dst: &mut Vec<u8>) {\n        self.0.replace_append(caps, dst)\n    }\n    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {\n        self.0.no_expansion()\n    }\n}\n\nimpl<'a> Replacer for &'a [u8] {\n    fn replace_append(&mut self, caps: &Captures, dst: &mut Vec<u8>) {\n        caps.expand(*self, dst);\n    }\n\n    fn no_expansion(&mut self) -> Option<Cow<[u8]>> {\n        match find_byte(b'$', *self) {\n            Some(_) => None,\n            None => Some(Cow::Borrowed(*self)),\n        }\n    }\n}\n\nimpl<F, T> Replacer for F\nwhere\n    F: FnMut(&Captures) -> T,\n    T: AsRef<[u8]>,\n{\n    fn replace_append(&mut self, caps: &Captures, dst: &mut Vec<u8>) {\n        dst.extend_from_slice((*self)(caps).as_ref());\n    }\n}\n\n/// `NoExpand` indicates literal byte string replacement.\n///\n/// It can be used with `replace` and `replace_all` to do a literal byte string\n/// replacement without expanding `$name` to their corresponding capture\n/// groups. This can be both convenient (to avoid escaping `$`, for example)\n/// and performant (since capture groups don't need to be found).\n///\n/// `'t` is the lifetime of the literal text.\npub struct NoExpand<'t>(pub &'t [u8]);\n\nimpl<'t> Replacer for NoExpand<'t> {\n    fn replace_append(&mut self, _: &Captures, dst: &mut Vec<u8>) {\n        dst.extend_from_slice(self.0);\n    }\n\n    fn no_expansion(&mut self) -> Option<Cow<[u8]>> {\n        Some(Cow::Borrowed(self.0))\n    }\n}\n","traces":[{"line":29,"address":[5322336],"length":1,"stats":{"Line":7},"fn_name":"start"},{"line":30,"address":[5322341],"length":1,"stats":{"Line":7},"fn_name":null},{"line":35,"address":[5322352],"length":1,"stats":{"Line":7},"fn_name":"end"},{"line":36,"address":[5322357],"length":1,"stats":{"Line":7},"fn_name":null},{"line":42,"address":[5322368],"length":1,"stats":{"Line":8},"fn_name":"range"},{"line":43,"address":[5322377],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[5322416],"length":1,"stats":{"Line":8},"fn_name":"as_bytes"},{"line":49,"address":[5322425],"length":1,"stats":{"Line":8},"fn_name":null},{"line":54,"address":[5322528],"length":1,"stats":{"Line":6},"fn_name":"new"},{"line":60,"address":[4580080],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":61,"address":[4580084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[5322576],"length":1,"stats":{"Line":3},"fn_name":"fmt"},{"line":82,"address":[5322599],"length":1,"stats":{"Line":3},"fn_name":null},{"line":88,"address":[5322800],"length":1,"stats":{"Line":3},"fn_name":"fmt"},{"line":89,"address":[5322814],"length":1,"stats":{"Line":3},"fn_name":null},{"line":98,"address":[5322848],"length":1,"stats":{"Line":12},"fn_name":"from"},{"line":99,"address":[5322855],"length":1,"stats":{"Line":12},"fn_name":null},{"line":107,"address":[5322944],"length":1,"stats":{"Line":0},"fn_name":"from_str"},{"line":108,"address":[5322965],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[5323033,5322992],"length":1,"stats":{"Line":8},"fn_name":"new"},{"line":119,"address":[5323009,5323055],"length":1,"stats":{"Line":17},"fn_name":null},{"line":140,"address":[5323120],"length":1,"stats":{"Line":3},"fn_name":"is_match"},{"line":141,"address":[5323143],"length":1,"stats":{"Line":3},"fn_name":null},{"line":164,"address":[5323168],"length":1,"stats":{"Line":0},"fn_name":"find"},{"line":165,"address":[5323198],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[5323216],"length":1,"stats":{"Line":9},"fn_name":"find_iter"},{"line":187,"address":[5323373],"length":1,"stats":{"Line":9},"fn_name":null},{"line":253,"address":[5323546,5323456],"length":1,"stats":{"Line":6},"fn_name":"captures"},{"line":254,"address":[5323490],"length":1,"stats":{"Line":6},"fn_name":null},{"line":255,"address":[5297159,5297193,5297072],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":256,"address":[5297079],"length":1,"stats":{"Line":5},"fn_name":null},{"line":257,"address":[5297086],"length":1,"stats":{"Line":5},"fn_name":null},{"line":258,"address":[5297104],"length":1,"stats":{"Line":5},"fn_name":null},{"line":288,"address":[5323760],"length":1,"stats":{"Line":3},"fn_name":"captures_iter"},{"line":292,"address":[5323917],"length":1,"stats":{"Line":3},"fn_name":null},{"line":315,"address":[5324000],"length":1,"stats":{"Line":4},"fn_name":"split"},{"line":316,"address":[5324022],"length":1,"stats":{"Line":4},"fn_name":null},{"line":339,"address":[5324096],"length":1,"stats":{"Line":3},"fn_name":"splitn"},{"line":344,"address":[5324123],"length":1,"stats":{"Line":3},"fn_name":null},{"line":455,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":460,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":469,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":474,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":483,"address":[],"length":0,"stats":{"Line":13},"fn_name":null},{"line":489,"address":[],"length":0,"stats":{"Line":36},"fn_name":null},{"line":490,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":491,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":492,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":494,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":495,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":496,"address":[],"length":0,"stats":{"Line":27},"fn_name":null},{"line":497,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":498,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":500,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":501,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":502,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":504,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":505,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":510,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":511,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":512,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":514,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":515,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":516,"address":[],"length":0,"stats":{"Line":36},"fn_name":null},{"line":517,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":518,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":521,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":522,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":523,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":524,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":526,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":527,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":554,"address":[5324208],"length":1,"stats":{"Line":5},"fn_name":"shortest_match"},{"line":555,"address":[5324231],"length":1,"stats":{"Line":5},"fn_name":null},{"line":564,"address":[5324272],"length":1,"stats":{"Line":3},"fn_name":"shortest_match_at"},{"line":569,"address":[5324445],"length":1,"stats":{"Line":3},"fn_name":null},{"line":578,"address":[5362768],"length":1,"stats":{"Line":3},"fn_name":"is_match_at"},{"line":579,"address":[5362792],"length":1,"stats":{"Line":3},"fn_name":null},{"line":588,"address":[5362848],"length":1,"stats":{"Line":0},"fn_name":"find_at"},{"line":593,"address":[5426009,5426027,5363024],"length":1,"stats":{"Line":0},"fn_name":null},{"line":595,"address":[5363040],"length":1,"stats":{"Line":0},"fn_name":null},{"line":596,"address":[5297286,5297264],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":609,"address":[5426096],"length":1,"stats":{"Line":0},"fn_name":"captures_read"},{"line":614,"address":[5426130],"length":1,"stats":{"Line":0},"fn_name":null},{"line":623,"address":[5426144],"length":1,"stats":{"Line":6},"fn_name":"captures_read_at"},{"line":629,"address":[5426302,5426360,5426327],"length":1,"stats":{"Line":17},"fn_name":null},{"line":631,"address":[5426317],"length":1,"stats":{"Line":6},"fn_name":null},{"line":632,"address":[5297382,5297360],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}"},{"line":641,"address":[5426400],"length":1,"stats":{"Line":0},"fn_name":"read_captures_at"},{"line":647,"address":[5426437],"length":1,"stats":{"Line":0},"fn_name":null},{"line":654,"address":[5426464],"length":1,"stats":{"Line":3},"fn_name":"as_str"},{"line":655,"address":[5426572,5426473,5426545],"length":1,"stats":{"Line":3},"fn_name":null},{"line":659,"address":[5426576],"length":1,"stats":{"Line":3},"fn_name":"capture_names"},{"line":660,"address":[5426585],"length":1,"stats":{"Line":3},"fn_name":null},{"line":664,"address":[5426672],"length":1,"stats":{"Line":3},"fn_name":"captures_len"},{"line":665,"address":[5426681],"length":1,"stats":{"Line":3},"fn_name":null},{"line":670,"address":[5426736],"length":1,"stats":{"Line":6},"fn_name":"capture_locations"},{"line":671,"address":[5426826],"length":1,"stats":{"Line":6},"fn_name":null},{"line":679,"address":[5426896],"length":1,"stats":{"Line":0},"fn_name":"locations"},{"line":680,"address":[5426986],"length":1,"stats":{"Line":0},"fn_name":null},{"line":697,"address":[5427056],"length":1,"stats":{"Line":9},"fn_name":"next"},{"line":698,"address":[5427073],"length":1,"stats":{"Line":9},"fn_name":null},{"line":699,"address":[5297456,5297478],"length":1,"stats":{"Line":19},"fn_name":"{{closure}}"},{"line":717,"address":[5427168],"length":1,"stats":{"Line":3},"fn_name":"next"},{"line":718,"address":[5297761,5297552,5297623],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":719,"address":[5297570],"length":1,"stats":{"Line":3},"fn_name":null},{"line":720,"address":[5297648],"length":1,"stats":{"Line":3},"fn_name":null},{"line":721,"address":[5297680,5297739],"length":1,"stats":{"Line":6},"fn_name":null},{"line":738,"address":[5427264],"length":1,"stats":{"Line":4},"fn_name":"next"},{"line":739,"address":[5427279],"length":1,"stats":{"Line":4},"fn_name":null},{"line":740,"address":[5427326,5427466,5427704],"length":1,"stats":{"Line":8},"fn_name":null},{"line":741,"address":[5427342],"length":1,"stats":{"Line":4},"fn_name":null},{"line":742,"address":[5427473,5427590],"length":1,"stats":{"Line":8},"fn_name":null},{"line":743,"address":[5427581],"length":1,"stats":{"Line":4},"fn_name":null},{"line":745,"address":[5427597,5427530],"length":1,"stats":{"Line":8},"fn_name":null},{"line":746,"address":[5427919,5427628,5427889],"length":1,"stats":{"Line":4},"fn_name":null},{"line":747,"address":[5427686],"length":1,"stats":{"Line":4},"fn_name":null},{"line":750,"address":[5427365],"length":1,"stats":{"Line":4},"fn_name":null},{"line":751,"address":[5427434,5427721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":752,"address":[5427813],"length":1,"stats":{"Line":4},"fn_name":null},{"line":753,"address":[5427850],"length":1,"stats":{"Line":4},"fn_name":null},{"line":773,"address":[5427920],"length":1,"stats":{"Line":3},"fn_name":"next"},{"line":774,"address":[5427929],"length":1,"stats":{"Line":3},"fn_name":null},{"line":775,"address":[5427976],"length":1,"stats":{"Line":5},"fn_name":null},{"line":778,"address":[5428221,5427946,5428010,5428251],"length":1,"stats":{"Line":11},"fn_name":null},{"line":779,"address":[5428014],"length":1,"stats":{"Line":4},"fn_name":null},{"line":780,"address":[5428061],"length":1,"stats":{"Line":4},"fn_name":null},{"line":783,"address":[5428026],"length":1,"stats":{"Line":4},"fn_name":null},{"line":784,"address":[5428083,5428194],"length":1,"stats":{"Line":7},"fn_name":null},{"line":786,"address":[5428185],"length":1,"stats":{"Line":3},"fn_name":null},{"line":789,"address":[5428140,5428201],"length":1,"stats":{"Line":9},"fn_name":null},{"line":805,"address":[5428256],"length":1,"stats":{"Line":0},"fn_name":"next"},{"line":806,"address":[5428273],"length":1,"stats":{"Line":3},"fn_name":null},{"line":809,"address":[5297904,5297952,5297961,5297913],"length":1,"stats":{"Line":12},"fn_name":"{{closure}}"},{"line":812,"address":[5428336],"length":1,"stats":{"Line":3},"fn_name":"size_hint"},{"line":813,"address":[5428353],"length":1,"stats":{"Line":3},"fn_name":null},{"line":849,"address":[5428368],"length":1,"stats":{"Line":0},"fn_name":"get"},{"line":850,"address":[5428389],"length":1,"stats":{"Line":0},"fn_name":null},{"line":858,"address":[5428416],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":859,"address":[5428425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":869,"address":[5428448],"length":1,"stats":{"Line":0},"fn_name":"pos"},{"line":870,"address":[5428469],"length":1,"stats":{"Line":0},"fn_name":null},{"line":911,"address":[5428496],"length":1,"stats":{"Line":3},"fn_name":"get"},{"line":912,"address":[5298016,5298038],"length":1,"stats":{"Line":13},"fn_name":"{{closure}}"},{"line":917,"address":[5428592],"length":1,"stats":{"Line":3},"fn_name":"name"},{"line":918,"address":[5298128,5298145],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":926,"address":[5428736],"length":1,"stats":{"Line":3},"fn_name":"iter"},{"line":927,"address":[5428748],"length":1,"stats":{"Line":3},"fn_name":null},{"line":946,"address":[5428832],"length":1,"stats":{"Line":3},"fn_name":"expand"},{"line":947,"address":[5428856],"length":1,"stats":{"Line":3},"fn_name":null},{"line":955,"address":[5428880],"length":1,"stats":{"Line":3},"fn_name":"len"},{"line":956,"address":[5428889],"length":1,"stats":{"Line":3},"fn_name":null},{"line":961,"address":[5428928],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":962,"address":[5428949],"length":1,"stats":{"Line":0},"fn_name":null},{"line":969,"address":[5429056,5429110],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":970,"address":[5429936,5429989],"length":1,"stats":{"Line":0},"fn_name":"escape_bytes"},{"line":971,"address":[5429982],"length":1,"stats":{"Line":0},"fn_name":null},{"line":972,"address":[5430261,5430070,5430136,5430162,5430004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":973,"address":[5430176,5430159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":975,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":978,"address":[5430304,5430349],"length":1,"stats":{"Line":0},"fn_name":"escape_byte"},{"line":981,"address":[5430361,5430319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":982,"address":[5430377,5430440],"length":1,"stats":{"Line":0},"fn_name":null},{"line":987,"address":[5298192,5298211],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":988,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":989,"address":[5429176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":990,"address":[5429864,5429418,5429200,5429265],"length":1,"stats":{"Line":0},"fn_name":null},{"line":991,"address":[5298256,5298285],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":992,"address":[5429776,5429841,5429653],"length":1,"stats":{"Line":0},"fn_name":null},{"line":993,"address":[5429792],"length":1,"stats":{"Line":0},"fn_name":null},{"line":995,"address":[5429727],"length":1,"stats":{"Line":0},"fn_name":null},{"line":998,"address":[5429392],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1016,"address":[5430512],"length":1,"stats":{"Line":3},"fn_name":"index"},{"line":1017,"address":[5430592,5430526],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1018,"address":[5298404,5298400],"length":1,"stats":{"Line":6},"fn_name":"{{closure}}"},{"line":1019,"address":[5298432,5298448],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":1038,"address":[5430640],"length":1,"stats":{"Line":3},"fn_name":"index"},{"line":1039,"address":[5430659,5430730],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1040,"address":[5298592,5298596],"length":1,"stats":{"Line":6},"fn_name":"{{closure}}"},{"line":1041,"address":[5298624,5298640],"length":1,"stats":{"Line":9},"fn_name":"{{closure}}"},{"line":1062,"address":[5430784],"length":1,"stats":{"Line":3},"fn_name":"next"},{"line":1063,"address":[5430843,5430796],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1065,"address":[5298784,5298896,5298806,5298908],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}"},{"line":1093,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":1094,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":1118,"address":[5298976,5299008],"length":1,"stats":{"Line":0},"fn_name":"by_ref<&[u8]>"},{"line":1119,"address":[5299017,5298985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1130,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1131,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1133,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1134,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1139,"address":[5430880],"length":1,"stats":{"Line":3},"fn_name":"replace_append"},{"line":1140,"address":[5430899],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1143,"address":[5430944],"length":1,"stats":{"Line":3},"fn_name":"no_expansion"},{"line":1144,"address":[5431090,5430956],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1145,"address":[5431099,5431005],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1146,"address":[5431024],"length":1,"stats":{"Line":3},"fn_name":null},{"line":1156,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":1157,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":1172,"address":[5431120],"length":1,"stats":{"Line":0},"fn_name":"replace_append"},{"line":1173,"address":[5431138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1176,"address":[5431168],"length":1,"stats":{"Line":5},"fn_name":"no_expansion"},{"line":1177,"address":[5431180],"length":1,"stats":{"Line":5},"fn_name":null}],"covered":150,"coverable":203},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","re_set.rs"],"content":"macro_rules! define_set {\n    ($name:ident, $builder_mod:ident, $text_ty:ty, $as_bytes:expr,\n     $(#[$doc_regexset_example:meta])* ) => {\n        pub mod $name {\n            use std::fmt;\n            use std::iter;\n            use std::slice;\n            use std::vec;\n\n            use error::Error;\n            use exec::Exec;\n            use re_builder::$builder_mod::RegexSetBuilder;\n            use re_trait::RegularExpression;\n\n/// Match multiple (possibly overlapping) regular expressions in a single scan.\n///\n/// A regex set corresponds to the union of two or more regular expressions.\n/// That is, a regex set will match text where at least one of its\n/// constituent regular expressions matches. A regex set as its formulated here\n/// provides a touch more power: it will also report *which* regular\n/// expressions in the set match. Indeed, this is the key difference between\n/// regex sets and a single `Regex` with many alternates, since only one\n/// alternate can match at a time.\n///\n/// For example, consider regular expressions to match email addresses and\n/// domains: `[a-z]+@[a-z]+\\.(com|org|net)` and `[a-z]+\\.(com|org|net)`. If a\n/// regex set is constructed from those regexes, then searching the text\n/// `foo@example.com` will report both regexes as matching. Of course, one\n/// could accomplish this by compiling each regex on its own and doing two\n/// searches over the text. The key advantage of using a regex set is that it\n/// will report the matching regexes using a *single pass through the text*.\n/// If one has hundreds or thousands of regexes to match repeatedly (like a URL\n/// router for a complex web application or a user agent matcher), then a regex\n/// set can realize huge performance gains.\n///\n/// # Example\n///\n/// This shows how the above two regexes (for matching email addresses and\n/// domains) might work:\n///\n$(#[$doc_regexset_example])*\n///\n/// Note that it would be possible to adapt the above example to using `Regex`\n/// with an expression like:\n///\n/// ```ignore\n/// (?P<email>[a-z]+@(?P<email_domain>[a-z]+[.](com|org|net)))|(?P<domain>[a-z]+[.](com|org|net))\n/// ```\n///\n/// After a match, one could then inspect the capture groups to figure out\n/// which alternates matched. The problem is that it is hard to make this\n/// approach scale when there are many regexes since the overlap between each\n/// alternate isn't always obvious to reason about.\n///\n/// # Limitations\n///\n/// Regex sets are limited to answering the following two questions:\n///\n/// 1. Does any regex in the set match?\n/// 2. If so, which regexes in the set match?\n///\n/// As with the main `Regex` type, it is cheaper to ask (1) instead of (2)\n/// since the matching engines can stop after the first match is found.\n///\n/// Other features like finding the location of successive matches or their\n/// sub-captures aren't supported. If you need this functionality, the\n/// recommended approach is to compile each regex in the set independently and\n/// selectively match them based on which regexes in the set matched.\n///\n/// # Performance\n///\n/// A `RegexSet` has the same performance characteristics as `Regex`. Namely,\n/// search takes `O(mn)` time, where `m` is proportional to the size of the\n/// regex set and `n` is proportional to the length of the search text.\n#[derive(Clone)]\npub struct RegexSet(Exec);\n\nimpl RegexSet {\n    /// Create a new regex set with the given regular expressions.\n    ///\n    /// This takes an iterator of `S`, where `S` is something that can produce\n    /// a `&str`. If any of the strings in the iterator are not valid regular\n    /// expressions, then an error is returned.\n    ///\n    /// # Example\n    ///\n    /// Create a new regex set from an iterator of strings:\n    ///\n    /// ```rust\n    /// # use regex::RegexSet;\n    /// let set = RegexSet::new(&[r\"\\w+\", r\"\\d+\"]).unwrap();\n    /// assert!(set.is_match(\"foo\"));\n    /// ```\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n            where S: AsRef<str>, I: IntoIterator<Item=S> {\n        RegexSetBuilder::new(exprs).build()\n    }\n\n    /// Returns true if and only if one of the regexes in this set matches\n    /// the text given.\n    ///\n    /// This method should be preferred if you only need to test whether any\n    /// of the regexes in the set should match, but don't care about *which*\n    /// regexes matched. This is because the underlying matching engine will\n    /// quit immediately after seeing the first match instead of continuing to\n    /// find all matches.\n    ///\n    /// Note that as with searches using `Regex`, the expression is unanchored\n    /// by default. That is, if the regex does not start with `^` or `\\A`, or\n    /// end with `$` or `\\z`, then it is permitted to match anywhere in the\n    /// text.\n    ///\n    /// # Example\n    ///\n    /// Tests whether a set matches some text:\n    ///\n    /// ```rust\n    /// # use regex::RegexSet;\n    /// let set = RegexSet::new(&[r\"\\w+\", r\"\\d+\"]).unwrap();\n    /// assert!(set.is_match(\"foo\"));\n    /// assert!(!set.is_match(\"☃\"));\n    /// ```\n    pub fn is_match(&self, text: $text_ty) -> bool {\n        self.is_match_at(text, 0)\n    }\n\n    /// Returns the same as is_match, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    #[doc(hidden)]\n    pub fn is_match_at(&self, text: $text_ty, start: usize) -> bool {\n        self.0.searcher().is_match_at($as_bytes(text), start)\n    }\n\n    /// Returns the set of regular expressions that match in the given text.\n    ///\n    /// The set returned contains the index of each regular expression that\n    /// matches in the given text. The index is in correspondence with the\n    /// order of regular expressions given to `RegexSet`'s constructor.\n    ///\n    /// The set can also be used to iterate over the matched indices.\n    ///\n    /// Note that as with searches using `Regex`, the expression is unanchored\n    /// by default. That is, if the regex does not start with `^` or `\\A`, or\n    /// end with `$` or `\\z`, then it is permitted to match anywhere in the\n    /// text.\n    ///\n    /// # Example\n    ///\n    /// Tests which regular expressions match the given text:\n    ///\n    /// ```rust\n    /// # use regex::RegexSet;\n    /// let set = RegexSet::new(&[\n    ///     r\"\\w+\",\n    ///     r\"\\d+\",\n    ///     r\"\\pL+\",\n    ///     r\"foo\",\n    ///     r\"bar\",\n    ///     r\"barfoo\",\n    ///     r\"foobar\",\n    /// ]).unwrap();\n    /// let matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\n    /// assert_eq!(matches, vec![0, 2, 3, 4, 6]);\n    ///\n    /// // You can also test whether a particular regex matched:\n    /// let matches = set.matches(\"foobar\");\n    /// assert!(!matches.matched(5));\n    /// assert!(matches.matched(6));\n    /// ```\n    pub fn matches(&self, text: $text_ty) -> SetMatches {\n        let mut matches = vec![false; self.0.regex_strings().len()];\n        let any = self.read_matches_at(&mut matches, text, 0);\n        SetMatches {\n            matched_any: any,\n            matches: matches,\n        }\n    }\n\n    /// Returns the same as matches, but starts the search at the given\n    /// offset and stores the matches into the slice given.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    ///\n    /// `matches` must have a length that is at least the number of regexes\n    /// in this set.\n    ///\n    /// This method returns true if and only if at least one member of\n    /// `matches` is true after executing the set against `text`.\n    #[doc(hidden)]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        text: $text_ty,\n        start: usize,\n    ) -> bool {\n        self.0.searcher().many_matches_at(matches, $as_bytes(text), start)\n    }\n\n    /// Returns the total number of regular expressions in this set.\n    pub fn len(&self) -> usize {\n        self.0.regex_strings().len()\n    }\n\n    /// Returns the patterns that this set will match on.\n    ///\n    /// This function can be used to determine the pattern for a match. The\n    /// slice returned has exactly as many patterns givens to this regex set,\n    /// and the order of the slice is the same as the order of the patterns\n    /// provided to the set.\n    ///\n    /// # Example\n    ///\n    /// ```rust\n    /// # use regex::RegexSet;\n    /// let set = RegexSet::new(&[\n    ///     r\"\\w+\",\n    ///     r\"\\d+\",\n    ///     r\"\\pL+\",\n    ///     r\"foo\",\n    ///     r\"bar\",\n    ///     r\"barfoo\",\n    ///     r\"foobar\",\n    /// ]).unwrap();\n    /// let matches: Vec<_> = set\n    ///     .matches(\"foobar\")\n    ///     .into_iter()\n    ///     .map(|match_idx| &set.patterns()[match_idx])\n    ///     .collect();\n    /// assert_eq!(matches, vec![r\"\\w+\", r\"\\pL+\", r\"foo\", r\"bar\", r\"foobar\"]);\n    /// ```\n    pub fn patterns(&self) -> &[String] {\n        self.0.regex_strings()\n    }\n}\n\n/// A set of matches returned by a regex set.\n#[derive(Clone, Debug)]\npub struct SetMatches {\n    matched_any: bool,\n    matches: Vec<bool>,\n}\n\nimpl SetMatches {\n    /// Whether this set contains any matches.\n    pub fn matched_any(&self) -> bool {\n        self.matched_any\n    }\n\n    /// Whether the regex at the given index matched.\n    ///\n    /// The index for a regex is determined by its insertion order upon the\n    /// initial construction of a `RegexSet`, starting at `0`.\n    ///\n    /// # Panics\n    ///\n    /// If `regex_index` is greater than or equal to `self.len()`.\n    pub fn matched(&self, regex_index: usize) -> bool {\n        self.matches[regex_index]\n    }\n\n    /// The total number of regexes in the set that created these matches.\n    pub fn len(&self) -> usize {\n        self.matches.len()\n    }\n\n    /// Returns an iterator over indexes in the regex that matched.\n    ///\n    /// This will always produces matches in ascending order of index, where\n    /// the index corresponds to the index of the regex that matched with\n    /// respect to its position when initially building the set.\n    pub fn iter(&self) -> SetMatchesIter {\n        SetMatchesIter((&*self.matches).into_iter().enumerate())\n    }\n}\n\nimpl IntoIterator for SetMatches {\n    type IntoIter = SetMatchesIntoIter;\n    type Item = usize;\n\n    fn into_iter(self) -> Self::IntoIter {\n        SetMatchesIntoIter(self.matches.into_iter().enumerate())\n    }\n}\n\nimpl<'a> IntoIterator for &'a SetMatches {\n    type IntoIter = SetMatchesIter<'a>;\n    type Item = usize;\n\n    fn into_iter(self) -> Self::IntoIter {\n        self.iter()\n    }\n}\n\n/// An owned iterator over the set of matches from a regex set.\n///\n/// This will always produces matches in ascending order of index, where the\n/// index corresponds to the index of the regex that matched with respect to\n/// its position when initially building the set.\npub struct SetMatchesIntoIter(iter::Enumerate<vec::IntoIter<bool>>);\n\nimpl Iterator for SetMatchesIntoIter {\n    type Item = usize;\n\n    fn next(&mut self) -> Option<usize> {\n        loop {\n            match self.0.next() {\n                None => return None,\n                Some((_, false)) => {}\n                Some((i, true)) => return Some(i),\n            }\n        }\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.0.size_hint()\n    }\n}\n\nimpl DoubleEndedIterator for SetMatchesIntoIter {\n    fn next_back(&mut self) -> Option<usize> {\n        loop {\n            match self.0.next_back() {\n                None => return None,\n                Some((_, false)) => {}\n                Some((i, true)) => return Some(i),\n            }\n        }\n    }\n}\n\n/// A borrowed iterator over the set of matches from a regex set.\n///\n/// The lifetime `'a` refers to the lifetime of a `SetMatches` value.\n///\n/// This will always produces matches in ascending order of index, where the\n/// index corresponds to the index of the regex that matched with respect to\n/// its position when initially building the set.\n#[derive(Clone)]\npub struct SetMatchesIter<'a>(iter::Enumerate<slice::Iter<'a, bool>>);\n\nimpl<'a> Iterator for SetMatchesIter<'a> {\n    type Item = usize;\n\n    fn next(&mut self) -> Option<usize> {\n        loop {\n            match self.0.next() {\n                None => return None,\n                Some((_, &false)) => {}\n                Some((i, &true)) => return Some(i),\n            }\n        }\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.0.size_hint()\n    }\n}\n\nimpl<'a> DoubleEndedIterator for SetMatchesIter<'a> {\n    fn next_back(&mut self) -> Option<usize> {\n        loop {\n            match self.0.next_back() {\n                None => return None,\n                Some((_, &false)) => {}\n                Some((i, &true)) => return Some(i),\n            }\n        }\n    }\n}\n\n#[doc(hidden)]\nimpl From<Exec> for RegexSet {\n    fn from(exec: Exec) -> Self {\n        RegexSet(exec)\n    }\n}\n\nimpl fmt::Debug for RegexSet {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"RegexSet({:?})\", self.0.regex_strings())\n    }\n}\n\n#[allow(dead_code)] fn as_bytes_str(text: &str) -> &[u8] { text.as_bytes() }\n#[allow(dead_code)] fn as_bytes_bytes(text: &[u8]) -> &[u8] { text }\n        }\n    }\n}\n\ndefine_set! {\n    unicode,\n    set_unicode,\n    &str,\n    as_bytes_str,\n/// ```rust\n/// # use regex::RegexSet;\n/// let set = RegexSet::new(&[\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n///\n/// // Ask whether any regexes in the set match.\n/// assert!(set.is_match(\"foo@example.com\"));\n///\n/// // Identify which regexes in the set match.\n/// let matches: Vec<_> = set.matches(\"foo@example.com\").into_iter().collect();\n/// assert_eq!(vec![0, 1], matches);\n///\n/// // Try again, but with text that only matches one of the regexes.\n/// let matches: Vec<_> = set.matches(\"example.com\").into_iter().collect();\n/// assert_eq!(vec![1], matches);\n///\n/// // Try again, but with text that doesn't match any regex in the set.\n/// let matches: Vec<_> = set.matches(\"example\").into_iter().collect();\n/// assert!(matches.is_empty());\n/// ```\n}\n\ndefine_set! {\n    bytes,\n    set_bytes,\n    &[u8],\n    as_bytes_bytes,\n/// ```rust\n/// # use regex::bytes::RegexSet;\n/// let set = RegexSet::new(&[\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n///\n/// // Ask whether any regexes in the set match.\n/// assert!(set.is_match(b\"foo@example.com\"));\n///\n/// // Identify which regexes in the set match.\n/// let matches: Vec<_> = set.matches(b\"foo@example.com\").into_iter().collect();\n/// assert_eq!(vec![0, 1], matches);\n///\n/// // Try again, but with text that only matches one of the regexes.\n/// let matches: Vec<_> = set.matches(b\"example.com\").into_iter().collect();\n/// assert_eq!(vec![1], matches);\n///\n/// // Try again, but with text that doesn't match any regex in the set.\n/// let matches: Vec<_> = set.matches(b\"example\").into_iter().collect();\n/// assert!(matches.is_empty());\n/// ```\n}\n","traces":[{"line":75,"address":[4540288,4540332],"length":1,"stats":{"Line":0},"fn_name":"clone"},{"line":76,"address":[4540300],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[7521305,7521045,7521173,7521136,7521008,7521264],"length":1,"stats":{"Line":7},"fn_name":"new<&[&str; 2],&&str>"},{"line":96,"address":[7521148,7521185,7521057,7521317,7521020,7521281],"length":1,"stats":{"Line":14},"fn_name":null},{"line":123,"address":[4499808],"length":1,"stats":{"Line":8},"fn_name":"is_match"},{"line":124,"address":[4499831],"length":1,"stats":{"Line":8},"fn_name":null},{"line":134,"address":[4499856],"length":1,"stats":{"Line":8},"fn_name":"is_match_at"},{"line":135,"address":[4500029],"length":1,"stats":{"Line":8},"fn_name":null},{"line":174,"address":[4538208,4538290],"length":1,"stats":{"Line":8},"fn_name":"matches"},{"line":175,"address":[4538242,4538315],"length":1,"stats":{"Line":21},"fn_name":null},{"line":176,"address":[4538344,4538431],"length":1,"stats":{"Line":26},"fn_name":null},{"line":177,"address":[4538477],"length":1,"stats":{"Line":13},"fn_name":null},{"line":179,"address":[4538440],"length":1,"stats":{"Line":13},"fn_name":null},{"line":196,"address":[4538560],"length":1,"stats":{"Line":13},"fn_name":"read_matches_at"},{"line":202,"address":[4538722],"length":1,"stats":{"Line":13},"fn_name":null},{"line":206,"address":[4538816],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":207,"address":[4538825],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[4538880],"length":1,"stats":{"Line":8},"fn_name":"patterns"},{"line":238,"address":[4538889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":243,"address":[4540409,4540473,4540624,4540544,4540703,4540368],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":245,"address":[4540661,4540389,4540463,4540636],"length":1,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[4540651,4540404,4540683,4540534],"length":1,"stats":{"Line":0},"fn_name":null},{"line":251,"address":[4538928],"length":1,"stats":{"Line":13},"fn_name":"matched_any"},{"line":252,"address":[4538933],"length":1,"stats":{"Line":13},"fn_name":null},{"line":263,"address":[4538944],"length":1,"stats":{"Line":8},"fn_name":"matched"},{"line":264,"address":[4538965],"length":1,"stats":{"Line":8},"fn_name":null},{"line":268,"address":[4539008],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":269,"address":[4539017],"length":1,"stats":{"Line":0},"fn_name":null},{"line":277,"address":[4539040],"length":1,"stats":{"Line":0},"fn_name":"iter"},{"line":278,"address":[4539057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[4539168],"length":1,"stats":{"Line":13},"fn_name":"into_iter"},{"line":287,"address":[4539175],"length":1,"stats":{"Line":13},"fn_name":null},{"line":295,"address":[4539280],"length":1,"stats":{"Line":0},"fn_name":"into_iter"},{"line":296,"address":[4539297],"length":1,"stats":{"Line":0},"fn_name":null},{"line":310,"address":[4539312],"length":1,"stats":{"Line":13},"fn_name":"next"},{"line":311,"address":[4539420,4539422],"length":1,"stats":{"Line":13},"fn_name":null},{"line":312,"address":[4539394,4539329],"length":1,"stats":{"Line":13},"fn_name":null},{"line":313,"address":[4539343,4539396],"length":1,"stats":{"Line":26},"fn_name":null},{"line":314,"address":[4539361],"length":1,"stats":{"Line":13},"fn_name":null},{"line":315,"address":[4539368],"length":1,"stats":{"Line":8},"fn_name":null},{"line":320,"address":[4539424],"length":1,"stats":{"Line":8},"fn_name":"size_hint"},{"line":321,"address":[4539441],"length":1,"stats":{"Line":8},"fn_name":null},{"line":326,"address":[4539456],"length":1,"stats":{"Line":0},"fn_name":"next_back"},{"line":327,"address":[4539564,4539566],"length":1,"stats":{"Line":0},"fn_name":null},{"line":328,"address":[4539538,4539473],"length":1,"stats":{"Line":0},"fn_name":null},{"line":329,"address":[4539540,4539487],"length":1,"stats":{"Line":0},"fn_name":null},{"line":330,"address":[4539505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":331,"address":[4539512],"length":1,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[4540791,4540752],"length":1,"stats":{"Line":0},"fn_name":"clone"},{"line":345,"address":[4540764],"length":1,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[4539568],"length":1,"stats":{"Line":0},"fn_name":"next"},{"line":351,"address":[4539684,4539682],"length":1,"stats":{"Line":0},"fn_name":null},{"line":352,"address":[4539585,4539656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[4539658,4539600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[4539620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":355,"address":[4539630],"length":1,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[4539696],"length":1,"stats":{"Line":0},"fn_name":"size_hint"},{"line":361,"address":[4539713],"length":1,"stats":{"Line":0},"fn_name":null},{"line":366,"address":[4539728],"length":1,"stats":{"Line":0},"fn_name":"next_back"},{"line":367,"address":[4539844,4539842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":368,"address":[4539745,4539816],"length":1,"stats":{"Line":0},"fn_name":null},{"line":369,"address":[4539760,4539818],"length":1,"stats":{"Line":0},"fn_name":null},{"line":370,"address":[4539780],"length":1,"stats":{"Line":0},"fn_name":null},{"line":371,"address":[4539790],"length":1,"stats":{"Line":0},"fn_name":null},{"line":379,"address":[4539856],"length":1,"stats":{"Line":14},"fn_name":"from"},{"line":380,"address":[4539863],"length":1,"stats":{"Line":14},"fn_name":null},{"line":385,"address":[4539952],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":386,"address":[4539975],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[4540176,4540243,4540238],"length":1,"stats":{"Line":10},"fn_name":"as_bytes_str"},{"line":391,"address":[4540256,4540269,4540280],"length":1,"stats":{"Line":6},"fn_name":"as_bytes_bytes"}],"covered":33,"coverable":70},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","re_trait.rs"],"content":"/// Slot is a single saved capture location. Note that there are two slots for\n/// every capture in a regular expression (one slot each for the start and end\n/// of the capture).\npub type Slot = Option<usize>;\n\n/// Locations represents the offsets of each capturing group in a regex for\n/// a single match.\n///\n/// Unlike `Captures`, a `Locations` value only stores offsets.\n#[doc(hidden)]\n#[derive(Clone, Debug)]\npub struct Locations(Vec<Slot>);\n\nimpl Locations {\n    /// Returns the start and end positions of the Nth capture group. Returns\n    /// `None` if `i` is not a valid capture group or if the capture group did\n    /// not match anything. The positions returned are *always* byte indices\n    /// with respect to the original string matched.\n    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {\n        let (s, e) = (i * 2, i * 2 + 1);\n        match (self.0.get(s), self.0.get(e)) {\n            (Some(&Some(s)), Some(&Some(e))) => Some((s, e)),\n            _ => None,\n        }\n    }\n\n    /// Creates an iterator of all the capture group positions in order of\n    /// appearance in the regular expression. Positions are byte indices\n    /// in terms of the original string matched.\n    pub fn iter(&self) -> SubCapturesPosIter {\n        SubCapturesPosIter { idx: 0, locs: self }\n    }\n\n    /// Returns the total number of capturing groups.\n    ///\n    /// This is always at least `1` since every regex has at least `1`\n    /// capturing group that corresponds to the entire match.\n    pub fn len(&self) -> usize {\n        self.0.len() / 2\n    }\n\n    /// Return the individual slots as a slice.\n    pub(crate) fn as_slots(&mut self) -> &mut [Slot] {\n        &mut self.0\n    }\n}\n\n/// An iterator over capture group positions for a particular match of a\n/// regular expression.\n///\n/// Positions are byte indices in terms of the original string matched.\n///\n/// `'c` is the lifetime of the captures.\npub struct SubCapturesPosIter<'c> {\n    idx: usize,\n    locs: &'c Locations,\n}\n\nimpl<'c> Iterator for SubCapturesPosIter<'c> {\n    type Item = Option<(usize, usize)>;\n\n    fn next(&mut self) -> Option<Option<(usize, usize)>> {\n        if self.idx >= self.locs.len() {\n            return None;\n        }\n        let x = match self.locs.pos(self.idx) {\n            None => Some(None),\n            Some((s, e)) => Some(Some((s, e))),\n        };\n        self.idx += 1;\n        x\n    }\n}\n\n/// `RegularExpression` describes types that can implement regex searching.\n///\n/// This trait is my attempt at reducing code duplication and to standardize\n/// the internal API. Specific duplication that is avoided are the `find`\n/// and `capture` iterators, which are slightly tricky.\n///\n/// It's not clear whether this trait is worth it, and it also isn't\n/// clear whether it's useful as a public trait or not. Methods like\n/// `next_after_empty` reak of bad design, but the rest of the methods seem\n/// somewhat reasonable. One particular thing this trait would expose would be\n/// the ability to start the search of a regex anywhere in a haystack, which\n/// isn't possible in the current public API.\npub trait RegularExpression: Sized {\n    /// The type of the haystack.\n    type Text: ?Sized;\n\n    /// The number of capture slots in the compiled regular expression. This is\n    /// always two times the number of capture groups (two slots per group).\n    fn slots_len(&self) -> usize;\n\n    /// Allocates fresh space for all capturing groups in this regex.\n    fn locations(&self) -> Locations {\n        Locations(vec![None; self.slots_len()])\n    }\n\n    /// Returns the position of the next character after `i`.\n    ///\n    /// For example, a haystack with type `&[u8]` probably returns `i+1`,\n    /// whereas a haystack with type `&str` probably returns `i` plus the\n    /// length of the next UTF-8 sequence.\n    fn next_after_empty(&self, text: &Self::Text, i: usize) -> usize;\n\n    /// Returns the location of the shortest match.\n    fn shortest_match_at(\n        &self,\n        text: &Self::Text,\n        start: usize,\n    ) -> Option<usize>;\n\n    /// Returns whether the regex matches the text given.\n    fn is_match_at(&self, text: &Self::Text, start: usize) -> bool;\n\n    /// Returns the leftmost-first match location if one exists.\n    fn find_at(\n        &self,\n        text: &Self::Text,\n        start: usize,\n    ) -> Option<(usize, usize)>;\n\n    /// Returns the leftmost-first match location if one exists, and also\n    /// fills in any matching capture slot locations.\n    fn captures_read_at(\n        &self,\n        locs: &mut Locations,\n        text: &Self::Text,\n        start: usize,\n    ) -> Option<(usize, usize)>;\n\n    /// Returns an iterator over all non-overlapping successive leftmost-first\n    /// matches.\n    fn find_iter(self, text: &Self::Text) -> Matches<Self> {\n        Matches { re: self, text: text, last_end: 0, last_match: None }\n    }\n\n    /// Returns an iterator over all non-overlapping successive leftmost-first\n    /// matches with captures.\n    fn captures_iter(self, text: &Self::Text) -> CaptureMatches<Self> {\n        CaptureMatches(self.find_iter(text))\n    }\n}\n\n/// An iterator over all non-overlapping successive leftmost-first matches.\npub struct Matches<'t, R>\nwhere\n    R: RegularExpression,\n    R::Text: 't,\n{\n    re: R,\n    text: &'t R::Text,\n    last_end: usize,\n    last_match: Option<usize>,\n}\n\nimpl<'t, R> Matches<'t, R>\nwhere\n    R: RegularExpression,\n    R::Text: 't,\n{\n    /// Return the text being searched.\n    pub fn text(&self) -> &'t R::Text {\n        self.text\n    }\n\n    /// Return the underlying regex.\n    pub fn regex(&self) -> &R {\n        &self.re\n    }\n}\n\nimpl<'t, R> Iterator for Matches<'t, R>\nwhere\n    R: RegularExpression,\n    R::Text: 't + AsRef<[u8]>,\n{\n    type Item = (usize, usize);\n\n    fn next(&mut self) -> Option<(usize, usize)> {\n        if self.last_end > self.text.as_ref().len() {\n            return None;\n        }\n        let (s, e) = match self.re.find_at(self.text, self.last_end) {\n            None => return None,\n            Some((s, e)) => (s, e),\n        };\n        if s == e {\n            // This is an empty match. To ensure we make progress, start\n            // the next search at the smallest possible starting position\n            // of the next match following this one.\n            self.last_end = self.re.next_after_empty(self.text, e);\n            // Don't accept empty matches immediately following a match.\n            // Just move on to the next match.\n            if Some(e) == self.last_match {\n                return self.next();\n            }\n        } else {\n            self.last_end = e;\n        }\n        self.last_match = Some(e);\n        Some((s, e))\n    }\n}\n\n/// An iterator over all non-overlapping successive leftmost-first matches with\n/// captures.\npub struct CaptureMatches<'t, R>(Matches<'t, R>)\nwhere\n    R: RegularExpression,\n    R::Text: 't;\n\nimpl<'t, R> CaptureMatches<'t, R>\nwhere\n    R: RegularExpression,\n    R::Text: 't,\n{\n    /// Return the text being searched.\n    pub fn text(&self) -> &'t R::Text {\n        self.0.text()\n    }\n\n    /// Return the underlying regex.\n    pub fn regex(&self) -> &R {\n        self.0.regex()\n    }\n}\n\nimpl<'t, R> Iterator for CaptureMatches<'t, R>\nwhere\n    R: RegularExpression,\n    R::Text: 't + AsRef<[u8]>,\n{\n    type Item = Locations;\n\n    fn next(&mut self) -> Option<Locations> {\n        if self.0.last_end > self.0.text.as_ref().len() {\n            return None;\n        }\n        let mut locs = self.0.re.locations();\n        let (s, e) = match self.0.re.captures_read_at(\n            &mut locs,\n            self.0.text,\n            self.0.last_end,\n        ) {\n            None => return None,\n            Some((s, e)) => (s, e),\n        };\n        if s == e {\n            self.0.last_end = self.0.re.next_after_empty(self.0.text, e);\n            if Some(e) == self.0.last_match {\n                return self.next();\n            }\n        } else {\n            self.0.last_end = e;\n        }\n        self.0.last_match = Some(e);\n        Some(locs)\n    }\n}\n","traces":[{"line":19,"address":[4498416],"length":1,"stats":{"Line":8},"fn_name":"pos"},{"line":20,"address":[4498447,4498937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":21,"address":[4498771,4498619],"length":1,"stats":{"Line":22},"fn_name":null},{"line":22,"address":[4498735,4498780],"length":1,"stats":{"Line":28},"fn_name":null},{"line":23,"address":[4498764],"length":1,"stats":{"Line":8},"fn_name":null},{"line":30,"address":[4499040],"length":1,"stats":{"Line":8},"fn_name":"iter"},{"line":38,"address":[4499088],"length":1,"stats":{"Line":8},"fn_name":"len"},{"line":39,"address":[4499097],"length":1,"stats":{"Line":8},"fn_name":null},{"line":43,"address":[4499136],"length":1,"stats":{"Line":15},"fn_name":"as_slots"},{"line":44,"address":[4499145],"length":1,"stats":{"Line":15},"fn_name":null},{"line":62,"address":[4499184],"length":1,"stats":{"Line":8},"fn_name":"next"},{"line":63,"address":[4499202],"length":1,"stats":{"Line":8},"fn_name":null},{"line":64,"address":[4499286],"length":1,"stats":{"Line":8},"fn_name":null},{"line":66,"address":[4499437,4499262],"length":1,"stats":{"Line":16},"fn_name":null},{"line":67,"address":[4499306,4499441],"length":1,"stats":{"Line":16},"fn_name":null},{"line":68,"address":[4499318],"length":1,"stats":{"Line":8},"fn_name":null},{"line":70,"address":[4499485,4499585,4499555],"length":1,"stats":{"Line":8},"fn_name":null},{"line":71,"address":[4499519],"length":1,"stats":{"Line":8},"fn_name":null},{"line":96,"address":[4583712,4583824],"length":1,"stats":{"Line":15},"fn_name":"locations<regex::exec::ExecNoSync>"},{"line":97,"address":[4583836,4583724],"length":1,"stats":{"Line":15},"fn_name":null},{"line":135,"address":[4583936,4584016],"length":1,"stats":{"Line":15},"fn_name":"find_iter<regex::exec::ExecNoSync>"},{"line":136,"address":[4584043,4583963],"length":1,"stats":{"Line":16},"fn_name":null},{"line":141,"address":[4584192,4584096],"length":1,"stats":{"Line":8},"fn_name":"captures_iter<regex::exec::ExecNoSync>"},{"line":142,"address":[4584123,4584219],"length":1,"stats":{"Line":8},"fn_name":null},{"line":164,"address":[5635584,5635568],"length":1,"stats":{"Line":15},"fn_name":"text<regex::exec::ExecNoSync>"},{"line":165,"address":[5635573,5635589],"length":1,"stats":{"Line":17},"fn_name":null},{"line":169,"address":[5635600,5635616],"length":1,"stats":{"Line":8},"fn_name":"regex<regex::exec::ExecNoSyncStr>"},{"line":170,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[5699328,5635632],"length":1,"stats":{"Line":15},"fn_name":"next<regex::exec::ExecNoSync>"},{"line":182,"address":[5635657,5699353],"length":1,"stats":{"Line":15},"fn_name":null},{"line":183,"address":[5762623,5698848],"length":1,"stats":{"Line":9},"fn_name":null},{"line":185,"address":[5698935,5762613,5635800,5762710,5698838,5762759,5699495,5698984],"length":1,"stats":{"Line":40},"fn_name":null},{"line":186,"address":[5762769,5698994,5762647,5698872],"length":1,"stats":{"Line":30},"fn_name":null},{"line":187,"address":[5698887,5762662],"length":1,"stats":{"Line":10},"fn_name":null},{"line":189,"address":[5698967,5762798,5699023,5699149,5762742,5762924],"length":1,"stats":{"Line":30},"fn_name":null},{"line":193,"address":[5699044,5762819],"length":1,"stats":{"Line":8},"fn_name":null},{"line":196,"address":[5762867,5699092],"length":1,"stats":{"Line":8},"fn_name":null},{"line":197,"address":[5762942,5699167],"length":1,"stats":{"Line":8},"fn_name":null},{"line":200,"address":[5699019,5762794],"length":1,"stats":{"Line":12},"fn_name":null},{"line":202,"address":[5762957,5699182],"length":1,"stats":{"Line":10},"fn_name":null},{"line":203,"address":[5763014,5699239],"length":1,"stats":{"Line":10},"fn_name":null},{"line":220,"address":[5763104,5763152],"length":1,"stats":{"Line":8},"fn_name":"text<regex::exec::ExecNoSync>"},{"line":221,"address":[5763113,5763161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":225,"address":[5763200,5763232],"length":1,"stats":{"Line":8},"fn_name":"regex<regex::exec::ExecNoSync>"},{"line":226,"address":[5763209,5763241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":237,"address":[5764025,5763338,5763952,5763264],"length":1,"stats":{"Line":8},"fn_name":"next<regex::exec::ExecNoSync>"},{"line":238,"address":[5763970,5764050,5763363,5763282],"length":1,"stats":{"Line":16},"fn_name":null},{"line":239,"address":[5763414,5764101],"length":1,"stats":{"Line":8},"fn_name":null},{"line":241,"address":[5764081,5763394],"length":1,"stats":{"Line":8},"fn_name":null},{"line":242,"address":[5763464,5764398,5763586,5763548,5764354],"length":1,"stats":{"Line":11},"fn_name":null},{"line":243,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[5763439,5764126],"length":1,"stats":{"Line":8},"fn_name":null},{"line":245,"address":[5763447,5764134],"length":1,"stats":{"Line":8},"fn_name":null},{"line":247,"address":[5764274,5764422,5763474,5763593,5763610,5764405],"length":1,"stats":{"Line":24},"fn_name":null},{"line":248,"address":[5763506,5764306],"length":1,"stats":{"Line":8},"fn_name":null},{"line":250,"address":[5763756,5764441,5764386,5764568,5763629,5763574],"length":1,"stats":{"Line":24},"fn_name":null},{"line":251,"address":[5763639,5764451],"length":1,"stats":{"Line":8},"fn_name":null},{"line":252,"address":[5764498,5763686],"length":1,"stats":{"Line":8},"fn_name":null},{"line":253,"address":[5764580,5763768],"length":1,"stats":{"Line":8},"fn_name":null},{"line":256,"address":[5764437,5763625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":258,"address":[5763785,5764597],"length":1,"stats":{"Line":8},"fn_name":null},{"line":259,"address":[5764646,5763834],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":60,"coverable":62},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","re_unicode.rs"],"content":"use std::borrow::Cow;\nuse std::collections::HashMap;\nuse std::fmt;\nuse std::ops::{Index, Range};\nuse std::str::FromStr;\nuse std::sync::Arc;\n\nuse find_byte::find_byte;\nuse syntax;\n\nuse error::Error;\nuse exec::{Exec, ExecNoSyncStr};\nuse expand::expand_str;\nuse re_builder::unicode::RegexBuilder;\nuse re_trait::{self, RegularExpression, SubCapturesPosIter};\n\n/// Escapes all regular expression meta characters in `text`.\n///\n/// The string returned may be safely used as a literal in a regular\n/// expression.\npub fn escape(text: &str) -> String {\n    syntax::escape(text)\n}\n\n/// Match represents a single match of a regex in a haystack.\n///\n/// The lifetime parameter `'t` refers to the lifetime of the matched text.\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub struct Match<'t> {\n    text: &'t str,\n    start: usize,\n    end: usize,\n}\n\nimpl<'t> Match<'t> {\n    /// Returns the starting byte offset of the match in the haystack.\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.start\n    }\n\n    /// Returns the ending byte offset of the match in the haystack.\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.end\n    }\n\n    /// Returns the range over the starting and ending byte offsets of the\n    /// match in the haystack.\n    #[inline]\n    pub fn range(&self) -> Range<usize> {\n        self.start..self.end\n    }\n\n    /// Returns the matched text.\n    #[inline]\n    pub fn as_str(&self) -> &'t str {\n        &self.text[self.range()]\n    }\n\n    /// Creates a new match from the given haystack and byte offsets.\n    #[inline]\n    fn new(haystack: &'t str, start: usize, end: usize) -> Match<'t> {\n        Match { text: haystack, start: start, end: end }\n    }\n}\n\nimpl<'t> From<Match<'t>> for &'t str {\n    fn from(m: Match<'t>) -> &'t str {\n        m.as_str()\n    }\n}\n\nimpl<'t> From<Match<'t>> for Range<usize> {\n    fn from(m: Match<'t>) -> Range<usize> {\n        m.range()\n    }\n}\n\n/// A compiled regular expression for matching Unicode strings.\n///\n/// It is represented as either a sequence of bytecode instructions (dynamic)\n/// or as a specialized Rust function (native). It can be used to search, split\n/// or replace text. All searching is done with an implicit `.*?` at the\n/// beginning and end of an expression. To force an expression to match the\n/// whole string (or a prefix or a suffix), you must use an anchor like `^` or\n/// `$` (or `\\A` and `\\z`).\n///\n/// While this crate will handle Unicode strings (whether in the regular\n/// expression or in the search text), all positions returned are **byte\n/// indices**. Every byte index is guaranteed to be at a Unicode code point\n/// boundary.\n///\n/// The lifetimes `'r` and `'t` in this crate correspond to the lifetime of a\n/// compiled regular expression and text to search, respectively.\n///\n/// The only methods that allocate new strings are the string replacement\n/// methods. All other methods (searching and splitting) return borrowed\n/// pointers into the string given.\n///\n/// # Examples\n///\n/// Find the location of a US phone number:\n///\n/// ```rust\n/// # use regex::Regex;\n/// let re = Regex::new(\"[0-9]{3}-[0-9]{3}-[0-9]{4}\").unwrap();\n/// let mat = re.find(\"phone: 111-222-3333\").unwrap();\n/// assert_eq!((mat.start(), mat.end()), (7, 19));\n/// ```\n///\n/// # Using the `std::str::pattern` methods with `Regex`\n///\n/// > **Note**: This section requires that this crate is compiled with the\n/// > `pattern` Cargo feature enabled, which **requires nightly Rust**.\n///\n/// Since `Regex` implements `Pattern`, you can use regexes with methods\n/// defined on `&str`. For example, `is_match`, `find`, `find_iter`\n/// and `split` can be replaced with `str::contains`, `str::find`,\n/// `str::match_indices` and `str::split`.\n///\n/// Here are some examples:\n///\n/// ```rust,ignore\n/// # use regex::Regex;\n/// let re = Regex::new(r\"\\d+\").unwrap();\n/// let haystack = \"a111b222c\";\n///\n/// assert!(haystack.contains(&re));\n/// assert_eq!(haystack.find(&re), Some(1));\n/// assert_eq!(haystack.match_indices(&re).collect::<Vec<_>>(),\n///            vec![(1, 4), (5, 8)]);\n/// assert_eq!(haystack.split(&re).collect::<Vec<_>>(), vec![\"a\", \"b\", \"c\"]);\n/// ```\n#[derive(Clone)]\npub struct Regex(Exec);\n\nimpl fmt::Display for Regex {\n    /// Shows the original regular expression.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.as_str())\n    }\n}\n\nimpl fmt::Debug for Regex {\n    /// Shows the original regular expression.\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Display::fmt(self, f)\n    }\n}\n\n#[doc(hidden)]\nimpl From<Exec> for Regex {\n    fn from(exec: Exec) -> Regex {\n        Regex(exec)\n    }\n}\n\nimpl FromStr for Regex {\n    type Err = Error;\n\n    /// Attempts to parse a string into a regular expression\n    fn from_str(s: &str) -> Result<Regex, Error> {\n        Regex::new(s)\n    }\n}\n\n/// Core regular expression methods.\nimpl Regex {\n    /// Compiles a regular expression. Once compiled, it can be used repeatedly\n    /// to search, split or replace text in a string.\n    ///\n    /// If an invalid expression is given, then an error is returned.\n    pub fn new(re: &str) -> Result<Regex, Error> {\n        RegexBuilder::new(re).build()\n    }\n\n    /// Returns true if and only if the regex matches the string given.\n    ///\n    /// It is recommended to use this method if all you need to do is test\n    /// a match, since the underlying matching engine may be able to do less\n    /// work.\n    ///\n    /// # Example\n    ///\n    /// Test if some text contains at least one word with exactly 13\n    /// Unicode word characters:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let text = \"I categorically deny having triskaidekaphobia.\";\n    /// assert!(Regex::new(r\"\\b\\w{13}\\b\").unwrap().is_match(text));\n    /// # }\n    /// ```\n    pub fn is_match(&self, text: &str) -> bool {\n        self.is_match_at(text, 0)\n    }\n\n    /// Returns the start and end byte range of the leftmost-first match in\n    /// `text`. If no match exists, then `None` is returned.\n    ///\n    /// Note that this should only be used if you want to discover the position\n    /// of the match. Testing the existence of a match is faster if you use\n    /// `is_match`.\n    ///\n    /// # Example\n    ///\n    /// Find the start and end location of the first word with exactly 13\n    /// Unicode word characters:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let text = \"I categorically deny having triskaidekaphobia.\";\n    /// let mat = Regex::new(r\"\\b\\w{13}\\b\").unwrap().find(text).unwrap();\n    /// assert_eq!(mat.start(), 2);\n    /// assert_eq!(mat.end(), 15);\n    /// # }\n    /// ```\n    pub fn find<'t>(&self, text: &'t str) -> Option<Match<'t>> {\n        self.find_at(text, 0)\n    }\n\n    /// Returns an iterator for each successive non-overlapping match in\n    /// `text`, returning the start and end byte indices with respect to\n    /// `text`.\n    ///\n    /// # Example\n    ///\n    /// Find the start and end location of every word with exactly 13 Unicode\n    /// word characters:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let text = \"Retroactively relinquishing remunerations is reprehensible.\";\n    /// for mat in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {\n    ///     println!(\"{:?}\", mat);\n    /// }\n    /// # }\n    /// ```\n    pub fn find_iter<'r, 't>(&'r self, text: &'t str) -> Matches<'r, 't> {\n        Matches(self.0.searcher_str().find_iter(text))\n    }\n\n    /// Returns the capture groups corresponding to the leftmost-first\n    /// match in `text`. Capture group `0` always corresponds to the entire\n    /// match. If no match is found, then `None` is returned.\n    ///\n    /// You should only use `captures` if you need access to the location of\n    /// capturing group matches. Otherwise, `find` is faster for discovering\n    /// the location of the overall match.\n    ///\n    /// # Examples\n    ///\n    /// Say you have some text with movie names and their release years,\n    /// like \"'Citizen Kane' (1941)\". It'd be nice if we could search for text\n    /// looking like that, while also extracting the movie name and its release\n    /// year separately.\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'([^']+)'\\s+\\((\\d{4})\\)\").unwrap();\n    /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n    /// let caps = re.captures(text).unwrap();\n    /// assert_eq!(caps.get(1).unwrap().as_str(), \"Citizen Kane\");\n    /// assert_eq!(caps.get(2).unwrap().as_str(), \"1941\");\n    /// assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");\n    /// // You can also access the groups by index using the Index notation.\n    /// // Note that this will panic on an invalid index.\n    /// assert_eq!(&caps[1], \"Citizen Kane\");\n    /// assert_eq!(&caps[2], \"1941\");\n    /// assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");\n    /// # }\n    /// ```\n    ///\n    /// Note that the full match is at capture group `0`. Each subsequent\n    /// capture group is indexed by the order of its opening `(`.\n    ///\n    /// We can make this example a bit clearer by using *named* capture groups:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")\n    ///                .unwrap();\n    /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n    /// let caps = re.captures(text).unwrap();\n    /// assert_eq!(caps.name(\"title\").unwrap().as_str(), \"Citizen Kane\");\n    /// assert_eq!(caps.name(\"year\").unwrap().as_str(), \"1941\");\n    /// assert_eq!(caps.get(0).unwrap().as_str(), \"'Citizen Kane' (1941)\");\n    /// // You can also access the groups by name using the Index notation.\n    /// // Note that this will panic on an invalid group name.\n    /// assert_eq!(&caps[\"title\"], \"Citizen Kane\");\n    /// assert_eq!(&caps[\"year\"], \"1941\");\n    /// assert_eq!(&caps[0], \"'Citizen Kane' (1941)\");\n    ///\n    /// # }\n    /// ```\n    ///\n    /// Here we name the capture groups, which we can access with the `name`\n    /// method or the `Index` notation with a `&str`. Note that the named\n    /// capture groups are still accessible with `get` or the `Index` notation\n    /// with a `usize`.\n    ///\n    /// The `0`th capture group is always unnamed, so it must always be\n    /// accessed with `get(0)` or `[0]`.\n    pub fn captures<'t>(&self, text: &'t str) -> Option<Captures<'t>> {\n        let mut locs = self.capture_locations();\n        self.captures_read_at(&mut locs, text, 0).map(move |_| Captures {\n            text: text,\n            locs: locs.0,\n            named_groups: self.0.capture_name_idx().clone(),\n        })\n    }\n\n    /// Returns an iterator over all the non-overlapping capture groups matched\n    /// in `text`. This is operationally the same as `find_iter`, except it\n    /// yields information about capturing group matches.\n    ///\n    /// # Example\n    ///\n    /// We can use this to find all movie titles and their release years in\n    /// some text, where the movie is formatted like \"'Title' (xxxx)\":\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\")\n    ///                .unwrap();\n    /// let text = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n    /// for caps in re.captures_iter(text) {\n    ///     println!(\"Movie: {:?}, Released: {:?}\",\n    ///              &caps[\"title\"], &caps[\"year\"]);\n    /// }\n    /// // Output:\n    /// // Movie: Citizen Kane, Released: 1941\n    /// // Movie: The Wizard of Oz, Released: 1939\n    /// // Movie: M, Released: 1931\n    /// # }\n    /// ```\n    pub fn captures_iter<'r, 't>(\n        &'r self,\n        text: &'t str,\n    ) -> CaptureMatches<'r, 't> {\n        CaptureMatches(self.0.searcher_str().captures_iter(text))\n    }\n\n    /// Returns an iterator of substrings of `text` delimited by a match of the\n    /// regular expression. Namely, each element of the iterator corresponds to\n    /// text that *isn't* matched by the regular expression.\n    ///\n    /// This method will *not* copy the text given.\n    ///\n    /// # Example\n    ///\n    /// To split a string delimited by arbitrary amounts of spaces or tabs:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"[ \\t]+\").unwrap();\n    /// let fields: Vec<&str> = re.split(\"a b \\t  c\\td    e\").collect();\n    /// assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n    /// # }\n    /// ```\n    pub fn split<'r, 't>(&'r self, text: &'t str) -> Split<'r, 't> {\n        Split { finder: self.find_iter(text), last: 0 }\n    }\n\n    /// Returns an iterator of at most `limit` substrings of `text` delimited\n    /// by a match of the regular expression. (A `limit` of `0` will return no\n    /// substrings.) Namely, each element of the iterator corresponds to text\n    /// that *isn't* matched by the regular expression. The remainder of the\n    /// string that is not split will be the last element in the iterator.\n    ///\n    /// This method will *not* copy the text given.\n    ///\n    /// # Example\n    ///\n    /// Get the first two words in some text:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"\\W+\").unwrap();\n    /// let fields: Vec<&str> = re.splitn(\"Hey! How are you?\", 3).collect();\n    /// assert_eq!(fields, vec!(\"Hey\", \"How\", \"are you?\"));\n    /// # }\n    /// ```\n    pub fn splitn<'r, 't>(\n        &'r self,\n        text: &'t str,\n        limit: usize,\n    ) -> SplitN<'r, 't> {\n        SplitN { splits: self.split(text), n: limit }\n    }\n\n    /// Replaces the leftmost-first match with the replacement provided.\n    /// The replacement can be a regular string (where `$N` and `$name` are\n    /// expanded to match capture groups) or a function that takes the matches'\n    /// `Captures` and returns the replaced string.\n    ///\n    /// If no match is found, then a copy of the string is returned unchanged.\n    ///\n    /// # Replacement string syntax\n    ///\n    /// All instances of `$name` in the replacement text is replaced with the\n    /// corresponding capture group `name`.\n    ///\n    /// `name` may be an integer corresponding to the index of the\n    /// capture group (counted by order of opening parenthesis where `0` is the\n    /// entire match) or it can be a name (consisting of letters, digits or\n    /// underscores) corresponding to a named capture group.\n    ///\n    /// If `name` isn't a valid capture group (whether the name doesn't exist\n    /// or isn't a valid index), then it is replaced with the empty string.\n    ///\n    /// The longest possible name is used. e.g., `$1a` looks up the capture\n    /// group named `1a` and not the capture group at index `1`. To exert more\n    /// precise control over the name, use braces, e.g., `${1}a`.\n    ///\n    /// To write a literal `$` use `$$`.\n    ///\n    /// # Examples\n    ///\n    /// Note that this function is polymorphic with respect to the replacement.\n    /// In typical usage, this can just be a normal string:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(\"[^01]+\").unwrap();\n    /// assert_eq!(re.replace(\"1078910\", \"\"), \"1010\");\n    /// # }\n    /// ```\n    ///\n    /// But anything satisfying the `Replacer` trait will work. For example,\n    /// a closure of type `|&Captures| -> String` provides direct access to the\n    /// captures corresponding to a match. This allows one to access\n    /// capturing group matches easily:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # use regex::Captures; fn main() {\n    /// let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\n    /// let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {\n    ///     format!(\"{} {}\", &caps[2], &caps[1])\n    /// });\n    /// assert_eq!(result, \"Bruce Springsteen\");\n    /// # }\n    /// ```\n    ///\n    /// But this is a bit cumbersome to use all the time. Instead, a simple\n    /// syntax is supported that expands `$name` into the corresponding capture\n    /// group. Here's the last example, but using this expansion technique\n    /// with named capture groups:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\").unwrap();\n    /// let result = re.replace(\"Springsteen, Bruce\", \"$first $last\");\n    /// assert_eq!(result, \"Bruce Springsteen\");\n    /// # }\n    /// ```\n    ///\n    /// Note that using `$2` instead of `$first` or `$1` instead of `$last`\n    /// would produce the same result. To write a literal `$` use `$$`.\n    ///\n    /// Sometimes the replacement string requires use of curly braces to\n    /// delineate a capture group replacement and surrounding literal text.\n    /// For example, if we wanted to join two words together with an\n    /// underscore:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let re = Regex::new(r\"(?P<first>\\w+)\\s+(?P<second>\\w+)\").unwrap();\n    /// let result = re.replace(\"deep fried\", \"${first}_$second\");\n    /// assert_eq!(result, \"deep_fried\");\n    /// # }\n    /// ```\n    ///\n    /// Without the curly braces, the capture group name `first_` would be\n    /// used, and since it doesn't exist, it would be replaced with the empty\n    /// string.\n    ///\n    /// Finally, sometimes you just want to replace a literal string with no\n    /// regard for capturing group expansion. This can be done by wrapping a\n    /// byte string with `NoExpand`:\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// use regex::NoExpand;\n    ///\n    /// let re = Regex::new(r\"(?P<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\n    /// let result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));\n    /// assert_eq!(result, \"$2 $last\");\n    /// # }\n    /// ```\n    pub fn replace<'t, R: Replacer>(\n        &self,\n        text: &'t str,\n        rep: R,\n    ) -> Cow<'t, str> {\n        self.replacen(text, 1, rep)\n    }\n\n    /// Replaces all non-overlapping matches in `text` with the replacement\n    /// provided. This is the same as calling `replacen` with `limit` set to\n    /// `0`.\n    ///\n    /// See the documentation for `replace` for details on how to access\n    /// capturing group matches in the replacement string.\n    pub fn replace_all<'t, R: Replacer>(\n        &self,\n        text: &'t str,\n        rep: R,\n    ) -> Cow<'t, str> {\n        self.replacen(text, 0, rep)\n    }\n\n    /// Replaces at most `limit` non-overlapping matches in `text` with the\n    /// replacement provided. If `limit` is 0, then all non-overlapping matches\n    /// are replaced.\n    ///\n    /// See the documentation for `replace` for details on how to access\n    /// capturing group matches in the replacement string.\n    pub fn replacen<'t, R: Replacer>(\n        &self,\n        text: &'t str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'t, str> {\n        // If we know that the replacement doesn't have any capture expansions,\n        // then we can fast path. The fast path can make a tremendous\n        // difference:\n        //\n        //   1) We use `find_iter` instead of `captures_iter`. Not asking for\n        //      captures generally makes the regex engines faster.\n        //   2) We don't need to look up all of the capture groups and do\n        //      replacements inside the replacement string. We just push it\n        //      at each match and be done with it.\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(text).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(text);\n            }\n            let mut new = String::with_capacity(text.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                if limit > 0 && i >= limit {\n                    break;\n                }\n                new.push_str(&text[last_match..m.start()]);\n                new.push_str(&rep);\n                last_match = m.end();\n            }\n            new.push_str(&text[last_match..]);\n            return Cow::Owned(new);\n        }\n\n        // The slower path, which we use if the replacement needs access to\n        // capture groups.\n        let mut it = self.captures_iter(text).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(text);\n        }\n        let mut new = String::with_capacity(text.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            if limit > 0 && i >= limit {\n                break;\n            }\n            // unwrap on 0 is OK because captures only reports matches\n            let m = cap.get(0).unwrap();\n            new.push_str(&text[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n        }\n        new.push_str(&text[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\n/// Advanced or \"lower level\" search methods.\nimpl Regex {\n    /// Returns the end location of a match in the text given.\n    ///\n    /// This method may have the same performance characteristics as\n    /// `is_match`, except it provides an end location for a match. In\n    /// particular, the location returned *may be shorter* than the proper end\n    /// of the leftmost-first match.\n    ///\n    /// # Example\n    ///\n    /// Typically, `a+` would match the entire first sequence of `a` in some\n    /// text, but `shortest_match` can give up as soon as it sees the first\n    /// `a`.\n    ///\n    /// ```rust\n    /// # extern crate regex; use regex::Regex;\n    /// # fn main() {\n    /// let text = \"aaaaa\";\n    /// let pos = Regex::new(r\"a+\").unwrap().shortest_match(text);\n    /// assert_eq!(pos, Some(1));\n    /// # }\n    /// ```\n    pub fn shortest_match(&self, text: &str) -> Option<usize> {\n        self.shortest_match_at(text, 0)\n    }\n\n    /// Returns the same as shortest_match, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn shortest_match_at(\n        &self,\n        text: &str,\n        start: usize,\n    ) -> Option<usize> {\n        self.0.searcher_str().shortest_match_at(text, start)\n    }\n\n    /// Returns the same as is_match, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn is_match_at(&self, text: &str, start: usize) -> bool {\n        self.shortest_match_at(text, start).is_some()\n    }\n\n    /// Returns the same as find, but starts the search at the given\n    /// offset.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn find_at<'t>(\n        &self,\n        text: &'t str,\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.0\n            .searcher_str()\n            .find_at(text, start)\n            .map(|(s, e)| Match::new(text, s, e))\n    }\n\n    /// This is like `captures`, but uses\n    /// [`CaptureLocations`](struct.CaptureLocations.html)\n    /// instead of\n    /// [`Captures`](struct.Captures.html) in order to amortize allocations.\n    ///\n    /// To create a `CaptureLocations` value, use the\n    /// `Regex::capture_locations` method.\n    ///\n    /// This returns the overall match if this was successful, which is always\n    /// equivalence to the `0`th capture group.\n    pub fn captures_read<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t str,\n    ) -> Option<Match<'t>> {\n        self.captures_read_at(locs, text, 0)\n    }\n\n    /// Returns the same as captures, but starts the search at the given\n    /// offset and populates the capture locations given.\n    ///\n    /// The significance of the starting point is that it takes the surrounding\n    /// context into consideration. For example, the `\\A` anchor can only\n    /// match when `start == 0`.\n    pub fn captures_read_at<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t str,\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.0\n            .searcher_str()\n            .captures_read_at(&mut locs.0, text, start)\n            .map(|(s, e)| Match::new(text, s, e))\n    }\n\n    /// An undocumented alias for `captures_read_at`.\n    ///\n    /// The `regex-capi` crate previously used this routine, so to avoid\n    /// breaking that crate, we continue to provide the name as an undocumented\n    /// alias.\n    #[doc(hidden)]\n    pub fn read_captures_at<'t>(\n        &self,\n        locs: &mut CaptureLocations,\n        text: &'t str,\n        start: usize,\n    ) -> Option<Match<'t>> {\n        self.captures_read_at(locs, text, start)\n    }\n}\n\n/// Auxiliary methods.\nimpl Regex {\n    /// Returns the original string of this regex.\n    pub fn as_str(&self) -> &str {\n        &self.0.regex_strings()[0]\n    }\n\n    /// Returns an iterator over the capture names.\n    pub fn capture_names(&self) -> CaptureNames {\n        CaptureNames(self.0.capture_names().iter())\n    }\n\n    /// Returns the number of captures.\n    pub fn captures_len(&self) -> usize {\n        self.0.capture_names().len()\n    }\n\n    /// Returns an empty set of capture locations that can be reused in\n    /// multiple calls to `captures_read` or `captures_read_at`.\n    pub fn capture_locations(&self) -> CaptureLocations {\n        CaptureLocations(self.0.searcher_str().locations())\n    }\n\n    /// An alias for `capture_locations` to preserve backward compatibility.\n    ///\n    /// The `regex-capi` crate uses this method, so to avoid breaking that\n    /// crate, we continue to export it as an undocumented API.\n    #[doc(hidden)]\n    pub fn locations(&self) -> CaptureLocations {\n        CaptureLocations(self.0.searcher_str().locations())\n    }\n}\n\n/// An iterator over the names of all possible captures.\n///\n/// `None` indicates an unnamed capture; the first element (capture 0, the\n/// whole matched region) is always unnamed.\n///\n/// `'r` is the lifetime of the compiled regular expression.\npub struct CaptureNames<'r>(::std::slice::Iter<'r, Option<String>>);\n\nimpl<'r> Iterator for CaptureNames<'r> {\n    type Item = Option<&'r str>;\n\n    fn next(&mut self) -> Option<Option<&'r str>> {\n        self.0\n            .next()\n            .as_ref()\n            .map(|slot| slot.as_ref().map(|name| name.as_ref()))\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.0.size_hint()\n    }\n}\n\n/// Yields all substrings delimited by a regular expression match.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the string being split.\npub struct Split<'r, 't> {\n    finder: Matches<'r, 't>,\n    last: usize,\n}\n\nimpl<'r, 't> Iterator for Split<'r, 't> {\n    type Item = &'t str;\n\n    fn next(&mut self) -> Option<&'t str> {\n        let text = self.finder.0.text();\n        match self.finder.next() {\n            None => {\n                if self.last > text.len() {\n                    None\n                } else {\n                    let s = &text[self.last..];\n                    self.last = text.len() + 1; // Next call will return None\n                    Some(s)\n                }\n            }\n            Some(m) => {\n                let matched = &text[self.last..m.start()];\n                self.last = m.end();\n                Some(matched)\n            }\n        }\n    }\n}\n\n/// Yields at most `N` substrings delimited by a regular expression match.\n///\n/// The last substring will be whatever remains after splitting.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the string being split.\npub struct SplitN<'r, 't> {\n    splits: Split<'r, 't>,\n    n: usize,\n}\n\nimpl<'r, 't> Iterator for SplitN<'r, 't> {\n    type Item = &'t str;\n\n    fn next(&mut self) -> Option<&'t str> {\n        if self.n == 0 {\n            return None;\n        }\n\n        self.n -= 1;\n        if self.n > 0 {\n            return self.splits.next();\n        }\n\n        let text = self.splits.finder.0.text();\n        if self.splits.last > text.len() {\n            // We've already returned all substrings.\n            None\n        } else {\n            // self.n == 0, so future calls will return None immediately\n            Some(&text[self.splits.last..])\n        }\n    }\n}\n\n/// CaptureLocations is a low level representation of the raw offsets of each\n/// submatch.\n///\n/// You can think of this as a lower level\n/// [`Captures`](struct.Captures.html), where this type does not support\n/// named capturing groups directly and it does not borrow the text that these\n/// offsets were matched on.\n///\n/// Primarily, this type is useful when using the lower level `Regex` APIs\n/// such as `read_captures`, which permits amortizing the allocation in which\n/// capture match locations are stored.\n///\n/// In order to build a value of this type, you'll need to call the\n/// `capture_locations` method on the `Regex` being used to execute the search.\n/// The value returned can then be reused in subsequent searches.\n#[derive(Clone, Debug)]\npub struct CaptureLocations(re_trait::Locations);\n\n/// A type alias for `CaptureLocations` for backwards compatibility.\n///\n/// Previously, we exported `CaptureLocations` as `Locations` in an\n/// undocumented API. To prevent breaking that code (e.g., in `regex-capi`),\n/// we continue re-exporting the same undocumented API.\n#[doc(hidden)]\npub type Locations = CaptureLocations;\n\nimpl CaptureLocations {\n    /// Returns the start and end positions of the Nth capture group. Returns\n    /// `None` if `i` is not a valid capture group or if the capture group did\n    /// not match anything. The positions returned are *always* byte indices\n    /// with respect to the original string matched.\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        self.0.pos(i)\n    }\n\n    /// Returns the total number of capturing groups.\n    ///\n    /// This is always at least `1` since every regex has at least `1`\n    /// capturing group that corresponds to the entire match.\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.len()\n    }\n\n    /// An alias for the `get` method for backwards compatibility.\n    ///\n    /// Previously, we exported `get` as `pos` in an undocumented API. To\n    /// prevent breaking that code (e.g., in `regex-capi`), we continue\n    /// re-exporting the same undocumented API.\n    #[doc(hidden)]\n    #[inline]\n    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {\n        self.get(i)\n    }\n}\n\n/// Captures represents a group of captured strings for a single match.\n///\n/// The 0th capture always corresponds to the entire match. Each subsequent\n/// index corresponds to the next capture group in the regex. If a capture\n/// group is named, then the matched string is *also* available via the `name`\n/// method. (Note that the 0th capture is always unnamed and so must be\n/// accessed with the `get` method.)\n///\n/// Positions returned from a capture group are always byte indices.\n///\n/// `'t` is the lifetime of the matched text.\npub struct Captures<'t> {\n    text: &'t str,\n    locs: re_trait::Locations,\n    named_groups: Arc<HashMap<String, usize>>,\n}\n\nimpl<'t> Captures<'t> {\n    /// Returns the match associated with the capture group at index `i`. If\n    /// `i` does not correspond to a capture group, or if the capture group\n    /// did not participate in the match, then `None` is returned.\n    ///\n    /// # Examples\n    ///\n    /// Get the text of the match with a default of an empty string if this\n    /// group didn't participate in the match:\n    ///\n    /// ```rust\n    /// # use regex::Regex;\n    /// let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\n    /// let caps = re.captures(\"abc123\").unwrap();\n    ///\n    /// let text1 = caps.get(1).map_or(\"\", |m| m.as_str());\n    /// let text2 = caps.get(2).map_or(\"\", |m| m.as_str());\n    /// assert_eq!(text1, \"123\");\n    /// assert_eq!(text2, \"\");\n    /// ```\n    pub fn get(&self, i: usize) -> Option<Match<'t>> {\n        self.locs.pos(i).map(|(s, e)| Match::new(self.text, s, e))\n    }\n\n    /// Returns the match for the capture group named `name`. If `name` isn't a\n    /// valid capture group or didn't match anything, then `None` is returned.\n    pub fn name(&self, name: &str) -> Option<Match<'t>> {\n        self.named_groups.get(name).and_then(|&i| self.get(i))\n    }\n\n    /// An iterator that yields all capturing matches in the order in which\n    /// they appear in the regex. If a particular capture group didn't\n    /// participate in the match, then `None` is yielded for that capture.\n    ///\n    /// The first match always corresponds to the overall match of the regex.\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 't> {\n        SubCaptureMatches { caps: self, it: self.locs.iter() }\n    }\n\n    /// Expands all instances of `$name` in `replacement` to the corresponding\n    /// capture group `name`, and writes them to the `dst` buffer given.\n    ///\n    /// `name` may be an integer corresponding to the index of the\n    /// capture group (counted by order of opening parenthesis where `0` is the\n    /// entire match) or it can be a name (consisting of letters, digits or\n    /// underscores) corresponding to a named capture group.\n    ///\n    /// If `name` isn't a valid capture group (whether the name doesn't exist\n    /// or isn't a valid index), then it is replaced with the empty string.\n    ///\n    /// The longest possible name is used. e.g., `$1a` looks up the capture\n    /// group named `1a` and not the capture group at index `1`. To exert more\n    /// precise control over the name, use braces, e.g., `${1}a`.\n    ///\n    /// To write a literal `$` use `$$`.\n    pub fn expand(&self, replacement: &str, dst: &mut String) {\n        expand_str(self, replacement, dst)\n    }\n\n    /// Returns the number of captured groups.\n    ///\n    /// This is always at least `1`, since every regex has at least one capture\n    /// group that corresponds to the full match.\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.locs.len()\n    }\n}\n\nimpl<'t> fmt::Debug for Captures<'t> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.debug_tuple(\"Captures\").field(&CapturesDebug(self)).finish()\n    }\n}\n\nstruct CapturesDebug<'c, 't: 'c>(&'c Captures<'t>);\n\nimpl<'c, 't> fmt::Debug for CapturesDebug<'c, 't> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // We'd like to show something nice here, even if it means an\n        // allocation to build a reverse index.\n        let slot_to_name: HashMap<&usize, &String> =\n            self.0.named_groups.iter().map(|(a, b)| (b, a)).collect();\n        let mut map = f.debug_map();\n        for (slot, m) in self.0.locs.iter().enumerate() {\n            let m = m.map(|(s, e)| &self.0.text[s..e]);\n            if let Some(name) = slot_to_name.get(&slot) {\n                map.entry(&name, &m);\n            } else {\n                map.entry(&slot, &m);\n            }\n        }\n        map.finish()\n    }\n}\n\n/// Get a group by index.\n///\n/// `'t` is the lifetime of the matched text.\n///\n/// The text can't outlive the `Captures` object if this method is\n/// used, because of how `Index` is defined (normally `a[i]` is part\n/// of `a` and can't outlive it); to do that, use `get()` instead.\n///\n/// # Panics\n///\n/// If there is no group at the given index.\nimpl<'t> Index<usize> for Captures<'t> {\n    type Output = str;\n\n    fn index(&self, i: usize) -> &str {\n        self.get(i)\n            .map(|m| m.as_str())\n            .unwrap_or_else(|| panic!(\"no group at index '{}'\", i))\n    }\n}\n\n/// Get a group by name.\n///\n/// `'t` is the lifetime of the matched text and `'i` is the lifetime\n/// of the group name (the index).\n///\n/// The text can't outlive the `Captures` object if this method is\n/// used, because of how `Index` is defined (normally `a[i]` is part\n/// of `a` and can't outlive it); to do that, use `name` instead.\n///\n/// # Panics\n///\n/// If there is no group named by the given value.\nimpl<'t, 'i> Index<&'i str> for Captures<'t> {\n    type Output = str;\n\n    fn index<'a>(&'a self, name: &'i str) -> &'a str {\n        self.name(name)\n            .map(|m| m.as_str())\n            .unwrap_or_else(|| panic!(\"no group named '{}'\", name))\n    }\n}\n\n/// An iterator that yields all capturing matches in the order in which they\n/// appear in the regex.\n///\n/// If a particular capture group didn't participate in the match, then `None`\n/// is yielded for that capture. The first match always corresponds to the\n/// overall match of the regex.\n///\n/// The lifetime `'c` corresponds to the lifetime of the `Captures` value, and\n/// the lifetime `'t` corresponds to the originally matched text.\npub struct SubCaptureMatches<'c, 't: 'c> {\n    caps: &'c Captures<'t>,\n    it: SubCapturesPosIter<'c>,\n}\n\nimpl<'c, 't> Iterator for SubCaptureMatches<'c, 't> {\n    type Item = Option<Match<'t>>;\n\n    fn next(&mut self) -> Option<Option<Match<'t>>> {\n        self.it\n            .next()\n            .map(|cap| cap.map(|(s, e)| Match::new(self.caps.text, s, e)))\n    }\n}\n\n/// An iterator that yields all non-overlapping capture groups matching a\n/// particular regular expression.\n///\n/// The iterator stops when no more matches can be found.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the matched string.\npub struct CaptureMatches<'r, 't>(\n    re_trait::CaptureMatches<'t, ExecNoSyncStr<'r>>,\n);\n\nimpl<'r, 't> Iterator for CaptureMatches<'r, 't> {\n    type Item = Captures<'t>;\n\n    fn next(&mut self) -> Option<Captures<'t>> {\n        self.0.next().map(|locs| Captures {\n            text: self.0.text(),\n            locs: locs,\n            named_groups: self.0.regex().capture_name_idx().clone(),\n        })\n    }\n}\n\n/// An iterator over all non-overlapping matches for a particular string.\n///\n/// The iterator yields a `Match` value. The iterator stops when no more\n/// matches can be found.\n///\n/// `'r` is the lifetime of the compiled regular expression and `'t` is the\n/// lifetime of the matched string.\npub struct Matches<'r, 't>(re_trait::Matches<'t, ExecNoSyncStr<'r>>);\n\nimpl<'r, 't> Iterator for Matches<'r, 't> {\n    type Item = Match<'t>;\n\n    fn next(&mut self) -> Option<Match<'t>> {\n        let text = self.0.text();\n        self.0.next().map(|(s, e)| Match::new(text, s, e))\n    }\n}\n\n/// Replacer describes types that can be used to replace matches in a string.\n///\n/// In general, users of this crate shouldn't need to implement this trait,\n/// since implementations are already provided for `&str` and\n/// `FnMut(&Captures) -> String` (or any `FnMut(&Captures) -> T`\n/// where `T: AsRef<str>`), which covers most use cases.\npub trait Replacer {\n    /// Appends text to `dst` to replace the current match.\n    ///\n    /// The current match is represented by `caps`, which is guaranteed to\n    /// have a match at capture group `0`.\n    ///\n    /// For example, a no-op replacement would be\n    /// `dst.extend(caps.get(0).unwrap().as_str())`.\n    fn replace_append(&mut self, caps: &Captures, dst: &mut String);\n\n    /// Return a fixed unchanging replacement string.\n    ///\n    /// When doing replacements, if access to `Captures` is not needed (e.g.,\n    /// the replacement byte string does not need `$` expansion), then it can\n    /// be beneficial to avoid finding sub-captures.\n    ///\n    /// In general, this is called once for every call to `replacen`.\n    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>> {\n        None\n    }\n\n    /// Return a `Replacer` that borrows and wraps this `Replacer`.\n    ///\n    /// This is useful when you want to take a generic `Replacer` (which might\n    /// not be cloneable) and use it without consuming it, so it can be used\n    /// more than once.\n    ///\n    /// # Example\n    ///\n    /// ```\n    /// use regex::{Regex, Replacer};\n    ///\n    /// fn replace_all_twice<R: Replacer>(\n    ///     re: Regex,\n    ///     src: &str,\n    ///     mut rep: R,\n    /// ) -> String {\n    ///     let dst = re.replace_all(src, rep.by_ref());\n    ///     let dst = re.replace_all(&dst, rep.by_ref());\n    ///     dst.into_owned()\n    /// }\n    /// ```\n    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {\n        ReplacerRef(self)\n    }\n}\n\n/// By-reference adaptor for a `Replacer`\n///\n/// Returned by [`Replacer::by_ref`](trait.Replacer.html#method.by_ref).\n#[derive(Debug)]\npub struct ReplacerRef<'a, R: ?Sized + 'a>(&'a mut R);\n\nimpl<'a, R: Replacer + ?Sized + 'a> Replacer for ReplacerRef<'a, R> {\n    fn replace_append(&mut self, caps: &Captures, dst: &mut String) {\n        self.0.replace_append(caps, dst)\n    }\n    fn no_expansion(&mut self) -> Option<Cow<str>> {\n        self.0.no_expansion()\n    }\n}\n\nimpl<'a> Replacer for &'a str {\n    fn replace_append(&mut self, caps: &Captures, dst: &mut String) {\n        caps.expand(*self, dst);\n    }\n\n    fn no_expansion(&mut self) -> Option<Cow<str>> {\n        match find_byte(b'$', self.as_bytes()) {\n            Some(_) => None,\n            None => Some(Cow::Borrowed(*self)),\n        }\n    }\n}\n\nimpl<F, T> Replacer for F\nwhere\n    F: FnMut(&Captures) -> T,\n    T: AsRef<str>,\n{\n    fn replace_append(&mut self, caps: &Captures, dst: &mut String) {\n        dst.push_str((*self)(caps).as_ref());\n    }\n}\n\n/// `NoExpand` indicates literal string replacement.\n///\n/// It can be used with `replace` and `replace_all` to do a literal string\n/// replacement without expanding `$name` to their corresponding capture\n/// groups. This can be both convenient (to avoid escaping `$`, for example)\n/// and performant (since capture groups don't need to be found).\n///\n/// `'t` is the lifetime of the literal text.\npub struct NoExpand<'t>(pub &'t str);\n\nimpl<'t> Replacer for NoExpand<'t> {\n    fn replace_append(&mut self, _: &Captures, dst: &mut String) {\n        dst.push_str(self.0);\n    }\n\n    fn no_expansion(&mut self) -> Option<Cow<str>> {\n        Some(Cow::Borrowed(self.0))\n    }\n}\n","traces":[{"line":21,"address":[5010848],"length":1,"stats":{"Line":0},"fn_name":"escape"},{"line":22,"address":[5010869],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[5010896],"length":1,"stats":{"Line":11},"fn_name":"start"},{"line":39,"address":[5010901],"length":1,"stats":{"Line":11},"fn_name":null},{"line":44,"address":[5010912],"length":1,"stats":{"Line":11},"fn_name":"end"},{"line":45,"address":[5010917],"length":1,"stats":{"Line":11},"fn_name":null},{"line":51,"address":[5010928],"length":1,"stats":{"Line":14},"fn_name":"range"},{"line":52,"address":[5010937],"length":1,"stats":{"Line":14},"fn_name":null},{"line":57,"address":[5010976],"length":1,"stats":{"Line":14},"fn_name":"as_str"},{"line":58,"address":[5010985],"length":1,"stats":{"Line":14},"fn_name":null},{"line":63,"address":[5011088],"length":1,"stats":{"Line":10},"fn_name":"new"},{"line":69,"address":[5011136],"length":1,"stats":{"Line":5},"fn_name":"from"},{"line":70,"address":[5011140],"length":1,"stats":{"Line":5},"fn_name":null},{"line":75,"address":[4580128],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":76,"address":[4580132],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[5011184],"length":1,"stats":{"Line":5},"fn_name":"fmt"},{"line":141,"address":[5011207],"length":1,"stats":{"Line":5},"fn_name":null},{"line":147,"address":[5011408],"length":1,"stats":{"Line":5},"fn_name":"fmt"},{"line":148,"address":[5011422],"length":1,"stats":{"Line":5},"fn_name":null},{"line":154,"address":[5011456],"length":1,"stats":{"Line":13},"fn_name":"from"},{"line":155,"address":[5011463],"length":1,"stats":{"Line":13},"fn_name":null},{"line":163,"address":[5011552],"length":1,"stats":{"Line":0},"fn_name":"from_str"},{"line":164,"address":[5011573],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[5011600,5011641],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":175,"address":[5011617,5011663],"length":1,"stats":{"Line":2},"fn_name":null},{"line":196,"address":[5011728],"length":1,"stats":{"Line":5},"fn_name":"is_match"},{"line":197,"address":[5011751],"length":1,"stats":{"Line":5},"fn_name":null},{"line":221,"address":[5011776],"length":1,"stats":{"Line":0},"fn_name":"find"},{"line":222,"address":[5011806],"length":1,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[5011824],"length":1,"stats":{"Line":6},"fn_name":"find_iter"},{"line":244,"address":[5012025],"length":1,"stats":{"Line":6},"fn_name":null},{"line":310,"address":[5012186,5012096],"length":1,"stats":{"Line":9},"fn_name":"captures"},{"line":311,"address":[5012130],"length":1,"stats":{"Line":9},"fn_name":null},{"line":312,"address":[5012231],"length":1,"stats":{"Line":27},"fn_name":null},{"line":313,"address":[5858727],"length":1,"stats":{"Line":9},"fn_name":null},{"line":314,"address":[5858734],"length":1,"stats":{"Line":9},"fn_name":null},{"line":315,"address":[5858752],"length":1,"stats":{"Line":9},"fn_name":null},{"line":344,"address":[5012400],"length":1,"stats":{"Line":5},"fn_name":"captures_iter"},{"line":348,"address":[5012601],"length":1,"stats":{"Line":5},"fn_name":null},{"line":369,"address":[5012672],"length":1,"stats":{"Line":6},"fn_name":"split"},{"line":370,"address":[5012694],"length":1,"stats":{"Line":6},"fn_name":null},{"line":393,"address":[5012768],"length":1,"stats":{"Line":5},"fn_name":"splitn"},{"line":398,"address":[5012795],"length":1,"stats":{"Line":5},"fn_name":null},{"line":505,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":510,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":519,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":524,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":533,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":548,"address":[],"length":0,"stats":{"Line":50},"fn_name":null},{"line":549,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":550,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":551,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":553,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":554,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":555,"address":[],"length":0,"stats":{"Line":31},"fn_name":null},{"line":556,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":557,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":559,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":560,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":561,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":563,"address":[],"length":0,"stats":{"Line":22},"fn_name":null},{"line":564,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":569,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":570,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":571,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":573,"address":[],"length":0,"stats":{"Line":30},"fn_name":null},{"line":574,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":575,"address":[],"length":0,"stats":{"Line":60},"fn_name":null},{"line":576,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":577,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":580,"address":[],"length":0,"stats":{"Line":30},"fn_name":null},{"line":581,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":582,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":583,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":585,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":586,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":613,"address":[5012880],"length":1,"stats":{"Line":5},"fn_name":"shortest_match"},{"line":614,"address":[5012903],"length":1,"stats":{"Line":5},"fn_name":null},{"line":623,"address":[5012944],"length":1,"stats":{"Line":5},"fn_name":"shortest_match_at"},{"line":628,"address":[5013157],"length":1,"stats":{"Line":5},"fn_name":null},{"line":637,"address":[5051568],"length":1,"stats":{"Line":5},"fn_name":"is_match_at"},{"line":638,"address":[5051592],"length":1,"stats":{"Line":5},"fn_name":null},{"line":647,"address":[5051648],"length":1,"stats":{"Line":0},"fn_name":"find_at"},{"line":652,"address":[5051864,5114937,5114955],"length":1,"stats":{"Line":0},"fn_name":null},{"line":654,"address":[5051880],"length":1,"stats":{"Line":0},"fn_name":null},{"line":655,"address":[5114939],"length":1,"stats":{"Line":0},"fn_name":null},{"line":668,"address":[5115024],"length":1,"stats":{"Line":0},"fn_name":"captures_read"},{"line":673,"address":[5115058],"length":1,"stats":{"Line":0},"fn_name":null},{"line":682,"address":[5115072],"length":1,"stats":{"Line":9},"fn_name":"captures_read_at"},{"line":688,"address":[5115270,5115421],"length":1,"stats":{"Line":18},"fn_name":null},{"line":690,"address":[5115285],"length":1,"stats":{"Line":9},"fn_name":null},{"line":691,"address":[5115411],"length":1,"stats":{"Line":27},"fn_name":null},{"line":700,"address":[5115456],"length":1,"stats":{"Line":0},"fn_name":"read_captures_at"},{"line":706,"address":[5115493],"length":1,"stats":{"Line":0},"fn_name":null},{"line":713,"address":[5115520],"length":1,"stats":{"Line":5},"fn_name":"as_str"},{"line":714,"address":[5115601,5115628,5115529],"length":1,"stats":{"Line":5},"fn_name":null},{"line":718,"address":[5115632],"length":1,"stats":{"Line":5},"fn_name":"capture_names"},{"line":719,"address":[5115641],"length":1,"stats":{"Line":5},"fn_name":null},{"line":723,"address":[5115728],"length":1,"stats":{"Line":5},"fn_name":"captures_len"},{"line":724,"address":[5115737],"length":1,"stats":{"Line":5},"fn_name":null},{"line":729,"address":[5115792],"length":1,"stats":{"Line":9},"fn_name":"capture_locations"},{"line":730,"address":[5115918],"length":1,"stats":{"Line":9},"fn_name":null},{"line":738,"address":[5116000],"length":1,"stats":{"Line":0},"fn_name":"locations"},{"line":739,"address":[5116126],"length":1,"stats":{"Line":0},"fn_name":null},{"line":754,"address":[5116208],"length":1,"stats":{"Line":5},"fn_name":"next"},{"line":755,"address":[5116225],"length":1,"stats":{"Line":5},"fn_name":null},{"line":758,"address":[5859113,5859161,5859104,5859152],"length":1,"stats":{"Line":20},"fn_name":"{{closure}}"},{"line":761,"address":[5116288],"length":1,"stats":{"Line":5},"fn_name":"size_hint"},{"line":762,"address":[5116305],"length":1,"stats":{"Line":5},"fn_name":null},{"line":778,"address":[5116320],"length":1,"stats":{"Line":6},"fn_name":"next"},{"line":779,"address":[5116335],"length":1,"stats":{"Line":6},"fn_name":null},{"line":780,"address":[5116382,5116758,5116522],"length":1,"stats":{"Line":12},"fn_name":null},{"line":781,"address":[5116398],"length":1,"stats":{"Line":6},"fn_name":null},{"line":782,"address":[5116529,5116645],"length":1,"stats":{"Line":12},"fn_name":null},{"line":783,"address":[5116636],"length":1,"stats":{"Line":6},"fn_name":null},{"line":785,"address":[5116585,5116652],"length":1,"stats":{"Line":12},"fn_name":null},{"line":786,"address":[5116683,5116943,5116973],"length":1,"stats":{"Line":6},"fn_name":null},{"line":787,"address":[5116740],"length":1,"stats":{"Line":6},"fn_name":null},{"line":790,"address":[5116421],"length":1,"stats":{"Line":6},"fn_name":null},{"line":791,"address":[5116490,5116775],"length":1,"stats":{"Line":12},"fn_name":null},{"line":792,"address":[5116867],"length":1,"stats":{"Line":6},"fn_name":null},{"line":793,"address":[5116904],"length":1,"stats":{"Line":6},"fn_name":null},{"line":813,"address":[5116976],"length":1,"stats":{"Line":5},"fn_name":"next"},{"line":814,"address":[5116985],"length":1,"stats":{"Line":5},"fn_name":null},{"line":815,"address":[5117032],"length":1,"stats":{"Line":7},"fn_name":null},{"line":818,"address":[5117306,5117002,5117066,5117276],"length":1,"stats":{"Line":10},"fn_name":null},{"line":819,"address":[5117070],"length":1,"stats":{"Line":5},"fn_name":null},{"line":820,"address":[5117117],"length":1,"stats":{"Line":5},"fn_name":null},{"line":823,"address":[5117082],"length":1,"stats":{"Line":5},"fn_name":null},{"line":824,"address":[5117249,5117139],"length":1,"stats":{"Line":10},"fn_name":null},{"line":826,"address":[5117240],"length":1,"stats":{"Line":5},"fn_name":null},{"line":829,"address":[5117256,5117195],"length":1,"stats":{"Line":13},"fn_name":null},{"line":866,"address":[5117312],"length":1,"stats":{"Line":0},"fn_name":"get"},{"line":867,"address":[5117333],"length":1,"stats":{"Line":0},"fn_name":null},{"line":875,"address":[5117360],"length":1,"stats":{"Line":0},"fn_name":"len"},{"line":876,"address":[5117369],"length":1,"stats":{"Line":0},"fn_name":null},{"line":886,"address":[5117392],"length":1,"stats":{"Line":0},"fn_name":"pos"},{"line":887,"address":[5117413],"length":1,"stats":{"Line":0},"fn_name":null},{"line":928,"address":[5117440],"length":1,"stats":{"Line":5},"fn_name":"get"},{"line":929,"address":[5117457],"length":1,"stats":{"Line":23},"fn_name":null},{"line":934,"address":[5117536],"length":1,"stats":{"Line":5},"fn_name":"name"},{"line":935,"address":[5117558],"length":1,"stats":{"Line":15},"fn_name":null},{"line":943,"address":[5117680],"length":1,"stats":{"Line":5},"fn_name":"iter"},{"line":944,"address":[5117692],"length":1,"stats":{"Line":5},"fn_name":null},{"line":963,"address":[5117776],"length":1,"stats":{"Line":5},"fn_name":"expand"},{"line":964,"address":[5117800],"length":1,"stats":{"Line":6},"fn_name":null},{"line":972,"address":[5117824],"length":1,"stats":{"Line":5},"fn_name":"len"},{"line":973,"address":[5117833],"length":1,"stats":{"Line":5},"fn_name":null},{"line":978,"address":[5117872],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":979,"address":[5117893],"length":1,"stats":{"Line":0},"fn_name":null},{"line":986,"address":[5118000,5118054],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":989,"address":[5118069,5118020],"length":1,"stats":{"Line":0},"fn_name":null},{"line":990,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":991,"address":[5118126],"length":1,"stats":{"Line":0},"fn_name":null},{"line":992,"address":[5118802,5118150,5118368,5118215],"length":1,"stats":{"Line":0},"fn_name":null},{"line":993,"address":[5118514],"length":1,"stats":{"Line":0},"fn_name":null},{"line":994,"address":[5118733,5118631,5118798],"length":1,"stats":{"Line":0},"fn_name":null},{"line":995,"address":[5118749],"length":1,"stats":{"Line":0},"fn_name":null},{"line":997,"address":[5118684],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1000,"address":[5118342],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1018,"address":[5118864],"length":1,"stats":{"Line":5},"fn_name":"index"},{"line":1019,"address":[5118878,5118944],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1020,"address":[5859584,5859588],"length":1,"stats":{"Line":10},"fn_name":"{{closure}}"},{"line":1021,"address":[5118934],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1040,"address":[5118992],"length":1,"stats":{"Line":5},"fn_name":"index"},{"line":1041,"address":[5119082,5119011],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1042,"address":[5859776,5859780],"length":1,"stats":{"Line":10},"fn_name":"{{closure}}"},{"line":1043,"address":[5119072],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1064,"address":[5119136],"length":1,"stats":{"Line":5},"fn_name":"next"},{"line":1065,"address":[5119195,5119148],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1067,"address":[5119185],"length":1,"stats":{"Line":25},"fn_name":null},{"line":1085,"address":[5119232],"length":1,"stats":{"Line":5},"fn_name":"next"},{"line":1086,"address":[5119244],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1087,"address":[5860178],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1088,"address":[5860256],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1089,"address":[5860288,5860347],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1106,"address":[5119328],"length":1,"stats":{"Line":6},"fn_name":"next"},{"line":1107,"address":[5119345],"length":1,"stats":{"Line":6},"fn_name":null},{"line":1108,"address":[5119378],"length":1,"stats":{"Line":18},"fn_name":null},{"line":1135,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":1136,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":1160,"address":[5860608,5860640],"length":1,"stats":{"Line":0},"fn_name":"by_ref<regex::re_unicode::NoExpand>"},{"line":1161,"address":[5860649,5860617],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1172,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1173,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1175,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1176,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":1181,"address":[5119440],"length":1,"stats":{"Line":5},"fn_name":"replace_append"},{"line":1182,"address":[5119459],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1185,"address":[5119504],"length":1,"stats":{"Line":5},"fn_name":"no_expansion"},{"line":1186,"address":[5119699,5119519,5119599],"length":1,"stats":{"Line":15},"fn_name":null},{"line":1187,"address":[5119614,5119708],"length":1,"stats":{"Line":10},"fn_name":null},{"line":1188,"address":[5119633],"length":1,"stats":{"Line":5},"fn_name":null},{"line":1198,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":1199,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":1214,"address":[5119728],"length":1,"stats":{"Line":0},"fn_name":"replace_append"},{"line":1215,"address":[5119746],"length":1,"stats":{"Line":0},"fn_name":null},{"line":1218,"address":[5119776],"length":1,"stats":{"Line":5},"fn_name":"no_expansion"},{"line":1219,"address":[5119788],"length":1,"stats":{"Line":5},"fn_name":null}],"covered":153,"coverable":199},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","sparse.rs"],"content":"use std::fmt;\nuse std::ops::Deref;\nuse std::slice;\n\n/// A sparse set used for representing ordered NFA states.\n///\n/// This supports constant time addition and membership testing. Clearing an\n/// entire set can also be done in constant time. Iteration yields elements\n/// in the order in which they were inserted.\n///\n/// The data structure is based on: http://research.swtch.com/sparse\n/// Note though that we don't actually use uninitialized memory. We generally\n/// reuse allocations, so the initial allocation cost is bareable. However,\n/// its other properties listed above are extremely useful.\n#[derive(Clone)]\npub struct SparseSet {\n    /// Dense contains the instruction pointers in the order in which they\n    /// were inserted.\n    dense: Vec<usize>,\n    /// Sparse maps instruction pointers to their location in dense.\n    ///\n    /// An instruction pointer is in the set if and only if\n    /// sparse[ip] < dense.len() && ip == dense[sparse[ip]].\n    sparse: Box<[usize]>,\n}\n\nimpl SparseSet {\n    pub fn new(size: usize) -> SparseSet {\n        SparseSet {\n            dense: Vec::with_capacity(size),\n            sparse: vec![0; size].into_boxed_slice(),\n        }\n    }\n\n    pub fn len(&self) -> usize {\n        self.dense.len()\n    }\n\n    pub fn is_empty(&self) -> bool {\n        self.dense.is_empty()\n    }\n\n    pub fn capacity(&self) -> usize {\n        self.dense.capacity()\n    }\n\n    pub fn insert(&mut self, value: usize) {\n        let i = self.len();\n        assert!(i < self.capacity());\n        self.dense.push(value);\n        self.sparse[value] = i;\n    }\n\n    pub fn contains(&self, value: usize) -> bool {\n        let i = self.sparse[value];\n        self.dense.get(i) == Some(&value)\n    }\n\n    pub fn clear(&mut self) {\n        self.dense.clear();\n    }\n}\n\nimpl fmt::Debug for SparseSet {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"SparseSet({:?})\", self.dense)\n    }\n}\n\nimpl Deref for SparseSet {\n    type Target = [usize];\n\n    fn deref(&self) -> &Self::Target {\n        &self.dense\n    }\n}\n\nimpl<'a> IntoIterator for &'a SparseSet {\n    type Item = &'a usize;\n    type IntoIter = slice::Iter<'a, usize>;\n    fn into_iter(self) -> Self::IntoIter {\n        self.iter()\n    }\n}\n","traces":[{"line":28,"address":[4586320,4586363],"length":1,"stats":{"Line":16},"fn_name":"new"},{"line":30,"address":[5271724],"length":1,"stats":{"Line":16},"fn_name":null},{"line":31,"address":[5271767],"length":1,"stats":{"Line":16},"fn_name":null},{"line":35,"address":[5271904],"length":1,"stats":{"Line":9},"fn_name":"len"},{"line":36,"address":[5271913],"length":1,"stats":{"Line":9},"fn_name":null},{"line":39,"address":[5271936],"length":1,"stats":{"Line":11},"fn_name":"is_empty"},{"line":40,"address":[5271945],"length":1,"stats":{"Line":11},"fn_name":null},{"line":43,"address":[5271984],"length":1,"stats":{"Line":11},"fn_name":"capacity"},{"line":44,"address":[4586585],"length":1,"stats":{"Line":11},"fn_name":null},{"line":47,"address":[4586608],"length":1,"stats":{"Line":9},"fn_name":"insert"},{"line":48,"address":[4586632],"length":1,"stats":{"Line":9},"fn_name":null},{"line":49,"address":[4586652,4586707],"length":1,"stats":{"Line":9},"fn_name":null},{"line":50,"address":[4586691],"length":1,"stats":{"Line":10},"fn_name":null},{"line":51,"address":[4586827,4586742,4586799],"length":1,"stats":{"Line":10},"fn_name":null},{"line":54,"address":[4586832],"length":1,"stats":{"Line":9},"fn_name":"contains"},{"line":55,"address":[4586846,4586998,4587026],"length":1,"stats":{"Line":9},"fn_name":null},{"line":56,"address":[5272314],"length":1,"stats":{"Line":9},"fn_name":null},{"line":59,"address":[4587040],"length":1,"stats":{"Line":11},"fn_name":"clear"},{"line":60,"address":[5272453],"length":1,"stats":{"Line":11},"fn_name":null},{"line":65,"address":[4587056],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":66,"address":[4587086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[4587248],"length":1,"stats":{"Line":13},"fn_name":"deref"},{"line":74,"address":[4587257],"length":1,"stats":{"Line":13},"fn_name":null},{"line":81,"address":[4587296],"length":1,"stats":{"Line":9},"fn_name":"into_iter"},{"line":82,"address":[4587305],"length":1,"stats":{"Line":9},"fn_name":null}],"covered":23,"coverable":25},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","src","utf8.rs"],"content":"/// A few elementary UTF-8 encoding and decoding functions used by the matching\n/// engines.\n///\n/// In an ideal world, the matching engines operate on `&str` and we can just\n/// lean on the standard library for all our UTF-8 needs. However, to support\n/// byte based regexes (that can match on arbitrary bytes which may contain\n/// UTF-8), we need to be capable of searching and decoding UTF-8 on a `&[u8]`.\n/// The standard library doesn't really recognize this use case, so we have\n/// to build it out ourselves.\n///\n/// Should this be factored out into a separate crate? It seems independently\n/// useful. There are other crates that already exist (e.g., `utf-8`) that have\n/// overlapping use cases. Not sure what to do.\nuse std::char;\n\nconst TAG_CONT: u8 = 0b1000_0000;\nconst TAG_TWO: u8 = 0b1100_0000;\nconst TAG_THREE: u8 = 0b1110_0000;\nconst TAG_FOUR: u8 = 0b1111_0000;\n\n/// Returns the smallest possible index of the next valid UTF-8 sequence\n/// starting after `i`.\npub fn next_utf8(text: &[u8], i: usize) -> usize {\n    let b = match text.get(i) {\n        None => return i + 1,\n        Some(&b) => b,\n    };\n    let inc = if b <= 0x7F {\n        1\n    } else if b <= 0b110_11111 {\n        2\n    } else if b <= 0b1110_1111 {\n        3\n    } else {\n        4\n    };\n    i + inc\n}\n\n/// Decode a single UTF-8 sequence into a single Unicode codepoint from `src`.\n///\n/// If no valid UTF-8 sequence could be found, then `None` is returned.\n/// Otherwise, the decoded codepoint and the number of bytes read is returned.\n/// The number of bytes read (for a valid UTF-8 sequence) is guaranteed to be\n/// 1, 2, 3 or 4.\n///\n/// Note that a UTF-8 sequence is invalid if it is incorrect UTF-8, encodes a\n/// codepoint that is out of range (surrogate codepoints are out of range) or\n/// is not the shortest possible UTF-8 sequence for that codepoint.\n#[inline]\npub fn decode_utf8(src: &[u8]) -> Option<(char, usize)> {\n    let b0 = match src.get(0) {\n        None => return None,\n        Some(&b) if b <= 0x7F => return Some((b as char, 1)),\n        Some(&b) => b,\n    };\n    match b0 {\n        0b110_00000..=0b110_11111 => {\n            if src.len() < 2 {\n                return None;\n            }\n            let b1 = src[1];\n            if 0b11_000000 & b1 != TAG_CONT {\n                return None;\n            }\n            let cp = ((b0 & !TAG_TWO) as u32) << 6 | ((b1 & !TAG_CONT) as u32);\n            match cp {\n                0x80..=0x7FF => char::from_u32(cp).map(|cp| (cp, 2)),\n                _ => None,\n            }\n        }\n        0b1110_0000..=0b1110_1111 => {\n            if src.len() < 3 {\n                return None;\n            }\n            let (b1, b2) = (src[1], src[2]);\n            if 0b11_000000 & b1 != TAG_CONT {\n                return None;\n            }\n            if 0b11_000000 & b2 != TAG_CONT {\n                return None;\n            }\n            let cp = ((b0 & !TAG_THREE) as u32) << 12\n                | ((b1 & !TAG_CONT) as u32) << 6\n                | ((b2 & !TAG_CONT) as u32);\n            match cp {\n                // char::from_u32 will disallow surrogate codepoints.\n                0x800..=0xFFFF => char::from_u32(cp).map(|cp| (cp, 3)),\n                _ => None,\n            }\n        }\n        0b11110_000..=0b11110_111 => {\n            if src.len() < 4 {\n                return None;\n            }\n            let (b1, b2, b3) = (src[1], src[2], src[3]);\n            if 0b11_000000 & b1 != TAG_CONT {\n                return None;\n            }\n            if 0b11_000000 & b2 != TAG_CONT {\n                return None;\n            }\n            if 0b11_000000 & b3 != TAG_CONT {\n                return None;\n            }\n            let cp = ((b0 & !TAG_FOUR) as u32) << 18\n                | ((b1 & !TAG_CONT) as u32) << 12\n                | ((b2 & !TAG_CONT) as u32) << 6\n                | ((b3 & !TAG_CONT) as u32);\n            match cp {\n                0x10000..=0x10FFFF => char::from_u32(cp).map(|cp| (cp, 4)),\n                _ => None,\n            }\n        }\n        _ => None,\n    }\n}\n\n/// Like `decode_utf8`, but decodes the last UTF-8 sequence in `src` instead\n/// of the first.\npub fn decode_last_utf8(src: &[u8]) -> Option<(char, usize)> {\n    if src.is_empty() {\n        return None;\n    }\n    let mut start = src.len() - 1;\n    if src[start] <= 0x7F {\n        return Some((src[start] as char, 1));\n    }\n    while start > src.len().saturating_sub(4) {\n        start -= 1;\n        if is_start_byte(src[start]) {\n            break;\n        }\n    }\n    match decode_utf8(&src[start..]) {\n        None => None,\n        Some((_, n)) if n < src.len() - start => None,\n        Some((cp, n)) => Some((cp, n)),\n    }\n}\n\nfn is_start_byte(b: u8) -> bool {\n    b & 0b11_000000 != 0b1_0000000\n}\n\n#[cfg(test)]\nmod tests {\n    use std::str;\n\n    use quickcheck::quickcheck;\n\n    use super::{\n        decode_last_utf8, decode_utf8, TAG_CONT, TAG_FOUR, TAG_THREE, TAG_TWO,\n    };\n\n    #[test]\n    fn prop_roundtrip() {\n        fn p(given_cp: char) -> bool {\n            let mut tmp = [0; 4];\n            let encoded_len = given_cp.encode_utf8(&mut tmp).len();\n            let (got_cp, got_len) = decode_utf8(&tmp[..encoded_len]).unwrap();\n            encoded_len == got_len && given_cp == got_cp\n        }\n        quickcheck(p as fn(char) -> bool)\n    }\n\n    #[test]\n    fn prop_roundtrip_last() {\n        fn p(given_cp: char) -> bool {\n            let mut tmp = [0; 4];\n            let encoded_len = given_cp.encode_utf8(&mut tmp).len();\n            let (got_cp, got_len) =\n                decode_last_utf8(&tmp[..encoded_len]).unwrap();\n            encoded_len == got_len && given_cp == got_cp\n        }\n        quickcheck(p as fn(char) -> bool)\n    }\n\n    #[test]\n    fn prop_encode_matches_std() {\n        fn p(cp: char) -> bool {\n            let mut got = [0; 4];\n            let n = cp.encode_utf8(&mut got).len();\n            let expected = cp.to_string();\n            &got[..n] == expected.as_bytes()\n        }\n        quickcheck(p as fn(char) -> bool)\n    }\n\n    #[test]\n    fn prop_decode_matches_std() {\n        fn p(given_cp: char) -> bool {\n            let mut tmp = [0; 4];\n            let n = given_cp.encode_utf8(&mut tmp).len();\n            let (got_cp, _) = decode_utf8(&tmp[..n]).unwrap();\n            let expected_cp =\n                str::from_utf8(&tmp[..n]).unwrap().chars().next().unwrap();\n            got_cp == expected_cp\n        }\n        quickcheck(p as fn(char) -> bool)\n    }\n\n    #[test]\n    fn prop_decode_last_matches_std() {\n        fn p(given_cp: char) -> bool {\n            let mut tmp = [0; 4];\n            let n = given_cp.encode_utf8(&mut tmp).len();\n            let (got_cp, _) = decode_last_utf8(&tmp[..n]).unwrap();\n            let expected_cp = str::from_utf8(&tmp[..n])\n                .unwrap()\n                .chars()\n                .rev()\n                .next()\n                .unwrap();\n            got_cp == expected_cp\n        }\n        quickcheck(p as fn(char) -> bool)\n    }\n\n    #[test]\n    fn reject_invalid() {\n        // Invalid start byte\n        assert_eq!(decode_utf8(&[0xFF]), None);\n        // Surrogate pair\n        assert_eq!(decode_utf8(&[0xED, 0xA0, 0x81]), None);\n        // Invalid continuation byte.\n        assert_eq!(decode_utf8(&[0xD4, 0xC2]), None);\n        // Bad lengths\n        assert_eq!(decode_utf8(&[0xC3]), None); // 2 bytes\n        assert_eq!(decode_utf8(&[0xEF, 0xBF]), None); // 3 bytes\n        assert_eq!(decode_utf8(&[0xF4, 0x8F, 0xBF]), None); // 4 bytes\n                                                            // Not a minimal UTF-8 sequence\n        assert_eq!(decode_utf8(&[TAG_TWO, TAG_CONT | b'a']), None);\n        assert_eq!(decode_utf8(&[TAG_THREE, TAG_CONT, TAG_CONT | b'a']), None);\n        assert_eq!(\n            decode_utf8(&[TAG_FOUR, TAG_CONT, TAG_CONT, TAG_CONT | b'a',]),\n            None\n        );\n    }\n\n    #[test]\n    fn reject_invalid_last() {\n        // Invalid start byte\n        assert_eq!(decode_last_utf8(&[0xFF]), None);\n        // Surrogate pair\n        assert_eq!(decode_last_utf8(&[0xED, 0xA0, 0x81]), None);\n        // Bad lengths\n        assert_eq!(decode_last_utf8(&[0xC3]), None); // 2 bytes\n        assert_eq!(decode_last_utf8(&[0xEF, 0xBF]), None); // 3 bytes\n        assert_eq!(decode_last_utf8(&[0xF4, 0x8F, 0xBF]), None); // 4 bytes\n                                                                 // Not a minimal UTF-8 sequence\n        assert_eq!(decode_last_utf8(&[TAG_TWO, TAG_CONT | b'a']), None);\n        assert_eq!(\n            decode_last_utf8(&[TAG_THREE, TAG_CONT, TAG_CONT | b'a',]),\n            None\n        );\n        assert_eq!(\n            decode_last_utf8(\n                &[TAG_FOUR, TAG_CONT, TAG_CONT, TAG_CONT | b'a',]\n            ),\n            None\n        );\n    }\n}\n","traces":[{"line":23,"address":[5943904],"length":1,"stats":{"Line":5},"fn_name":"next_utf8"},{"line":24,"address":[5943985,5943928],"length":1,"stats":{"Line":5},"fn_name":null},{"line":25,"address":[5943939,5943992,5944198,5944168,5944032],"length":1,"stats":{"Line":15},"fn_name":null},{"line":26,"address":[5943959],"length":1,"stats":{"Line":6},"fn_name":null},{"line":28,"address":[5943974,5944058,5944103],"length":1,"stats":{"Line":17},"fn_name":null},{"line":29,"address":[5944049],"length":1,"stats":{"Line":6},"fn_name":null},{"line":30,"address":[5944079,5944043,5944101],"length":1,"stats":{"Line":10},"fn_name":null},{"line":31,"address":[5944070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[5944064,5944090],"length":1,"stats":{"Line":5},"fn_name":null},{"line":33,"address":[5944092],"length":1,"stats":{"Line":5},"fn_name":null},{"line":35,"address":[5944081],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[5944110,5944138],"length":1,"stats":{"Line":6},"fn_name":null},{"line":51,"address":[5944208],"length":1,"stats":{"Line":13},"fn_name":"decode_utf8"},{"line":52,"address":[5944284,5944245],"length":1,"stats":{"Line":13},"fn_name":null},{"line":53,"address":[5944322,5944259,5944286],"length":1,"stats":{"Line":30},"fn_name":null},{"line":54,"address":[5944326],"length":1,"stats":{"Line":13},"fn_name":null},{"line":55,"address":[5944418],"length":1,"stats":{"Line":9},"fn_name":null},{"line":57,"address":[5945132,5945639,5944755,5944515],"length":1,"stats":{"Line":31},"fn_name":null},{"line":58,"address":[5944442],"length":1,"stats":{"Line":9},"fn_name":null},{"line":59,"address":[5944530],"length":1,"stats":{"Line":9},"fn_name":null},{"line":60,"address":[5944578],"length":1,"stats":{"Line":5},"fn_name":null},{"line":62,"address":[5944599,5945646,5944552],"length":1,"stats":{"Line":18},"fn_name":null},{"line":63,"address":[5944609],"length":1,"stats":{"Line":9},"fn_name":null},{"line":64,"address":[5944641],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[5944627,5944661],"length":1,"stats":{"Line":18},"fn_name":null},{"line":67,"address":[5944714,5944753],"length":1,"stats":{"Line":9},"fn_name":null},{"line":68,"address":[4645248,4645256],"length":1,"stats":{"Line":36},"fn_name":"{{closure}}"},{"line":69,"address":[5944703],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[5944460],"length":1,"stats":{"Line":9},"fn_name":null},{"line":73,"address":[5944770],"length":1,"stats":{"Line":9},"fn_name":null},{"line":74,"address":[5944818],"length":1,"stats":{"Line":9},"fn_name":null},{"line":76,"address":[5944839,5945674,5944792],"length":1,"stats":{"Line":18},"fn_name":null},{"line":77,"address":[5944930],"length":1,"stats":{"Line":9},"fn_name":null},{"line":78,"address":[5944964],"length":1,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[5944956],"length":1,"stats":{"Line":9},"fn_name":null},{"line":81,"address":[5944998],"length":1,"stats":{"Line":1},"fn_name":null},{"line":83,"address":[5944984,5945047,5945035],"length":1,"stats":{"Line":27},"fn_name":null},{"line":84,"address":[5945015],"length":1,"stats":{"Line":9},"fn_name":null},{"line":85,"address":[5945041],"length":1,"stats":{"Line":9},"fn_name":null},{"line":86,"address":[5945091,5945130],"length":1,"stats":{"Line":9},"fn_name":null},{"line":88,"address":[4645304,4645296],"length":1,"stats":{"Line":36},"fn_name":"{{closure}}"},{"line":89,"address":[5945080],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[5944482],"length":1,"stats":{"Line":8},"fn_name":null},{"line":93,"address":[5945147],"length":1,"stats":{"Line":8},"fn_name":null},{"line":94,"address":[5945195],"length":1,"stats":{"Line":5},"fn_name":null},{"line":96,"address":[5945169,5945730,5945216],"length":1,"stats":{"Line":16},"fn_name":null},{"line":97,"address":[5945376],"length":1,"stats":{"Line":8},"fn_name":null},{"line":98,"address":[5945415],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[5945407],"length":1,"stats":{"Line":8},"fn_name":null},{"line":101,"address":[5945443],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[5945435],"length":1,"stats":{"Line":8},"fn_name":null},{"line":104,"address":[5945474],"length":1,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[5945542,5945460,5945511,5945554],"length":1,"stats":{"Line":32},"fn_name":null},{"line":107,"address":[5945491],"length":1,"stats":{"Line":8},"fn_name":null},{"line":108,"address":[5945517],"length":1,"stats":{"Line":8},"fn_name":null},{"line":109,"address":[5945548],"length":1,"stats":{"Line":8},"fn_name":null},{"line":110,"address":[5945637,5945598],"length":1,"stats":{"Line":8},"fn_name":null},{"line":111,"address":[4645344,4645352],"length":1,"stats":{"Line":32},"fn_name":"{{closure}}"},{"line":112,"address":[5945587],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[5944504],"length":1,"stats":{"Line":5},"fn_name":null},{"line":121,"address":[5945824],"length":1,"stats":{"Line":9},"fn_name":"decode_last_utf8"},{"line":122,"address":[5945863],"length":1,"stats":{"Line":9},"fn_name":null},{"line":123,"address":[5945918],"length":1,"stats":{"Line":8},"fn_name":null},{"line":125,"address":[5945957,5946720,5945905],"length":1,"stats":{"Line":18},"fn_name":null},{"line":126,"address":[5946750,5945993],"length":1,"stats":{"Line":9},"fn_name":null},{"line":127,"address":[5946781,5946053],"length":1,"stats":{"Line":9},"fn_name":null},{"line":129,"address":[5946051,5946161,5946357],"length":1,"stats":{"Line":25},"fn_name":null},{"line":130,"address":[5946238,5946812],"length":1,"stats":{"Line":9},"fn_name":null},{"line":131,"address":[5946282,5946842],"length":1,"stats":{"Line":9},"fn_name":null},{"line":132,"address":[5946362],"length":1,"stats":{"Line":9},"fn_name":null},{"line":135,"address":[5946371,5946638,5946486,5946499],"length":1,"stats":{"Line":22},"fn_name":null},{"line":136,"address":[5946460,5946488],"length":1,"stats":{"Line":14},"fn_name":null},{"line":137,"address":[5946504,5946873,5946903],"length":1,"stats":{"Line":9},"fn_name":null},{"line":138,"address":[5946640],"length":1,"stats":{"Line":9},"fn_name":null},{"line":142,"address":[5946912],"length":1,"stats":{"Line":9},"fn_name":"is_start_byte"},{"line":143,"address":[5946920],"length":1,"stats":{"Line":9},"fn_name":null},{"line":157,"address":[4718384,4718389],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":158,"address":[4770816],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":159,"address":[4770838],"length":1,"stats":{"Line":1},"fn_name":null},{"line":160,"address":[4770873],"length":1,"stats":{"Line":1},"fn_name":null},{"line":161,"address":[4770931],"length":1,"stats":{"Line":1},"fn_name":null},{"line":162,"address":[4771064],"length":1,"stats":{"Line":1},"fn_name":null},{"line":164,"address":[4770801],"length":1,"stats":{"Line":1},"fn_name":null},{"line":168,"address":[4718421,4718416],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":169,"address":[4771136],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":170,"address":[4771158],"length":1,"stats":{"Line":1},"fn_name":null},{"line":171,"address":[4771193],"length":1,"stats":{"Line":1},"fn_name":null},{"line":172,"address":[4771359],"length":1,"stats":{"Line":1},"fn_name":null},{"line":174,"address":[4771384],"length":1,"stats":{"Line":1},"fn_name":null},{"line":176,"address":[4771121],"length":1,"stats":{"Line":1},"fn_name":null},{"line":180,"address":[4718448,4718453],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":181,"address":[4771534,4771456],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":182,"address":[4771474],"length":1,"stats":{"Line":1},"fn_name":null},{"line":183,"address":[4771559,4771500],"length":1,"stats":{"Line":2},"fn_name":null},{"line":184,"address":[4771577],"length":1,"stats":{"Line":1},"fn_name":null},{"line":185,"address":[4771732,4771597],"length":1,"stats":{"Line":2},"fn_name":null},{"line":187,"address":[4771441],"length":1,"stats":{"Line":1},"fn_name":null},{"line":191,"address":[4718485,4718480],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":192,"address":[4771856],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":193,"address":[4771887],"length":1,"stats":{"Line":1},"fn_name":null},{"line":194,"address":[4771925],"length":1,"stats":{"Line":1},"fn_name":null},{"line":195,"address":[4771983],"length":1,"stats":{"Line":1},"fn_name":null},{"line":196,"address":[4772109],"length":1,"stats":{"Line":1},"fn_name":null},{"line":198,"address":[4772317],"length":1,"stats":{"Line":1},"fn_name":null},{"line":200,"address":[4771841],"length":1,"stats":{"Line":1},"fn_name":null},{"line":204,"address":[4772336],"length":1,"stats":{"Line":3},"fn_name":"prop_decode_last_matches_std"},{"line":205,"address":[4772352],"length":1,"stats":{"Line":1},"fn_name":"p"},{"line":206,"address":[4772383],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[4772430],"length":1,"stats":{"Line":1},"fn_name":null},{"line":208,"address":[4772491],"length":1,"stats":{"Line":1},"fn_name":null},{"line":209,"address":[4772617],"length":1,"stats":{"Line":1},"fn_name":null},{"line":215,"address":[4772850],"length":1,"stats":{"Line":1},"fn_name":null},{"line":217,"address":[4772337],"length":1,"stats":{"Line":1},"fn_name":null},{"line":221,"address":[4718544,4718549],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":223,"address":[4772887,4773066],"length":1,"stats":{"Line":1},"fn_name":null},{"line":225,"address":[4773029,4773548,4773401],"length":1,"stats":{"Line":2},"fn_name":null},{"line":227,"address":[4773883,4774030,4773511],"length":1,"stats":{"Line":2},"fn_name":null},{"line":229,"address":[4774365,4774512,4773993],"length":1,"stats":{"Line":2},"fn_name":null},{"line":230,"address":[4774994,4774475,4774847],"length":1,"stats":{"Line":2},"fn_name":null},{"line":231,"address":[4775329,4774957,4775476],"length":1,"stats":{"Line":2},"fn_name":null},{"line":233,"address":[4775439,4775811,4775958],"length":1,"stats":{"Line":2},"fn_name":null},{"line":234,"address":[4775921,4776293,4776440],"length":1,"stats":{"Line":2},"fn_name":null},{"line":235,"address":[4776745,4776851],"length":1,"stats":{"Line":1},"fn_name":null},{"line":236,"address":[4776403],"length":1,"stats":{"Line":1},"fn_name":null},{"line":242,"address":[4718576,4718581],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":244,"address":[4777159,4777338],"length":1,"stats":{"Line":1},"fn_name":null},{"line":246,"address":[4777301,4777820,4777673],"length":1,"stats":{"Line":2},"fn_name":null},{"line":248,"address":[4778155,4777783,4778302],"length":1,"stats":{"Line":2},"fn_name":null},{"line":249,"address":[4778637,4778265,4778784],"length":1,"stats":{"Line":2},"fn_name":null},{"line":250,"address":[4779119,4779266,4778747],"length":1,"stats":{"Line":2},"fn_name":null},{"line":252,"address":[4779229,4779748,4779601],"length":1,"stats":{"Line":2},"fn_name":null},{"line":253,"address":[4780083,4780230],"length":1,"stats":{"Line":1},"fn_name":null},{"line":254,"address":[4779711],"length":1,"stats":{"Line":1},"fn_name":null},{"line":257,"address":[4780641,4780535],"length":1,"stats":{"Line":1},"fn_name":null},{"line":258,"address":[4780205],"length":1,"stats":{"Line":1},"fn_name":null},{"line":259,"address":[4780193],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":128,"coverable":136},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","api.rs"],"content":"#[test]\nfn empty_regex_empty_match() {\n    let re = regex!(\"\");\n    assert_eq!(vec![(0, 0)], findall!(re, \"\"));\n}\n\n#[test]\nfn empty_regex_nonempty_match() {\n    let re = regex!(\"\");\n    assert_eq!(vec![(0, 0), (1, 1), (2, 2), (3, 3)], findall!(re, \"abc\"));\n}\n\n#[test]\nfn one_zero_length_match() {\n    let re = regex!(r\"[0-9]*\");\n    assert_eq!(vec![(0, 0), (1, 2), (3, 4)], findall!(re, \"a1b2\"));\n}\n\n#[test]\nfn many_zero_length_match() {\n    let re = regex!(r\"[0-9]*\");\n    assert_eq!(\n        vec![(0, 0), (1, 2), (3, 3), (4, 4), (5, 6)],\n        findall!(re, \"a1bbb2\")\n    );\n}\n\n#[test]\nfn many_sequential_zero_length_match() {\n    let re = regex!(r\"[0-9]?\");\n    assert_eq!(\n        vec![(0, 0), (1, 2), (2, 3), (4, 5), (6, 6)],\n        findall!(re, \"a12b3c\")\n    );\n}\n\n#[test]\nfn quoted_bracket_set() {\n    let re = regex!(r\"([\\x{5b}\\x{5d}])\");\n    assert_eq!(vec![(0, 1), (1, 2)], findall!(re, \"[]\"));\n    let re = regex!(r\"([\\[\\]])\");\n    assert_eq!(vec![(0, 1), (1, 2)], findall!(re, \"[]\"));\n}\n\n#[test]\nfn first_range_starts_with_left_bracket() {\n    let re = regex!(r\"([\\[-z])\");\n    assert_eq!(vec![(0, 1), (1, 2)], findall!(re, \"[]\"));\n}\n\n#[test]\nfn range_ends_with_escape() {\n    let re = regex!(r\"([\\[-\\x{5d}])\");\n    assert_eq!(vec![(0, 1), (1, 2)], findall!(re, \"[]\"));\n}\n\n#[test]\nfn empty_match_find_iter() {\n    let re = regex!(r\".*?\");\n    assert_eq!(vec![(0, 0), (1, 1), (2, 2), (3, 3)], findall!(re, \"abc\"));\n}\n\n#[test]\nfn empty_match_captures_iter() {\n    let re = regex!(r\".*?\");\n    let ms: Vec<_> = re\n        .captures_iter(text!(\"abc\"))\n        .map(|c| c.get(0).unwrap())\n        .map(|m| (m.start(), m.end()))\n        .collect();\n    assert_eq!(ms, vec![(0, 0), (1, 1), (2, 2), (3, 3)]);\n}\n\n#[test]\nfn capture_names() {\n    let re = regex!(r\"(.)(?P<a>.)\");\n    assert_eq!(3, re.captures_len());\n    assert_eq!((3, Some(3)), re.capture_names().size_hint());\n    assert_eq!(\n        vec![None, None, Some(\"a\")],\n        re.capture_names().collect::<Vec<_>>()\n    );\n}\n\n#[test]\nfn regex_string() {\n    assert_eq!(r\"[a-zA-Z0-9]+\", regex!(r\"[a-zA-Z0-9]+\").as_str());\n    assert_eq!(r\"[a-zA-Z0-9]+\", &format!(\"{}\", regex!(r\"[a-zA-Z0-9]+\")));\n    assert_eq!(r\"[a-zA-Z0-9]+\", &format!(\"{:?}\", regex!(r\"[a-zA-Z0-9]+\")));\n}\n\n#[test]\nfn capture_index() {\n    let re = regex!(r\"^(?P<name>.+)$\");\n    let cap = re.captures(t!(\"abc\")).unwrap();\n    assert_eq!(&cap[0], t!(\"abc\"));\n    assert_eq!(&cap[1], t!(\"abc\"));\n    assert_eq!(&cap[\"name\"], t!(\"abc\"));\n}\n\n#[test]\n#[should_panic]\n#[cfg_attr(all(target_env = \"msvc\", target_pointer_width = \"32\"), ignore)]\nfn capture_index_panic_usize() {\n    let re = regex!(r\"^(?P<name>.+)$\");\n    let cap = re.captures(t!(\"abc\")).unwrap();\n    let _ = cap[2];\n}\n\n#[test]\n#[should_panic]\n#[cfg_attr(all(target_env = \"msvc\", target_pointer_width = \"32\"), ignore)]\nfn capture_index_panic_name() {\n    let re = regex!(r\"^(?P<name>.+)$\");\n    let cap = re.captures(t!(\"abc\")).unwrap();\n    let _ = cap[\"bad name\"];\n}\n\n#[test]\nfn capture_index_lifetime() {\n    // This is a test of whether the types on `caps[\"...\"]` are general\n    // enough. If not, this will fail to typecheck.\n    fn inner(s: &str) -> usize {\n        let re = regex!(r\"(?P<number>[0-9]+)\");\n        let caps = re.captures(t!(s)).unwrap();\n        caps[\"number\"].len()\n    }\n    assert_eq!(3, inner(\"123\"));\n}\n\n#[test]\nfn capture_misc() {\n    let re = regex!(r\"(.)(?P<a>a)?(.)(?P<b>.)\");\n    let cap = re.captures(t!(\"abc\")).unwrap();\n\n    assert_eq!(5, cap.len());\n\n    assert_eq!((0, 3), {\n        let m = cap.get(0).unwrap();\n        (m.start(), m.end())\n    });\n    assert_eq!(None, cap.get(2));\n    assert_eq!((2, 3), {\n        let m = cap.get(4).unwrap();\n        (m.start(), m.end())\n    });\n\n    assert_eq!(t!(\"abc\"), match_text!(cap.get(0).unwrap()));\n    assert_eq!(None, cap.get(2));\n    assert_eq!(t!(\"c\"), match_text!(cap.get(4).unwrap()));\n\n    assert_eq!(None, cap.name(\"a\"));\n    assert_eq!(t!(\"c\"), match_text!(cap.name(\"b\").unwrap()));\n}\n\n#[test]\nfn sub_capture_matches() {\n    let re = regex!(r\"([a-z])(([a-z])|([0-9]))\");\n    let cap = re.captures(t!(\"a5\")).unwrap();\n    let subs: Vec<_> = cap.iter().collect();\n\n    assert_eq!(5, subs.len());\n    assert!(subs[0].is_some());\n    assert!(subs[1].is_some());\n    assert!(subs[2].is_some());\n    assert!(subs[3].is_none());\n    assert!(subs[4].is_some());\n\n    assert_eq!(t!(\"a5\"), match_text!(subs[0].unwrap()));\n    assert_eq!(t!(\"a\"), match_text!(subs[1].unwrap()));\n    assert_eq!(t!(\"5\"), match_text!(subs[2].unwrap()));\n    assert_eq!(t!(\"5\"), match_text!(subs[4].unwrap()));\n}\n\nexpand!(expand1, r\"(?-u)(?P<foo>\\w+)\", \"abc\", \"$foo\", \"abc\");\nexpand!(expand2, r\"(?-u)(?P<foo>\\w+)\", \"abc\", \"$0\", \"abc\");\nexpand!(expand3, r\"(?-u)(?P<foo>\\w+)\", \"abc\", \"$1\", \"abc\");\nexpand!(expand4, r\"(?-u)(?P<foo>\\w+)\", \"abc\", \"$$1\", \"$1\");\nexpand!(expand5, r\"(?-u)(?P<foo>\\w+)\", \"abc\", \"$$foo\", \"$foo\");\nexpand!(expand6, r\"(?-u)(?P<a>\\w+)\\s+(?P<b>\\d+)\", \"abc 123\", \"$b$a\", \"123abc\");\nexpand!(expand7, r\"(?-u)(?P<a>\\w+)\\s+(?P<b>\\d+)\", \"abc 123\", \"z$bz$az\", \"z\");\nexpand!(\n    expand8,\n    r\"(?-u)(?P<a>\\w+)\\s+(?P<b>\\d+)\",\n    \"abc 123\",\n    \".$b.$a.\",\n    \".123.abc.\"\n);\nexpand!(\n    expand9,\n    r\"(?-u)(?P<a>\\w+)\\s+(?P<b>\\d+)\",\n    \"abc 123\",\n    \" $b $a \",\n    \" 123 abc \"\n);\nexpand!(expand10, r\"(?-u)(?P<a>\\w+)\\s+(?P<b>\\d+)\", \"abc 123\", \"$bz$az\", \"\");\n\nsplit!(\n    split1,\n    r\"(?-u)\\s+\",\n    \"a b\\nc\\td\\n\\t e\",\n    &[t!(\"a\"), t!(\"b\"), t!(\"c\"), t!(\"d\"), t!(\"e\")]\n);\nsplit!(\n    split2,\n    r\"(?-u)\\b\",\n    \"a b c\",\n    &[t!(\"\"), t!(\"a\"), t!(\" \"), t!(\"b\"), t!(\" \"), t!(\"c\"), t!(\"\")]\n);\nsplit!(split3, r\"a$\", \"a\", &[t!(\"\"), t!(\"\")]);\nsplit!(split_none, r\"-\", r\"a\", &[t!(\"a\")]);\nsplit!(split_trailing_blank, r\"-\", r\"a-\", &[t!(\"a\"), t!(\"\")]);\nsplit!(split_trailing_blanks, r\"-\", r\"a--\", &[t!(\"a\"), t!(\"\"), t!(\"\")]);\nsplit!(split_empty, r\"-\", r\"\", &[t!(\"\")]);\n\nsplitn!(splitn_below_limit, r\"-\", r\"a\", 2, &[t!(\"a\")]);\nsplitn!(splitn_at_limit, r\"-\", r\"a-b\", 2, &[t!(\"a\"), t!(\"b\")]);\nsplitn!(splitn_above_limit, r\"-\", r\"a-b-c\", 2, &[t!(\"a\"), t!(\"b-c\")]);\nsplitn!(splitn_zero_limit, r\"-\", r\"a-b\", 0, empty_vec!());\nsplitn!(splitn_trailing_blank, r\"-\", r\"a-\", 2, &[t!(\"a\"), t!(\"\")]);\nsplitn!(splitn_trailing_separator, r\"-\", r\"a--\", 2, &[t!(\"a\"), t!(\"-\")]);\nsplitn!(splitn_empty, r\"-\", r\"\", 1, &[t!(\"\")]);\n","traces":[{"line":2,"address":[5218610,5218576],"length":1,"stats":{"Line":24},"fn_name":"empty_regex_empty_match"},{"line":3,"address":[5218587,5218625],"length":1,"stats":{"Line":16},"fn_name":null},{"line":4,"address":[5218918,5218752],"length":1,"stats":{"Line":13},"fn_name":null},{"line":8,"address":[5219568,5219602],"length":1,"stats":{"Line":24},"fn_name":"empty_regex_nonempty_match"},{"line":9,"address":[5219617,5219579],"length":1,"stats":{"Line":16},"fn_name":null},{"line":10,"address":[5219744,5220054],"length":1,"stats":{"Line":13},"fn_name":null},{"line":14,"address":[5220742,5220704],"length":1,"stats":{"Line":24},"fn_name":"one_zero_length_match"},{"line":15,"address":[5220718,5220757],"length":1,"stats":{"Line":16},"fn_name":null},{"line":16,"address":[5220884,5221146],"length":1,"stats":{"Line":13},"fn_name":null},{"line":20,"address":[5221792,5221830],"length":1,"stats":{"Line":24},"fn_name":"many_zero_length_match"},{"line":21,"address":[5221845,5221806],"length":1,"stats":{"Line":16},"fn_name":null},{"line":22,"address":[5222330,5222434],"length":1,"stats":{"Line":8},"fn_name":null},{"line":23,"address":[5221972],"length":1,"stats":{"Line":8},"fn_name":null},{"line":24,"address":[5222346],"length":1,"stats":{"Line":13},"fn_name":null},{"line":29,"address":[5223014,5222976],"length":1,"stats":{"Line":24},"fn_name":"many_sequential_zero_length_match"},{"line":30,"address":[5222990,5223029],"length":1,"stats":{"Line":16},"fn_name":null},{"line":31,"address":[5223618,5223514],"length":1,"stats":{"Line":8},"fn_name":null},{"line":32,"address":[5223156],"length":1,"stats":{"Line":8},"fn_name":null},{"line":33,"address":[5223530],"length":1,"stats":{"Line":13},"fn_name":null},{"line":38,"address":[5224160,5224198],"length":1,"stats":{"Line":24},"fn_name":"quoted_bracket_set"},{"line":39,"address":[5224174,5224213],"length":1,"stats":{"Line":16},"fn_name":null},{"line":40,"address":[5224566,5224343],"length":1,"stats":{"Line":13},"fn_name":null},{"line":41,"address":[5225194],"length":1,"stats":{"Line":8},"fn_name":null},{"line":42,"address":[5225371,5225588],"length":1,"stats":{"Line":13},"fn_name":null},{"line":46,"address":[5226358,5226320],"length":1,"stats":{"Line":24},"fn_name":"first_range_starts_with_left_bracket"},{"line":47,"address":[5226373,5226334],"length":1,"stats":{"Line":16},"fn_name":null},{"line":48,"address":[5226500,5226714],"length":1,"stats":{"Line":13},"fn_name":null},{"line":52,"address":[5227360,5227398],"length":1,"stats":{"Line":24},"fn_name":"range_ends_with_escape"},{"line":53,"address":[5227413,5227374],"length":1,"stats":{"Line":16},"fn_name":null},{"line":54,"address":[5227540,5227754],"length":1,"stats":{"Line":13},"fn_name":null},{"line":58,"address":[5228438,5228400],"length":1,"stats":{"Line":24},"fn_name":"empty_match_find_iter"},{"line":59,"address":[5228414,5228453],"length":1,"stats":{"Line":16},"fn_name":null},{"line":60,"address":[5228580,5228890],"length":1,"stats":{"Line":13},"fn_name":null},{"line":64,"address":[5229536,5229574],"length":1,"stats":{"Line":24},"fn_name":"empty_match_captures_iter"},{"line":65,"address":[5229550,5229589],"length":1,"stats":{"Line":16},"fn_name":null},{"line":66,"address":[5229845,5229779],"length":1,"stats":{"Line":16},"fn_name":null},{"line":68,"address":[6150032,6150044],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":69,"address":[6150192,6150201],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"},{"line":71,"address":[5230154,5229908],"length":1,"stats":{"Line":16},"fn_name":null},{"line":75,"address":[5230688,5230726],"length":1,"stats":{"Line":24},"fn_name":"capture_names"},{"line":76,"address":[5230741,5230702],"length":1,"stats":{"Line":16},"fn_name":null},{"line":77,"address":[5230861,5231093],"length":1,"stats":{"Line":8},"fn_name":null},{"line":78,"address":[5231040,5231470,5231801],"length":1,"stats":{"Line":16},"fn_name":null},{"line":79,"address":[5232178,5232229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":80,"address":[5231648],"length":1,"stats":{"Line":8},"fn_name":null},{"line":81,"address":[5232149,5232214],"length":1,"stats":{"Line":16},"fn_name":null},{"line":86,"address":[5232768,5232821],"length":1,"stats":{"Line":24},"fn_name":"regex_string"},{"line":87,"address":[5232836,5232782],"length":1,"stats":{"Line":16},"fn_name":null},{"line":88,"address":[5233554],"length":1,"stats":{"Line":8},"fn_name":null},{"line":89,"address":[5234530],"length":1,"stats":{"Line":8},"fn_name":null},{"line":93,"address":[5235552,5235590],"length":1,"stats":{"Line":24},"fn_name":"capture_index"},{"line":94,"address":[5235605,5235566],"length":1,"stats":{"Line":16},"fn_name":null},{"line":95,"address":[5235804,5235866],"length":1,"stats":{"Line":11},"fn_name":null},{"line":96,"address":[5235896,5236082,5236287],"length":1,"stats":{"Line":16},"fn_name":null},{"line":97,"address":[5236237,5236766,5236978,5236655],"length":1,"stats":{"Line":19},"fn_name":null},{"line":98,"address":[5237592,5237436,5237334,5236921],"length":1,"stats":{"Line":19},"fn_name":null},{"line":104,"address":[5238006,5237968],"length":1,"stats":{"Line":32},"fn_name":"capture_index_panic_usize"},{"line":105,"address":[5237982,5238021],"length":1,"stats":{"Line":16},"fn_name":null},{"line":106,"address":[5238253,5238204],"length":1,"stats":{"Line":11},"fn_name":null},{"line":107,"address":[5238283],"length":1,"stats":{"Line":8},"fn_name":null},{"line":113,"address":[5238416,5238454],"length":1,"stats":{"Line":32},"fn_name":"capture_index_panic_name"},{"line":114,"address":[5238430,5238469],"length":1,"stats":{"Line":16},"fn_name":null},{"line":115,"address":[5238652,5238701],"length":1,"stats":{"Line":11},"fn_name":null},{"line":116,"address":[5238731],"length":1,"stats":{"Line":8},"fn_name":null},{"line":120,"address":[5238864],"length":1,"stats":{"Line":24},"fn_name":"capture_index_lifetime"},{"line":123,"address":[5239280,5239347],"length":1,"stats":{"Line":8},"fn_name":"inner"},{"line":124,"address":[5239362,5239310],"length":1,"stats":{"Line":16},"fn_name":null},{"line":125,"address":[5239591,5239541],"length":1,"stats":{"Line":11},"fn_name":null},{"line":126,"address":[5239621],"length":1,"stats":{"Line":8},"fn_name":null},{"line":128,"address":[5238878,5238999],"length":1,"stats":{"Line":8},"fn_name":null},{"line":132,"address":[5239808,5239846],"length":1,"stats":{"Line":24},"fn_name":"capture_misc"},{"line":133,"address":[5239861,5239822],"length":1,"stats":{"Line":16},"fn_name":null},{"line":134,"address":[5240122,5240060],"length":1,"stats":{"Line":11},"fn_name":null},{"line":136,"address":[5240374,5240152],"length":1,"stats":{"Line":8},"fn_name":null},{"line":138,"address":[5240859,5241022,5240327],"length":1,"stats":{"Line":16},"fn_name":null},{"line":139,"address":[5240743,5240334],"length":1,"stats":{"Line":16},"fn_name":null},{"line":140,"address":[5240781],"length":1,"stats":{"Line":8},"fn_name":null},{"line":142,"address":[5241390,5240972,5241545],"length":1,"stats":{"Line":16},"fn_name":null},{"line":143,"address":[5241495,5242021,5242218],"length":1,"stats":{"Line":16},"fn_name":null},{"line":144,"address":[5241905,5241502],"length":1,"stats":{"Line":16},"fn_name":null},{"line":145,"address":[5241943],"length":1,"stats":{"Line":8},"fn_name":null},{"line":148,"address":[5242586,5242954],"length":1,"stats":{"Line":13},"fn_name":null},{"line":149,"address":[5242904,5243511,5243322],"length":1,"stats":{"Line":16},"fn_name":null},{"line":150,"address":[5243879,5244258],"length":1,"stats":{"Line":13},"fn_name":null},{"line":152,"address":[5244815,5244626,5244180],"length":1,"stats":{"Line":16},"fn_name":null},{"line":153,"address":[5245177,5245470],"length":1,"stats":{"Line":13},"fn_name":null},{"line":157,"address":[5245878,5245840],"length":1,"stats":{"Line":24},"fn_name":"sub_capture_matches"},{"line":158,"address":[5245893,5245854],"length":1,"stats":{"Line":16},"fn_name":null},{"line":159,"address":[5246092,5246154],"length":1,"stats":{"Line":11},"fn_name":null},{"line":160,"address":[5246184],"length":1,"stats":{"Line":8},"fn_name":null},{"line":162,"address":[5246461,5246250],"length":1,"stats":{"Line":8},"fn_name":null},{"line":163,"address":[5246424,5246900,5246838],"length":1,"stats":{"Line":16},"fn_name":null},{"line":164,"address":[5246941,5246865,5247003],"length":1,"stats":{"Line":16},"fn_name":null},{"line":165,"address":[5247044,5247106,5246968],"length":1,"stats":{"Line":16},"fn_name":null},{"line":166,"address":[5247071,5247147,5247209],"length":1,"stats":{"Line":16},"fn_name":null},{"line":167,"address":[5247174,5247250,5247358],"length":1,"stats":{"Line":16},"fn_name":null},{"line":169,"address":[5247794,5247399],"length":1,"stats":{"Line":13},"fn_name":null},{"line":170,"address":[5248560,5248162],"length":1,"stats":{"Line":13},"fn_name":null},{"line":171,"address":[5249326,5248928],"length":1,"stats":{"Line":13},"fn_name":null},{"line":172,"address":[5249984,5249688],"length":1,"stats":{"Line":13},"fn_name":null},{"line":202,"address":[5272725],"length":1,"stats":{"Line":3},"fn_name":null},{"line":208,"address":[5274538],"length":1,"stats":{"Line":3},"fn_name":null},{"line":210,"address":[5275861],"length":1,"stats":{"Line":3},"fn_name":null},{"line":211,"address":[5276879],"length":1,"stats":{"Line":3},"fn_name":null},{"line":212,"address":[5278021],"length":1,"stats":{"Line":3},"fn_name":null},{"line":213,"address":[5279284],"length":1,"stats":{"Line":3},"fn_name":null},{"line":214,"address":[5280335],"length":1,"stats":{"Line":3},"fn_name":null},{"line":216,"address":[5281343],"length":1,"stats":{"Line":3},"fn_name":null},{"line":217,"address":[5282488],"length":1,"stats":{"Line":3},"fn_name":null},{"line":218,"address":[5283640],"length":1,"stats":{"Line":3},"fn_name":null},{"line":219,"address":[5284569],"length":1,"stats":{"Line":8},"fn_name":null},{"line":220,"address":[5285736],"length":1,"stats":{"Line":3},"fn_name":null},{"line":221,"address":[5286888],"length":1,"stats":{"Line":3},"fn_name":null},{"line":222,"address":[5287903],"length":1,"stats":{"Line":3},"fn_name":null}],"covered":114,"coverable":114},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","api_str.rs"],"content":"// These tests don't really make sense with the bytes API, so we only test them\n// on the Unicode API.\n\n#[test]\nfn empty_match_unicode_find_iter() {\n    // Tests that we still yield byte ranges at valid UTF-8 sequence boundaries\n    // even when we're susceptible to empty width matches.\n    let re = regex!(r\".*?\");\n    assert_eq!(\n        vec![(0, 0), (3, 3), (4, 4), (7, 7), (8, 8)],\n        findall!(re, \"Ⅰ1Ⅱ2\")\n    );\n}\n\n#[test]\nfn empty_match_unicode_captures_iter() {\n    // Same as empty_match_unicode_find_iter, but tests capture iteration.\n    let re = regex!(r\".*?\");\n    let ms: Vec<_> = re\n        .captures_iter(text!(\"Ⅰ1Ⅱ2\"))\n        .map(|c| c.get(0).unwrap())\n        .map(|m| (m.start(), m.end()))\n        .collect();\n    assert_eq!(vec![(0, 0), (3, 3), (4, 4), (7, 7), (8, 8)], ms);\n}\n\n#[test]\nfn match_as_str() {\n    let re = regex!(r\"fo+\");\n    let caps = re.captures(\"barfoobar\").unwrap();\n    assert_eq!(caps.get(0).map(|m| m.as_str()), Some(\"foo\"));\n    assert_eq!(caps.get(0).map(From::from), Some(\"foo\"));\n    assert_eq!(caps.get(0).map(Into::into), Some(\"foo\"));\n}\n","traces":[{"line":5,"address":[7866880,7866918],"length":1,"stats":{"Line":15},"fn_name":"empty_match_unicode_find_iter"},{"line":8,"address":[7866894,7866933],"length":1,"stats":{"Line":10},"fn_name":null},{"line":9,"address":[7867355,7867425],"length":1,"stats":{"Line":5},"fn_name":null},{"line":10,"address":[7320471],"length":1,"stats":{"Line":5},"fn_name":null},{"line":11,"address":[7914646,7914714],"length":1,"stats":{"Line":10},"fn_name":null},{"line":16,"address":[7906821,7906816],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}"},{"line":18,"address":[7915356,7915310],"length":1,"stats":{"Line":10},"fn_name":null},{"line":19,"address":[7915465,7915377],"length":1,"stats":{"Line":10},"fn_name":null},{"line":21,"address":[7866432,7866444],"length":1,"stats":{"Line":10},"fn_name":"{{closure}}"},{"line":22,"address":[7866592,7866601],"length":1,"stats":{"Line":10},"fn_name":"{{closure}}"},{"line":24,"address":[7915799,7915505],"length":1,"stats":{"Line":10},"fn_name":null},{"line":28,"address":[7907093,7907088],"length":1,"stats":{"Line":15},"fn_name":"{{closure}}"},{"line":29,"address":[7916396,7916350],"length":1,"stats":{"Line":10},"fn_name":null},{"line":30,"address":[7916420],"length":1,"stats":{"Line":5},"fn_name":null},{"line":31,"address":[7907120,7907124],"length":1,"stats":{"Line":20},"fn_name":"{{closure}}"},{"line":32,"address":[7917327,7916727,7917129],"length":1,"stats":{"Line":10},"fn_name":null},{"line":33,"address":[7917293,7917845,7917683],"length":1,"stats":{"Line":10},"fn_name":null}],"covered":17,"coverable":17},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","bytes.rs"],"content":"// These are tests specifically crafted for regexes that can match arbitrary\n// bytes.\n\n// A silly wrapper to make it possible to write and match raw bytes.\nstruct R<'a>(&'a [u8]);\nimpl<'a> R<'a> {\n    fn as_bytes(&self) -> &'a [u8] {\n        self.0\n    }\n}\n\nmat!(word_boundary, r\"(?-u) \\b\", \" δ\", None);\n#[cfg(feature = \"unicode-perl\")]\nmat!(word_boundary_unicode, r\" \\b\", \" δ\", Some((0, 1)));\nmat!(word_not_boundary, r\"(?-u) \\B\", \" δ\", Some((0, 1)));\n#[cfg(feature = \"unicode-perl\")]\nmat!(word_not_boundary_unicode, r\" \\B\", \" δ\", None);\n\nmat!(perl_w_ascii, r\"(?-u)\\w+\", \"aδ\", Some((0, 1)));\n#[cfg(feature = \"unicode-perl\")]\nmat!(perl_w_unicode, r\"\\w+\", \"aδ\", Some((0, 3)));\nmat!(perl_d_ascii, r\"(?-u)\\d+\", \"1२३9\", Some((0, 1)));\n#[cfg(feature = \"unicode-perl\")]\nmat!(perl_d_unicode, r\"\\d+\", \"1२३9\", Some((0, 8)));\nmat!(perl_s_ascii, r\"(?-u)\\s+\", \" \\u{1680}\", Some((0, 1)));\n#[cfg(feature = \"unicode-perl\")]\nmat!(perl_s_unicode, r\"\\s+\", \" \\u{1680}\", Some((0, 4)));\n\n// The first `(.+)` matches two Unicode codepoints, but can't match the 5th\n// byte, which isn't valid UTF-8. The second (byte based) `(.+)` takes over and\n// matches.\nmat!(\n    mixed1,\n    r\"(.+)(?-u)(.+)\",\n    R(b\"\\xCE\\x93\\xCE\\x94\\xFF\"),\n    Some((0, 5)),\n    Some((0, 4)),\n    Some((4, 5))\n);\n\nmat!(case_ascii_one, r\"(?i-u)a\", \"A\", Some((0, 1)));\nmat!(case_ascii_class, r\"(?i-u)[a-z]+\", \"AaAaA\", Some((0, 5)));\n#[cfg(feature = \"unicode-case\")]\nmat!(case_unicode, r\"(?i)[a-z]+\", \"aA\\u{212A}aA\", Some((0, 7)));\nmat!(case_not_unicode, r\"(?i-u)[a-z]+\", \"aA\\u{212A}aA\", Some((0, 2)));\n\nmat!(negate_unicode, r\"[^a]\", \"δ\", Some((0, 2)));\nmat!(negate_not_unicode, r\"(?-u)[^a]\", \"δ\", Some((0, 1)));\n\n// This doesn't match in a normal Unicode regex because the implicit preceding\n// `.*?` is Unicode aware.\nmat!(dotstar_prefix_not_unicode1, r\"(?-u)a\", R(b\"\\xFFa\"), Some((1, 2)));\nmat!(dotstar_prefix_not_unicode2, r\"a\", R(b\"\\xFFa\"), Some((1, 2)));\n\n// Have fun with null bytes.\nmat!(\n    null_bytes,\n    r\"(?-u)(?P<cstr>[^\\x00]+)\\x00\",\n    R(b\"foo\\x00\"),\n    Some((0, 4)),\n    Some((0, 3))\n);\n\n// Test that lookahead operators work properly in the face of invalid UTF-8.\n// See: https://github.com/rust-lang/regex/issues/277\nmatiter!(\n    invalidutf8_anchor1,\n    r\"(?-u)\\xcc?^\",\n    R(b\"\\x8d#;\\x1a\\xa4s3\\x05foobarX\\\\\\x0f0t\\xe4\\x9b\\xa4\"),\n    (0, 0)\n);\nmatiter!(\n    invalidutf8_anchor2,\n    r\"(?-u)^\\xf7|4\\xff\\d\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a##########[] d\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a\\x8a##########\\[] #####\\x80\\S7|$\",\n    R(b\"\\x8d#;\\x1a\\xa4s3\\x05foobarX\\\\\\x0f0t\\xe4\\x9b\\xa4\"),\n    (22, 22)\n);\nmatiter!(\n    invalidutf8_anchor3,\n    r\"(?-u)^|ddp\\xff\\xffdddddlQd@\\x80\",\n    R(b\"\\x8d#;\\x1a\\xa4s3\\x05foobarX\\\\\\x0f0t\\xe4\\x9b\\xa4\"),\n    (0, 0)\n);\n\n// See https://github.com/rust-lang/regex/issues/303\n#[test]\nfn negated_full_byte_range() {\n    assert!(::regex::bytes::Regex::new(r#\"(?-u)[^\\x00-\\xff]\"#).is_err());\n}\n\nmatiter!(word_boundary_ascii1, r\"(?-u:\\B)x(?-u:\\B)\", \"áxβ\");\nmatiter!(\n    word_boundary_ascii2,\n    r\"(?-u:\\B)\",\n    \"0\\u{7EF5E}\",\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5)\n);\n\n// See: https://github.com/rust-lang/regex/issues/264\nmat!(ascii_boundary_no_capture, r\"(?-u)\\B\", \"\\u{28f3e}\", Some((0, 0)));\nmat!(ascii_boundary_capture, r\"(?-u)(\\B)\", \"\\u{28f3e}\", Some((0, 0)));\n\n// See: https://github.com/rust-lang/regex/issues/271\nmat!(end_not_wb, r\"$(?-u:\\B)\", \"\\u{5c124}\\u{b576c}\", Some((8, 8)));\n","traces":[{"line":7,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":8,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":12,"address":[4939993,4941304],"length":1,"stats":{"Line":3},"fn_name":null},{"line":14,"address":[4943504,4942137],"length":1,"stats":{"Line":3},"fn_name":null},{"line":15,"address":[4944329,4945696],"length":1,"stats":{"Line":3},"fn_name":null},{"line":17,"address":[4947832,4946521],"length":1,"stats":{"Line":3},"fn_name":null},{"line":19,"address":[4948665,4950032],"length":1,"stats":{"Line":3},"fn_name":null},{"line":21,"address":[4952224,4950857],"length":1,"stats":{"Line":3},"fn_name":null},{"line":22,"address":[4954416,4953049],"length":1,"stats":{"Line":3},"fn_name":null},{"line":24,"address":[4955241,4956608],"length":1,"stats":{"Line":3},"fn_name":null},{"line":25,"address":[4958800,4957433],"length":1,"stats":{"Line":3},"fn_name":null},{"line":27,"address":[4960992],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[4961703],"length":1,"stats":{"Line":3},"fn_name":null},{"line":36,"address":[4961766],"length":1,"stats":{"Line":3},"fn_name":null},{"line":37,"address":[4961834],"length":1,"stats":{"Line":3},"fn_name":null},{"line":38,"address":[4961902],"length":1,"stats":{"Line":3},"fn_name":null},{"line":41,"address":[4965536,4964169],"length":1,"stats":{"Line":3},"fn_name":null},{"line":42,"address":[4966361,4967728],"length":1,"stats":{"Line":3},"fn_name":null},{"line":44,"address":[4969920,4968553],"length":1,"stats":{"Line":3},"fn_name":null},{"line":45,"address":[4972112,4970745],"length":1,"stats":{"Line":3},"fn_name":null},{"line":47,"address":[4972937],"length":1,"stats":{"Line":3},"fn_name":null},{"line":48,"address":[4975129,4976496],"length":1,"stats":{"Line":3},"fn_name":null},{"line":52,"address":[4978637,4977207,4977270],"length":1,"stats":{"Line":6},"fn_name":null},{"line":53,"address":[4979414,4979351,4980781],"length":1,"stats":{"Line":6},"fn_name":null},{"line":59,"address":[4981495],"length":1,"stats":{"Line":3},"fn_name":null},{"line":60,"address":[4981558],"length":1,"stats":{"Line":3},"fn_name":null},{"line":61,"address":[4981626],"length":1,"stats":{"Line":3},"fn_name":null},{"line":69,"address":[4983751],"length":1,"stats":{"Line":3},"fn_name":null},{"line":70,"address":[4983814],"length":1,"stats":{"Line":3},"fn_name":null},{"line":75,"address":[4985735],"length":1,"stats":{"Line":3},"fn_name":null},{"line":76,"address":[4985798],"length":1,"stats":{"Line":3},"fn_name":null},{"line":81,"address":[4987719],"length":1,"stats":{"Line":3},"fn_name":null},{"line":82,"address":[4987782],"length":1,"stats":{"Line":3},"fn_name":null},{"line":87,"address":[4989728,4989696],"length":1,"stats":{"Line":9},"fn_name":"negated_full_byte_range"},{"line":88,"address":[4989707,4989745,4989805],"length":1,"stats":{"Line":6},"fn_name":null},{"line":91,"address":[4991149,4990376],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[4991929],"length":1,"stats":{"Line":3},"fn_name":null},{"line":97,"address":[4991953],"length":1,"stats":{"Line":3},"fn_name":null},{"line":98,"address":[4991977],"length":1,"stats":{"Line":3},"fn_name":null},{"line":99,"address":[4992001],"length":1,"stats":{"Line":3},"fn_name":null},{"line":103,"address":[4994105,4995472],"length":1,"stats":{"Line":3},"fn_name":null},{"line":104,"address":[4997664,4996297],"length":1,"stats":{"Line":3},"fn_name":null},{"line":107,"address":[4999856,4998489],"length":1,"stats":{"Line":3},"fn_name":null}],"covered":41,"coverable":43},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","consistent.rs"],"content":"use regex::internal::ExecBuilder;\n\n/// Given a regex, check if all of the backends produce the same\n/// results on a number of different inputs.\n///\n/// For now this just throws quickcheck at the problem, which\n/// is not very good because it only really tests half of the\n/// problem space. It is pretty unlikely that a random string\n/// will match any given regex, so this will probably just\n/// be checking that the different backends fail in the same\n/// way. This is still worthwhile to test, but is definitely not\n/// the whole story.\n///\n/// TODO(ethan): In order to cover the other half of the problem\n/// space, we should generate a random matching string by inspecting\n/// the AST of the input regex. The right way to do this probably\n/// involves adding a custom Arbitrary instance around a couple\n/// of newtypes. That way we can respect the quickcheck size hinting\n/// and shrinking and whatnot.\npub fn backends_are_consistent(re: &str) -> Result<u64, String> {\n    let standard_backends = vec![\n        (\n            \"bounded_backtracking_re\",\n            ExecBuilder::new(re)\n                .bounded_backtracking()\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"pikevm_re\",\n            ExecBuilder::new(re)\n                .nfa()\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"default_re\",\n            ExecBuilder::new(re)\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n    ];\n\n    let utf8bytes_backends = vec![\n        (\n            \"bounded_backtracking_utf8bytes_re\",\n            ExecBuilder::new(re)\n                .bounded_backtracking()\n                .bytes(true)\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"pikevm_utf8bytes_re\",\n            ExecBuilder::new(re)\n                .nfa()\n                .bytes(true)\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"default_utf8bytes_re\",\n            ExecBuilder::new(re)\n                .bytes(true)\n                .build()\n                .map(|exec| exec.into_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n    ];\n\n    let bytes_backends = vec![\n        (\n            \"bounded_backtracking_bytes_re\",\n            ExecBuilder::new(re)\n                .bounded_backtracking()\n                .only_utf8(false)\n                .build()\n                .map(|exec| exec.into_byte_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"pikevm_bytes_re\",\n            ExecBuilder::new(re)\n                .nfa()\n                .only_utf8(false)\n                .build()\n                .map(|exec| exec.into_byte_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n        (\n            \"default_bytes_re\",\n            ExecBuilder::new(re)\n                .only_utf8(false)\n                .build()\n                .map(|exec| exec.into_byte_regex())\n                .map_err(|err| format!(\"{}\", err))?,\n        ),\n    ];\n\n    Ok(string_checker::check_backends(&standard_backends)?\n        + string_checker::check_backends(&utf8bytes_backends)?\n        + bytes_checker::check_backends(&bytes_backends)?)\n}\n\n//\n// A consistency checker parameterized by the input type (&str or &[u8]).\n//\n\nmacro_rules! checker {\n    ($module_name:ident, $regex_type:path, $mk_input:expr) => {\n        mod $module_name {\n            use quickcheck;\n            use quickcheck::{Arbitrary, TestResult};\n\n            pub fn check_backends(\n                backends: &[(&str, $regex_type)],\n            ) -> Result<u64, String> {\n                let mut total_passed = 0;\n                for regex in backends[1..].iter() {\n                    total_passed += quickcheck_regex_eq(&backends[0], regex)?;\n                }\n\n                Ok(total_passed)\n            }\n\n            fn quickcheck_regex_eq(\n                &(name1, ref re1): &(&str, $regex_type),\n                &(name2, ref re2): &(&str, $regex_type),\n            ) -> Result<u64, String> {\n                quickcheck::QuickCheck::new()\n                    .quicktest(RegexEqualityTest::new(\n                        re1.clone(),\n                        re2.clone(),\n                    ))\n                    .map_err(|err| {\n                        format!(\n                            \"{}(/{}/) and {}(/{}/) are inconsistent.\\\n                             QuickCheck Err: {:?}\",\n                            name1, re1, name2, re2, err\n                        )\n                    })\n            }\n\n            struct RegexEqualityTest {\n                re1: $regex_type,\n                re2: $regex_type,\n            }\n            impl RegexEqualityTest {\n                fn new(re1: $regex_type, re2: $regex_type) -> Self {\n                    RegexEqualityTest { re1: re1, re2: re2 }\n                }\n            }\n\n            impl quickcheck::Testable for RegexEqualityTest {\n                fn result<G: quickcheck::Gen>(\n                    &self,\n                    gen: &mut G,\n                ) -> TestResult {\n                    let input = $mk_input(gen);\n                    let input = &input;\n\n                    if self.re1.find(&input) != self.re2.find(input) {\n                        return TestResult::error(format!(\n                            \"find mismatch input={:?}\",\n                            input\n                        ));\n                    }\n\n                    let cap1 = self.re1.captures(input);\n                    let cap2 = self.re2.captures(input);\n                    match (cap1, cap2) {\n                        (None, None) => {}\n                        (Some(cap1), Some(cap2)) => {\n                            for (c1, c2) in cap1.iter().zip(cap2.iter()) {\n                                if c1 != c2 {\n                                    return TestResult::error(format!(\n                                        \"captures mismatch input={:?}\",\n                                        input\n                                    ));\n                                }\n                            }\n                        }\n                        _ => {\n                            return TestResult::error(format!(\n                                \"captures mismatch input={:?}\",\n                                input\n                            ))\n                        }\n                    }\n\n                    let fi1 = self.re1.find_iter(input);\n                    let fi2 = self.re2.find_iter(input);\n                    for (m1, m2) in fi1.zip(fi2) {\n                        if m1 != m2 {\n                            return TestResult::error(format!(\n                                \"find_iter mismatch input={:?}\",\n                                input\n                            ));\n                        }\n                    }\n\n                    let ci1 = self.re1.captures_iter(input);\n                    let ci2 = self.re2.captures_iter(input);\n                    for (cap1, cap2) in ci1.zip(ci2) {\n                        for (c1, c2) in cap1.iter().zip(cap2.iter()) {\n                            if c1 != c2 {\n                                return TestResult::error(format!(\n                                    \"captures_iter mismatch input={:?}\",\n                                    input\n                                ));\n                            }\n                        }\n                    }\n\n                    let s1 = self.re1.split(input);\n                    let s2 = self.re2.split(input);\n                    for (chunk1, chunk2) in s1.zip(s2) {\n                        if chunk1 != chunk2 {\n                            return TestResult::error(format!(\n                                \"split mismatch input={:?}\",\n                                input\n                            ));\n                        }\n                    }\n\n                    TestResult::from_bool(true)\n                }\n            }\n        } // mod\n    }; // rule case\n} // macro_rules!\n\nchecker!(string_checker, ::regex::Regex, |gen| String::arbitrary(gen));\nchecker!(bytes_checker, ::regex::bytes::Regex, |gen| Vec::<u8>::arbitrary(\n    gen\n));\n","traces":[{"line":20,"address":[4660288,4660399],"length":1,"stats":{"Line":0},"fn_name":"backends_are_consistent"},{"line":21,"address":[4661531,4660967,4662309,4660336,4661556,4660950,4660562,4661695,4667712,4661959,4661133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[4660414,4660370,4660828,4660577],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[4234928,4234935],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":28,"address":[4235008,4235018],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":32,"address":[4660985,4661163,4660796,4661414],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[4235248,4235255],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":36,"address":[4235338,4235328],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":40,"address":[4662192,4661740,4661382,4661574],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[4235575,4235568],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":43,"address":[4235658,4235648],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":47,"address":[4662596,4663599,4663624,4663795,4662971,4664412,4663003,4667730,4662359,4664059,4663201],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[4662372,4662416,4662611,4662862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[4235888,4235895],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":55,"address":[4235978,4235968],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":59,"address":[4663482,4663021,4662830,4663231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[4236208,4236215],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":64,"address":[4236288,4236298],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":68,"address":[4663840,4663642,4663450,4664295],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[4236535,4236528],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":72,"address":[4236608,4236618],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":76,"address":[4664699,4666512,4667748,4665702,4665895,4665074,4666159,4665109,4665727,4665304,4664462],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[4664965,4664475,4664522,4664714],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[4236855,4236848],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":84,"address":[4236938,4236928],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":88,"address":[4665334,4665127,4665585,4664933],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[4237168,4237175],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":93,"address":[4237258,4237248],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":97,"address":[4666395,4665553,4665745,4665940],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[4237488,4237495],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":101,"address":[4237578,4237568],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":105,"address":[4666704,4667042,4666557,4667394,4667611,4666610,4666904,4666753,4668563],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[4667067,4667021,4666927,4666733,4667231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[4667597,4667373,4667418,4667244],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[4233360,4233709],"length":1,"stats":{"Line":0},"fn_name":"check_backends"},{"line":123,"address":[4233393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[4233909,4233407,4233585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[4233625,4233724,4233878,4233914],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[4233559],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[4234121,4234000],"length":1,"stats":{"Line":0},"fn_name":"quickcheck_regex_eq"},{"line":132,"address":[4234026],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[4234063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[4234092,4234229,4234312],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[4234182],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[4234136],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[4234162],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[4222244,4221984],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":141,"address":[4222346,4222275,4222019],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[4221997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[4222004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[4234416],"length":1,"stats":{"Line":0},"fn_name":"new"},{"line":155,"address":[4234426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[4222892,4222752],"length":1,"stats":{"Line":0},"fn_name":"result<quickcheck::arbitrary::StdThreadGen>"},{"line":164,"address":[4222831,4222784],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[4222915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":167,"address":[4223044,4222931],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[4223512,4223246,4223338],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[4223231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[4223185,4223517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[4223576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[4224114,4225098,4223666],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[4223882,4223974],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[4224119,4224088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[4224769,4224468,4224344,4224231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[4224742],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[4225061,4225074,4229190,4224789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[4224774],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[4225079,4225023,4224285,4224446],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[4224013,4225111],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[4223998],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[4225282,4229393],"length":1,"stats":{"Line":0},"fn_name":null},{"line":197,"address":[4225377],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[4225783,4226084,4225467],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[4226057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[4226104],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[4226089],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[4226345,4225737],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[4226396],"length":1,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[4228101,4226486],"length":1,"stats":{"Line":0},"fn_name":null},{"line":210,"address":[4227184,4227358,4227777,4227272,4227482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[4227756],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[4227797,4228061],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[4227782],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[4227235,4228106],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[4228148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[4228509,4228712,4228220],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[4228671],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[4228732],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[4228717],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[4228482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[4601536,4601553,4594664],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}<quickcheck::arbitrary::StdThreadGen>"},{"line":239,"address":[4229729,4222824,4229712],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}<quickcheck::arbitrary::StdThreadGen>"}],"covered":0,"coverable":92},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","crazy.rs"],"content":"mat!(ascii_literal, r\"a\", \"a\", Some((0, 1)));\n\n// Some crazy expressions from regular-expressions.info.\nmat!(\n    match_ranges,\n    r\"(?-u)\\b(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\",\n    \"num: 255\",\n    Some((5, 8))\n);\nmat!(\n    match_ranges_not,\n    r\"(?-u)\\b(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\",\n    \"num: 256\",\n    None\n);\nmat!(match_float1, r\"[-+]?[0-9]*\\.?[0-9]+\", \"0.1\", Some((0, 3)));\nmat!(match_float2, r\"[-+]?[0-9]*\\.?[0-9]+\", \"0.1.2\", Some((0, 3)));\nmat!(match_float3, r\"[-+]?[0-9]*\\.?[0-9]+\", \"a1.2\", Some((1, 4)));\nmat!(match_float4, r\"^[-+]?[0-9]*\\.?[0-9]+$\", \"1.a\", None);\nmat!(\n    match_email,\n    r\"(?i-u)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\b\",\n    \"mine is jam.slam@gmail.com \",\n    Some((8, 26))\n);\nmat!(\n    match_email_not,\n    r\"(?i-u)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\b\",\n    \"mine is jam.slam@gmail \",\n    None\n);\nmat!(\n    match_email_big,\n    r\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\",\n    \"mine is jam.slam@gmail.com \",\n    Some((8, 26))\n);\nmat!(\n    match_date1,\n    r\"(?-u)^(19|20)\\d\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$\",\n    \"1900-01-01\",\n    Some((0, 10))\n);\nmat!(\n    match_date2,\n    r\"(?-u)^(19|20)\\d\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$\",\n    \"1900-00-01\",\n    None\n);\nmat!(\n    match_date3,\n    r\"(?-u)^(19|20)\\d\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$\",\n    \"1900-13-01\",\n    None\n);\n\n// Do some crazy dancing with the start/end assertions.\nmatiter!(match_start_end_empty, r\"^$\", \"\", (0, 0));\nmatiter!(match_start_end_empty_many_1, r\"^$^$^$\", \"\", (0, 0));\nmatiter!(match_start_end_empty_many_2, r\"^^^$$$\", \"\", (0, 0));\nmatiter!(match_start_end_empty_rev, r\"$^\", \"\", (0, 0));\nmatiter!(\n    match_start_end_empty_rep,\n    r\"(?:^$)*\",\n    \"a\\nb\\nc\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5)\n);\nmatiter!(\n    match_start_end_empty_rep_rev,\n    r\"(?:$^)*\",\n    \"a\\nb\\nc\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5)\n);\n\n// Test negated character classes.\nmat!(negclass_letters, r\"[^ac]\", \"acx\", Some((2, 3)));\nmat!(negclass_letter_comma, r\"[^a,]\", \"a,x\", Some((2, 3)));\nmat!(negclass_letter_space, r\"[^a[:space:]]\", \"a x\", Some((2, 3)));\nmat!(negclass_comma, r\"[^,]\", \",,x\", Some((2, 3)));\nmat!(negclass_space, r\"[^[:space:]]\", \" a\", Some((1, 2)));\nmat!(negclass_space_comma, r\"[^,[:space:]]\", \", a\", Some((2, 3)));\nmat!(negclass_comma_space, r\"[^[:space:],]\", \" ,a\", Some((2, 3)));\nmat!(negclass_ascii, r\"[^[:alpha:]Z]\", \"A1\", Some((1, 2)));\n\n// Test that repeated empty expressions don't loop forever.\nmat!(lazy_many_many, r\"((?:.*)*?)=\", \"a=b\", Some((0, 2)));\nmat!(lazy_many_optional, r\"((?:.?)*?)=\", \"a=b\", Some((0, 2)));\nmat!(lazy_one_many_many, r\"((?:.*)+?)=\", \"a=b\", Some((0, 2)));\nmat!(lazy_one_many_optional, r\"((?:.?)+?)=\", \"a=b\", Some((0, 2)));\nmat!(lazy_range_min_many, r\"((?:.*){1,}?)=\", \"a=b\", Some((0, 2)));\nmat!(lazy_range_many, r\"((?:.*){1,2}?)=\", \"a=b\", Some((0, 2)));\nmat!(greedy_many_many, r\"((?:.*)*)=\", \"a=b\", Some((0, 2)));\nmat!(greedy_many_optional, r\"((?:.?)*)=\", \"a=b\", Some((0, 2)));\nmat!(greedy_one_many_many, r\"((?:.*)+)=\", \"a=b\", Some((0, 2)));\nmat!(greedy_one_many_optional, r\"((?:.?)+)=\", \"a=b\", Some((0, 2)));\nmat!(greedy_range_min_many, r\"((?:.*){1,})=\", \"a=b\", Some((0, 2)));\nmat!(greedy_range_many, r\"((?:.*){1,2})=\", \"a=b\", Some((0, 2)));\n\n// Test that we handle various flavors of empty expressions.\nmatiter!(match_empty1, r\"\", \"\", (0, 0));\nmatiter!(match_empty2, r\"\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty3, r\"()\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty4, r\"()*\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty5, r\"()+\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty6, r\"()?\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty7, r\"()()\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty8, r\"()+|z\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty9, r\"z|()+\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty10, r\"()+|b\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty11, r\"b|()+\", \"abc\", (0, 0), (1, 2), (3, 3));\nmatiter!(match_empty12, r\"|b\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty13, r\"b|\", \"abc\", (0, 0), (1, 2), (3, 3));\nmatiter!(match_empty14, r\"|z\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty15, r\"z|\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty16, r\"|\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty17, r\"||\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty18, r\"||z\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty19, r\"(?:)|b\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty20, r\"b|(?:)\", \"abc\", (0, 0), (1, 2), (3, 3));\nmatiter!(match_empty21, r\"(?:|)\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty22, r\"(?:|)|z\", \"abc\", (0, 0), (1, 1), (2, 2), (3, 3));\nmatiter!(match_empty23, r\"a(?:)|b\", \"abc\", (0, 1), (1, 2));\n\n// Test that the DFA can handle pathological cases.\n// (This should result in the DFA's cache being flushed too frequently, which\n// should cause it to quit and fall back to the NFA algorithm.)\n#[test]\nfn dfa_handles_pathological_case() {\n    fn ones_and_zeroes(count: usize) -> String {\n        use rand::{thread_rng, Rng};\n\n        let mut rng = thread_rng();\n        let mut s = String::new();\n        for _ in 0..count {\n            if rng.gen() {\n                s.push('1');\n            } else {\n                s.push('0');\n            }\n        }\n        s\n    }\n\n    let re = regex!(r\"[01]*1[01]{20}$\");\n    let text = {\n        let mut pieces = ones_and_zeroes(100_000);\n        pieces.push('1');\n        pieces.push_str(&ones_and_zeroes(20));\n        pieces\n    };\n    assert!(re.is_match(text!(&*text)));\n}\n\n#[test]\nfn nest_limit_makes_it_parse() {\n    use regex::RegexBuilder;\n\n    RegexBuilder::new(\n        r#\"(?-u)\n        2(?:\n          [45]\\d{3}|\n          7(?:\n            1[0-267]|\n            2[0-289]|\n            3[0-29]|\n            4[01]|\n            5[1-3]|\n            6[013]|\n            7[0178]|\n            91\n          )|\n          8(?:\n            0[125]|\n            [139][1-6]|\n            2[0157-9]|\n            41|\n            6[1-35]|\n            7[1-5]|\n            8[1-8]|\n            90\n          )|\n          9(?:\n            0[0-2]|\n            1[0-4]|\n            2[568]|\n            3[3-6]|\n            5[5-7]|\n            6[0167]|\n            7[15]|\n            8[0146-9]\n          )\n        )\\d{4}|\n        3(?:\n          12?[5-7]\\d{2}|\n          0(?:\n            2(?:\n              [025-79]\\d|\n              [348]\\d{1,2}\n            )|\n            3(?:\n              [2-4]\\d|\n              [56]\\d?\n            )\n          )|\n          2(?:\n            1\\d{2}|\n            2(?:\n              [12]\\d|\n              [35]\\d{1,2}|\n              4\\d?\n            )\n          )|\n          3(?:\n            1\\d{2}|\n            2(?:\n              [2356]\\d|\n              4\\d{1,2}\n            )\n          )|\n          4(?:\n            1\\d{2}|\n            2(?:\n              2\\d{1,2}|\n              [47]|\n              5\\d{2}\n            )\n          )|\n          5(?:\n            1\\d{2}|\n            29\n          )|\n          [67]1\\d{2}|\n          8(?:\n            1\\d{2}|\n            2(?:\n              2\\d{2}|\n              3|\n              4\\d\n            )\n          )\n        )\\d{3}|\n        4(?:\n          0(?:\n            2(?:\n              [09]\\d|\n              7\n            )|\n            33\\d{2}\n          )|\n          1\\d{3}|\n          2(?:\n            1\\d{2}|\n            2(?:\n              [25]\\d?|\n              [348]\\d|\n              [67]\\d{1,2}\n            )\n          )|\n          3(?:\n            1\\d{2}(?:\n              \\d{2}\n            )?|\n            2(?:\n              [045]\\d|\n              [236-9]\\d{1,2}\n            )|\n            32\\d{2}\n          )|\n          4(?:\n            [18]\\d{2}|\n            2(?:\n              [2-46]\\d{2}|\n              3\n            )|\n            5[25]\\d{2}\n          )|\n          5(?:\n            1\\d{2}|\n            2(?:\n              3\\d|\n              5\n            )\n          )|\n          6(?:\n            [18]\\d{2}|\n            2(?:\n              3(?:\n                \\d{2}\n              )?|\n              [46]\\d{1,2}|\n              5\\d{2}|\n              7\\d\n            )|\n            5(?:\n              3\\d?|\n              4\\d|\n              [57]\\d{1,2}|\n              6\\d{2}|\n              8\n            )\n          )|\n          71\\d{2}|\n          8(?:\n            [18]\\d{2}|\n            23\\d{2}|\n            54\\d{2}\n          )|\n          9(?:\n            [18]\\d{2}|\n            2[2-5]\\d{2}|\n            53\\d{1,2}\n          )\n        )\\d{3}|\n        5(?:\n          02[03489]\\d{2}|\n          1\\d{2}|\n          2(?:\n            1\\d{2}|\n            2(?:\n              2(?:\n                \\d{2}\n              )?|\n              [457]\\d{2}\n            )\n          )|\n          3(?:\n            1\\d{2}|\n            2(?:\n              [37](?:\n                \\d{2}\n              )?|\n              [569]\\d{2}\n            )\n          )|\n          4(?:\n            1\\d{2}|\n            2[46]\\d{2}\n          )|\n          5(?:\n            1\\d{2}|\n            26\\d{1,2}\n          )|\n          6(?:\n            [18]\\d{2}|\n            2|\n            53\\d{2}\n          )|\n          7(?:\n            1|\n            24\n          )\\d{2}|\n          8(?:\n            1|\n            26\n          )\\d{2}|\n          91\\d{2}\n        )\\d{3}|\n        6(?:\n          0(?:\n            1\\d{2}|\n            2(?:\n              3\\d{2}|\n              4\\d{1,2}\n            )\n          )|\n          2(?:\n            2[2-5]\\d{2}|\n            5(?:\n              [3-5]\\d{2}|\n              7\n            )|\n            8\\d{2}\n          )|\n          3(?:\n            1|\n            2[3478]\n          )\\d{2}|\n          4(?:\n            1|\n            2[34]\n          )\\d{2}|\n          5(?:\n            1|\n            2[47]\n          )\\d{2}|\n          6(?:\n            [18]\\d{2}|\n            6(?:\n              2(?:\n                2\\d|\n                [34]\\d{2}\n              )|\n              5(?:\n                [24]\\d{2}|\n                3\\d|\n                5\\d{1,2}\n              )\n            )\n          )|\n          72[2-5]\\d{2}|\n          8(?:\n            1\\d{2}|\n            2[2-5]\\d{2}\n          )|\n          9(?:\n            1\\d{2}|\n            2[2-6]\\d{2}\n          )\n        )\\d{3}|\n        7(?:\n          (?:\n            02|\n            [3-589]1|\n            6[12]|\n            72[24]\n          )\\d{2}|\n          21\\d{3}|\n          32\n        )\\d{3}|\n        8(?:\n          (?:\n            4[12]|\n            [5-7]2|\n            1\\d?\n          )|\n          (?:\n            0|\n            3[12]|\n            [5-7]1|\n            217\n          )\\d\n        )\\d{4}|\n        9(?:\n          [35]1|\n          (?:\n            [024]2|\n            81\n          )\\d|\n          (?:\n            1|\n            [24]1\n          )\\d{2}\n        )\\d{3}\n        \"#,\n    )\n    .build()\n    .unwrap();\n}\n","traces":[{"line":1,"address":[7668976,7667609],"length":1,"stats":{"Line":13},"fn_name":null},{"line":8,"address":[7669801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":14,"address":[7671993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":16,"address":[7675504,7674137],"length":1,"stats":{"Line":13},"fn_name":null},{"line":17,"address":[7677696,7676329],"length":1,"stats":{"Line":13},"fn_name":null},{"line":18,"address":[7679888,7678521],"length":1,"stats":{"Line":13},"fn_name":null},{"line":19,"address":[7682024,7680713],"length":1,"stats":{"Line":13},"fn_name":null},{"line":24,"address":[7682857],"length":1,"stats":{"Line":8},"fn_name":null},{"line":30,"address":[7685049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":36,"address":[7687193],"length":1,"stats":{"Line":8},"fn_name":null},{"line":42,"address":[7689385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[7691577],"length":1,"stats":{"Line":8},"fn_name":null},{"line":54,"address":[7693721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":58,"address":[7697112,7695865,7696339],"length":1,"stats":{"Line":13},"fn_name":null},{"line":59,"address":[7697897,7698371,7699144],"length":1,"stats":{"Line":13},"fn_name":null},{"line":60,"address":[7699929,7701176,7700403],"length":1,"stats":{"Line":13},"fn_name":null},{"line":61,"address":[7702435,7703208,7701961],"length":1,"stats":{"Line":13},"fn_name":null},{"line":66,"address":[7703993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":67,"address":[7704017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":68,"address":[7704041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":69,"address":[7704065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":70,"address":[7704089],"length":1,"stats":{"Line":8},"fn_name":null},{"line":71,"address":[7704113],"length":1,"stats":{"Line":8},"fn_name":null},{"line":77,"address":[7706265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":78,"address":[7706289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":79,"address":[7706313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":80,"address":[7706337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":81,"address":[7706361],"length":1,"stats":{"Line":8},"fn_name":null},{"line":82,"address":[7706385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":86,"address":[7708537,7709904],"length":1,"stats":{"Line":13},"fn_name":null},{"line":87,"address":[7710729,7712096],"length":1,"stats":{"Line":13},"fn_name":null},{"line":88,"address":[7712921,7714288],"length":1,"stats":{"Line":13},"fn_name":null},{"line":89,"address":[7716480,7715113],"length":1,"stats":{"Line":13},"fn_name":null},{"line":90,"address":[7718672,7717305],"length":1,"stats":{"Line":13},"fn_name":null},{"line":91,"address":[7720864,7719497],"length":1,"stats":{"Line":13},"fn_name":null},{"line":92,"address":[7721689,7723056],"length":1,"stats":{"Line":13},"fn_name":null},{"line":93,"address":[7723881,7725248],"length":1,"stats":{"Line":13},"fn_name":null},{"line":96,"address":[7726073,7727440],"length":1,"stats":{"Line":13},"fn_name":null},{"line":97,"address":[7728265,7729632],"length":1,"stats":{"Line":13},"fn_name":null},{"line":98,"address":[7731824,7730457],"length":1,"stats":{"Line":13},"fn_name":null},{"line":99,"address":[7734016,7732649],"length":1,"stats":{"Line":13},"fn_name":null},{"line":100,"address":[7736208,7734841],"length":1,"stats":{"Line":13},"fn_name":null},{"line":101,"address":[7737033,7738400],"length":1,"stats":{"Line":13},"fn_name":null},{"line":102,"address":[7740592,7739225],"length":1,"stats":{"Line":13},"fn_name":null},{"line":103,"address":[7742784,7741417],"length":1,"stats":{"Line":13},"fn_name":null},{"line":104,"address":[7743609,7744976],"length":1,"stats":{"Line":13},"fn_name":null},{"line":105,"address":[7745801,7747168],"length":1,"stats":{"Line":13},"fn_name":null},{"line":106,"address":[7747993,7749360],"length":1,"stats":{"Line":13},"fn_name":null},{"line":107,"address":[7751552,7750185],"length":1,"stats":{"Line":13},"fn_name":null},{"line":110,"address":[7752377,7753623,7752850],"length":1,"stats":{"Line":13},"fn_name":null},{"line":111,"address":[7754409,7755026,7755799],"length":1,"stats":{"Line":13},"fn_name":null},{"line":112,"address":[7757976,7757203,7756585],"length":1,"stats":{"Line":13},"fn_name":null},{"line":113,"address":[7758761,7759379,7760152],"length":1,"stats":{"Line":13},"fn_name":null},{"line":114,"address":[7762328,7761555,7760937],"length":1,"stats":{"Line":13},"fn_name":null},{"line":115,"address":[7763113,7764504,7763731],"length":1,"stats":{"Line":13},"fn_name":null},{"line":116,"address":[7765907,7765289,7766680],"length":1,"stats":{"Line":13},"fn_name":null},{"line":117,"address":[7767465,7768856,7768083],"length":1,"stats":{"Line":13},"fn_name":null},{"line":118,"address":[7770259,7769641,7771032],"length":1,"stats":{"Line":13},"fn_name":null},{"line":119,"address":[7772435,7771817,7773208],"length":1,"stats":{"Line":13},"fn_name":null},{"line":120,"address":[7773993,7774563,7775336],"length":1,"stats":{"Line":13},"fn_name":null},{"line":121,"address":[7776121,7776739,7777512],"length":1,"stats":{"Line":13},"fn_name":null},{"line":122,"address":[7778297,7778867,7779640],"length":1,"stats":{"Line":13},"fn_name":null},{"line":123,"address":[7781043,7781816,7780425],"length":1,"stats":{"Line":13},"fn_name":null},{"line":124,"address":[7783219,7782601,7783992],"length":1,"stats":{"Line":13},"fn_name":null},{"line":125,"address":[7785395,7786168,7784777],"length":1,"stats":{"Line":13},"fn_name":null},{"line":126,"address":[7787571,7788344,7786953],"length":1,"stats":{"Line":13},"fn_name":null},{"line":127,"address":[7790520,7789747,7789129],"length":1,"stats":{"Line":13},"fn_name":null},{"line":128,"address":[7791923,7792696,7791305],"length":1,"stats":{"Line":13},"fn_name":null},{"line":129,"address":[7794051,7794824,7793481],"length":1,"stats":{"Line":13},"fn_name":null},{"line":130,"address":[7797000,7795609,7796227],"length":1,"stats":{"Line":13},"fn_name":null},{"line":131,"address":[7799176,7797785,7798403],"length":1,"stats":{"Line":13},"fn_name":null},{"line":132,"address":[7800483,7801256,7799961],"length":1,"stats":{"Line":13},"fn_name":null},{"line":138,"address":[5329792,5329797],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":139,"address":[7802608,7802654],"length":1,"stats":{"Line":8},"fn_name":"ones_and_zeroes"},{"line":142,"address":[7802641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":143,"address":[7802674],"length":1,"stats":{"Line":8},"fn_name":null},{"line":144,"address":[7802679,7802764,7802837,7802924],"length":1,"stats":{"Line":24},"fn_name":null},{"line":145,"address":[7802920,7802865],"length":1,"stats":{"Line":16},"fn_name":null},{"line":146,"address":[7802913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":148,"address":[7802896],"length":1,"stats":{"Line":8},"fn_name":null},{"line":154,"address":[7801934,7801973],"length":1,"stats":{"Line":16},"fn_name":null},{"line":156,"address":[7802097],"length":1,"stats":{"Line":8},"fn_name":null},{"line":157,"address":[7802117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":158,"address":[7802153,7802184],"length":1,"stats":{"Line":16},"fn_name":null},{"line":159,"address":[7802261],"length":1,"stats":{"Line":8},"fn_name":null},{"line":161,"address":[7802466,7802301,7802407],"length":1,"stats":{"Line":16},"fn_name":null},{"line":165,"address":[5329909,5329904],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"}],"covered":87,"coverable":87},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","flags.rs"],"content":"mat!(match_flag_case, \"(?-u)(?i)abc\", \"ABC\", Some((0, 3)));\nmat!(match_flag_weird_case, \"(?-u)(?i)a(?-i)bc\", \"Abc\", Some((0, 3)));\nmat!(match_flag_weird_case_not, \"(?-u)(?i)a(?-i)bc\", \"ABC\", None);\nmat!(match_flag_case_dotnl, \"(?-u)(?is)a(?u:.)\", \"A\\n\", Some((0, 2)));\nmat!(\n    match_flag_case_dotnl_toggle,\n    \"(?-u)(?is)a(?u:.)(?-is)a(?u:.)\",\n    \"A\\nab\",\n    Some((0, 4))\n);\nmat!(\n    match_flag_case_dotnl_toggle_not,\n    \"(?-u)(?is)a(?u:.)(?-is)a(?u:.)\",\n    \"A\\na\\n\",\n    None\n);\nmat!(\n    match_flag_case_dotnl_toggle_ok,\n    \"(?-u)(?is)a(?u:.)(?-is:a(?u:.))?\",\n    \"A\\na\\n\",\n    Some((0, 2))\n);\nmat!(\n    match_flag_multi,\n    r\"(?-u)(?m)(?:^\\d+$\\n?)+\",\n    \"123\\n456\\n789\",\n    Some((0, 11))\n);\nmat!(match_flag_ungreedy, \"(?U)a+\", \"aa\", Some((0, 1)));\nmat!(match_flag_ungreedy_greedy, \"(?U)a+?\", \"aa\", Some((0, 2)));\nmat!(match_flag_ungreedy_noop, \"(?U)(?-U)a+\", \"aa\", Some((0, 2)));\n","traces":[{"line":1,"address":[8460252,8458868,8458830],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2,"address":[7916844,7915454,7915492],"length":1,"stats":{"Line":13},"fn_name":null},{"line":3,"address":[8559113,8560424],"length":1,"stats":{"Line":13},"fn_name":null},{"line":4,"address":[8692832,8691465],"length":1,"stats":{"Line":13},"fn_name":null},{"line":9,"address":[7921764],"length":1,"stats":{"Line":8},"fn_name":null},{"line":15,"address":[8469524],"length":1,"stats":{"Line":8},"fn_name":null},{"line":21,"address":[8697993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":29,"address":[8572169,8573536],"length":1,"stats":{"Line":13},"fn_name":null},{"line":30,"address":[8704569,8705936],"length":1,"stats":{"Line":13},"fn_name":null},{"line":31,"address":[8706761,8708128],"length":1,"stats":{"Line":13},"fn_name":null}],"covered":10,"coverable":10},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","fowler.rs"],"content":"// DO NOT EDIT. Automatically generated by 'scripts/regex-match-tests.py'\n// on 2019-09-02 11:07:37.849994.\n\n// Tests from basic.dat\nmat!(match_basic_3, r\"abracadabra$\", r\"abracadabracadabra\", Some((7, 18)));\nmat!(match_basic_4, r\"a...b\", r\"abababbb\", Some((2, 7)));\nmat!(match_basic_5, r\"XXXXXX\", r\"..XXXXXX\", Some((2, 8)));\nmat!(match_basic_6, r\"\\)\", r\"()\", Some((1, 2)));\nmat!(match_basic_7, r\"a]\", r\"a]a\", Some((0, 2)));\nmat!(match_basic_9, r\"\\}\", r\"}\", Some((0, 1)));\nmat!(match_basic_10, r\"\\]\", r\"]\", Some((0, 1)));\nmat!(match_basic_12, r\"]\", r\"]\", Some((0, 1)));\nmat!(match_basic_15, r\"^a\", r\"ax\", Some((0, 1)));\nmat!(match_basic_16, r\"\\^a\", r\"a^a\", Some((1, 3)));\nmat!(match_basic_17, r\"a\\^\", r\"a^\", Some((0, 2)));\nmat!(match_basic_18, r\"a$\", r\"aa\", Some((1, 2)));\nmat!(match_basic_19, r\"a\\$\", r\"a$\", Some((0, 2)));\nmat!(match_basic_20, r\"^$\", r\"\", Some((0, 0)));\nmat!(match_basic_21, r\"$^\", r\"\", Some((0, 0)));\nmat!(match_basic_22, r\"a($)\", r\"aa\", Some((1, 2)), Some((2, 2)));\nmat!(match_basic_23, r\"a*(^a)\", r\"aa\", Some((0, 1)), Some((0, 1)));\nmat!(match_basic_24, r\"(..)*(...)*\", r\"a\", Some((0, 0)));\nmat!(match_basic_25, r\"(..)*(...)*\", r\"abcd\", Some((0, 4)), Some((2, 4)));\nmat!(\n    match_basic_26,\n    r\"(ab|a)(bc|c)\",\n    r\"abc\",\n    Some((0, 3)),\n    Some((0, 2)),\n    Some((2, 3))\n);\nmat!(match_basic_27, r\"(ab)c|abc\", r\"abc\", Some((0, 3)), Some((0, 2)));\nmat!(match_basic_28, r\"a{0}b\", r\"ab\", Some((1, 2)));\nmat!(\n    match_basic_29,\n    r\"(a*)(b?)(b+)b{3}\",\n    r\"aaabbbbbbb\",\n    Some((0, 10)),\n    Some((0, 3)),\n    Some((3, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_30,\n    r\"(a*)(b{0,1})(b{1,})b{3}\",\n    r\"aaabbbbbbb\",\n    Some((0, 10)),\n    Some((0, 3)),\n    Some((3, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_32,\n    r\"((a|a)|a)\",\n    r\"a\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1))\n);\nmat!(\n    match_basic_33,\n    r\"(a*)(a|aa)\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((0, 3)),\n    Some((3, 4))\n);\nmat!(match_basic_34, r\"a*(a.|aa)\", r\"aaaa\", Some((0, 4)), Some((2, 4)));\nmat!(\n    match_basic_35,\n    r\"a(b)|c(d)|a(e)f\",\n    r\"aef\",\n    Some((0, 3)),\n    None,\n    None,\n    Some((1, 2))\n);\nmat!(match_basic_36, r\"(a|b)?.*\", r\"b\", Some((0, 1)), Some((0, 1)));\nmat!(match_basic_37, r\"(a|b)c|a(b|c)\", r\"ac\", Some((0, 2)), Some((0, 1)));\nmat!(\n    match_basic_38,\n    r\"(a|b)c|a(b|c)\",\n    r\"ab\",\n    Some((0, 2)),\n    None,\n    Some((1, 2))\n);\nmat!(match_basic_39, r\"(a|b)*c|(a|ab)*c\", r\"abc\", Some((0, 3)), Some((1, 2)));\nmat!(match_basic_40, r\"(a|b)*c|(a|ab)*c\", r\"xc\", Some((1, 2)));\nmat!(\n    match_basic_41,\n    r\"(.a|.b).*|.*(.a|.b)\",\n    r\"xa\",\n    Some((0, 2)),\n    Some((0, 2))\n);\nmat!(match_basic_42, r\"a?(ab|ba)ab\", r\"abab\", Some((0, 4)), Some((0, 2)));\nmat!(match_basic_43, r\"a?(ac{0}b|ba)ab\", r\"abab\", Some((0, 4)), Some((0, 2)));\nmat!(match_basic_44, r\"ab|abab\", r\"abbabab\", Some((0, 2)));\nmat!(match_basic_45, r\"aba|bab|bba\", r\"baaabbbaba\", Some((5, 8)));\nmat!(match_basic_46, r\"aba|bab\", r\"baaabbbaba\", Some((6, 9)));\nmat!(\n    match_basic_47,\n    r\"(aa|aaa)*|(a|aaaaa)\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 2))\n);\nmat!(\n    match_basic_48,\n    r\"(a.|.a.)*|(a|.a...)\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 2))\n);\nmat!(match_basic_49, r\"ab|a\", r\"xabc\", Some((1, 3)));\nmat!(match_basic_50, r\"ab|a\", r\"xxabc\", Some((2, 4)));\nmat!(\n    match_basic_51,\n    r\"(?i)(?-u)(Ab|cD)*\",\n    r\"aBcD\",\n    Some((0, 4)),\n    Some((2, 4))\n);\nmat!(match_basic_52, r\"[^-]\", r\"--a\", Some((2, 3)));\nmat!(match_basic_53, r\"[a-]*\", r\"--a\", Some((0, 3)));\nmat!(match_basic_54, r\"[a-m-]*\", r\"--amoma--\", Some((0, 4)));\nmat!(\n    match_basic_55,\n    r\":::1:::0:|:::1:1:0:\",\n    r\":::0:::1:::1:::0:\",\n    Some((8, 17))\n);\nmat!(\n    match_basic_56,\n    r\":::1:::0:|:::1:1:1:\",\n    r\":::0:::1:::1:::0:\",\n    Some((8, 17))\n);\nmat!(match_basic_57, r\"[[:upper:]]\", r\"A\", Some((0, 1)));\nmat!(match_basic_58, r\"[[:lower:]]+\", r\"`az{\", Some((1, 3)));\nmat!(match_basic_59, r\"[[:upper:]]+\", r\"@AZ[\", Some((1, 3)));\nmat!(\n    match_basic_65,\n    r\"\n\",\n    r\"\n\",\n    Some((0, 1))\n);\nmat!(\n    match_basic_66,\n    r\"\n\",\n    r\"\n\",\n    Some((0, 1))\n);\nmat!(\n    match_basic_67,\n    r\"[^a]\",\n    r\"\n\",\n    Some((0, 1))\n);\nmat!(\n    match_basic_68,\n    r\"\na\",\n    r\"\na\",\n    Some((0, 2))\n);\nmat!(\n    match_basic_69,\n    r\"(a)(b)(c)\",\n    r\"abc\",\n    Some((0, 3)),\n    Some((0, 1)),\n    Some((1, 2)),\n    Some((2, 3))\n);\nmat!(match_basic_70, r\"xxx\", r\"xxx\", Some((0, 3)));\nmat!(\n    match_basic_71,\n    r\"(^|[ (,;])((([Ff]eb[^ ]* *|0*2/|\\* */?)0*[6-7]))([^0-9]|$)\",\n    r\"feb 6,\",\n    Some((0, 6))\n);\nmat!(\n    match_basic_72,\n    r\"(^|[ (,;])((([Ff]eb[^ ]* *|0*2/|\\* */?)0*[6-7]))([^0-9]|$)\",\n    r\"2/7\",\n    Some((0, 3))\n);\nmat!(\n    match_basic_73,\n    r\"(^|[ (,;])((([Ff]eb[^ ]* *|0*2/|\\* */?)0*[6-7]))([^0-9]|$)\",\n    r\"feb 1,Feb 6\",\n    Some((5, 11))\n);\nmat!(\n    match_basic_74,\n    r\"((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))\",\n    r\"x\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1))\n);\nmat!(\n    match_basic_75,\n    r\"((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))*\",\n    r\"xx\",\n    Some((0, 2)),\n    Some((1, 2)),\n    Some((1, 2))\n);\nmat!(\n    match_basic_76,\n    r\"a?(ab|ba)*\",\n    r\"ababababababababababababababababababababababababababababababababababababababababa\",\n    Some((0, 81)),\n    Some((79, 81))\n);\nmat!(\n    match_basic_77,\n    r\"abaa|abbaa|abbbaa|abbbbaa\",\n    r\"ababbabbbabbbabbbbabbbbaa\",\n    Some((18, 25))\n);\nmat!(\n    match_basic_78,\n    r\"abaa|abbaa|abbbaa|abbbbaa\",\n    r\"ababbabbbabbbabbbbabaa\",\n    Some((18, 22))\n);\nmat!(\n    match_basic_79,\n    r\"aaac|aabc|abac|abbc|baac|babc|bbac|bbbc\",\n    r\"baaabbbabac\",\n    Some((7, 11))\n);\nmat!(match_basic_80, r\".*\", r\"\u0001\", Some((0, 2)));\nmat!(\n    match_basic_81,\n    r\"aaaa|bbbb|cccc|ddddd|eeeeee|fffffff|gggg|hhhh|iiiii|jjjjj|kkkkk|llll\",\n    r\"XaaaXbbbXcccXdddXeeeXfffXgggXhhhXiiiXjjjXkkkXlllXcbaXaaaa\",\n    Some((53, 57))\n);\nmat!(match_basic_83, r\"a*a*a*a*a*b\", r\"aaaaaaaaab\", Some((0, 10)));\nmat!(match_basic_84, r\"^\", r\"\", Some((0, 0)));\nmat!(match_basic_85, r\"$\", r\"\", Some((0, 0)));\nmat!(match_basic_86, r\"^$\", r\"\", Some((0, 0)));\nmat!(match_basic_87, r\"^a$\", r\"a\", Some((0, 1)));\nmat!(match_basic_88, r\"abc\", r\"abc\", Some((0, 3)));\nmat!(match_basic_89, r\"abc\", r\"xabcy\", Some((1, 4)));\nmat!(match_basic_90, r\"abc\", r\"ababc\", Some((2, 5)));\nmat!(match_basic_91, r\"ab*c\", r\"abc\", Some((0, 3)));\nmat!(match_basic_92, r\"ab*bc\", r\"abc\", Some((0, 3)));\nmat!(match_basic_93, r\"ab*bc\", r\"abbc\", Some((0, 4)));\nmat!(match_basic_94, r\"ab*bc\", r\"abbbbc\", Some((0, 6)));\nmat!(match_basic_95, r\"ab+bc\", r\"abbc\", Some((0, 4)));\nmat!(match_basic_96, r\"ab+bc\", r\"abbbbc\", Some((0, 6)));\nmat!(match_basic_97, r\"ab?bc\", r\"abbc\", Some((0, 4)));\nmat!(match_basic_98, r\"ab?bc\", r\"abc\", Some((0, 3)));\nmat!(match_basic_99, r\"ab?c\", r\"abc\", Some((0, 3)));\nmat!(match_basic_100, r\"^abc$\", r\"abc\", Some((0, 3)));\nmat!(match_basic_101, r\"^abc\", r\"abcc\", Some((0, 3)));\nmat!(match_basic_102, r\"abc$\", r\"aabc\", Some((1, 4)));\nmat!(match_basic_103, r\"^\", r\"abc\", Some((0, 0)));\nmat!(match_basic_104, r\"$\", r\"abc\", Some((3, 3)));\nmat!(match_basic_105, r\"a.c\", r\"abc\", Some((0, 3)));\nmat!(match_basic_106, r\"a.c\", r\"axc\", Some((0, 3)));\nmat!(match_basic_107, r\"a.*c\", r\"axyzc\", Some((0, 5)));\nmat!(match_basic_108, r\"a[bc]d\", r\"abd\", Some((0, 3)));\nmat!(match_basic_109, r\"a[b-d]e\", r\"ace\", Some((0, 3)));\nmat!(match_basic_110, r\"a[b-d]\", r\"aac\", Some((1, 3)));\nmat!(match_basic_111, r\"a[-b]\", r\"a-\", Some((0, 2)));\nmat!(match_basic_112, r\"a[b-]\", r\"a-\", Some((0, 2)));\nmat!(match_basic_113, r\"a]\", r\"a]\", Some((0, 2)));\nmat!(match_basic_114, r\"a[]]b\", r\"a]b\", Some((0, 3)));\nmat!(match_basic_115, r\"a[^bc]d\", r\"aed\", Some((0, 3)));\nmat!(match_basic_116, r\"a[^-b]c\", r\"adc\", Some((0, 3)));\nmat!(match_basic_117, r\"a[^]b]c\", r\"adc\", Some((0, 3)));\nmat!(match_basic_118, r\"ab|cd\", r\"abc\", Some((0, 2)));\nmat!(match_basic_119, r\"ab|cd\", r\"abcd\", Some((0, 2)));\nmat!(match_basic_120, r\"a\\(b\", r\"a(b\", Some((0, 3)));\nmat!(match_basic_121, r\"a\\(*b\", r\"ab\", Some((0, 2)));\nmat!(match_basic_122, r\"a\\(*b\", r\"a((b\", Some((0, 4)));\nmat!(\n    match_basic_123,\n    r\"((a))\",\n    r\"abc\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1))\n);\nmat!(\n    match_basic_124,\n    r\"(a)b(c)\",\n    r\"abc\",\n    Some((0, 3)),\n    Some((0, 1)),\n    Some((2, 3))\n);\nmat!(match_basic_125, r\"a+b+c\", r\"aabbabc\", Some((4, 7)));\nmat!(match_basic_126, r\"a*\", r\"aaa\", Some((0, 3)));\nmat!(match_basic_128, r\"(a*)*\", r\"-\", Some((0, 0)), None);\nmat!(match_basic_129, r\"(a*)+\", r\"-\", Some((0, 0)), Some((0, 0)));\nmat!(match_basic_131, r\"(a*|b)*\", r\"-\", Some((0, 0)), None);\nmat!(match_basic_132, r\"(a+|b)*\", r\"ab\", Some((0, 2)), Some((1, 2)));\nmat!(match_basic_133, r\"(a+|b)+\", r\"ab\", Some((0, 2)), Some((1, 2)));\nmat!(match_basic_134, r\"(a+|b)?\", r\"ab\", Some((0, 1)), Some((0, 1)));\nmat!(match_basic_135, r\"[^ab]*\", r\"cde\", Some((0, 3)));\nmat!(match_basic_137, r\"(^)*\", r\"-\", Some((0, 0)), None);\nmat!(match_basic_138, r\"a*\", r\"\", Some((0, 0)));\nmat!(match_basic_139, r\"([abc])*d\", r\"abbbcd\", Some((0, 6)), Some((4, 5)));\nmat!(match_basic_140, r\"([abc])*bcd\", r\"abcd\", Some((0, 4)), Some((0, 1)));\nmat!(match_basic_141, r\"a|b|c|d|e\", r\"e\", Some((0, 1)));\nmat!(match_basic_142, r\"(a|b|c|d|e)f\", r\"ef\", Some((0, 2)), Some((0, 1)));\nmat!(match_basic_144, r\"((a*|b))*\", r\"-\", Some((0, 0)), None, None);\nmat!(match_basic_145, r\"abcd*efg\", r\"abcdefg\", Some((0, 7)));\nmat!(match_basic_146, r\"ab*\", r\"xabyabbbz\", Some((1, 3)));\nmat!(match_basic_147, r\"ab*\", r\"xayabbbz\", Some((1, 2)));\nmat!(match_basic_148, r\"(ab|cd)e\", r\"abcde\", Some((2, 5)), Some((2, 4)));\nmat!(match_basic_149, r\"[abhgefdc]ij\", r\"hij\", Some((0, 3)));\nmat!(match_basic_150, r\"(a|b)c*d\", r\"abcd\", Some((1, 4)), Some((1, 2)));\nmat!(match_basic_151, r\"(ab|ab*)bc\", r\"abc\", Some((0, 3)), Some((0, 1)));\nmat!(match_basic_152, r\"a([bc]*)c*\", r\"abc\", Some((0, 3)), Some((1, 3)));\nmat!(\n    match_basic_153,\n    r\"a([bc]*)(c*d)\",\n    r\"abcd\",\n    Some((0, 4)),\n    Some((1, 3)),\n    Some((3, 4))\n);\nmat!(\n    match_basic_154,\n    r\"a([bc]+)(c*d)\",\n    r\"abcd\",\n    Some((0, 4)),\n    Some((1, 3)),\n    Some((3, 4))\n);\nmat!(\n    match_basic_155,\n    r\"a([bc]*)(c+d)\",\n    r\"abcd\",\n    Some((0, 4)),\n    Some((1, 2)),\n    Some((2, 4))\n);\nmat!(match_basic_156, r\"a[bcd]*dcdcde\", r\"adcdcde\", Some((0, 7)));\nmat!(match_basic_157, r\"(ab|a)b*c\", r\"abc\", Some((0, 3)), Some((0, 2)));\nmat!(\n    match_basic_158,\n    r\"((a)(b)c)(d)\",\n    r\"abcd\",\n    Some((0, 4)),\n    Some((0, 3)),\n    Some((0, 1)),\n    Some((1, 2)),\n    Some((3, 4))\n);\nmat!(match_basic_159, r\"[A-Za-z_][A-Za-z0-9_]*\", r\"alpha\", Some((0, 5)));\nmat!(match_basic_160, r\"^a(bc+|b[eh])g|.h$\", r\"abh\", Some((1, 3)));\nmat!(\n    match_basic_161,\n    r\"(bc+d$|ef*g.|h?i(j|k))\",\n    r\"effgz\",\n    Some((0, 5)),\n    Some((0, 5))\n);\nmat!(\n    match_basic_162,\n    r\"(bc+d$|ef*g.|h?i(j|k))\",\n    r\"ij\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((1, 2))\n);\nmat!(\n    match_basic_163,\n    r\"(bc+d$|ef*g.|h?i(j|k))\",\n    r\"reffgz\",\n    Some((1, 6)),\n    Some((1, 6))\n);\nmat!(\n    match_basic_164,\n    r\"(((((((((a)))))))))\",\n    r\"a\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((0, 1))\n);\nmat!(\n    match_basic_165,\n    r\"multiple words\",\n    r\"multiple words yeah\",\n    Some((0, 14))\n);\nmat!(\n    match_basic_166,\n    r\"(.*)c(.*)\",\n    r\"abcde\",\n    Some((0, 5)),\n    Some((0, 2)),\n    Some((3, 5))\n);\nmat!(match_basic_167, r\"abcd\", r\"abcd\", Some((0, 4)));\nmat!(match_basic_168, r\"a(bc)d\", r\"abcd\", Some((0, 4)), Some((1, 3)));\nmat!(match_basic_169, r\"a[\u0001-\u0003]?c\", r\"a\u0002c\", Some((0, 3)));\nmat!(\n    match_basic_170,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Qaddafi\",\n    Some((0, 15)),\n    None,\n    Some((10, 12))\n);\nmat!(\n    match_basic_171,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Mo'ammar Gadhafi\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_172,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Kaddafi\",\n    Some((0, 15)),\n    None,\n    Some((10, 12))\n);\nmat!(\n    match_basic_173,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Qadhafi\",\n    Some((0, 15)),\n    None,\n    Some((10, 12))\n);\nmat!(\n    match_basic_174,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Gadafi\",\n    Some((0, 14)),\n    None,\n    Some((10, 11))\n);\nmat!(\n    match_basic_175,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Mu'ammar Qadafi\",\n    Some((0, 15)),\n    None,\n    Some((11, 12))\n);\nmat!(\n    match_basic_176,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Moamar Gaddafi\",\n    Some((0, 14)),\n    None,\n    Some((9, 11))\n);\nmat!(\n    match_basic_177,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Mu'ammar Qadhdhafi\",\n    Some((0, 18)),\n    None,\n    Some((13, 15))\n);\nmat!(\n    match_basic_178,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Khaddafi\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_179,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Ghaddafy\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_180,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Ghadafi\",\n    Some((0, 15)),\n    None,\n    Some((11, 12))\n);\nmat!(\n    match_basic_181,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Ghaddafi\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_182,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muamar Kaddafi\",\n    Some((0, 14)),\n    None,\n    Some((9, 11))\n);\nmat!(\n    match_basic_183,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Quathafi\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_184,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Muammar Gheddafi\",\n    Some((0, 16)),\n    None,\n    Some((11, 13))\n);\nmat!(\n    match_basic_185,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Moammar Khadafy\",\n    Some((0, 15)),\n    None,\n    Some((11, 12))\n);\nmat!(\n    match_basic_186,\n    r\"M[ou]'?am+[ae]r .*([AEae]l[- ])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]\",\n    r\"Moammar Qudhafi\",\n    Some((0, 15)),\n    None,\n    Some((10, 12))\n);\nmat!(match_basic_187, r\"a+(b|c)*d+\", r\"aabcdd\", Some((0, 6)), Some((3, 4)));\nmat!(match_basic_188, r\"^.+$\", r\"vivi\", Some((0, 4)));\nmat!(match_basic_189, r\"^(.+)$\", r\"vivi\", Some((0, 4)), Some((0, 4)));\nmat!(\n    match_basic_190,\n    r\"^([^!.]+).att.com!(.+)$\",\n    r\"gryphon.att.com!eby\",\n    Some((0, 19)),\n    Some((0, 7)),\n    Some((16, 19))\n);\nmat!(\n    match_basic_191,\n    r\"^([^!]+!)?([^!]+)$\",\n    r\"bas\",\n    Some((0, 3)),\n    None,\n    Some((0, 3))\n);\nmat!(\n    match_basic_192,\n    r\"^([^!]+!)?([^!]+)$\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_193,\n    r\"^([^!]+!)?([^!]+)$\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_194,\n    r\"^.+!([^!]+!)([^!]+)$\",\n    r\"foo!bar!bas\",\n    Some((0, 11)),\n    Some((4, 8)),\n    Some((8, 11))\n);\nmat!(\n    match_basic_195,\n    r\"((foo)|(bar))!bas\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 3)),\n    None,\n    Some((0, 3))\n);\nmat!(\n    match_basic_196,\n    r\"((foo)|(bar))!bas\",\n    r\"foo!bar!bas\",\n    Some((4, 11)),\n    Some((4, 7)),\n    None,\n    Some((4, 7))\n);\nmat!(\n    match_basic_197,\n    r\"((foo)|(bar))!bas\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 3)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_198,\n    r\"((foo)|bar)!bas\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_199,\n    r\"((foo)|bar)!bas\",\n    r\"foo!bar!bas\",\n    Some((4, 11)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_200,\n    r\"((foo)|bar)!bas\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 3)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_201,\n    r\"(foo|(bar))!bas\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 3)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_202,\n    r\"(foo|(bar))!bas\",\n    r\"foo!bar!bas\",\n    Some((4, 11)),\n    Some((4, 7)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_203,\n    r\"(foo|(bar))!bas\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_204,\n    r\"(foo|bar)!bas\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_205,\n    r\"(foo|bar)!bas\",\n    r\"foo!bar!bas\",\n    Some((4, 11)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_206,\n    r\"(foo|bar)!bas\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 3))\n);\nmat!(\n    match_basic_207,\n    r\"^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))$\",\n    r\"foo!bar!bas\",\n    Some((0, 11)),\n    Some((0, 11)),\n    None,\n    None,\n    Some((4, 8)),\n    Some((8, 11))\n);\nmat!(\n    match_basic_208,\n    r\"^([^!]+!)?([^!]+)$|^.+!([^!]+!)([^!]+)$\",\n    r\"bas\",\n    Some((0, 3)),\n    None,\n    Some((0, 3))\n);\nmat!(\n    match_basic_209,\n    r\"^([^!]+!)?([^!]+)$|^.+!([^!]+!)([^!]+)$\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_210,\n    r\"^([^!]+!)?([^!]+)$|^.+!([^!]+!)([^!]+)$\",\n    r\"foo!bar!bas\",\n    Some((0, 11)),\n    None,\n    None,\n    Some((4, 8)),\n    Some((8, 11))\n);\nmat!(\n    match_basic_211,\n    r\"^([^!]+!)?([^!]+)$|^.+!([^!]+!)([^!]+)$\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_212,\n    r\"^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))$\",\n    r\"bas\",\n    Some((0, 3)),\n    Some((0, 3)),\n    None,\n    Some((0, 3))\n);\nmat!(\n    match_basic_213,\n    r\"^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))$\",\n    r\"bar!bas\",\n    Some((0, 7)),\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(\n    match_basic_214,\n    r\"^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))$\",\n    r\"foo!bar!bas\",\n    Some((0, 11)),\n    Some((0, 11)),\n    None,\n    None,\n    Some((4, 8)),\n    Some((8, 11))\n);\nmat!(\n    match_basic_215,\n    r\"^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))$\",\n    r\"foo!bas\",\n    Some((0, 7)),\n    Some((0, 7)),\n    Some((0, 4)),\n    Some((4, 7))\n);\nmat!(match_basic_216, r\".*(/XXX).*\", r\"/XXX\", Some((0, 4)), Some((0, 4)));\nmat!(match_basic_217, r\".*(\\\\XXX).*\", r\"\\XXX\", Some((0, 4)), Some((0, 4)));\nmat!(match_basic_218, r\"\\\\XXX\", r\"\\XXX\", Some((0, 4)));\nmat!(match_basic_219, r\".*(/000).*\", r\"/000\", Some((0, 4)), Some((0, 4)));\nmat!(match_basic_220, r\".*(\\\\000).*\", r\"\\000\", Some((0, 4)), Some((0, 4)));\nmat!(match_basic_221, r\"\\\\000\", r\"\\000\", Some((0, 4)));\n\n// Tests from nullsubexpr.dat\nmat!(match_nullsubexpr_3, r\"(a*)*\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_5, r\"(a*)*\", r\"x\", Some((0, 0)), None);\nmat!(match_nullsubexpr_6, r\"(a*)*\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_7, r\"(a*)*\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_8, r\"(a*)+\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_9, r\"(a*)+\", r\"x\", Some((0, 0)), Some((0, 0)));\nmat!(match_nullsubexpr_10, r\"(a*)+\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_11, r\"(a*)+\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_12, r\"(a+)*\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_13, r\"(a+)*\", r\"x\", Some((0, 0)));\nmat!(match_nullsubexpr_14, r\"(a+)*\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_15, r\"(a+)*\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_16, r\"(a+)+\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_17, r\"(a+)+\", r\"x\", None);\nmat!(match_nullsubexpr_18, r\"(a+)+\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_19, r\"(a+)+\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_21, r\"([a]*)*\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_23, r\"([a]*)*\", r\"x\", Some((0, 0)), None);\nmat!(match_nullsubexpr_24, r\"([a]*)*\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_25, r\"([a]*)*\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_26, r\"([a]*)+\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_27, r\"([a]*)+\", r\"x\", Some((0, 0)), Some((0, 0)));\nmat!(match_nullsubexpr_28, r\"([a]*)+\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_29, r\"([a]*)+\", r\"aaaaaax\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_30, r\"([^b]*)*\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_32, r\"([^b]*)*\", r\"b\", Some((0, 0)), None);\nmat!(match_nullsubexpr_33, r\"([^b]*)*\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(\n    match_nullsubexpr_34,\n    r\"([^b]*)*\",\n    r\"aaaaaab\",\n    Some((0, 6)),\n    Some((0, 6))\n);\nmat!(match_nullsubexpr_35, r\"([ab]*)*\", r\"a\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_36, r\"([ab]*)*\", r\"aaaaaa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_37, r\"([ab]*)*\", r\"ababab\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_38, r\"([ab]*)*\", r\"bababa\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_39, r\"([ab]*)*\", r\"b\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_40, r\"([ab]*)*\", r\"bbbbbb\", Some((0, 6)), Some((0, 6)));\nmat!(\n    match_nullsubexpr_41,\n    r\"([ab]*)*\",\n    r\"aaaabcde\",\n    Some((0, 5)),\n    Some((0, 5))\n);\nmat!(match_nullsubexpr_42, r\"([^a]*)*\", r\"b\", Some((0, 1)), Some((0, 1)));\nmat!(match_nullsubexpr_43, r\"([^a]*)*\", r\"bbbbbb\", Some((0, 6)), Some((0, 6)));\nmat!(match_nullsubexpr_45, r\"([^a]*)*\", r\"aaaaaa\", Some((0, 0)), None);\nmat!(\n    match_nullsubexpr_46,\n    r\"([^ab]*)*\",\n    r\"ccccxx\",\n    Some((0, 6)),\n    Some((0, 6))\n);\nmat!(match_nullsubexpr_48, r\"([^ab]*)*\", r\"ababab\", Some((0, 0)), None);\nmat!(\n    match_nullsubexpr_50,\n    r\"((z)+|a)*\",\n    r\"zabcde\",\n    Some((0, 2)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_69,\n    r\"(a*)*(x)\",\n    r\"x\",\n    Some((0, 1)),\n    None,\n    Some((0, 1))\n);\nmat!(\n    match_nullsubexpr_70,\n    r\"(a*)*(x)\",\n    r\"ax\",\n    Some((0, 2)),\n    Some((0, 1)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_71,\n    r\"(a*)*(x)\",\n    r\"axa\",\n    Some((0, 2)),\n    Some((0, 1)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_73,\n    r\"(a*)+(x)\",\n    r\"x\",\n    Some((0, 1)),\n    Some((0, 0)),\n    Some((0, 1))\n);\nmat!(\n    match_nullsubexpr_74,\n    r\"(a*)+(x)\",\n    r\"ax\",\n    Some((0, 2)),\n    Some((0, 1)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_75,\n    r\"(a*)+(x)\",\n    r\"axa\",\n    Some((0, 2)),\n    Some((0, 1)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_77,\n    r\"(a*){2}(x)\",\n    r\"x\",\n    Some((0, 1)),\n    Some((0, 0)),\n    Some((0, 1))\n);\nmat!(\n    match_nullsubexpr_78,\n    r\"(a*){2}(x)\",\n    r\"ax\",\n    Some((0, 2)),\n    Some((1, 1)),\n    Some((1, 2))\n);\nmat!(\n    match_nullsubexpr_79,\n    r\"(a*){2}(x)\",\n    r\"axa\",\n    Some((0, 2)),\n    Some((1, 1)),\n    Some((1, 2))\n);\n\n// Tests from repetition.dat\nmat!(match_repetition_10, r\"((..)|(.))\", r\"\", None);\nmat!(match_repetition_11, r\"((..)|(.))((..)|(.))\", r\"\", None);\nmat!(match_repetition_12, r\"((..)|(.))((..)|(.))((..)|(.))\", r\"\", None);\nmat!(match_repetition_14, r\"((..)|(.)){1}\", r\"\", None);\nmat!(match_repetition_15, r\"((..)|(.)){2}\", r\"\", None);\nmat!(match_repetition_16, r\"((..)|(.)){3}\", r\"\", None);\nmat!(match_repetition_18, r\"((..)|(.))*\", r\"\", Some((0, 0)));\nmat!(\n    match_repetition_20,\n    r\"((..)|(.))\",\n    r\"a\",\n    Some((0, 1)),\n    Some((0, 1)),\n    None,\n    Some((0, 1))\n);\nmat!(match_repetition_21, r\"((..)|(.))((..)|(.))\", r\"a\", None);\nmat!(match_repetition_22, r\"((..)|(.))((..)|(.))((..)|(.))\", r\"a\", None);\nmat!(\n    match_repetition_24,\n    r\"((..)|(.)){1}\",\n    r\"a\",\n    Some((0, 1)),\n    Some((0, 1)),\n    None,\n    Some((0, 1))\n);\nmat!(match_repetition_25, r\"((..)|(.)){2}\", r\"a\", None);\nmat!(match_repetition_26, r\"((..)|(.)){3}\", r\"a\", None);\nmat!(\n    match_repetition_28,\n    r\"((..)|(.))*\",\n    r\"a\",\n    Some((0, 1)),\n    Some((0, 1)),\n    None,\n    Some((0, 1))\n);\nmat!(\n    match_repetition_30,\n    r\"((..)|(.))\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_31,\n    r\"((..)|(.))((..)|(.))\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 1)),\n    None,\n    Some((0, 1)),\n    Some((1, 2)),\n    None,\n    Some((1, 2))\n);\nmat!(match_repetition_32, r\"((..)|(.))((..)|(.))((..)|(.))\", r\"aa\", None);\nmat!(\n    match_repetition_34,\n    r\"((..)|(.)){1}\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_35,\n    r\"((..)|(.)){2}\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((1, 2)),\n    None,\n    Some((1, 2))\n);\nmat!(match_repetition_36, r\"((..)|(.)){3}\", r\"aa\", None);\nmat!(\n    match_repetition_38,\n    r\"((..)|(.))*\",\n    r\"aa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_40,\n    r\"((..)|(.))\",\n    r\"aaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_41,\n    r\"((..)|(.))((..)|(.))\",\n    r\"aaa\",\n    Some((0, 3)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 3)),\n    None,\n    Some((2, 3))\n);\nmat!(\n    match_repetition_42,\n    r\"((..)|(.))((..)|(.))((..)|(.))\",\n    r\"aaa\",\n    Some((0, 3)),\n    Some((0, 1)),\n    None,\n    Some((0, 1)),\n    Some((1, 2)),\n    None,\n    Some((1, 2)),\n    Some((2, 3)),\n    None,\n    Some((2, 3))\n);\nmat!(\n    match_repetition_44,\n    r\"((..)|(.)){1}\",\n    r\"aaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_46,\n    r\"((..)|(.)){2}\",\n    r\"aaa\",\n    Some((0, 3)),\n    Some((2, 3)),\n    Some((0, 2)),\n    Some((2, 3))\n);\nmat!(\n    match_repetition_47,\n    r\"((..)|(.)){3}\",\n    r\"aaa\",\n    Some((0, 3)),\n    Some((2, 3)),\n    None,\n    Some((2, 3))\n);\nmat!(\n    match_repetition_50,\n    r\"((..)|(.))*\",\n    r\"aaa\",\n    Some((0, 3)),\n    Some((2, 3)),\n    Some((0, 2)),\n    Some((2, 3))\n);\nmat!(\n    match_repetition_52,\n    r\"((..)|(.))\",\n    r\"aaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_53,\n    r\"((..)|(.))((..)|(.))\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_54,\n    r\"((..)|(.))((..)|(.))((..)|(.))\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 3)),\n    None,\n    Some((2, 3)),\n    Some((3, 4)),\n    None,\n    Some((3, 4))\n);\nmat!(\n    match_repetition_56,\n    r\"((..)|(.)){1}\",\n    r\"aaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_57,\n    r\"((..)|(.)){2}\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_59,\n    r\"((..)|(.)){3}\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((3, 4)),\n    Some((0, 2)),\n    Some((3, 4))\n);\nmat!(\n    match_repetition_61,\n    r\"((..)|(.))*\",\n    r\"aaaa\",\n    Some((0, 4)),\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_63,\n    r\"((..)|(.))\",\n    r\"aaaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_64,\n    r\"((..)|(.))((..)|(.))\",\n    r\"aaaaa\",\n    Some((0, 4)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_65,\n    r\"((..)|(.))((..)|(.))((..)|(.))\",\n    r\"aaaaa\",\n    Some((0, 5)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 4)),\n    Some((2, 4)),\n    None,\n    Some((4, 5)),\n    None,\n    Some((4, 5))\n);\nmat!(\n    match_repetition_67,\n    r\"((..)|(.)){1}\",\n    r\"aaaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_68,\n    r\"((..)|(.)){2}\",\n    r\"aaaaa\",\n    Some((0, 4)),\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_70,\n    r\"((..)|(.)){3}\",\n    r\"aaaaa\",\n    Some((0, 5)),\n    Some((4, 5)),\n    Some((2, 4)),\n    Some((4, 5))\n);\nmat!(\n    match_repetition_73,\n    r\"((..)|(.))*\",\n    r\"aaaaa\",\n    Some((0, 5)),\n    Some((4, 5)),\n    Some((2, 4)),\n    Some((4, 5))\n);\nmat!(\n    match_repetition_75,\n    r\"((..)|(.))\",\n    r\"aaaaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_76,\n    r\"((..)|(.))((..)|(.))\",\n    r\"aaaaaa\",\n    Some((0, 4)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_77,\n    r\"((..)|(.))((..)|(.))((..)|(.))\",\n    r\"aaaaaa\",\n    Some((0, 6)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None,\n    Some((2, 4)),\n    Some((2, 4)),\n    None,\n    Some((4, 6)),\n    Some((4, 6)),\n    None\n);\nmat!(\n    match_repetition_79,\n    r\"((..)|(.)){1}\",\n    r\"aaaaaa\",\n    Some((0, 2)),\n    Some((0, 2)),\n    Some((0, 2)),\n    None\n);\nmat!(\n    match_repetition_80,\n    r\"((..)|(.)){2}\",\n    r\"aaaaaa\",\n    Some((0, 4)),\n    Some((2, 4)),\n    Some((2, 4)),\n    None\n);\nmat!(\n    match_repetition_81,\n    r\"((..)|(.)){3}\",\n    r\"aaaaaa\",\n    Some((0, 6)),\n    Some((4, 6)),\n    Some((4, 6)),\n    None\n);\nmat!(\n    match_repetition_83,\n    r\"((..)|(.))*\",\n    r\"aaaaaa\",\n    Some((0, 6)),\n    Some((4, 6)),\n    Some((4, 6)),\n    None\n);\nmat!(\n    match_repetition_90,\n    r\"X(.?){0,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_91,\n    r\"X(.?){1,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_92,\n    r\"X(.?){2,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_93,\n    r\"X(.?){3,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_94,\n    r\"X(.?){4,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_95,\n    r\"X(.?){5,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_96,\n    r\"X(.?){6,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_97,\n    r\"X(.?){7,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((7, 8))\n);\nmat!(\n    match_repetition_98,\n    r\"X(.?){8,}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_100,\n    r\"X(.?){0,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_102,\n    r\"X(.?){1,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_104,\n    r\"X(.?){2,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_106,\n    r\"X(.?){3,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_108,\n    r\"X(.?){4,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_110,\n    r\"X(.?){5,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_112,\n    r\"X(.?){6,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_114,\n    r\"X(.?){7,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_115,\n    r\"X(.?){8,8}Y\",\n    r\"X1234567Y\",\n    Some((0, 9)),\n    Some((8, 8))\n);\nmat!(\n    match_repetition_126,\n    r\"(a|ab|c|bcd){0,}(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_127,\n    r\"(a|ab|c|bcd){1,}(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_128,\n    r\"(a|ab|c|bcd){2,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((3, 6)),\n    Some((6, 6))\n);\nmat!(\n    match_repetition_129,\n    r\"(a|ab|c|bcd){3,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((3, 6)),\n    Some((6, 6))\n);\nmat!(match_repetition_130, r\"(a|ab|c|bcd){4,}(d*)\", r\"ababcd\", None);\nmat!(\n    match_repetition_131,\n    r\"(a|ab|c|bcd){0,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_132,\n    r\"(a|ab|c|bcd){1,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_133,\n    r\"(a|ab|c|bcd){2,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((3, 6)),\n    Some((6, 6))\n);\nmat!(\n    match_repetition_134,\n    r\"(a|ab|c|bcd){3,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((3, 6)),\n    Some((6, 6))\n);\nmat!(match_repetition_135, r\"(a|ab|c|bcd){4,10}(d*)\", r\"ababcd\", None);\nmat!(\n    match_repetition_136,\n    r\"(a|ab|c|bcd)*(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_137,\n    r\"(a|ab|c|bcd)+(d*)\",\n    r\"ababcd\",\n    Some((0, 1)),\n    Some((0, 1)),\n    Some((1, 1))\n);\nmat!(\n    match_repetition_143,\n    r\"(ab|a|c|bcd){0,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_145,\n    r\"(ab|a|c|bcd){1,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_147,\n    r\"(ab|a|c|bcd){2,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_149,\n    r\"(ab|a|c|bcd){3,}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(match_repetition_150, r\"(ab|a|c|bcd){4,}(d*)\", r\"ababcd\", None);\nmat!(\n    match_repetition_152,\n    r\"(ab|a|c|bcd){0,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_154,\n    r\"(ab|a|c|bcd){1,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_156,\n    r\"(ab|a|c|bcd){2,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_158,\n    r\"(ab|a|c|bcd){3,10}(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(match_repetition_159, r\"(ab|a|c|bcd){4,10}(d*)\", r\"ababcd\", None);\nmat!(\n    match_repetition_161,\n    r\"(ab|a|c|bcd)*(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\nmat!(\n    match_repetition_163,\n    r\"(ab|a|c|bcd)+(d*)\",\n    r\"ababcd\",\n    Some((0, 6)),\n    Some((4, 5)),\n    Some((5, 6))\n);\n","traces":[{"line":5,"address":[5330873,5332240],"length":1,"stats":{"Line":13},"fn_name":null},{"line":6,"address":[5333065,5334432],"length":1,"stats":{"Line":13},"fn_name":null},{"line":7,"address":[5335257,5336624],"length":1,"stats":{"Line":13},"fn_name":null},{"line":8,"address":[5338816,5337449],"length":1,"stats":{"Line":13},"fn_name":null},{"line":9,"address":[5341008,5339641],"length":1,"stats":{"Line":13},"fn_name":null},{"line":10,"address":[5343200,5341833],"length":1,"stats":{"Line":13},"fn_name":null},{"line":11,"address":[5344025,5345392],"length":1,"stats":{"Line":13},"fn_name":null},{"line":12,"address":[5346217,5347584],"length":1,"stats":{"Line":13},"fn_name":null},{"line":13,"address":[5348409,5349776],"length":1,"stats":{"Line":13},"fn_name":null},{"line":14,"address":[5350601,5351968],"length":1,"stats":{"Line":13},"fn_name":null},{"line":15,"address":[5354160,5352793],"length":1,"stats":{"Line":13},"fn_name":null},{"line":16,"address":[5354985,5356352],"length":1,"stats":{"Line":13},"fn_name":null},{"line":17,"address":[5357177,5358544],"length":1,"stats":{"Line":13},"fn_name":null},{"line":18,"address":[5360736,5359369],"length":1,"stats":{"Line":13},"fn_name":null},{"line":19,"address":[5362928,5361561],"length":1,"stats":{"Line":13},"fn_name":null},{"line":20,"address":[5365224,5363753],"length":1,"stats":{"Line":13},"fn_name":null},{"line":21,"address":[5366057,5367528],"length":1,"stats":{"Line":13},"fn_name":null},{"line":22,"address":[5369728,5368361],"length":1,"stats":{"Line":13},"fn_name":null},{"line":23,"address":[5372024,5370553],"length":1,"stats":{"Line":13},"fn_name":null},{"line":28,"address":[5372857],"length":1,"stats":{"Line":8},"fn_name":null},{"line":29,"address":[5372925],"length":1,"stats":{"Line":8},"fn_name":null},{"line":30,"address":[5372993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":32,"address":[5375257,5376728],"length":1,"stats":{"Line":13},"fn_name":null},{"line":33,"address":[5378928,5377561],"length":1,"stats":{"Line":13},"fn_name":null},{"line":38,"address":[5379753],"length":1,"stats":{"Line":8},"fn_name":null},{"line":39,"address":[5379821],"length":1,"stats":{"Line":8},"fn_name":null},{"line":40,"address":[5379889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":41,"address":[5379957],"length":1,"stats":{"Line":8},"fn_name":null},{"line":47,"address":[5382265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[5382333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":49,"address":[5382401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[5382469],"length":1,"stats":{"Line":8},"fn_name":null},{"line":56,"address":[5384777],"length":1,"stats":{"Line":8},"fn_name":null},{"line":57,"address":[5384845],"length":1,"stats":{"Line":8},"fn_name":null},{"line":58,"address":[5384913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":64,"address":[5387177],"length":1,"stats":{"Line":8},"fn_name":null},{"line":65,"address":[5387245],"length":1,"stats":{"Line":8},"fn_name":null},{"line":66,"address":[5387313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":68,"address":[5389577,5391048],"length":1,"stats":{"Line":13},"fn_name":null},{"line":73,"address":[5391881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":74,"address":[5391949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":75,"address":[5391961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":76,"address":[5391973],"length":1,"stats":{"Line":8},"fn_name":null},{"line":78,"address":[5394281,5395752],"length":1,"stats":{"Line":13},"fn_name":null},{"line":79,"address":[5396585,5398056],"length":1,"stats":{"Line":13},"fn_name":null},{"line":84,"address":[5398889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":85,"address":[5398957],"length":1,"stats":{"Line":8},"fn_name":null},{"line":86,"address":[5398969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":88,"address":[5402712,5401241],"length":1,"stats":{"Line":13},"fn_name":null},{"line":89,"address":[5404912,5403545],"length":1,"stats":{"Line":13},"fn_name":null},{"line":94,"address":[5405737],"length":1,"stats":{"Line":8},"fn_name":null},{"line":95,"address":[5405805],"length":1,"stats":{"Line":8},"fn_name":null},{"line":97,"address":[5408041,5409512],"length":1,"stats":{"Line":13},"fn_name":null},{"line":98,"address":[5410345,5411816],"length":1,"stats":{"Line":13},"fn_name":null},{"line":99,"address":[5414016,5412649],"length":1,"stats":{"Line":13},"fn_name":null},{"line":100,"address":[5416208,5414841],"length":1,"stats":{"Line":13},"fn_name":null},{"line":101,"address":[5417033,5418400],"length":1,"stats":{"Line":13},"fn_name":null},{"line":106,"address":[5419225],"length":1,"stats":{"Line":8},"fn_name":null},{"line":107,"address":[5419293],"length":1,"stats":{"Line":8},"fn_name":null},{"line":113,"address":[5421529],"length":1,"stats":{"Line":8},"fn_name":null},{"line":114,"address":[5421597],"length":1,"stats":{"Line":8},"fn_name":null},{"line":116,"address":[5425200,5423833],"length":1,"stats":{"Line":13},"fn_name":null},{"line":117,"address":[5426025,5427392],"length":1,"stats":{"Line":13},"fn_name":null},{"line":122,"address":[5428217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":123,"address":[5428285],"length":1,"stats":{"Line":8},"fn_name":null},{"line":125,"address":[5431888,5430521],"length":1,"stats":{"Line":13},"fn_name":null},{"line":126,"address":[5434080,5432713],"length":1,"stats":{"Line":13},"fn_name":null},{"line":127,"address":[5434905,5436272],"length":1,"stats":{"Line":13},"fn_name":null},{"line":132,"address":[5437097],"length":1,"stats":{"Line":8},"fn_name":null},{"line":138,"address":[5439289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":140,"address":[5441481,5442848],"length":1,"stats":{"Line":13},"fn_name":null},{"line":141,"address":[5443673,5445040],"length":1,"stats":{"Line":13},"fn_name":null},{"line":142,"address":[5447232,5445865],"length":1,"stats":{"Line":13},"fn_name":null},{"line":149,"address":[5448057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":157,"address":[5450249],"length":1,"stats":{"Line":8},"fn_name":null},{"line":164,"address":[5452441],"length":1,"stats":{"Line":8},"fn_name":null},{"line":172,"address":[5454633],"length":1,"stats":{"Line":8},"fn_name":null},{"line":178,"address":[5456825],"length":1,"stats":{"Line":8},"fn_name":null},{"line":179,"address":[5456893],"length":1,"stats":{"Line":8},"fn_name":null},{"line":180,"address":[5456961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":181,"address":[5457029],"length":1,"stats":{"Line":8},"fn_name":null},{"line":183,"address":[5459337,5460704],"length":1,"stats":{"Line":13},"fn_name":null},{"line":188,"address":[5461529],"length":1,"stats":{"Line":8},"fn_name":null},{"line":194,"address":[5463721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":200,"address":[5465913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":206,"address":[5468105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":207,"address":[5468173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":208,"address":[5468241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":214,"address":[5470505],"length":1,"stats":{"Line":8},"fn_name":null},{"line":215,"address":[5470573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":216,"address":[5470641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":222,"address":[5472905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":223,"address":[5472973],"length":1,"stats":{"Line":8},"fn_name":null},{"line":229,"address":[5475209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":235,"address":[5477401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":241,"address":[5479593],"length":1,"stats":{"Line":8},"fn_name":null},{"line":243,"address":[5481785,5483152],"length":1,"stats":{"Line":13},"fn_name":null},{"line":248,"address":[5483977],"length":1,"stats":{"Line":8},"fn_name":null},{"line":250,"address":[5487536,5486169],"length":1,"stats":{"Line":13},"fn_name":null},{"line":251,"address":[5488361,5489728],"length":1,"stats":{"Line":13},"fn_name":null},{"line":252,"address":[5491920,5490553],"length":1,"stats":{"Line":13},"fn_name":null},{"line":253,"address":[5492745,5494112],"length":1,"stats":{"Line":13},"fn_name":null},{"line":254,"address":[5494937,5496304],"length":1,"stats":{"Line":13},"fn_name":null},{"line":255,"address":[5497129,5498496],"length":1,"stats":{"Line":13},"fn_name":null},{"line":256,"address":[5500688,5499321],"length":1,"stats":{"Line":13},"fn_name":null},{"line":257,"address":[5502880,5501513],"length":1,"stats":{"Line":13},"fn_name":null},{"line":258,"address":[5503705,5505072],"length":1,"stats":{"Line":13},"fn_name":null},{"line":259,"address":[5505897,5507264],"length":1,"stats":{"Line":13},"fn_name":null},{"line":260,"address":[5509456,5508089],"length":1,"stats":{"Line":13},"fn_name":null},{"line":261,"address":[5510281,5511648],"length":1,"stats":{"Line":13},"fn_name":null},{"line":262,"address":[5513840,5512473],"length":1,"stats":{"Line":13},"fn_name":null},{"line":263,"address":[5514665,5516032],"length":1,"stats":{"Line":13},"fn_name":null},{"line":264,"address":[5516857,5518224],"length":1,"stats":{"Line":13},"fn_name":null},{"line":265,"address":[5520416,5519049],"length":1,"stats":{"Line":13},"fn_name":null},{"line":266,"address":[5522608,5521241],"length":1,"stats":{"Line":13},"fn_name":null},{"line":267,"address":[5524800,5523433],"length":1,"stats":{"Line":13},"fn_name":null},{"line":268,"address":[5525625,5526992],"length":1,"stats":{"Line":13},"fn_name":null},{"line":269,"address":[5527817,5529184],"length":1,"stats":{"Line":13},"fn_name":null},{"line":270,"address":[5531376,5530009],"length":1,"stats":{"Line":13},"fn_name":null},{"line":271,"address":[5533568,5532201],"length":1,"stats":{"Line":13},"fn_name":null},{"line":272,"address":[5534393,5535760],"length":1,"stats":{"Line":13},"fn_name":null},{"line":273,"address":[5536585,5537952],"length":1,"stats":{"Line":13},"fn_name":null},{"line":274,"address":[5540144,5538777],"length":1,"stats":{"Line":13},"fn_name":null},{"line":275,"address":[5540969,5542336],"length":1,"stats":{"Line":13},"fn_name":null},{"line":276,"address":[5544528,5543161],"length":1,"stats":{"Line":13},"fn_name":null},{"line":277,"address":[5546720,5545353],"length":1,"stats":{"Line":13},"fn_name":null},{"line":278,"address":[5548912,5547545],"length":1,"stats":{"Line":13},"fn_name":null},{"line":279,"address":[5549737,5551104],"length":1,"stats":{"Line":13},"fn_name":null},{"line":280,"address":[5553296,5551929],"length":1,"stats":{"Line":13},"fn_name":null},{"line":281,"address":[5554121,5555488],"length":1,"stats":{"Line":13},"fn_name":null},{"line":282,"address":[5556313,5557680],"length":1,"stats":{"Line":13},"fn_name":null},{"line":283,"address":[5558505,5559872],"length":1,"stats":{"Line":13},"fn_name":null},{"line":284,"address":[5562064,5560697],"length":1,"stats":{"Line":13},"fn_name":null},{"line":285,"address":[5564256,5562889],"length":1,"stats":{"Line":13},"fn_name":null},{"line":286,"address":[5565081,5566448],"length":1,"stats":{"Line":13},"fn_name":null},{"line":287,"address":[5567273,5568640],"length":1,"stats":{"Line":13},"fn_name":null},{"line":288,"address":[5570832,5569465],"length":1,"stats":{"Line":13},"fn_name":null},{"line":289,"address":[5573024,5571657],"length":1,"stats":{"Line":13},"fn_name":null},{"line":294,"address":[5573849],"length":1,"stats":{"Line":8},"fn_name":null},{"line":295,"address":[5573917],"length":1,"stats":{"Line":8},"fn_name":null},{"line":296,"address":[5573985],"length":1,"stats":{"Line":8},"fn_name":null},{"line":302,"address":[5576249],"length":1,"stats":{"Line":8},"fn_name":null},{"line":303,"address":[5576317],"length":1,"stats":{"Line":8},"fn_name":null},{"line":304,"address":[5576385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":306,"address":[5580016,5578649],"length":1,"stats":{"Line":13},"fn_name":null},{"line":307,"address":[5580841,5582208],"length":1,"stats":{"Line":13},"fn_name":null},{"line":308,"address":[5583033,5584448],"length":1,"stats":{"Line":13},"fn_name":null},{"line":309,"address":[5585289,5586760],"length":1,"stats":{"Line":13},"fn_name":null},{"line":310,"address":[5587593,5589008],"length":1,"stats":{"Line":13},"fn_name":null},{"line":311,"address":[5591320,5589849],"length":1,"stats":{"Line":13},"fn_name":null},{"line":312,"address":[5592153,5593624],"length":1,"stats":{"Line":13},"fn_name":null},{"line":313,"address":[5594457,5595928],"length":1,"stats":{"Line":13},"fn_name":null},{"line":314,"address":[5598128,5596761],"length":1,"stats":{"Line":13},"fn_name":null},{"line":315,"address":[5600368,5598953],"length":1,"stats":{"Line":13},"fn_name":null},{"line":316,"address":[5601209,5602576],"length":1,"stats":{"Line":13},"fn_name":null},{"line":317,"address":[5603401,5604872],"length":1,"stats":{"Line":13},"fn_name":null},{"line":318,"address":[5605705,5607176],"length":1,"stats":{"Line":13},"fn_name":null},{"line":319,"address":[5609376,5608009],"length":1,"stats":{"Line":13},"fn_name":null},{"line":320,"address":[5610201,5611672],"length":1,"stats":{"Line":13},"fn_name":null},{"line":321,"address":[5613968,5612505],"length":1,"stats":{"Line":13},"fn_name":null},{"line":322,"address":[5616160,5614793],"length":1,"stats":{"Line":13},"fn_name":null},{"line":323,"address":[5616985,5618352],"length":1,"stats":{"Line":13},"fn_name":null},{"line":324,"address":[5619177,5620544],"length":1,"stats":{"Line":13},"fn_name":null},{"line":325,"address":[5622840,5621369],"length":1,"stats":{"Line":13},"fn_name":null},{"line":326,"address":[5623673,5625040],"length":1,"stats":{"Line":13},"fn_name":null},{"line":327,"address":[5627336,5625865],"length":1,"stats":{"Line":13},"fn_name":null},{"line":328,"address":[5629640,5628169],"length":1,"stats":{"Line":13},"fn_name":null},{"line":329,"address":[5630473,5631944],"length":1,"stats":{"Line":13},"fn_name":null},{"line":334,"address":[5632777],"length":1,"stats":{"Line":8},"fn_name":null},{"line":335,"address":[5632845],"length":1,"stats":{"Line":8},"fn_name":null},{"line":336,"address":[5632913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":342,"address":[5635177],"length":1,"stats":{"Line":8},"fn_name":null},{"line":343,"address":[5635245],"length":1,"stats":{"Line":8},"fn_name":null},{"line":344,"address":[5635313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":350,"address":[5637577],"length":1,"stats":{"Line":8},"fn_name":null},{"line":351,"address":[5637645],"length":1,"stats":{"Line":8},"fn_name":null},{"line":352,"address":[5637713],"length":1,"stats":{"Line":8},"fn_name":null},{"line":354,"address":[5641344,5639977],"length":1,"stats":{"Line":13},"fn_name":null},{"line":355,"address":[5642169,5643640],"length":1,"stats":{"Line":13},"fn_name":null},{"line":360,"address":[5644473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":361,"address":[5644541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":362,"address":[5644609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":363,"address":[5644677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":364,"address":[5644745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":366,"address":[5647081,5648448],"length":1,"stats":{"Line":13},"fn_name":null},{"line":367,"address":[5649273,5650640],"length":1,"stats":{"Line":13},"fn_name":null},{"line":372,"address":[5651465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":373,"address":[5651533],"length":1,"stats":{"Line":8},"fn_name":null},{"line":379,"address":[5653769],"length":1,"stats":{"Line":8},"fn_name":null},{"line":380,"address":[5653837],"length":1,"stats":{"Line":8},"fn_name":null},{"line":381,"address":[5653905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":387,"address":[5656169],"length":1,"stats":{"Line":8},"fn_name":null},{"line":388,"address":[5656237],"length":1,"stats":{"Line":8},"fn_name":null},{"line":394,"address":[5658473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":395,"address":[5658541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":396,"address":[5658609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":397,"address":[5658677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":398,"address":[5658745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":399,"address":[5658813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":400,"address":[5658881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":401,"address":[5658949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":402,"address":[5659017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":403,"address":[5659085],"length":1,"stats":{"Line":8},"fn_name":null},{"line":409,"address":[5661657],"length":1,"stats":{"Line":8},"fn_name":null},{"line":415,"address":[5663849],"length":1,"stats":{"Line":8},"fn_name":null},{"line":416,"address":[5663917],"length":1,"stats":{"Line":8},"fn_name":null},{"line":417,"address":[5663985],"length":1,"stats":{"Line":8},"fn_name":null},{"line":419,"address":[5667616,5666249],"length":1,"stats":{"Line":13},"fn_name":null},{"line":420,"address":[5669912,5668441],"length":1,"stats":{"Line":13},"fn_name":null},{"line":421,"address":[5670745,5672112],"length":1,"stats":{"Line":13},"fn_name":null},{"line":426,"address":[5672937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":427,"address":[5673005],"length":1,"stats":{"Line":8},"fn_name":null},{"line":428,"address":[5673017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":434,"address":[5675289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":435,"address":[5675357],"length":1,"stats":{"Line":8},"fn_name":null},{"line":436,"address":[5675369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":442,"address":[5677641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":443,"address":[5677709],"length":1,"stats":{"Line":8},"fn_name":null},{"line":444,"address":[5677721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":450,"address":[5679993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":451,"address":[5680061],"length":1,"stats":{"Line":8},"fn_name":null},{"line":452,"address":[5680073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":458,"address":[5682345],"length":1,"stats":{"Line":8},"fn_name":null},{"line":459,"address":[5682413],"length":1,"stats":{"Line":8},"fn_name":null},{"line":460,"address":[5682425],"length":1,"stats":{"Line":8},"fn_name":null},{"line":466,"address":[5684697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":467,"address":[5684765],"length":1,"stats":{"Line":8},"fn_name":null},{"line":468,"address":[5684777],"length":1,"stats":{"Line":8},"fn_name":null},{"line":474,"address":[5687049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":475,"address":[5687117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":476,"address":[5687129],"length":1,"stats":{"Line":8},"fn_name":null},{"line":482,"address":[5689401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":483,"address":[5689469],"length":1,"stats":{"Line":8},"fn_name":null},{"line":484,"address":[5689481],"length":1,"stats":{"Line":8},"fn_name":null},{"line":490,"address":[5691753],"length":1,"stats":{"Line":8},"fn_name":null},{"line":491,"address":[5691821],"length":1,"stats":{"Line":8},"fn_name":null},{"line":492,"address":[5691833],"length":1,"stats":{"Line":8},"fn_name":null},{"line":498,"address":[5694105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":499,"address":[5694173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":500,"address":[5694185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":506,"address":[5696457],"length":1,"stats":{"Line":8},"fn_name":null},{"line":507,"address":[5696525],"length":1,"stats":{"Line":8},"fn_name":null},{"line":508,"address":[5696537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":514,"address":[5698809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":515,"address":[5698877],"length":1,"stats":{"Line":8},"fn_name":null},{"line":516,"address":[5698889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":522,"address":[5701161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":523,"address":[5701229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":524,"address":[5701241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":530,"address":[5703513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":531,"address":[5703581],"length":1,"stats":{"Line":8},"fn_name":null},{"line":532,"address":[5703593],"length":1,"stats":{"Line":8},"fn_name":null},{"line":538,"address":[5705865],"length":1,"stats":{"Line":8},"fn_name":null},{"line":539,"address":[5705933],"length":1,"stats":{"Line":8},"fn_name":null},{"line":540,"address":[5705945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":546,"address":[5708217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":547,"address":[5708285],"length":1,"stats":{"Line":8},"fn_name":null},{"line":548,"address":[5708297],"length":1,"stats":{"Line":8},"fn_name":null},{"line":554,"address":[5710569],"length":1,"stats":{"Line":8},"fn_name":null},{"line":555,"address":[5710637],"length":1,"stats":{"Line":8},"fn_name":null},{"line":556,"address":[5710649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":558,"address":[5714392,5712921],"length":1,"stats":{"Line":13},"fn_name":null},{"line":559,"address":[5716592,5715225],"length":1,"stats":{"Line":13},"fn_name":null},{"line":560,"address":[5717417,5718888],"length":1,"stats":{"Line":13},"fn_name":null},{"line":565,"address":[5719721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":566,"address":[5719789],"length":1,"stats":{"Line":8},"fn_name":null},{"line":567,"address":[5719857],"length":1,"stats":{"Line":8},"fn_name":null},{"line":573,"address":[5722121],"length":1,"stats":{"Line":8},"fn_name":null},{"line":574,"address":[5722189],"length":1,"stats":{"Line":8},"fn_name":null},{"line":575,"address":[5722201],"length":1,"stats":{"Line":8},"fn_name":null},{"line":581,"address":[5724473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":582,"address":[5724541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":583,"address":[5724609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":589,"address":[5726873],"length":1,"stats":{"Line":8},"fn_name":null},{"line":590,"address":[5726941],"length":1,"stats":{"Line":8},"fn_name":null},{"line":591,"address":[5727009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":597,"address":[5729273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":598,"address":[5729341],"length":1,"stats":{"Line":8},"fn_name":null},{"line":599,"address":[5729409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":605,"address":[5731673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":606,"address":[5731741],"length":1,"stats":{"Line":8},"fn_name":null},{"line":607,"address":[5731809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":608,"address":[5731821],"length":1,"stats":{"Line":8},"fn_name":null},{"line":614,"address":[5734137],"length":1,"stats":{"Line":8},"fn_name":null},{"line":615,"address":[5734205],"length":1,"stats":{"Line":8},"fn_name":null},{"line":616,"address":[5734273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":617,"address":[5734285],"length":1,"stats":{"Line":8},"fn_name":null},{"line":623,"address":[5736601],"length":1,"stats":{"Line":8},"fn_name":null},{"line":624,"address":[5736669],"length":1,"stats":{"Line":8},"fn_name":null},{"line":625,"address":[5736737],"length":1,"stats":{"Line":8},"fn_name":null},{"line":631,"address":[5739001],"length":1,"stats":{"Line":8},"fn_name":null},{"line":632,"address":[5739069],"length":1,"stats":{"Line":8},"fn_name":null},{"line":638,"address":[5741305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":639,"address":[5741373],"length":1,"stats":{"Line":8},"fn_name":null},{"line":645,"address":[5743609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":646,"address":[5743677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":647,"address":[5743745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":653,"address":[5746009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":654,"address":[5746077],"length":1,"stats":{"Line":8},"fn_name":null},{"line":655,"address":[5746145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":661,"address":[5748409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":662,"address":[5748477],"length":1,"stats":{"Line":8},"fn_name":null},{"line":663,"address":[5748545],"length":1,"stats":{"Line":8},"fn_name":null},{"line":669,"address":[5750809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":670,"address":[5750877],"length":1,"stats":{"Line":8},"fn_name":null},{"line":676,"address":[5753113],"length":1,"stats":{"Line":8},"fn_name":null},{"line":677,"address":[5753181],"length":1,"stats":{"Line":8},"fn_name":null},{"line":683,"address":[5755417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":684,"address":[5755485],"length":1,"stats":{"Line":8},"fn_name":null},{"line":690,"address":[5757721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":691,"address":[5757789],"length":1,"stats":{"Line":8},"fn_name":null},{"line":697,"address":[5760025],"length":1,"stats":{"Line":8},"fn_name":null},{"line":698,"address":[5760093],"length":1,"stats":{"Line":8},"fn_name":null},{"line":699,"address":[5760161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":700,"address":[5760173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":701,"address":[5760185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":702,"address":[5760253],"length":1,"stats":{"Line":8},"fn_name":null},{"line":708,"address":[5762633],"length":1,"stats":{"Line":8},"fn_name":null},{"line":709,"address":[5762701],"length":1,"stats":{"Line":8},"fn_name":null},{"line":710,"address":[5762713],"length":1,"stats":{"Line":8},"fn_name":null},{"line":716,"address":[5764985],"length":1,"stats":{"Line":8},"fn_name":null},{"line":717,"address":[5765053],"length":1,"stats":{"Line":8},"fn_name":null},{"line":718,"address":[5765121],"length":1,"stats":{"Line":8},"fn_name":null},{"line":724,"address":[5767385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":725,"address":[5767453],"length":1,"stats":{"Line":8},"fn_name":null},{"line":726,"address":[5767465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":727,"address":[5767477],"length":1,"stats":{"Line":8},"fn_name":null},{"line":728,"address":[5767545],"length":1,"stats":{"Line":8},"fn_name":null},{"line":734,"address":[5769881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":735,"address":[5769949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":736,"address":[5770017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":742,"address":[5772281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":743,"address":[5772349],"length":1,"stats":{"Line":8},"fn_name":null},{"line":744,"address":[5772417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":745,"address":[5772429],"length":1,"stats":{"Line":8},"fn_name":null},{"line":751,"address":[5774745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":752,"address":[5774813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":753,"address":[5774881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":754,"address":[5774949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":760,"address":[5777257],"length":1,"stats":{"Line":8},"fn_name":null},{"line":761,"address":[5777325],"length":1,"stats":{"Line":8},"fn_name":null},{"line":762,"address":[5777393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":763,"address":[5777405],"length":1,"stats":{"Line":8},"fn_name":null},{"line":764,"address":[5777417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":765,"address":[5777485],"length":1,"stats":{"Line":8},"fn_name":null},{"line":771,"address":[5779865],"length":1,"stats":{"Line":8},"fn_name":null},{"line":772,"address":[5779933],"length":1,"stats":{"Line":8},"fn_name":null},{"line":773,"address":[5780001],"length":1,"stats":{"Line":8},"fn_name":null},{"line":774,"address":[5780069],"length":1,"stats":{"Line":8},"fn_name":null},{"line":776,"address":[5782377,5783848],"length":1,"stats":{"Line":13},"fn_name":null},{"line":777,"address":[5784681,5786152],"length":1,"stats":{"Line":13},"fn_name":null},{"line":778,"address":[5788352,5786985],"length":1,"stats":{"Line":13},"fn_name":null},{"line":779,"address":[5789177,5790648],"length":1,"stats":{"Line":13},"fn_name":null},{"line":780,"address":[5791481,5792952],"length":1,"stats":{"Line":13},"fn_name":null},{"line":781,"address":[5793785,5795152],"length":1,"stats":{"Line":13},"fn_name":null},{"line":784,"address":[5797448,5795977],"length":1,"stats":{"Line":13},"fn_name":null},{"line":785,"address":[5799696,5798281],"length":1,"stats":{"Line":13},"fn_name":null},{"line":786,"address":[5800537,5802008],"length":1,"stats":{"Line":13},"fn_name":null},{"line":787,"address":[5802841,5804312],"length":1,"stats":{"Line":13},"fn_name":null},{"line":788,"address":[5805145,5806616],"length":1,"stats":{"Line":13},"fn_name":null},{"line":789,"address":[5808920,5807449],"length":1,"stats":{"Line":13},"fn_name":null},{"line":790,"address":[5809753,5811224],"length":1,"stats":{"Line":13},"fn_name":null},{"line":791,"address":[5812057,5813528],"length":1,"stats":{"Line":13},"fn_name":null},{"line":792,"address":[5815832,5814361],"length":1,"stats":{"Line":13},"fn_name":null},{"line":793,"address":[5818032,5816665],"length":1,"stats":{"Line":13},"fn_name":null},{"line":794,"address":[5818857,5820328],"length":1,"stats":{"Line":13},"fn_name":null},{"line":795,"address":[5822632,5821161],"length":1,"stats":{"Line":13},"fn_name":null},{"line":796,"address":[5823465,5824936],"length":1,"stats":{"Line":13},"fn_name":null},{"line":797,"address":[5827080,5825769],"length":1,"stats":{"Line":13},"fn_name":null},{"line":798,"address":[5827913,5829384],"length":1,"stats":{"Line":13},"fn_name":null},{"line":799,"address":[5830217,5831688],"length":1,"stats":{"Line":13},"fn_name":null},{"line":800,"address":[5832521,5833992],"length":1,"stats":{"Line":13},"fn_name":null},{"line":801,"address":[5836240,5834825],"length":1,"stats":{"Line":13},"fn_name":null},{"line":802,"address":[5837081,5838552],"length":1,"stats":{"Line":13},"fn_name":null},{"line":803,"address":[5839385,5840856],"length":1,"stats":{"Line":13},"fn_name":null},{"line":804,"address":[5843160,5841689],"length":1,"stats":{"Line":13},"fn_name":null},{"line":805,"address":[5845464,5843993],"length":1,"stats":{"Line":13},"fn_name":null},{"line":806,"address":[5846297,5847768],"length":1,"stats":{"Line":13},"fn_name":null},{"line":807,"address":[5848601,5850072],"length":1,"stats":{"Line":13},"fn_name":null},{"line":808,"address":[5850905,5852376],"length":1,"stats":{"Line":13},"fn_name":null},{"line":809,"address":[5854624,5853209],"length":1,"stats":{"Line":13},"fn_name":null},{"line":810,"address":[5855465,5856936],"length":1,"stats":{"Line":13},"fn_name":null},{"line":815,"address":[5857769],"length":1,"stats":{"Line":8},"fn_name":null},{"line":816,"address":[5857837],"length":1,"stats":{"Line":8},"fn_name":null},{"line":818,"address":[5860073,5861544],"length":1,"stats":{"Line":13},"fn_name":null},{"line":819,"address":[5862377,5863848],"length":1,"stats":{"Line":13},"fn_name":null},{"line":820,"address":[5866152,5864681],"length":1,"stats":{"Line":13},"fn_name":null},{"line":821,"address":[5866985,5868456],"length":1,"stats":{"Line":13},"fn_name":null},{"line":822,"address":[5869289,5870760],"length":1,"stats":{"Line":13},"fn_name":null},{"line":823,"address":[5871593,5873064],"length":1,"stats":{"Line":13},"fn_name":null},{"line":828,"address":[5873897],"length":1,"stats":{"Line":8},"fn_name":null},{"line":829,"address":[5873965],"length":1,"stats":{"Line":8},"fn_name":null},{"line":831,"address":[5876201,5877672],"length":1,"stats":{"Line":13},"fn_name":null},{"line":832,"address":[5878505,5879976],"length":1,"stats":{"Line":13},"fn_name":null},{"line":833,"address":[5882224,5880809],"length":1,"stats":{"Line":13},"fn_name":null},{"line":838,"address":[5883065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":839,"address":[5883133],"length":1,"stats":{"Line":8},"fn_name":null},{"line":841,"address":[5886784,5885369],"length":1,"stats":{"Line":13},"fn_name":null},{"line":846,"address":[5887625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":847,"address":[5887693],"length":1,"stats":{"Line":8},"fn_name":null},{"line":853,"address":[5889929],"length":1,"stats":{"Line":8},"fn_name":null},{"line":854,"address":[5889997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":855,"address":[5890009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":861,"address":[5892281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":862,"address":[5892349],"length":1,"stats":{"Line":8},"fn_name":null},{"line":863,"address":[5892417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":869,"address":[5894681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":870,"address":[5894749],"length":1,"stats":{"Line":8},"fn_name":null},{"line":871,"address":[5894817],"length":1,"stats":{"Line":8},"fn_name":null},{"line":877,"address":[5897081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":878,"address":[5897149],"length":1,"stats":{"Line":8},"fn_name":null},{"line":879,"address":[5897217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":885,"address":[5899481],"length":1,"stats":{"Line":8},"fn_name":null},{"line":886,"address":[5899549],"length":1,"stats":{"Line":8},"fn_name":null},{"line":887,"address":[5899617],"length":1,"stats":{"Line":8},"fn_name":null},{"line":893,"address":[5901881],"length":1,"stats":{"Line":8},"fn_name":null},{"line":894,"address":[5901949],"length":1,"stats":{"Line":8},"fn_name":null},{"line":895,"address":[5902017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":901,"address":[5904281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":902,"address":[5904349],"length":1,"stats":{"Line":8},"fn_name":null},{"line":903,"address":[5904417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":909,"address":[5906681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":910,"address":[5906749],"length":1,"stats":{"Line":8},"fn_name":null},{"line":911,"address":[5906817],"length":1,"stats":{"Line":8},"fn_name":null},{"line":917,"address":[5909081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":918,"address":[5909149],"length":1,"stats":{"Line":8},"fn_name":null},{"line":919,"address":[5909217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":923,"address":[5911481,5912792],"length":1,"stats":{"Line":13},"fn_name":null},{"line":924,"address":[5914936,5913625],"length":1,"stats":{"Line":13},"fn_name":null},{"line":925,"address":[5917080,5915769],"length":1,"stats":{"Line":13},"fn_name":null},{"line":926,"address":[5917913,5919224],"length":1,"stats":{"Line":13},"fn_name":null},{"line":927,"address":[5921368,5920057],"length":1,"stats":{"Line":13},"fn_name":null},{"line":928,"address":[5922201,5923512],"length":1,"stats":{"Line":13},"fn_name":null},{"line":929,"address":[5925712,5924345],"length":1,"stats":{"Line":13},"fn_name":null},{"line":934,"address":[5926537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":935,"address":[5926605],"length":1,"stats":{"Line":8},"fn_name":null},{"line":936,"address":[5926673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":937,"address":[5926685],"length":1,"stats":{"Line":8},"fn_name":null},{"line":939,"address":[5929001,5930312],"length":1,"stats":{"Line":13},"fn_name":null},{"line":940,"address":[5932456,5931145],"length":1,"stats":{"Line":13},"fn_name":null},{"line":945,"address":[5933289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":946,"address":[5933357],"length":1,"stats":{"Line":8},"fn_name":null},{"line":947,"address":[5933425],"length":1,"stats":{"Line":8},"fn_name":null},{"line":948,"address":[5933437],"length":1,"stats":{"Line":8},"fn_name":null},{"line":950,"address":[5935753,5937064],"length":1,"stats":{"Line":13},"fn_name":null},{"line":951,"address":[5937897,5939208],"length":1,"stats":{"Line":13},"fn_name":null},{"line":956,"address":[5940041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":957,"address":[5940109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":958,"address":[5940177],"length":1,"stats":{"Line":8},"fn_name":null},{"line":959,"address":[5940189],"length":1,"stats":{"Line":8},"fn_name":null},{"line":965,"address":[5942505],"length":1,"stats":{"Line":8},"fn_name":null},{"line":966,"address":[5942573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":967,"address":[5942641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":968,"address":[5942709],"length":1,"stats":{"Line":8},"fn_name":null},{"line":974,"address":[5944969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":975,"address":[5945037],"length":1,"stats":{"Line":8},"fn_name":null},{"line":976,"address":[5945105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":977,"address":[5945117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":978,"address":[5945185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":979,"address":[5945253],"length":1,"stats":{"Line":8},"fn_name":null},{"line":980,"address":[5945265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":982,"address":[5949000,5947689],"length":1,"stats":{"Line":13},"fn_name":null},{"line":987,"address":[5949833],"length":1,"stats":{"Line":8},"fn_name":null},{"line":988,"address":[5949901],"length":1,"stats":{"Line":8},"fn_name":null},{"line":989,"address":[5949969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":990,"address":[5950037],"length":1,"stats":{"Line":8},"fn_name":null},{"line":996,"address":[5952297],"length":1,"stats":{"Line":8},"fn_name":null},{"line":997,"address":[5952365],"length":1,"stats":{"Line":8},"fn_name":null},{"line":998,"address":[5952433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":999,"address":[5952445],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1001,"address":[5954761,5956072],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1006,"address":[5956905],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1007,"address":[5956973],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1008,"address":[5957041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1009,"address":[5957109],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1015,"address":[5959369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1016,"address":[5959437],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1017,"address":[5959505],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1018,"address":[5959573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1024,"address":[5961833],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1025,"address":[5961901],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1026,"address":[5961969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1027,"address":[5962037],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1028,"address":[5962049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1029,"address":[5962117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1030,"address":[5962129],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1036,"address":[5964553],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1037,"address":[5964621],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1038,"address":[5964689],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1039,"address":[5964701],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1040,"address":[5964769],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1041,"address":[5964837],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1042,"address":[5964849],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1043,"address":[5964917],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1044,"address":[5964985],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1045,"address":[5964997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1051,"address":[5967561],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1052,"address":[5967629],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1053,"address":[5967697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1054,"address":[5967765],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1060,"address":[5970025],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1061,"address":[5970093],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1062,"address":[5970161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1063,"address":[5970229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1069,"address":[5972537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1070,"address":[5972605],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1071,"address":[5972673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1072,"address":[5972685],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1078,"address":[5975001],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1079,"address":[5975069],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1080,"address":[5975137],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1081,"address":[5975205],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1087,"address":[5977513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1088,"address":[5977581],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1089,"address":[5977649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1090,"address":[5977717],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1096,"address":[5979977],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1097,"address":[5980045],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1098,"address":[5980113],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1099,"address":[5980181],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1100,"address":[5980193],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1101,"address":[5980261],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1102,"address":[5980329],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1108,"address":[5982697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1109,"address":[5982765],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1110,"address":[5982833],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1111,"address":[5982901],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1112,"address":[5982913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1113,"address":[5982981],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1114,"address":[5982993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1115,"address":[5983061],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1116,"address":[5983129],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1117,"address":[5983141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1123,"address":[5985705],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1124,"address":[5985773],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1125,"address":[5985841],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1126,"address":[5985909],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1132,"address":[5988169],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1133,"address":[5988237],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1134,"address":[5988305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1135,"address":[5988373],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1141,"address":[5990633],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1142,"address":[5990701],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1143,"address":[5990769],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1144,"address":[5990837],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1150,"address":[5993145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1151,"address":[5993213],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1152,"address":[5993281],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1153,"address":[5993349],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1159,"address":[5995609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1160,"address":[5995677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1161,"address":[5995745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1162,"address":[5995813],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1168,"address":[5998073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1169,"address":[5998141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1170,"address":[5998209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1171,"address":[5998277],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1172,"address":[5998289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1173,"address":[5998357],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1174,"address":[5998425],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1180,"address":[6000793],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1181,"address":[6000861],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1182,"address":[6000929],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1183,"address":[6000997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1184,"address":[6001009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1185,"address":[6001077],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1186,"address":[6001145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1187,"address":[6001157],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1188,"address":[6001225],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1189,"address":[6001237],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1195,"address":[6003801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1196,"address":[6003869],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1197,"address":[6003937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1198,"address":[6004005],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1204,"address":[6006265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1205,"address":[6006333],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1206,"address":[6006401],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1207,"address":[6006469],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1213,"address":[6008729],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1214,"address":[6008797],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1215,"address":[6008865],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1216,"address":[6008933],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1222,"address":[6011241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1223,"address":[6011309],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1224,"address":[6011377],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1225,"address":[6011445],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1231,"address":[6013753],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1232,"address":[6013821],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1233,"address":[6013889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1234,"address":[6013957],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1240,"address":[6016217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1241,"address":[6016285],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1242,"address":[6016353],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1243,"address":[6016421],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1244,"address":[6016433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1245,"address":[6016501],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1246,"address":[6016569],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1252,"address":[6018937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1253,"address":[6019005],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1254,"address":[6019073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1255,"address":[6019141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1256,"address":[6019153],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1257,"address":[6019221],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1258,"address":[6019289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1259,"address":[6019301],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1260,"address":[6019369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1261,"address":[6019437],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1267,"address":[6021945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1268,"address":[6022013],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1269,"address":[6022081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1270,"address":[6022149],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1276,"address":[6024409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1277,"address":[6024477],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1278,"address":[6024545],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1279,"address":[6024613],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1285,"address":[6026873],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1286,"address":[6026941],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1287,"address":[6027009],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1288,"address":[6027077],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1294,"address":[6029337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1295,"address":[6029405],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1296,"address":[6029473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1297,"address":[6029541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1303,"address":[6031801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1304,"address":[6031869],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1310,"address":[6034105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1311,"address":[6034173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1317,"address":[6036409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1318,"address":[6036477],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1324,"address":[6038713],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1325,"address":[6038781],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1331,"address":[6041017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1332,"address":[6041085],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1338,"address":[6043321],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1339,"address":[6043389],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1345,"address":[6045625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1346,"address":[6045693],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1352,"address":[6047929],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1353,"address":[6047997],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1359,"address":[6050233],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1360,"address":[6050301],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1366,"address":[6052537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1367,"address":[6052605],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1373,"address":[6054841],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1374,"address":[6054909],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1380,"address":[6057145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1381,"address":[6057213],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1387,"address":[6059449],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1388,"address":[6059517],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1394,"address":[6061753],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1395,"address":[6061821],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1401,"address":[6064057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1402,"address":[6064125],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1408,"address":[6066361],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1409,"address":[6066429],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1415,"address":[6068665],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1416,"address":[6068733],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1422,"address":[6070969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1423,"address":[6071037],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1429,"address":[6073273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1430,"address":[6073341],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1431,"address":[6073409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1437,"address":[6075673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1438,"address":[6075741],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1439,"address":[6075809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1445,"address":[6078073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1446,"address":[6078141],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1447,"address":[6078209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1453,"address":[6080473],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1454,"address":[6080541],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1455,"address":[6080609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1457,"address":[6084184,6082873],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1462,"address":[6085017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1463,"address":[6085085],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1464,"address":[6085153],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1470,"address":[6087417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1471,"address":[6087485],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1472,"address":[6087553],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1478,"address":[6089817],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1479,"address":[6089885],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1480,"address":[6089953],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1486,"address":[6092217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1487,"address":[6092285],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1488,"address":[6092353],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1490,"address":[6094617,6095928],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1495,"address":[6096761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1496,"address":[6096829],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1497,"address":[6096897],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1503,"address":[6099161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1504,"address":[6099229],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1505,"address":[6099297],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1511,"address":[6101561],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1512,"address":[6101629],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1513,"address":[6101697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1519,"address":[6103961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1520,"address":[6104029],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1521,"address":[6104097],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1527,"address":[6106361],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1528,"address":[6106429],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1529,"address":[6106497],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1535,"address":[6108761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1536,"address":[6108829],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1537,"address":[6108897],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1539,"address":[6112472,6111161],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1544,"address":[6113305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1545,"address":[6113373],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1546,"address":[6113441],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1552,"address":[6115705],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1553,"address":[6115773],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1554,"address":[6115841],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1560,"address":[6118105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1561,"address":[6118173],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1562,"address":[6118241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1568,"address":[6120505],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1569,"address":[6120573],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1570,"address":[6120641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1572,"address":[6122905,6124216],"length":1,"stats":{"Line":13},"fn_name":null},{"line":1577,"address":[6125049],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1578,"address":[6125117],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1579,"address":[6125185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1585,"address":[6127449],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1586,"address":[6127517],"length":1,"stats":{"Line":8},"fn_name":null},{"line":1587,"address":[6127585],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":723,"coverable":723},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","macros.rs"],"content":"// Convenience macros.\n\nmacro_rules! findall {\n    ($re:expr, $text:expr) => {{\n        $re.find_iter(text!($text))\n           .map(|m| (m.start(), m.end())).collect::<Vec<_>>()\n    }}\n}\n\n// Macros for automatically producing tests.\n\nmacro_rules! ismatch {\n    ($name:ident, $re:expr, $text:expr, $ismatch:expr) => {\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            assert_eq!($ismatch, re.is_match(text!($text)));\n        }\n    };\n}\n\nmacro_rules! mat(\n    ($name:ident, $re:expr, $text:expr, $($loc:tt)+) => (\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let expected: Vec<Option<_>> = vec![$($loc)+];\n            let r = regex!($re);\n            let got: Vec<Option<_>> = match r.captures(text) {\n                Some(c) => {\n                    assert!(r.is_match(text));\n                    assert!(r.shortest_match(text).is_some());\n                    r.capture_names()\n                     .enumerate()\n                     .map(|(i, _)| c.get(i).map(|m| (m.start(), m.end())))\n                     .collect()\n                }\n                None => vec![None],\n            };\n            // The test set sometimes leave out capture groups, so truncate\n            // actual capture groups to match test set.\n            let mut sgot = &got[..];\n            if sgot.len() > expected.len() {\n                sgot = &sgot[0..expected.len()]\n            }\n            if expected != sgot {\n                panic!(\"For RE '{}' against '{:?}', \\\n                        expected '{:?}' but got '{:?}'\",\n                       $re, text, expected, sgot);\n            }\n        }\n    );\n);\n\nmacro_rules! matiter(\n    ($name:ident, $re:expr, $text:expr) => (\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let expected: Vec<(usize, usize)> = vec![];\n            let r = regex!($re);\n            let got: Vec<_> =\n                r.find_iter(text).map(|m| (m.start(), m.end())).collect();\n            if expected != got {\n                panic!(\"For RE '{}' against '{:?}', \\\n                        expected '{:?}' but got '{:?}'\",\n                       $re, text, expected, got);\n            }\n            let captures_got: Vec<_> =\n                r.captures_iter(text)\n                 .map(|c| c.get(0).unwrap())\n                 .map(|m| (m.start(), m.end()))\n                 .collect();\n            if captures_got != got {\n                panic!(\"For RE '{}' against '{:?}', \\\n                        got '{:?}' using find_iter but got '{:?}' \\\n                        using captures_iter\",\n                       $re, text, got, captures_got);\n            }\n        }\n    );\n    ($name:ident, $re:expr, $text:expr, $($loc:tt)+) => (\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let expected: Vec<_> = vec![$($loc)+];\n            let r = regex!($re);\n            let got: Vec<_> =\n                r.find_iter(text).map(|m| (m.start(), m.end())).collect();\n            if expected != got {\n                panic!(\"For RE '{}' against '{:?}', \\\n                        expected '{:?}' but got '{:?}'\",\n                       $re, text, expected, got);\n            }\n            let captures_got: Vec<_> =\n                r.captures_iter(text)\n                 .map(|c| c.get(0).unwrap())\n                 .map(|m| (m.start(), m.end()))\n                 .collect();\n            if captures_got != got {\n                panic!(\"For RE '{}' against '{:?}', \\\n                        got '{:?}' using find_iter but got '{:?}' \\\n                        using captures_iter\",\n                       $re, text, got, captures_got);\n            }\n        }\n    );\n);\n\nmacro_rules! matset {\n    ($name:ident, $res:expr, $text:expr, $($match_index:expr),*) => {\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let set = regex_set!($res);\n            assert!(set.is_match(text));\n            let expected = vec![$($match_index),*];\n            let matches = set.matches(text);\n            assert!(matches.matched_any());\n            let got: Vec<_> = matches.into_iter().collect();\n            assert_eq!(expected, got);\n        }\n    }\n}\n\nmacro_rules! nomatset {\n    ($name:ident, $res:expr, $text:expr) => {\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let set = regex_set!($res);\n            assert!(!set.is_match(text));\n            let matches = set.matches(text);\n            assert!(!matches.matched_any());\n            assert_eq!(0, matches.into_iter().count());\n        }\n    }\n}\n\nmacro_rules! split {\n    ($name:ident, $re:expr, $text:expr, $expected:expr) => {\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            let splitted: Vec<_> = re.split(t!($text)).collect();\n            assert_eq!($expected, &*splitted);\n        }\n    }\n}\n\nmacro_rules! splitn {\n    ($name:ident, $re:expr, $text:expr, $limit:expr, $expected:expr) => {\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            let splitted: Vec<_> = re.splitn(t!($text), $limit).collect();\n            assert_eq!($expected, &*splitted);\n        }\n    }\n}\n","traces":[{"line":6,"address":[6134537,6134528],"length":1,"stats":{"Line":186},"fn_name":"{{closure}}"},{"line":15,"address":[6141424,6141536,6143232,6141317,6144080,6141429,6139456,6139461,6143125,6141541,6141312,6144085,6141653,6141648,6139573,6143120,6139568,6143008,6143013,6143237],"length":1,"stats":{"Line":240},"fn_name":"{{closure}}"},{"line":16,"address":[8072670,8071166,8071957,8056894,8082974,8072709,8083726,8073422,8083013,8084478,8090206,8090245,8083765,8071205,8056142,8084517,8071918,8073461,8056181,8056933],"length":1,"stats":{"Line":160},"fn_name":null},{"line":17,"address":[8072826,8057050,8057135,8073578,8072911,8057297,8071322,8071407,8072074,8056383,8090362,8090447,8071457,8073713,8083377,8084719,8056545,8057185,8056298,8072209,8072961,8073073,8084129,8084881,8090497,8072321,8084017,8083265,8084769,8056433,8083882,8071569,8072159,8083215,8083967,8073663,8073825,8090609,8083130,8084634],"length":1,"stats":{"Line":140},"fn_name":null},{"line":25,"address":[4957312,4948544,4950736,4961733,4964136,4948632,4942104,4966240,4977237,4955208,4998456,4957400,4968520,4961696,4944208,4968432,4972904,4955120,4939960,4944296,4952928,4950824,4975096,4977200,4942016,4939872,4959504,4959592,4970624,4975008,4979381,4998368,4964048,4953016,4966328,4979344,4981488,4981525,4993984,4994072,4996264,4946488,4970712,4996176,4946400,4972816],"length":1,"stats":{"Line":12276},"fn_name":"word_boundary"},{"line":26,"address":[4961710,4944278,4955190,4975078,4942086,4957382,4948614,4939942,4950806,4959574,4970694,4946470,4981502,4977214,4994054,4966310,4979358,4952998,4964118,4972886,4996246,4998438,4968502],"length":1,"stats":{"Line":1579},"fn_name":null},{"line":27,"address":[4939975,4942205,4944397,4953117,4948733,4957415,4946533,4957501,4953031,4950925,4972919,4966429,4977252,4998557,4946503,4950839,4975197,4948647,4968621,4975111,4977338,4981540,4961748,4981694,4959607,4940005,4955223,4964237,4944311,4964151,4970813,4955309,4973005,4979482,4968535,4942119,4994087,4996365,4961970,4966343,4996279,4998471,4979396,4994173,4970727],"length":1,"stats":{"Line":8168},"fn_name":null},{"line":28,"address":[4996497,4998613,4962174,4946665,4966485,4975329,4979614,4981786,4968753,4940137,4979538,4994229,4953249,4946589,4950981,4951057,4968677,4940061,4994305,4970945,4942337,4962098,4977470,4998689,4973061,4975253,4973137,4948789,4959749,4964293,4944453,4959825,4964369,4966561,4942261,4948865,4955441,4970869,4957633,4957557,4955365,4977394,4944529,4953173,4981862,4996421],"length":1,"stats":{"Line":7150},"fn_name":null},{"line":29,"address":[4978217,4973409,4982134,4966670,4951329,4962921,4940409,4944638,4971692,4966833,4964478,4955550,4975438,4994577,4953358,4953521,4949612,4959934,4979886,4995052,4998798,4975601,4945276,4967308,4998961,4965116,4955713,4951166,4960572,4948974,4957742,4996769,4964641,4944801,4973884,4977579,4969500,4977742,4980361,4947412,4962446,4979723,4982609,4942446,4999436,4957905,4956188,4958380,4997244,4996606,4951804,4946937,4960097,4942609,4973246,4949137,4946774,4953996,4968862,4976076,4971217,4962283,4994414,4969025,4981971,4940246,4940884,4971054,4943084],"length":1,"stats":{"Line":7902},"fn_name":null},{"line":30,"address":[4955593,4959977,4979888,4940289,4951209,4957785,4946817,4942611,4968905,4973411,4975481,4998841,4998963,4953523,4962326,4977622,4960099,4977744,4946939,4964521,4955715,4996771,4982014,4996649,4957907,4966713,4944803,4979766,4949139,4940411,4949017,4951331,4953401,4962448,4971097,4942489,4964643,4971219,4973289,4969027,4944681,4966835,4975603,4982136,4994457,4994579],"length":1,"stats":{"Line":7902},"fn_name":null},{"line":31,"address":[4977921,4973588,4971267,4940459,4964691,4955892,4942659,4944980,4966883,4982313,4962496,4960147,4969075,4975651,4964820,4999140,4951508,4967012,4958084,4973459,4946987,4942788,4977792,4980065,4953700,4999011,4971396,4940588,4953571,4949187,4982184,4975780,4979936,4994756,4949316,4994627,4996819,4996948,4957955,4944851,4969204,4951379,4960276,4962625,4955763,4947116],"length":1,"stats":{"Line":3810},"fn_name":null},{"line":32,"address":[4942737,4958125,4949455,4982354,4964861,4953649,4978060,4944929,4953839,4962574,4994705,4958033,4980106,4951647,4977962,4960415,4971535,4977870,4975919,4999181,4969245,4964769,4962764,4953741,4982262,4951457,4949265,4962666,4996989,4940727,4942829,4951549,4973727,4975729,4996897,4997087,4969343,4947255,4945021,4960317,4964959,4955933,4966961,4940629,4967053,4969153,4980204,4971437,4994797,4999089,4947157,4942927,4980014,4956031,4973537,4958223,4940537,4949357,4971345,4960225,4973629,4975821,4947065,4955841,4967151,4945119,4999279,4994895,4982452],"length":1,"stats":{"Line":7620},"fn_name":null},{"line":33,"address":[4945084,4980169,4967184,4943011,4947288,4949420,4960380,4960499,4978025,4956064,4960448,4940811,4947220,4962797,4969376,4945152,4978093,4953872,4982417,4967235,4971568,4994860,4997052,4947339,4967116,4978144,4969427,4994928,4942960,4980288,4975884,4973760,4951680,4953923,4949539,4956115,4953804,4951731,4999312,4964992,4942892,4958307,4973692,4999244,4955996,4982485,4945203,4964924,4951612,4971500,4982536,4976003,4962848,4969308,4994979,4997120,4949488,4962729,4975952,4980237,4940760,4997171,4965043,4958188,4999363,4958256,4973811,4971619,4940692],"length":1,"stats":{"Line":11430},"fn_name":null},{"line":35,"address":[4424432,4428524,4410752,4414652,4417088,4422457,4424160,4416828,4414640,4417916,4422176,4426064,4410300,4428169,4411840,4426880,4430144,4430416,4431504,4412464,4427625,4412736,4425248,4422720,4417824,4412393,4415468,4415648,4426800,4418912,4423536,4425712,4420896,4419456,4425532,4421984,4413209,4411376,4409756,4411920,4414016,4424080,4411024,4415376,4425792,4425721,4427980,4431788,4409945,4421440,4426892,4414288,4413472,4432332,4414560,4415657,4425440,4420281,4423001,4427353,4412656,4414368,4428252,4419184,4421360,4428432,4428985,4412928,4417644,4429257,4419276,4427164,4427424,4431696,4413552,4420352,4431977,4411577,4432048,4424624,4432060,4426809,4425804,4430880,4416012,4432320,4414832,4411116,4419004,4431232,4416201,4417552,4421996,4423072,4416192,4422729,4415104,4428704,4431244,4421168,4428240,4412192,4417017,4411932,4420364,4427344,4429612,4423273,4432240,4415740,4416736,4418720,4413744,4417360,4419193,4431152,4426076,4413008,4414380,4421097,4423808,4415385,4426336,4421452,4431516,4426537,4424444,4424896,4425260,4419737,4423817,4423616,4420080,4419548,4431161,4429340,4412476,4427708,4414841,4420636,4427072,4416000,4410761,4424716,4418188,4421712,4422812,4421632,4424089,4422528,4409664,4409673,4430608,4431705,4415728,4416464,4417561,4422992,4423888,4427968,4425449,4420544,4417372,4430700,4410489,4429056,4418640,4414096,4430064,4423264,4413200,4432249,4410572,4420816,4430688,4410560,4423545,4429600,4420272,4417833,4411305,4417632,4415113,4412384,4418992,4417100,4418649,4423344,4426256,4426528,4421913,4428160,4410480,4428441,4419820,4414924,4421369,4411033,4426348,4413836,4417289,4425177,4428512,4429529,4429248,4414912,4421088,4413564,4410217,4420825,4430972,4416473,4423628,4410832,4416544,4410288,4413020,4409744,4411104,4414108,4422185,4424633,4424976,4420000,4428713,4411648,4418368,4417904,4420908,4422448,4423084,4416556,4424905,4426608,4428796,4417280,4410028,4419264,4415929,4409936,4429328,4429801,4415920,4416745,4413753,4413824,4416284,4423356,4419728,4424352,4412204,4415196,4430345,4415456,4430428,4412665,4417008,4419465,4425168,4410208,4411388,4412121,4427888,4411660,4428784,4425520,4429068,4418377,4416272,4419536,4423900,4427696,4430073,4430156,4430960,4430617,4431968,4411849,4418460,4422268,4422256,4422800,4418096,4427152,4414025,4431776,4411296,4422540,4424361,4413280,4427081,4414297,4427436,4410016,4430336,4412748,4418105,4421724,4416816,4420009,4431424,4429884,4430889,4418448,4418176,4420092,4426620,4431433,4425984,4428976,4419808,4421641,4429792,4424172,4412112,4414569,4426265,4429872,4420553,4424988,4413481,4425993,4427616,4415184,4427897,4421904,4413292,4418921,4412937,4429520,4411568,4418732,4420624,4410844,4424704,4421180],"length":1,"stats":{"Line":19050},"fn_name":"{{closure}}"},{"line":38,"address":[4955647,4949593,4949071,4969481,4940865,4947393,4953633,4958361,4980342,4946871,4960031,4955825,4973343,4953977,4964753,4979998,4953455,4996703,4967289,4943065,4958017,4964575,4995033,4999417,4957839,4994511,4973521,4965097,4979820,4942543,4951263,4962902,4944735,4951441,4966945,4971329,4942721,4947049,4982246,4973865,4977676,4945257,4968959,4976057,4978198,4999073,4982068,4982590,4969137,4966767,4940521,4944913,4956169,4975713,4940343,4998895,4977854,4962558,4951785,4997225,4996881,4975535,4994689,4962380,4960553,4949249,4971673,4971151,4960209],"length":1,"stats":{"Line":4092},"fn_name":null},{"line":42,"address":[4960608,4940920,4959355,4983592,4949648,4944059,4980397,4957163,4945312,4948387,4951840,4963896,4976112,4970475,4982645,4961547,4943120,5000411,4969536,4972667,4979192,4997280,4981336,4965152,4950587,4952779,4977051,4967344,4962957,4996027,4947448,4958416,4995088,4968283,4974859,4998219,4954032,4946251,4941859,4954971,4956224,4966091,4971728,4973920,4978253,4999472],"length":1,"stats":{"Line":8184},"fn_name":null},{"line":43,"address":[4973976,4947504,4999528,4967400,4969592,4997336,4982701,4963013,4995144,4945368,4951896,4976168,4956280,4980453,4940976,4949704,4943176,4960664,4971784,4965208,4978309,4958472,4954088],"length":1,"stats":{"Line":4092},"fn_name":null},{"line":44,"address":[4949784,4965288,4971864,4951976,4995224,4976248,4967480,4963093,4982781,4941056,4958552,4943256,4945448,4947584,4956360,4969672,4974056,4999608,4978389,4980533,4960744,4997416,4954168],"length":1,"stats":{"Line":363},"fn_name":null},{"line":46,"address":[4972060,4974252,4967676,4976444,4960940,4958748,4963289,4941252,4965484,4943452,4949980,4954364,4978585,4980729,4945644,4947780,4969868,4982977,4952172,4995420,4997612,4956556,4999804],"length":1,"stats":{"Line":4092},"fn_name":null},{"line":47,"address":[4974297,4976489,4976503,4978630,4943511,4963348,4999849,4967721,4954409,4997671,4969913,4997657,4960999,4999863,4952217,4980774,4995479,4995465,4943497,4945689,4945703,4965529,4983022,4941297,4941311,4960985,4954423,4950025,4965543,4958807,4972105,4972119,4978644,4980788,4983036,4947839,4950039,4947825,4956601,4963334,4969927,4958793,4956615,4967735,4952231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[4301648,4311736,4365872,4387672,4377664,4389624,4361888,4371728,4237000,4307664,4369864,4324088,4385720,4247088,4393520,4369776,4269408,4333840,4339864,4381736,4301736,4327992,4247176,4343760,4325952,4373768,4311648,4324000,4389536,4339776,4371816,4381648,4283640,4377752,4287584,4337824,4333928,4337912,4269496,4351808,4351896,4361976,4373680,4393608,4395560,4236912,4307752,4365960,4327904,4299784,4395472,4326040,4287672,4283552,4299696,4385632,4367912,4329856,4343848,4367824,4387584,4329944],"length":1,"stats":{"Line":852},"fn_name":"wb1"},{"line":59,"address":[4337894,4247158,4371798,4385702,4369846,4387654,4327974,4381718,4361958,4326022,4329926,4351878,4311718,4287654,4343830,4333910,4373750,4299766,4301718,4307734,4236982,4339846,4324070,4377734,4393590,4365942,4283622,4269478,4367894,4395542,4389606],"length":1,"stats":{"Line":109},"fn_name":null},{"line":60,"address":[4328007,4324103,4269511,4329959,4339879,4351911,4247191,4237015,4361991,4365975,4337927,4326055,4287687,4333943,4367927,4387687,4311751,4369879,4389639,4377767,4373783,4307767,4301751,4381751,4283655,4371831,4299799,4385735,4393623,4395575,4343863],"length":1,"stats":{"Line":284},"fn_name":null},{"line":61,"address":[4338015,4389653,4299813,4247279,4339967,4387701,4393637,4299887,4365989,4283669,4333957,4387775,4393711,4377855,4237029,4329973,4330047,4366063,4371919,4324117,4328095,4311839,4381765,4237103,4269525,4339893,4283743,4371845,4326069,4334031,4343877,4395589,4373871,4311765,4247205,4301765,4326143,4389727,4367941,4369967,4269599,4385749,4362079,4307781,4301839,4385823,4343951,4362005,4351999,4377781,4307855,4328021,4351925,4381839,4287701,4324191,4368015,4369893,4337941,4373797,4395663,4287775],"length":1,"stats":{"Line":497},"fn_name":null},{"line":63,"address":[4227872,4225280,4227881,4225289,4227008,4227017],"length":1,"stats":{"Line":568},"fn_name":"{{closure}}"},{"line":64,"address":[4389960,4302072,4338248,4362312,4324424,4326376,4330280,4308088,4374104,4247512,4312072,4300120,4340200,4395896,4370200,4283976,4344184,4237336,4352232,4372152,4288008,4378088,4382072,4328328,4386056,4388008,4334264,4393944,4366296,4368248,4269832],"length":1,"stats":{"Line":284},"fn_name":null},{"line":65,"address":[4368337,4362401,4284079,4386159,4324527,4237439,4247601,4388111,4338351,4344273,4330369,4302175,4300223,4312175,4334367,4378177,4308191,4395985,4326479,4326465,4302161,4368351,4328417,4382175,4352321,4366399,4394047,4395999,4247615,4284065,4338337,4340303,4394033,4340289,4378191,4366385,4374207,4352335,4312161,4288097,4370289,4269921,4388097,4237425,4288111,4362415,4370303,4334353,4324513,4328431,4269935,4300209,4372241,4372255,4330383,4390063,4374193,4382161,4344287,4308177,4386145,4390049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[4302797,4284701,4238061,4308131,4329053,4326419,4370925,4325149,4300163,4338291,4388733,4288733,4269875,4340243,4308813,4340925,4352957,4395939,4331005,4366339,4237379,4396621,4386099,4330323,4270557,4370243,4372195,4362355,4390685,4344227,4372877,4378813,4312797,4334307,4367021,4284019,4288051,4328371,4378131,4300845,4390003,4368973,4344909,4334989,4352275,4382115,4338973,4393987,4327101,4247555,4368291,4374829,4386781,4363037,4382797,4302115,4374147,4388051,4312115,4394669,4324467,4248237],"length":1,"stats":{"Line":568},"fn_name":null},{"line":71,"address":[4227100,4227964,4227088,4227952,4225360,4225372],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":72,"address":[4227248,4227257,4228121,4225520,4228112,4225529],"length":1,"stats":{"Line":0},"fn_name":"{{closure}}"},{"line":74,"address":[4302866,4386850,4288802,4374898,4378882,4390754,4300914,4325218,4367090,4382866,4394738,4248306,4396690,4329122,4312866,4270626,4372946,4369042,4363106,4327170,4353026,4370994,4388802,4308882,4238130,4340994,4331074,4344978,4335058,4339042,4284770],"length":1,"stats":{"Line":284},"fn_name":null},{"line":75,"address":[4238198,4329190,4367158,4308964,4382934,4339110,4369110,4394806,4312934,4327252,4371062,4325286,4367172,4353094,4327238,4373028,4374980,4378964,4335126,4341076,4373014,4325300,4331156,4339124,4394820,4378950,4270708,4382948,4270694,4345060,4371076,4386932,4284838,4302934,4312948,4374966,4248374,4363174,4288884,4341062,4300982,4390822,4390836,4363188,4353108,4284852,4300996,4302948,4396758,4396772,4335140,4329204,4345046,4238212,4308950,4386918,4331142,4388870,4388884,4288870,4248388,4369124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[4229920,4228197,4226032,4231648,4231221,4229925,4235541,4231653,4229493,4235109,4227333,4233381,4233808,4234240,4226464,4229061,4232944,4235536,4225605,4230784,4228629,4230352,4231216,4232080,4232949,4234245,4227328,4224736,4228624,4226037,4229488,4232085,4233376,4224741,4229056,4232512,4225600,4226469,4232517,4233813,4234672,4235104,4234677,4228192,4230357,4230789],"length":1,"stats":{"Line":2682},"fn_name":"{{closure}}"},{"line":85,"address":[4317734,4345782,4353830,4357894,4335862,4379686,4291638,4295702,4363910,4293670,4305702,4347814,4315702,4399526,4277526,4341798,4285574,4249110,4259318,4355862,4261350,4245126,4275494,4279558,4241014,4263382,4253222,4267446,4397494,4243094,4375702,4289606,4320006,4359926,4238934,4281590,4257286,4271430,4273462,4309686,4383670,4391558,4303670,4313670,4322038,4297734,4251190,4331878,4349846,4265414,4255254],"length":1,"stats":{"Line":343},"fn_name":null},{"line":86,"address":[4355895,4383745,4399601,4251265,4239033,4253297,4305777,4265447,4375777,4277601,4391633,4397527,4281623,4397569,4309761,4241047,4238967,4257361,4297809,4265489,4293745,4317767,4341831,4279633,4289681,4353905,4297767,4357927,4357969,4359959,4291713,4379719,4391591,4249209,4271463,4335895,4245201,4353863,4320039,4259351,4253255,4281665,4267479,4331953,4347889,4349879,4349921,4243169,4251223,4303745,4355937,4360001,4303703,4363985,4383703,4275527,4295735,4277559,4263457,4305735,4341873,4261383,4289639,4345815,4241113,4257319,4279591,4313745,4273537,4345857,4249143,4255329,4275569,4315735,4243127,4261425,4320081,4285673,4363943,4245159,4322113,4267521,4375735,4309719,4271505,4379761,4315777,4293703,4399559,4295777,4317929,4322071,4331911,4335937,4273495,4291671,4313703,4255287,4285607,4263415,4259393,4347847],"length":1,"stats":{"Line":1788},"fn_name":null},{"line":87,"address":[4241258,4358090,4397690,4277645,4397613,4295898,4303866,4313866,4383866,4263578,4295821,4360045,4383789,4257482,4251309,4297930,4265610,4293866,4263501,4249277,4275613,4305898,4309882,4245322,4315821,4315898,4318093,4245245,4305821,4291834,4322234,4273581,4259437,4331997,4350042,4243213,4358013,4335981,4336058,4318170,4253418,4259514,4275690,4277722,4364029,4379805,4399722,4375898,4241181,4309805,4257405,4303789,4341917,4249354,4291757,4281786,4285741,4297853,4251386,4273658,4348010,4349965,4379882,4243290,4399645,4239101,4289802,4341994,4364106,4255373,4239178,4271626,4356058,4313789,4261469,4293789,4261546,4271549,4320125,4332074,4320202,4353949,4285818,4355981,4375821,4253341,4281709,4279754,4322157,4279677,4391754,4267565,4345978,4267642,4265533,4345901,4360122,4289725,4391677,4255450,4347933,4354026],"length":1,"stats":{"Line":1563},"fn_name":null},{"line":89,"address":[4234784,4235657,4233065,4226576,4226585,4228313,4228736,4224848,4233497,4231337,4231328,4235648,4224857,4234793,4228745,4227449,4230896,4231769,4233056,4230041,4230473,4228304,4230905,4230032,4234361,4235216,4229609,4232192,4235225,4230464,4232624,4229177,4232201,4225721,4229168,4233488,4229600,4231760,4227440,4226144,4233920,4232633,4233929,4234352,4225712,4226153],"length":1,"stats":{"Line":3576},"fn_name":"{{closure}}"},{"line":90,"address":[4399955,4332307,4292067,4241491,4310115,4380115,4348243,4376131,4249587,4316131,4296131,4255683,4298163,4318403,4273891,4253651,4294099,4263811,4322467,4336291,4342227,4306131,4314099,4354259,4356291,4358323,4261779,4360355,4277955,4267875,4350275,4286051,4384099,4239411,4257715,4271859,4259747,4290035,4304099,4397923,4275923,4282019,4245555,4364339,4279987,4346211,4391987,4243523,4265843,4251619,4320435],"length":1,"stats":{"Line":894},"fn_name":null},{"line":91,"address":[4239514,4263914,4358426,4354362,4376220,4296220,4249676,4245644,4298266,4400058,4364428,4265946,4290124,4294188,4294202,4346314,4271948,4348332,4358412,4243612,4398012,4251708,4267964,4253754,4348346,4290138,4310204,4241594,4310218,4304202,4350364,4384202,4278044,4296234,4332410,4267978,4342330,4400044,4316220,4257804,4336380,4360444,4354348,4304188,4251722,4259836,4322556,4322570,4239500,4356380,4314202,4376234,4276026,4398026,4265932,4292170,4255772,4276012,4282122,4298252,4259850,4255786,4316234,4318492,4273980,4273994,4320524,4286140,4380218,4384188,4392076,4263900,4342316,4392090,4356394,4282108,4292156,4286154,4241580,4243626,4261882,4314188,4280090,4271962,4253740,4257818,4364442,4261868,4332396,4350378,4306220,4249690,4245658,4306234,4280076,4346300,4320538,4360458,4380204,4278058,4318506,4336394],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[4400680,4252344,4346254,4264536,4292792,4318446,4376174,4240136,4256408,4314142,4321160,4359048,4350318,4258440,4298888,4241534,4249630,4306174,4265886,4263854,4259790,4280030,4298206,4346936,4277998,4342952,4358366,4380840,4257758,4262504,4384142,4348968,4294142,4245598,4251662,4399998,4286094,4274616,4392030,4380158,4272584,4268600,4282062,4246280,4290760,4243566,4296174,4360398,4392712,4323192,4398648,4354984,4244248,4292110,4250312,4255726,4253694,4310840,4348286,4357016,4286776,4342270,4351000,4239454,4260472,4337016,4273934,4267918,4304824,4376856,4278680,4282744,4304142,4316174,4384824,4275966,4294824,4276648,4306856,4314824,4333032,4322510,4332350,4261822,4364382,4266568,4254376,4354302,4242216,4271902,4365064,4397966,4290078,4296856,4310158,4320478,4319128,4280712,4316856,4356334,4361080,4336334],"length":1,"stats":{"Line":1788},"fn_name":null},{"line":97,"address":[4232284,4235308,4235728,4231840,4234432,4233580,4229260,4230556,4233148,4230544,4225804,4233568,4227520,4232704,4234864,4228828,4229692,4230976,4228816,4234000,4227532,4232272,4235740,4224940,4230988,4231852,4235296,4224928,4226656,4228396,4230112,4228384,4232716,4234012,4234876,4230124,4231420,4226224,4229248,4231408,4233136,4234444,4226668,4229680,4225792,4226236],"length":1,"stats":{"Line":1788},"fn_name":"{{closure}}"},{"line":98,"address":[4235456,4235897,4232873,4230281,4228544,4226384,4232000,4233296,4232864,4229417,4235888,4225961,4229408,4229849,4228985,4226825,4231145,4229840,4232432,4233728,4234601,4235024,4235465,4226393,4235033,4228553,4230713,4230272,4231568,4227689,4233305,4225088,4227680,4232441,4232009,4225097,4233737,4234160,4234169,4234592,4226816,4230704,4231136,4228976,4231577,4225952],"length":1,"stats":{"Line":1788},"fn_name":"{{closure}}"},{"line":100,"address":[4380909,4274685,4384893,4250381,4254445,4286845,4294893,4343021,4314893,4361149,4365133,4298957,4264605,4278749,4276717,4321229,4323261,4262573,4268669,4280781,4333101,4337085,4355053,4266637,4272653,4246349,4351069,4306925,4357085,4258509,4392781,4260541,4376925,4252413,4240205,4292861,4319197,4282813,4349037,4398717,4400749,4359117,4316925,4296925,4256477,4310909,4347005,4290829,4242285,4304893,4244317],"length":1,"stats":{"Line":894},"fn_name":null},{"line":101,"address":[4286913,4314961,4296993,4274753,4357167,4254527,4282881,4272735,4274767,4266719,4343103,4365215,4377007,4384961,4258591,4307007,4272721,4292929,4294975,4244385,4268737,4304975,4310991,4240287,4317007,4359185,4240273,4278817,4380991,4280863,4384975,4351137,4398785,4292943,4349105,4299039,4246417,4355121,4286927,4351151,4365201,4392849,4347073,4400817,4242367,4280849,4355135,4392863,4306993,4316993,4337167,4304961,4256559,4260623,4254513,4357153,4258577,4268751,4266705,4321297,4323329,4262641,4380977,4244399,4290911,4347087,4321311,4282895,4252481,4246431,4256545,4294961,4349119,4337153,4361217,4264673,4333183,4398799,4376993,4252495,4323343,4319279,4260609,4250463,4297007,4310977,4333169,4314975,4359199,4319265,4262655,4361231,4242353,4343089,4290897,4299025,4264687,4400831,4276785,4276799,4278831,4250449],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[8572522,8573770,8558858,8555146,8563728,8569936,8586202,8556394,8581226,8568688,8567546,8579978,8563834,8574912,8555040,8567440,8568794,8572416,8573664,8553898,8556288,8577392,8557520,8557626,8570042,8560000,8560106,8553792,8558752,8561354,8582368,8582474,8583600,8584848,8584954,8566314,8586096,8562586,8562480,8577498,8579872,8571274,8576250,8565066,8571168,8575018,8576144,8578746,8583706,8566208,8561248,8564960,8578640,8581120],"length":1,"stats":{"Line":648},"fn_name":"set1"},{"line":114,"address":[8568766,8571175,8574990,8569943,8578718,8581127,8553799,8556366,8561326,8582446,8573742,8558759,8558830,8565038,8579879,8581198,8560078,8572494,8583607,8556295,8566215,8574919,8576151,8555047,8582375,8567447,8557527,8564967,8561255,8566286,8560007,8563806,8563735,8577399,8584855,8557598,8562558,8568695,8570014,8555118,8572423,8577470,8578647,8576222,8584926,8586103,8586174,8573671,8562487,8571246,8583678,8553870,8567518,8579950],"length":1,"stats":{"Line":297},"fn_name":null},{"line":115,"address":[8576272,8572544,8563856,8581248,8567568,8573792,8562608,8557648,8558880,8570064,8577520,8583728,8565088,8556416,8553920,8568816,8566336,8584976,8582496,8560128,8578768,8555168,8561376,8580000,8586224,8571296,8575040],"length":1,"stats":{"Line":351},"fn_name":null},{"line":116,"address":[8554165,8571427,8578898,8562853,8572675,8572783,8581493,8577765,8560373,8579006,8569061,8583858,8555298,8586354,8568946,8554050,8561614,8559010,8557778,8564094,8557886,8580130,8580245,8559125,8567698,8575278,8577650,8576402,8570302,8567813,8560258,8581378,8574031,8565333,8582734,8570194,8556654,8575170,8583973,8565218,8585106,8585221,8571535,8582626,8576517,8566466,8573923,8555413,8556546,8563986,8561506,8562738,8566574,8586469],"length":1,"stats":{"Line":216},"fn_name":null},{"line":117,"address":[8562806,8575233,8567766,8557841,8565286,8569014,8570257,8571490,8573986,8576470,8566529,8554118,8556609,8559078,8578961,8564049,8580198,8555366,8582689,8581446,8561569,8583926,8585174,8577718,8560326,8586422,8572738],"length":1,"stats":{"Line":216},"fn_name":null},{"line":118,"address":[8582767,8581526,8560406,8571568,8555446,8580278,8567846,8584006,8565366,8585254,8579039,8570335,8554198,8556687,8572816,8586502,8562886,8577798,8574064,8576550,8557919,8559158,8564127,8569094,8566607,8575311,8561647],"length":1,"stats":{"Line":216},"fn_name":null},{"line":119,"address":[8577959,8571729,8555488,8575399,8569182,8586663,8576638,8569255,8570423,8572858,8556729,8581614,8565408,8585296,8556775,8586544,8554286,8579127,8569136,8560567,8571656,8585342,8574225,8584167,8586590,8568007,8566649,8582928,8564288,8570377,8561808,8581568,8572977,8581687,8585415,8574106,8564169,8577840,8562974,8558080,8561735,8566695,8576592,8554240,8558007,8570496,8577886,8582809,8579081,8561689,8564215,8563047,8572904,8559246,8565454,8566768,8580439,8571610,8584094,8575472,8559319,8554359,8562928,8560494,8565527,8574152,8556848,8576711,8580320,8555607,8575353,8584048,8557961,8582855,8555534,8560448,8559200,8567888,8567934,8579200,8580366],"length":1,"stats":{"Line":432},"fn_name":null},{"line":120,"address":[8561741,8576644,8581736,8560616,8565460,8584216,8586596,8586712,8556897,8570545,8558129,8559252,8585348,8566817,8555656,8554292,8559368,8574158,8571778,8582977,8585464,8575521,8584100,8568056,8561857,8574274,8579133,8564337,8567940,8562980,8570429,8558013,8572910,8577892,8569188,8560500,8554408,8555540,8571662,8579249,8580372,8580488,8563096,8581620,8569304,8556781,8566701,8564221,8576760,8565576,8578008,8573026,8582861,8575405],"length":1,"stats":{"Line":432},"fn_name":null},{"line":121,"address":[8564352,8585619,8555811,8556912,8566832,8574429,8580503,8568211,8565591,8578163,8582992,8570700,8558144,8579404,8573181,8559523,8560631,8575536,8575676,8584231,8578023,8559383,8561872,8554563,8569319,8565731,8570560,8585479,8576915,8586727,8581751,8566972,8554423,8558284,8560771,8555671,8563251,8564492,8569459,8568071,8573041,8574289,8579264,8583132,8581891,8586867,8576775,8571793,8563111,8580643,8571933,8557052,8562012,8584371],"length":1,"stats":{"Line":216},"fn_name":null},{"line":129,"address":[8587344,8587450,8588554,8589552,8590672,8589658,8590778,8588448],"length":1,"stats":{"Line":96},"fn_name":"nset1"},{"line":130,"address":[8589630,8590679,8587351,8588455,8588526,8587422,8590750,8589559],"length":1,"stats":{"Line":44},"fn_name":null},{"line":131,"address":[8587472,8588576,8590800,8589704],"length":1,"stats":{"Line":52},"fn_name":null},{"line":132,"address":[8589931,8587696,8588706,8591024,8588800,8587602,8589837,8590930],"length":1,"stats":{"Line":32},"fn_name":null},{"line":133,"address":[8591057,8589897,8590990,8587729,8588833,8587662,8588766,8589964],"length":1,"stats":{"Line":64},"fn_name":null},{"line":134,"address":[8589972,8588955,8588841,8591179,8587851,8590086,8591065,8587737],"length":1,"stats":{"Line":32},"fn_name":null},{"line":135,"address":[8587772,8588876,8590119,8591212,8588988,8588036,8589140,8590271,8587884,8590007,8591100,8591364],"length":1,"stats":{"Line":64},"fn_name":null},{"line":143,"address":[5276464,5275312,5279958,5271881,5273424,5277510,5278624,5275350,5276502,5273472,5271840,5277472,5279920,5278662],"length":1,"stats":{"Line":192},"fn_name":"split1"},{"line":144,"address":[5279934,5276478,5271857,5275365,5277486,5275326,5273448,5273487,5276517,5278638,5279973,5277525,5271896,5278677],"length":1,"stats":{"Line":128},"fn_name":null},{"line":145,"address":[5273686,5272173,5275564,5275642,5276794,5278954,5278876,5280172,5272095,5273764,5280250,5277802,5276716,5277724],"length":1,"stats":{"Line":88},"fn_name":null},{"line":146,"address":[5274772,5279549,5278254,5278095,5276094,5273054,5276964,5275935,5276924,5280420,5279390,5272895,5277101,5280380,5280557,5274931],"length":1,"stats":{"Line":110},"fn_name":null},{"line":154,"address":[5281936,5284240,5285222,5283126,5283088,5280928,5285184,5287488,5286336,5287526,5281974,5286374,5280966,5284278],"length":1,"stats":{"Line":168},"fn_name":"splitn_below_limit"},{"line":155,"address":[5280981,5281989,5284293,5281950,5283141,5286350,5286389,5287502,5287541,5285237,5283102,5280942,5284254,5285198],"length":1,"stats":{"Line":112},"fn_name":null},{"line":156,"address":[5285436,5281258,5281177,5284554,5284483,5286588,5283424,5285520,5287737,5286672,5282272,5282188,5283340,5287818],"length":1,"stats":{"Line":77},"fn_name":null},{"line":157,"address":[5281565,5281388,5288125,5287948,5284584,5283870,5284621,5282718,5283711,5285807,5282559,5281428,5287988,5286959,5285966,5287118],"length":1,"stats":{"Line":100},"fn_name":null}],"covered":61,"coverable":68},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","macros_bytes.rs"],"content":"// Macros for use in writing tests generic over &str/&[u8].\nmacro_rules! text { ($text:expr) => { $text.as_bytes() } }\nmacro_rules! t { ($re:expr) => { text!($re) } }\nmacro_rules! match_text { ($text:expr) => { $text.as_bytes() } }\nmacro_rules! use_ { ($($path: tt)*) => { use regex::bytes::$($path)*; } }\nmacro_rules! empty_vec { () => { <Vec<&[u8]>>::new() } }\n\nmacro_rules! bytes { ($text:expr) => { $text } }\n\nmacro_rules! no_expand {\n    ($text:expr) => {{\n        use regex::bytes::NoExpand;\n        NoExpand(text!($text))\n    }}\n}\n\nmacro_rules! show {\n    ($text:expr) => {{\n        use std::ascii::escape_default;\n        let mut s = vec![];\n        for &b in bytes!($text) {\n            s.extend(escape_default(b));\n        }\n        String::from_utf8(s).unwrap()\n    }}\n}\n\nmacro_rules! expand {\n    ($name:ident, $re:expr, $text:expr, $expand:expr, $expected:expr) => {\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            let cap = re.captures(t!($text)).unwrap();\n\n            let mut got = vec![];\n            cap.expand(t!($expand), &mut got);\n            assert_eq!(show!(t!($expected)), show!(&*got));\n        }\n    }\n}\n","traces":[{"line":31,"address":[5254688,5256886,5265462,5267552,5254742,5261120,5269696,5256832,5263318,5259030,5269750,5258976,5261174,5250400,5252544,5267606,5250454,5252598,5265408,5263264],"length":1,"stats":{"Line":90},"fn_name":"expand1"},{"line":32,"address":[5265477,5254757,5267566,5259045,5250414,5267621,5269710,5265422,5252613,5269765,5261189,5263278,5261134,5252558,5250469,5256846,5256901,5258990,5263333,5254702],"length":1,"stats":{"Line":60},"fn_name":null},{"line":33,"address":[5261388,5267882,5263594,5250730,5254956,5270026,5257100,5250668,5257162,5265676,5255018,5261450,5269964,5265738,5267820,5252812,5259306,5252874,5259244,5263532],"length":1,"stats":{"Line":60},"fn_name":null},{"line":35,"address":[5252904,5257192,5261480,5263624,5267912,5259336,5250760,5255048,5265768,5270056],"length":1,"stats":{"Line":30},"fn_name":null},{"line":36,"address":[5265887,5250879,5259455,5268031,5255167,5253023,5261599,5263743,5257311,5270175],"length":1,"stats":{"Line":30},"fn_name":null},{"line":37,"address":[5253082,5268090,5255332,5263802,5257476,5260885,5261658,5258741,5255226,5263908,5268196,5265946,5257370,5263029,5265173,5251044,5254453,5266052,5271605,5261764,5270234,5267317,5253188,5269461,5256597,5250938,5252309,5270340,5259514,5259620],"length":1,"stats":{"Line":60},"fn_name":null}],"covered":6,"coverable":6},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","macros_str.rs"],"content":"// Macros for use in writing tests generic over &str/&[u8].\nmacro_rules! text { ($text:expr) => { $text } }\nmacro_rules! t { ($text:expr) => { text!($text) } }\nmacro_rules! match_text { ($text:expr) => { $text.as_str() } }\nmacro_rules! use_ { ($($path: tt)*) => { use regex::$($path)*; } }\nmacro_rules! empty_vec { () => { <Vec<&str>>::new() } }\n\nmacro_rules! no_expand {\n    ($text:expr) => {{\n        use regex::NoExpand;\n        NoExpand(text!($text))\n    }}\n}\n\nmacro_rules! show { ($text:expr) => { $text } }\n\n// N.B. The expansion API for &str and &[u8] APIs differs slightly for now,\n// but they should be unified in 1.0. Then we can move this macro back into\n// tests/api.rs where it is used. ---AG\nmacro_rules! expand {\n    ($name:ident, $re:expr, $text:expr, $expand:expr, $expected:expr) => {\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            let cap = re.captures(t!($text)).unwrap();\n\n            let mut got = String::new();\n            cap.expand(t!($expand), &mut got);\n            assert_eq!(show!(t!($expected)), show!(&*got));\n        }\n    }\n}\n\n#[cfg(feature = \"pattern\")]\nmacro_rules! searcher_expr { ($e:expr) => ($e) }\n#[cfg(not(feature = \"pattern\"))]\nmacro_rules! searcher_expr { ($e:expr) => ({}) }\n","traces":[{"line":23,"address":[7719968,7718272,7716614,7716576,7720006,7720816,7718310,7721664,7723360,7721702,7719158,7722512,7715766,7719120,7715728,7723398,7717462,7717424,7720854,7722550],"length":1,"stats":{"Line":150},"fn_name":"expand1"},{"line":24,"address":[8052478,8059774,8056165,8057950,8053390,8055253,8052517,8053429,8057038,8051566,8059813,8057077,8058901,8054302,8056126,8051605,8057989,8055214,8058862,8054341],"length":1,"stats":{"Line":100},"fn_name":null},{"line":25,"address":[7720897,7721745,7715809,7716657,7722593,7719201,7723441,7720049,7717505,7718353],"length":1,"stats":{"Line":50},"fn_name":null},{"line":27,"address":[7715896,7716744,7720136,7718440,7717592,7721832,7722680,7723528,7720984,7719288],"length":1,"stats":{"Line":50},"fn_name":null},{"line":28,"address":[7716751,7717599,7720991,7721839,7722687,7718447,7715903,7723535,7720143,7719295],"length":1,"stats":{"Line":50},"fn_name":null},{"line":29,"address":[7717712,7721894,7716167,7721952,7722103,7722742,7718560,7723648,7716806,7723590,7717654,7721046,7719350,7719559,7722800,7717863,7720407,7722951,7723799,7720256,7717015,7716864,7715958,7721104,7716016,7721255,7718502,7720198,7719408,7718711],"length":1,"stats":{"Line":100},"fn_name":null}],"covered":6,"coverable":6},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","misc.rs"],"content":"mat!(prefix_literal_match, r\"^abc\", r\"abc\", Some((0, 3)));\nmat!(prefix_literal_nomatch, r\"^abc\", r\"zabc\", None);\nmat!(one_literal_edge, r\"abc\", r\"xxxxxab\", None);\nmatiter!(terminates, r\"a$\", r\"a\", (0, 1));\n","traces":[{"line":1,"address":[5535518,5535556,5536828],"length":1,"stats":{"Line":2},"fn_name":null},{"line":2,"address":[5537550,5537588,5538804],"length":1,"stats":{"Line":2},"fn_name":null},{"line":3,"address":[5540772,5539518,5539556],"length":1,"stats":{"Line":2},"fn_name":null},{"line":4,"address":[5541524,5541486,5541903,5542676],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":4,"coverable":4},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","multiline.rs"],"content":"matiter!(\n    match_multi_1,\n    r\"(?m)^[a-z]+$\",\n    \"abc\\ndef\\nxyz\",\n    (0, 3),\n    (4, 7),\n    (8, 11)\n);\nmatiter!(match_multi_2, r\"(?m)^$\", \"abc\\ndef\\nxyz\");\nmatiter!(match_multi_3, r\"(?m)^\", \"abc\\ndef\\nxyz\", (0, 0), (4, 4), (8, 8));\nmatiter!(match_multi_4, r\"(?m)$\", \"abc\\ndef\\nxyz\", (3, 3), (7, 7), (11, 11));\nmatiter!(\n    match_multi_5,\n    r\"(?m)^[a-z]\",\n    \"abc\\ndef\\nxyz\",\n    (0, 1),\n    (4, 5),\n    (8, 9)\n);\nmatiter!(match_multi_6, r\"(?m)[a-z]^\", \"abc\\ndef\\nxyz\");\nmatiter!(\n    match_multi_7,\n    r\"(?m)[a-z]$\",\n    \"abc\\ndef\\nxyz\",\n    (2, 3),\n    (6, 7),\n    (10, 11)\n);\nmatiter!(match_multi_8, r\"(?m)$[a-z]\", \"abc\\ndef\\nxyz\");\nmatiter!(match_multi_9, r\"(?m)^$\", \"\", (0, 0));\n\nmatiter!(\n    match_multi_rep_1,\n    r\"(?m)(?:^$)*\",\n    \"a\\nb\\nc\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5)\n);\nmatiter!(\n    match_multi_rep_2,\n    r\"(?m)(?:^|a)+\",\n    \"a\\naaa\\n\",\n    (0, 0),\n    (2, 2),\n    (3, 5),\n    (6, 6)\n);\nmatiter!(\n    match_multi_rep_3,\n    r\"(?m)(?:^|a)*\",\n    \"a\\naaa\\n\",\n    (0, 1),\n    (2, 5),\n    (6, 6)\n);\nmatiter!(\n    match_multi_rep_4,\n    r\"(?m)(?:^[a-z])+\",\n    \"abc\\ndef\\nxyz\",\n    (0, 1),\n    (4, 5),\n    (8, 9)\n);\nmatiter!(\n    match_multi_rep_5,\n    r\"(?m)(?:^[a-z]{3}\\n?)+\",\n    \"abc\\ndef\\nxyz\",\n    (0, 11)\n);\nmatiter!(\n    match_multi_rep_6,\n    r\"(?m)(?:^[a-z]{3}\\n?)*\",\n    \"abc\\ndef\\nxyz\",\n    (0, 11)\n);\nmatiter!(\n    match_multi_rep_7,\n    r\"(?m)(?:\\n?[a-z]{3}$)+\",\n    \"abc\\ndef\\nxyz\",\n    (0, 11)\n);\nmatiter!(\n    match_multi_rep_8,\n    r\"(?m)(?:\\n?[a-z]{3}$)*\",\n    \"abc\\ndef\\nxyz\",\n    (0, 11)\n);\nmatiter!(\n    match_multi_rep_9,\n    r\"(?m)^*\",\n    \"\\naa\\n\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4)\n);\nmatiter!(match_multi_rep_10, r\"(?m)^+\", \"\\naa\\n\", (0, 0), (1, 1), (4, 4));\nmatiter!(\n    match_multi_rep_11,\n    r\"(?m)$*\",\n    \"\\naa\\n\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4)\n);\nmatiter!(match_multi_rep_12, r\"(?m)$+\", \"\\naa\\n\", (0, 0), (3, 3), (4, 4));\nmatiter!(match_multi_rep_13, r\"(?m)(?:$\\n)+\", \"\\n\\naaa\\n\\n\", (0, 2), (5, 7));\nmatiter!(\n    match_multi_rep_14,\n    r\"(?m)(?:$\\n)*\",\n    \"\\n\\naaa\\n\\n\",\n    (0, 2),\n    (3, 3),\n    (4, 4),\n    (5, 7)\n);\nmatiter!(match_multi_rep_15, r\"(?m)(?:$\\n^)+\", \"\\n\\naaa\\n\\n\", (0, 2), (5, 7));\nmatiter!(\n    match_multi_rep_16,\n    r\"(?m)(?:^|$)+\",\n    \"\\n\\naaa\\n\\n\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (5, 5),\n    (6, 6),\n    (7, 7)\n);\nmatiter!(\n    match_multi_rep_17,\n    r\"(?m)(?:$\\n)*\",\n    \"\\n\\naaa\\n\\n\",\n    (0, 2),\n    (3, 3),\n    (4, 4),\n    (5, 7)\n);\n","traces":[{"line":5,"address":[5013913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":6,"address":[5013937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":7,"address":[5013961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":9,"address":[5016440,5017213],"length":1,"stats":{"Line":5},"fn_name":null},{"line":10,"address":[5017993,5019336,5018563],"length":1,"stats":{"Line":13},"fn_name":null},{"line":11,"address":[5020691,5021464,5020121],"length":1,"stats":{"Line":13},"fn_name":null},{"line":16,"address":[5022249],"length":1,"stats":{"Line":8},"fn_name":null},{"line":17,"address":[5022273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":18,"address":[5022297],"length":1,"stats":{"Line":8},"fn_name":null},{"line":20,"address":[5025549,5024776],"length":1,"stats":{"Line":5},"fn_name":null},{"line":25,"address":[5026329],"length":1,"stats":{"Line":8},"fn_name":null},{"line":26,"address":[5026353],"length":1,"stats":{"Line":8},"fn_name":null},{"line":27,"address":[5026377],"length":1,"stats":{"Line":8},"fn_name":null},{"line":29,"address":[5028856,5029629],"length":1,"stats":{"Line":5},"fn_name":null},{"line":30,"address":[5030409,5030883,5031656],"length":1,"stats":{"Line":13},"fn_name":null},{"line":36,"address":[5032441],"length":1,"stats":{"Line":8},"fn_name":null},{"line":37,"address":[5032465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":38,"address":[5032489],"length":1,"stats":{"Line":8},"fn_name":null},{"line":39,"address":[5032513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":40,"address":[5032537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":41,"address":[5032561],"length":1,"stats":{"Line":8},"fn_name":null},{"line":47,"address":[5034713],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[5034737],"length":1,"stats":{"Line":8},"fn_name":null},{"line":49,"address":[5034761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[5034785],"length":1,"stats":{"Line":8},"fn_name":null},{"line":56,"address":[5036889],"length":1,"stats":{"Line":8},"fn_name":null},{"line":57,"address":[5036913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":58,"address":[5036937],"length":1,"stats":{"Line":8},"fn_name":null},{"line":64,"address":[5039017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":65,"address":[5039041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":66,"address":[5039065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":72,"address":[5041145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":78,"address":[5043177],"length":1,"stats":{"Line":8},"fn_name":null},{"line":84,"address":[5045209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":90,"address":[5047241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":96,"address":[5049273],"length":1,"stats":{"Line":8},"fn_name":null},{"line":97,"address":[5049297],"length":1,"stats":{"Line":8},"fn_name":null},{"line":98,"address":[5049321],"length":1,"stats":{"Line":8},"fn_name":null},{"line":99,"address":[5049345],"length":1,"stats":{"Line":8},"fn_name":null},{"line":100,"address":[5049369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":102,"address":[5051497,5052840,5052067],"length":1,"stats":{"Line":13},"fn_name":null},{"line":107,"address":[5053625],"length":1,"stats":{"Line":8},"fn_name":null},{"line":108,"address":[5053649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":109,"address":[5053673],"length":1,"stats":{"Line":8},"fn_name":null},{"line":110,"address":[5053697],"length":1,"stats":{"Line":8},"fn_name":null},{"line":111,"address":[5053721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":113,"address":[5057192,5056419,5055849],"length":1,"stats":{"Line":13},"fn_name":null},{"line":114,"address":[5059272,5057977,5058499],"length":1,"stats":{"Line":13},"fn_name":null},{"line":119,"address":[5060057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":120,"address":[5060081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":121,"address":[5060105],"length":1,"stats":{"Line":8},"fn_name":null},{"line":122,"address":[5060129],"length":1,"stats":{"Line":8},"fn_name":null},{"line":124,"address":[5063528,5062233,5062755],"length":1,"stats":{"Line":13},"fn_name":null},{"line":129,"address":[5064313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":130,"address":[5064337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":131,"address":[5064361],"length":1,"stats":{"Line":8},"fn_name":null},{"line":132,"address":[5064385],"length":1,"stats":{"Line":8},"fn_name":null},{"line":133,"address":[5064409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":134,"address":[5064433],"length":1,"stats":{"Line":8},"fn_name":null},{"line":140,"address":[5066585],"length":1,"stats":{"Line":8},"fn_name":null},{"line":141,"address":[5066609],"length":1,"stats":{"Line":8},"fn_name":null},{"line":142,"address":[5066633],"length":1,"stats":{"Line":8},"fn_name":null},{"line":143,"address":[5066657],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":63,"coverable":63},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","noparse.rs"],"content":"macro_rules! noparse(\n    ($name:ident, $re:expr) => (\n        #[test]\n        fn $name() {\n            let re = $re;\n            match regex_new!(re) {\n                Err(_) => {},\n                Ok(_) => panic!(\"Regex '{}' should cause a parse error.\", re),\n            }\n        }\n    );\n);\n\nnoparse!(fail_no_repeat_arg, \"*\");\nnoparse!(fail_incomplete_escape, \"\\\\\");\nnoparse!(fail_class_incomplete, \"[A-\");\nnoparse!(fail_class_not_closed, \"[A\");\nnoparse!(fail_class_no_begin, r\"[\\A]\");\nnoparse!(fail_class_no_end, r\"[\\z]\");\nnoparse!(fail_class_no_boundary, r\"[\\b]\");\nnoparse!(fail_open_paren, \"(\");\nnoparse!(fail_close_paren, \")\");\nnoparse!(fail_invalid_range, \"[a-Z]\");\nnoparse!(fail_empty_capture_name, \"(?P<>a)\");\nnoparse!(fail_bad_capture_name, \"(?P<na-me>)\");\nnoparse!(fail_bad_flag, \"(?a)a\");\nnoparse!(fail_too_big, \"a{10000000}\");\nnoparse!(fail_counted_no_close, \"a{1001\");\nnoparse!(fail_counted_decreasing, \"a{2,1}\");\nnoparse!(fail_counted_nonnegative, \"a{-1,1}\");\nnoparse!(fail_unfinished_cap, \"(?\");\nnoparse!(fail_unfinished_escape, \"\\\\\");\nnoparse!(fail_octal_digit, r\"\\8\");\nnoparse!(fail_hex_digit, r\"\\xG0\");\nnoparse!(fail_hex_short, r\"\\xF\");\nnoparse!(fail_hex_long_digits, r\"\\x{fffg}\");\nnoparse!(fail_flag_bad, \"(?a)\");\nnoparse!(fail_flag_empty, \"(?)\");\nnoparse!(fail_double_neg, \"(?-i-i)\");\nnoparse!(fail_neg_empty, \"(?i-)\");\nnoparse!(fail_dupe_named, \"(?P<a>.)(?P<a>.)\");\nnoparse!(fail_range_end_no_class, \"[a-[:lower:]]\");\nnoparse!(fail_range_end_no_begin, r\"[a-\\A]\");\nnoparse!(fail_range_end_no_end, r\"[a-\\z]\");\nnoparse!(fail_range_end_no_boundary, r\"[a-\\b]\");\n","traces":[{"line":4,"address":[4554342,4561254,4557030,4551654,4557744,4550832,4554726,4559718,4553904,4550886,4552806,4552752,4555878,4560432,4552422,4561584,4558512,4560870,4557798,4555824,4552038,4555494,4556262,4550448,4554288,4562022,4551600,4555440,4551270,4561638,4551984,4553574,4560102,4550502,4559664,4558566,4554672,4553520,4556208,4556592,4553190,4555110,4559334,4555056,4560486,4550118,4561968,4556646,4559280,4551216,4558896,4557414,4557360,4561200,4552368,4558128,4560048,4553958,4558182,4550064,4560816,4556976,4558950,4553136],"length":1,"stats":{"Line":768},"fn_name":"fail_no_repeat_arg"},{"line":6,"address":[7827068,7827877,7832485,7833596,7828645,7825357,7824421,7827493,7826125,7824764,7826893,7830181,7830733,7823053,7830140,7824589,7822460,7822669,7824205,7827836,7828988,7827452,7827661,7829413,7830565,7825573,7824380,7829372,7831292,7832269,7822844,7833253,7826684,7831676,7829756,7831885,7822501,7832869,7830908,7833212,7830524,7824973,7832060,7825741,7828220,7830349,7833421,7822285,7831333,7827109,7824037,7822117,7831117,7825532,7823612,7822076,7832444,7823653,7826725,7823228,7828045,7829965,7826300,7828261,7826509,7826341,7825189,7821692,7823821,7828813,7829029,7823437,7822885,7829197,7821901,7828604,7828429,7825957,7823996,7824805,7830949,7831717,7825148,7832101,7832653,7821733,7827277,7829581,7831501,7823269,7832828,7829797,7833037,7833637,7833805,7825916],"length":1,"stats":{"Line":448},"fn_name":null},{"line":7,"address":[7829877,7827189,7826805,7831413,7832949,7833333,7831029,7829109,7823733,7824501,7827957,7824885,7826421,7829493,7832565,7823349,7826037,7827573,7830261,7821813,7822965,7824117,7825269,7830645,7828725,7825653,7828341,7822581,7822197,7833717,7831797,7832181],"length":1,"stats":{"Line":256},"fn_name":null},{"line":8,"address":[7823455,7829891,7826143,7832963,7833347,7828355,7822762,7830659,7831210,7823914,7826911,7831903,7827295,7831519,7833439,7826218,7832671,7825834,7833130,7833514,7830442,7830826,7823747,7824298,7821919,7821994,7824515,7824899,7825375,7828739,7823071,7826435,7828138,7831043,7831427,7831811,7832746,7833731,7826051,7822211,7832287,7822303,7823146,7824682,7825450,7822979,7828063,7829123,7829290,7829983,7827370,7833055,7823839,7826819,7823530,7830367,7830751,7830058,7821827,7832195,7829674,7824607,7828522,7830275,7833823,7829507,7826527,7826986,7828447,7822595,7825759,7833898,7824223,7831978,7828831,7824991,7832362,7827203,7825283,7829599,7822378,7823363,7824131,7831594,7832579,7827587,7831135,7825066,7829215,7826602,7827971,7828906,7822687,7827679,7827754,7825667],"length":1,"stats":{"Line":0},"fn_name":null},{"line":14,"address":[7821678],"length":1,"stats":{"Line":8},"fn_name":null},{"line":15,"address":[7822062],"length":1,"stats":{"Line":8},"fn_name":null},{"line":16,"address":[7822446],"length":1,"stats":{"Line":8},"fn_name":null},{"line":17,"address":[7822830],"length":1,"stats":{"Line":8},"fn_name":null},{"line":18,"address":[7823214],"length":1,"stats":{"Line":8},"fn_name":null},{"line":19,"address":[7823598],"length":1,"stats":{"Line":8},"fn_name":null},{"line":20,"address":[7823982],"length":1,"stats":{"Line":8},"fn_name":null},{"line":21,"address":[7824366],"length":1,"stats":{"Line":8},"fn_name":null},{"line":22,"address":[7824750],"length":1,"stats":{"Line":8},"fn_name":null},{"line":23,"address":[7825134],"length":1,"stats":{"Line":8},"fn_name":null},{"line":24,"address":[7825518],"length":1,"stats":{"Line":8},"fn_name":null},{"line":25,"address":[7825902],"length":1,"stats":{"Line":8},"fn_name":null},{"line":26,"address":[7826286],"length":1,"stats":{"Line":8},"fn_name":null},{"line":27,"address":[7826670],"length":1,"stats":{"Line":8},"fn_name":null},{"line":28,"address":[7827054],"length":1,"stats":{"Line":8},"fn_name":null},{"line":29,"address":[7827438],"length":1,"stats":{"Line":8},"fn_name":null},{"line":30,"address":[7827822],"length":1,"stats":{"Line":8},"fn_name":null},{"line":31,"address":[7828206],"length":1,"stats":{"Line":8},"fn_name":null},{"line":32,"address":[7828590],"length":1,"stats":{"Line":8},"fn_name":null},{"line":33,"address":[7828974],"length":1,"stats":{"Line":8},"fn_name":null},{"line":34,"address":[7829358],"length":1,"stats":{"Line":8},"fn_name":null},{"line":35,"address":[7829742],"length":1,"stats":{"Line":8},"fn_name":null},{"line":36,"address":[7830126],"length":1,"stats":{"Line":8},"fn_name":null},{"line":37,"address":[7830510],"length":1,"stats":{"Line":8},"fn_name":null},{"line":38,"address":[7830894],"length":1,"stats":{"Line":8},"fn_name":null},{"line":39,"address":[7831278],"length":1,"stats":{"Line":8},"fn_name":null},{"line":40,"address":[7831662],"length":1,"stats":{"Line":8},"fn_name":null},{"line":41,"address":[7832046],"length":1,"stats":{"Line":8},"fn_name":null},{"line":42,"address":[7832430],"length":1,"stats":{"Line":8},"fn_name":null},{"line":43,"address":[7832814],"length":1,"stats":{"Line":8},"fn_name":null},{"line":44,"address":[7833198],"length":1,"stats":{"Line":8},"fn_name":null},{"line":45,"address":[7833582],"length":1,"stats":{"Line":8},"fn_name":null}],"covered":35,"coverable":36},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","regression.rs"],"content":"// See: https://github.com/rust-lang/regex/issues/48\n#[test]\nfn invalid_regexes_no_crash() {\n    assert!(regex_new!(\"(*)\").is_err());\n    assert!(regex_new!(\"(?:?)\").is_err());\n    assert!(regex_new!(\"(?)\").is_err());\n    assert!(regex_new!(\"*\").is_err());\n}\n\n// See: https://github.com/rust-lang/regex/issues/98\n#[test]\nfn regression_many_repeat_stack_overflow() {\n    let re = regex!(\"^.{1,2500}\");\n    assert_eq!(vec![(0, 1)], findall!(re, \"a\"));\n}\n\n// See: https://github.com/rust-lang/regex/issues/555\n#[test]\nfn regression_invalid_repetition_expr() {\n    assert!(regex_new!(\"(?m){1,1}\").is_err());\n}\n\n// See: https://github.com/rust-lang/regex/issues/527\n#[test]\nfn regression_invalid_flags_expression() {\n    assert!(regex_new!(\"(((?x)))\").is_ok());\n}\n\n// See: https://github.com/rust-lang/regex/issues/75\nmat!(regression_unsorted_binary_search_1, r\"(?i-u)[a_]+\", \"A_\", Some((0, 2)));\nmat!(regression_unsorted_binary_search_2, r\"(?i-u)[A_]+\", \"a_\", Some((0, 2)));\n\n// See: https://github.com/rust-lang/regex/issues/99\n#[cfg(feature = \"unicode-case\")]\nmat!(regression_negated_char_class_1, r\"(?i)[^x]\", \"x\", None);\n#[cfg(feature = \"unicode-case\")]\nmat!(regression_negated_char_class_2, r\"(?i)[^x]\", \"X\", None);\n\n// See: https://github.com/rust-lang/regex/issues/101\nmat!(regression_ascii_word_underscore, r\"[[:word:]]\", \"_\", Some((0, 1)));\n\n// See: https://github.com/rust-lang/regex/issues/129\n#[test]\nfn regression_captures_rep() {\n    let re = regex!(r\"([a-f]){2}(?P<foo>[x-z])\");\n    let caps = re.captures(text!(\"abx\")).unwrap();\n    assert_eq!(match_text!(caps.name(\"foo\").unwrap()), text!(\"x\"));\n}\n\n// See: https://github.com/rust-lang/regex/issues/153\nmat!(regression_alt_in_alt1, r\"ab?|$\", \"az\", Some((0, 1)));\nmat!(regression_alt_in_alt2, r\"^(.*?)(\\n|\\r\\n?|$)\", \"ab\\rcd\", Some((0, 3)));\n\n// See: https://github.com/rust-lang/regex/issues/169\nmat!(regression_leftmost_first_prefix, r\"z*azb\", \"azb\", Some((0, 3)));\n\n// See: https://github.com/rust-lang/regex/issues/76\n#[cfg(all(feature = \"unicode-case\", feature = \"unicode-gencat\"))]\nmat!(uni_case_lower_nocase_flag, r\"(?i)\\p{Ll}+\", \"ΛΘΓΔα\", Some((0, 10)));\n\n// See: https://github.com/rust-lang/regex/issues/191\nmat!(many_alternates, r\"1|2|3|4|5|6|7|8|9|10|int\", \"int\", Some((0, 3)));\n\n// burntsushi was bad and didn't create an issue for this bug.\nmat!(anchored_prefix1, r\"^a[[:^space:]]\", \"a \", None);\nmat!(anchored_prefix2, r\"^a[[:^space:]]\", \"foo boo a \", None);\nmat!(anchored_prefix3, r\"^-[a-z]\", \"r-f\", None);\n\n// See: https://github.com/rust-lang/regex/issues/204\n#[cfg(feature = \"unicode-perl\")]\nsplit!(\n    split_on_word_boundary,\n    r\"\\b\",\n    r\"Should this (work?)\",\n    &[\n        t!(\"\"),\n        t!(\"Should\"),\n        t!(\" \"),\n        t!(\"this\"),\n        t!(\" (\"),\n        t!(\"work\"),\n        t!(\"?)\")\n    ]\n);\n#[cfg(feature = \"unicode-perl\")]\nmatiter!(\n    word_boundary_dfa,\n    r\"\\b\",\n    \"a b c\",\n    (0, 0),\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5)\n);\n\n// See: https://github.com/rust-lang/regex/issues/268\nmatiter!(partial_anchor, r\"^a|b\", \"ba\", (0, 1));\n\n// See: https://github.com/rust-lang/regex/issues/280\nismatch!(partial_anchor_alternate_begin, r\"^a|z\", \"yyyyya\", false);\nismatch!(partial_anchor_alternate_end, r\"a$|z\", \"ayyyyy\", false);\n\n// See: https://github.com/rust-lang/regex/issues/289\nmat!(lits_unambiguous1, r\"(ABC|CDA|BC)X\", \"CDAX\", Some((0, 4)));\n\n// See: https://github.com/rust-lang/regex/issues/291\nmat!(\n    lits_unambiguous2,\n    r\"((IMG|CAM|MG|MB2)_|(DSCN|CIMG))(?P<n>[0-9]+)$\",\n    \"CIMG2341\",\n    Some((0, 8)),\n    Some((0, 4)),\n    None,\n    Some((0, 4)),\n    Some((4, 8))\n);\n\n// See: https://github.com/rust-lang/regex/issues/271\nmat!(endl_or_wb, r\"(?m:$)|(?-u:\\b)\", \"\\u{6084e}\", Some((4, 4)));\nmat!(zero_or_end, r\"(?i-u:\\x00)|$\", \"\\u{e682f}\", Some((4, 4)));\nmat!(y_or_endl, r\"(?i-u:y)|(?m:$)\", \"\\u{b4331}\", Some((4, 4)));\n#[cfg(feature = \"unicode-perl\")]\nmat!(wb_start_x, r\"(?u:\\b)^(?-u:X)\", \"X\", Some((0, 1)));\n\n// See: https://github.com/rust-lang/regex/issues/321\nismatch!(strange_anchor_non_complete_prefix, r\"a^{2}\", \"\", false);\nismatch!(strange_anchor_non_complete_suffix, r\"${2}a\", \"\", false);\n\n// See: https://github.com/BurntSushi/ripgrep/issues/1203\nismatch!(reverse_suffix1, r\"[0-4][0-4][0-4]000\", \"153.230000\", true);\nismatch!(reverse_suffix2, r\"[0-9][0-9][0-9]000\", \"153.230000\\n\", true);\nmatiter!(reverse_suffix3, r\"[0-9][0-9][0-9]000\", \"153.230000\\n\", (4, 10));\n\n// See: https://github.com/rust-lang/regex/issues/334\n// See: https://github.com/rust-lang/regex/issues/557\nmat!(\n    captures_after_dfa_premature_end1,\n    r\"a(b*(X|$))?\",\n    \"abcbX\",\n    Some((0, 1)),\n    None,\n    None\n);\nmat!(\n    captures_after_dfa_premature_end2,\n    r\"a(bc*(X|$))?\",\n    \"abcbX\",\n    Some((0, 1)),\n    None,\n    None\n);\nmat!(captures_after_dfa_premature_end3, r\"(aa$)?\", \"aaz\", Some((0, 0)));\n\n// See: https://github.com/rust-lang/regex/issues/437\nismatch!(\n    literal_panic,\n    r\"typename type\\-parameter\\-[0-9]+\\-[0-9]+::.+\",\n    \"test\",\n    false\n);\n\n// See: https://github.com/rust-lang/regex/issues/533\nismatch!(\n    blank_matches_nothing_between_space_and_tab,\n    r\"[[:blank:]]\",\n    \"\\u{a}\\u{b}\\u{c}\\u{d}\\u{e}\\u{f}\\\n     \\u{10}\\u{11}\\u{12}\\u{13}\\u{14}\\u{15}\\u{16}\\u{17}\\\n     \\u{18}\\u{19}\\u{1a}\\u{1b}\\u{1c}\\u{1d}\\u{1e}\\u{1f}\",\n    false\n);\n\nismatch!(\n    inverted_blank_matches_everything_between_space_and_tab,\n    r\"^[[:^blank:]]+$\",\n    \"\\u{a}\\u{b}\\u{c}\\u{d}\\u{e}\\u{f}\\\n     \\u{10}\\u{11}\\u{12}\\u{13}\\u{14}\\u{15}\\u{16}\\u{17}\\\n     \\u{18}\\u{19}\\u{1a}\\u{1b}\\u{1c}\\u{1d}\\u{1e}\\u{1f}\",\n    true\n);\n\n// Tests that our Aho-Corasick optimization works correctly. It only\n// kicks in when we have >32 literals. By \"works correctly,\" we mean that\n// leftmost-first match semantics are properly respected. That is, samwise\n// should match, not sam.\nmat!(\n    ahocorasick1,\n    \"samwise|sam|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|\\\n     A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\",\n    \"samwise\",\n    Some((0, 7))\n);\n\n// See: https://github.com/BurntSushi/ripgrep/issues/1247\n#[test]\n#[cfg(feature = \"unicode-perl\")]\nfn regression_nfa_stops1() {\n    let re = ::regex::bytes::Regex::new(r\"\\bs(?:[ab])\").unwrap();\n    assert_eq!(0, re.find_iter(b\"s\\xE4\").count());\n}\n\n// See: https://github.com/rust-lang/regex/issues/640\n#[cfg(feature = \"unicode-case\")]\nmatiter!(\n    flags_are_unset,\n    r\"((?i)foo)|Bar\",\n    \"foo Foo bar Bar\",\n    (0, 3),\n    (4, 7),\n    (12, 15)\n);\n\n// See: https://github.com/rust-lang/regex/issues/659\n//\n// Note that 'Ј' is not 'j', but cyrillic Je\n// https://en.wikipedia.org/wiki/Je_(Cyrillic)\nismatch!(empty_group_match, r\"()Ј01\", \"zЈ01\", true);\nmatiter!(empty_group_find, r\"()Ј01\", \"zЈ01\", (1, 5));\n","traces":[{"line":3,"address":[6134064,6134069],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":4,"address":[8018149,8018323,8018110],"length":1,"stats":{"Line":16},"fn_name":null},{"line":5,"address":[8018353,8018545,8018299],"length":1,"stats":{"Line":16},"fn_name":null},{"line":6,"address":[8018521,8018767,8018575],"length":1,"stats":{"Line":16},"fn_name":null},{"line":7,"address":[8018964,8018797,8018743],"length":1,"stats":{"Line":16},"fn_name":null},{"line":12,"address":[6134416,6134421],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":13,"address":[8019102,8019141],"length":1,"stats":{"Line":16},"fn_name":null},{"line":14,"address":[8019434,8019268],"length":1,"stats":{"Line":13},"fn_name":null},{"line":19,"address":[6134608,6134613],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":20,"address":[8020284,8020133,8020094],"length":1,"stats":{"Line":16},"fn_name":null},{"line":25,"address":[6134720,6134725],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":26,"address":[8020540,8020350,8020389],"length":1,"stats":{"Line":16},"fn_name":null},{"line":30,"address":[8020713,8022080],"length":1,"stats":{"Line":13},"fn_name":null},{"line":31,"address":[8022905,8024272],"length":1,"stats":{"Line":13},"fn_name":null},{"line":35,"address":[8026408,8025097],"length":1,"stats":{"Line":13},"fn_name":null},{"line":37,"address":[8027241,8028552],"length":1,"stats":{"Line":13},"fn_name":null},{"line":40,"address":[8030752,8029385],"length":1,"stats":{"Line":13},"fn_name":null},{"line":44,"address":[6136197,6136192],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":45,"address":[8031470,8031509],"length":1,"stats":{"Line":16},"fn_name":null},{"line":46,"address":[8031708,8031770],"length":1,"stats":{"Line":11},"fn_name":null},{"line":47,"address":[8032017,8032173,8031800,8031896],"length":1,"stats":{"Line":19},"fn_name":null},{"line":51,"address":[8032665,8034032],"length":1,"stats":{"Line":13},"fn_name":null},{"line":52,"address":[8036224,8034857],"length":1,"stats":{"Line":13},"fn_name":null},{"line":55,"address":[8037049,8038416],"length":1,"stats":{"Line":13},"fn_name":null},{"line":59,"address":[8040608,8039241],"length":1,"stats":{"Line":13},"fn_name":null},{"line":62,"address":[8041433,8042800],"length":1,"stats":{"Line":13},"fn_name":null},{"line":65,"address":[8044936,8043625],"length":1,"stats":{"Line":13},"fn_name":null},{"line":66,"address":[8047080,8045769],"length":1,"stats":{"Line":13},"fn_name":null},{"line":67,"address":[8049224,8047913],"length":1,"stats":{"Line":13},"fn_name":null},{"line":75,"address":[8051050],"length":1,"stats":{"Line":3},"fn_name":null},{"line":90,"address":[8051945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":91,"address":[8051969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":92,"address":[8051993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":93,"address":[8052017],"length":1,"stats":{"Line":8},"fn_name":null},{"line":94,"address":[8052041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":95,"address":[8052065],"length":1,"stats":{"Line":8},"fn_name":null},{"line":99,"address":[8054217,8054691,8055464],"length":1,"stats":{"Line":13},"fn_name":null},{"line":106,"address":[8059120,8057753],"length":1,"stats":{"Line":13},"fn_name":null},{"line":113,"address":[8059945],"length":1,"stats":{"Line":8},"fn_name":null},{"line":114,"address":[8060013],"length":1,"stats":{"Line":8},"fn_name":null},{"line":115,"address":[8060081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":116,"address":[8060093],"length":1,"stats":{"Line":8},"fn_name":null},{"line":117,"address":[8060161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":121,"address":[8062505,8063872],"length":1,"stats":{"Line":13},"fn_name":null},{"line":122,"address":[8064697,8066064],"length":1,"stats":{"Line":13},"fn_name":null},{"line":123,"address":[8068256,8066889],"length":1,"stats":{"Line":13},"fn_name":null},{"line":125,"address":[8070448,8069081],"length":1,"stats":{"Line":13},"fn_name":null},{"line":134,"address":[8074281,8074755,8075528],"length":1,"stats":{"Line":13},"fn_name":null},{"line":142,"address":[8076313],"length":1,"stats":{"Line":8},"fn_name":null},{"line":143,"address":[8076381],"length":1,"stats":{"Line":8},"fn_name":null},{"line":144,"address":[8076393],"length":1,"stats":{"Line":8},"fn_name":null},{"line":150,"address":[8078601],"length":1,"stats":{"Line":8},"fn_name":null},{"line":151,"address":[8078669],"length":1,"stats":{"Line":8},"fn_name":null},{"line":152,"address":[8078681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":154,"address":[8080889,8082256],"length":1,"stats":{"Line":13},"fn_name":null},{"line":192,"address":[8085337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":198,"address":[6143616,6143621],"length":1,"stats":{"Line":24},"fn_name":"{{closure}}"},{"line":199,"address":[8087422,8087468],"length":1,"stats":{"Line":16},"fn_name":null},{"line":200,"address":[8087712,8087489,8087597],"length":1,"stats":{"Line":16},"fn_name":null},{"line":209,"address":[8088185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":210,"address":[8088209],"length":1,"stats":{"Line":8},"fn_name":null},{"line":211,"address":[8088233],"length":1,"stats":{"Line":8},"fn_name":null},{"line":219,"address":[8091065,8091539,8092312],"length":1,"stats":{"Line":13},"fn_name":null}],"covered":63,"coverable":63},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","replace.rs"],"content":"macro_rules! replace(\n    ($name:ident, $which:ident, $re:expr,\n     $search:expr, $replace:expr, $result:expr) => (\n        #[test]\n        fn $name() {\n            let re = regex!($re);\n            assert_eq!(re.$which(text!($search), $replace), text!($result));\n        }\n    );\n);\n\nreplace!(first, replace, r\"[0-9]\", \"age: 26\", t!(\"Z\"), \"age: Z6\");\nreplace!(plus, replace, r\"[0-9]+\", \"age: 26\", t!(\"Z\"), \"age: Z\");\nreplace!(all, replace_all, r\"[0-9]\", \"age: 26\", t!(\"Z\"), \"age: ZZ\");\nreplace!(\n    groups,\n    replace,\n    r\"(?-u)(\\S+)\\s+(\\S+)\",\n    \"w1 w2\",\n    t!(\"$2 $1\"),\n    \"w2 w1\"\n);\nreplace!(\n    double_dollar,\n    replace,\n    r\"(?-u)(\\S+)\\s+(\\S+)\",\n    \"w1 w2\",\n    t!(\"$2 $$1\"),\n    \"w2 $1\"\n);\n// replace!(adjacent_index, replace,\n// r\"([^aeiouy])ies$\", \"skies\", t!(\"$1y\"), \"sky\");\nreplace!(\n    named,\n    replace_all,\n    r\"(?-u)(?P<first>\\S+)\\s+(?P<last>\\S+)(?P<space>\\s*)\",\n    \"w1 w2 w3 w4\",\n    t!(\"$last $first$space\"),\n    \"w2 w1 w4 w3\"\n);\nreplace!(\n    trim,\n    replace_all,\n    \"^[ \\t]+|[ \\t]+$\",\n    \" \\t  trim me\\t   \\t\",\n    t!(\"\"),\n    \"trim me\"\n);\nreplace!(number_hypen, replace, r\"(.)(.)\", \"ab\", t!(\"$1-$2\"), \"a-b\");\n// replace!(number_underscore, replace, r\"(.)(.)\", \"ab\", t!(\"$1_$2\"), \"a_b\");\nreplace!(\n    simple_expand,\n    replace_all,\n    r\"(?-u)(\\w) (\\w)\",\n    \"a b\",\n    t!(\"$2 $1\"),\n    \"b a\"\n);\nreplace!(\n    literal_dollar1,\n    replace_all,\n    r\"(?-u)(\\w+) (\\w+)\",\n    \"a b\",\n    t!(\"$$1\"),\n    \"$1\"\n);\nreplace!(\n    literal_dollar2,\n    replace_all,\n    r\"(?-u)(\\w+) (\\w+)\",\n    \"a b\",\n    t!(\"$2 $$c $1\"),\n    \"b $c a\"\n);\nreplace!(\n    no_expand1,\n    replace,\n    r\"(?-u)(\\S+)\\s+(\\S+)\",\n    \"w1 w2\",\n    no_expand!(\"$2 $1\"),\n    \"$2 $1\"\n);\nreplace!(\n    no_expand2,\n    replace,\n    r\"(?-u)(\\S+)\\s+(\\S+)\",\n    \"w1 w2\",\n    no_expand!(\"$$1\"),\n    \"$$1\"\n);\nuse_!(Captures);\nreplace!(\n    closure_returning_reference,\n    replace,\n    r\"([0-9]+)\",\n    \"age: 26\",\n    |captures: &Captures| {\n        match_text!(captures.get(1).unwrap())[0..1].to_owned()\n    },\n    \"age: 2\"\n);\nreplace!(\n    closure_returning_value,\n    replace,\n    r\"[0-9]+\",\n    \"age: 26\",\n    |_captures: &Captures| t!(\"Z\").to_owned(),\n    \"age: Z\"\n);\n\n// See https://github.com/rust-lang/regex/issues/314\nreplace!(\n    match_at_start_replace_with_empty,\n    replace_all,\n    r\"foo\",\n    \"foobar\",\n    t!(\"\"),\n    \"bar\"\n);\n\n// See https://github.com/rust-lang/regex/issues/393\nreplace!(single_empty_match, replace, r\"^\", \"bar\", t!(\"foo\"), \"foobar\");\n\n// See https://github.com/rust-lang/regex/issues/399\nreplace!(\n    capture_longest_possible_name,\n    replace_all,\n    r\"(.)\",\n    \"b\",\n    t!(\"${1}a $1a\"),\n    \"ba \"\n);\n","traces":[{"line":5,"address":[7743718,7744320,7740390,7741664,7744976,7743680,7737072,7736416,7735760,7743040,7735798,7738384,7742390,7734448,7741046,7742352,7739734,7737110,7743078,7745670,7744358,7745632,7735104,7737728,7745014,7738422,7741008,7739696,7737766,7741702,7736454,7735142,7740352,7734486,7739040,7739078],"length":1,"stats":{"Line":432},"fn_name":"first"},{"line":6,"address":[7030069,7018750,7020254,7027829,7027790,7021006,7030030,7027093,7021797,7017246,7018789,7017285,7022510,7022549,7025557,7026286,7024053,7028565,7025518,7018037,7024014,7021045,7029278,7019541,7029317,7024805,7028526,7019502,7020293,7023262,7024766,7023301,7026325,7027054,7021758,7017998],"length":1,"stats":{"Line":288},"fn_name":null},{"line":7,"address":[7741930,7744555,7737308,7739932,7741772,7743121,7743761,7735340,7737809,7742618,7740588,7744401,7743263,7738619,7739121,7741089,7734529,7739276,7741244,7735185,7745057,7745212,7743903,7735996,7735841,7740433,7737964,7737153,7734684,7745713,7736652,7742460,7736497,7738465,7745868,7739777],"length":1,"stats":{"Line":288},"fn_name":null},{"line":80,"address":[7741745],"length":1,"stats":{"Line":8},"fn_name":null},{"line":88,"address":[7816031],"length":1,"stats":{"Line":8},"fn_name":null},{"line":97,"address":[6176336],"length":1,"stats":{"Line":8},"fn_name":"{{closure}}"},{"line":98,"address":[4213578],"length":1,"stats":{"Line":8},"fn_name":null},{"line":107,"address":[4213969,4213872],"length":1,"stats":{"Line":16},"fn_name":"{{closure}}"}],"covered":8,"coverable":8},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","searcher.rs"],"content":"macro_rules! searcher {\n    ($name:ident, $re:expr, $haystack:expr) => (\n        searcher!($name, $re, $haystack, vec vec![]);\n    );\n    ($name:ident, $re:expr, $haystack:expr, $($steps:expr,)*) => (\n        searcher!($name, $re, $haystack, vec vec![$($steps),*]);\n    );\n    ($name:ident, $re:expr, $haystack:expr, $($steps:expr),*) => (\n        searcher!($name, $re, $haystack, vec vec![$($steps),*]);\n    );\n    ($name:ident, $re:expr, $haystack:expr, vec $expect_steps:expr) => (\n        #[test]\n        #[allow(unused_imports)]\n        fn $name() {\n            searcher_expr! {{\n                use std::str::pattern::{Pattern, Searcher};\n                use std::str::pattern::SearchStep::{Match, Reject, Done};\n                let re = regex!($re);\n                let mut se = re.into_searcher($haystack);\n                let mut got_steps = vec![];\n                loop {\n                    match se.next() {\n                        Done => break,\n                        step => { got_steps.push(step); }\n                    }\n                }\n                assert_eq!(got_steps, $expect_steps);\n            }}\n        }\n    );\n}\n\nsearcher!(searcher_empty_regex_empty_haystack, r\"\", \"\", Match(0, 0));\nsearcher!(\n    searcher_empty_regex,\n    r\"\",\n    \"ab\",\n    Match(0, 0),\n    Reject(0, 1),\n    Match(1, 1),\n    Reject(1, 2),\n    Match(2, 2)\n);\nsearcher!(searcher_empty_haystack, r\"\\d\", \"\");\nsearcher!(searcher_one_match, r\"\\d\", \"5\", Match(0, 1));\nsearcher!(searcher_no_match, r\"\\d\", \"a\", Reject(0, 1));\nsearcher!(\n    searcher_two_adjacent_matches,\n    r\"\\d\",\n    \"56\",\n    Match(0, 1),\n    Match(1, 2)\n);\nsearcher!(\n    searcher_two_non_adjacent_matches,\n    r\"\\d\",\n    \"5a6\",\n    Match(0, 1),\n    Reject(1, 2),\n    Match(2, 3)\n);\nsearcher!(searcher_reject_first, r\"\\d\", \"a6\", Reject(0, 1), Match(1, 2));\nsearcher!(\n    searcher_one_zero_length_matches,\n    r\"\\d*\",\n    \"a1b2\",\n    Match(0, 0),  // ^\n    Reject(0, 1), // a\n    Match(1, 2),  // a1\n    Reject(2, 3), // a1b\n    Match(3, 4),  // a1b2\n);\nsearcher!(\n    searcher_many_zero_length_matches,\n    r\"\\d*\",\n    \"a1bbb2\",\n    Match(0, 0),  // ^\n    Reject(0, 1), // a\n    Match(1, 2),  // a1\n    Reject(2, 3), // a1b\n    Match(3, 3),  // a1bb\n    Reject(3, 4), // a1bb\n    Match(4, 4),  // a1bbb\n    Reject(4, 5), // a1bbb\n    Match(5, 6),  // a1bbba\n);\nsearcher!(\n    searcher_unicode,\n    r\".+?\",\n    \"Ⅰ1Ⅱ2\",\n    Match(0, 3),\n    Match(3, 4),\n    Match(4, 7),\n    Match(7, 8)\n);\n","traces":[{"line":14,"address":[7520752,7520800,7520816,7520768,7520784,7520848,7520880,7520896,7520864,7520912,7520832],"length":1,"stats":{"Line":165},"fn_name":"searcher_empty_regex_empty_haystack"}],"covered":1,"coverable":1},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","set.rs"],"content":"matset!(set1, &[\"a\", \"a\"], \"a\", 0, 1);\nmatset!(set2, &[\"a\", \"a\"], \"ba\", 0, 1);\nmatset!(set3, &[\"a\", \"b\"], \"a\", 0);\nmatset!(set4, &[\"a\", \"b\"], \"b\", 1);\nmatset!(set5, &[\"a|b\", \"b|a\"], \"b\", 0, 1);\nmatset!(set6, &[\"foo\", \"oo\"], \"foo\", 0, 1);\nmatset!(set7, &[\"^foo\", \"bar$\"], \"foo\", 0);\nmatset!(set8, &[\"^foo\", \"bar$\"], \"foo bar\", 0, 1);\nmatset!(set9, &[\"^foo\", \"bar$\"], \"bar\", 1);\nmatset!(set10, &[r\"[a-z]+$\", \"foo\"], \"01234 foo\", 0, 1);\nmatset!(set11, &[r\"[a-z]+$\", \"foo\"], \"foo 01234\", 1);\nmatset!(set12, &[r\".*?\", \"a\"], \"zzzzzza\", 0, 1);\nmatset!(set13, &[r\".*\", \"a\"], \"zzzzzza\", 0, 1);\nmatset!(set14, &[r\".*\", \"a\"], \"zzzzzz\", 0);\nmatset!(set15, &[r\"(?-u)\\ba\\b\"], \"hello a bye\", 0);\nmatset!(set16, &[\"a\"], \"a\", 0);\nmatset!(set17, &[\".*a\"], \"a\", 0);\nmatset!(set18, &[\"a\", \"β\"], \"β\", 1);\n\n// regexes that match the empty string\nmatset!(setempty1, &[\"\", \"a\"], \"abc\", 0, 1);\nmatset!(setempty2, &[\"\", \"b\"], \"abc\", 0, 1);\nmatset!(setempty3, &[\"\", \"z\"], \"abc\", 0);\nmatset!(setempty4, &[\"a\", \"\"], \"abc\", 0, 1);\nmatset!(setempty5, &[\"b\", \"\"], \"abc\", 0, 1);\nmatset!(setempty6, &[\"z\", \"\"], \"abc\", 1);\nmatset!(setempty7, &[\"b\", \"(?:)\"], \"abc\", 0, 1);\nmatset!(setempty8, &[\"(?:)\", \"b\"], \"abc\", 0, 1);\nmatset!(setempty9, &[\"c(?:)\", \"b\"], \"abc\", 0, 1);\n\nnomatset!(nset1, &[\"a\", \"a\"], \"b\");\nnomatset!(nset2, &[\"^foo\", \"bar$\"], \"bar foo\");\nnomatset!(\n    nset3,\n    {\n        let xs: &[&str] = &[];\n        xs\n    },\n    \"a\"\n);\nnomatset!(nset4, &[r\"^rooted$\", r\"\\.log$\"], \"notrooted\");\n\n// See: https://github.com/rust-lang/regex/issues/187\n#[test]\nfn regression_subsequent_matches() {\n    let set = regex_set!(&[\"ab\", \"b\"]);\n    let text = text!(\"ba\");\n    assert!(set.matches(text).matched(1));\n    assert!(set.matches(text).matched(1));\n}\n\n#[test]\nfn get_set_patterns() {\n    let set = regex_set!(&[\"a\", \"b\"]);\n    assert_eq!(vec![\"a\", \"b\"], set.patterns());\n}\n","traces":[{"line":1,"address":[8553913],"length":1,"stats":{"Line":8},"fn_name":null},{"line":2,"address":[8555161],"length":1,"stats":{"Line":8},"fn_name":null},{"line":3,"address":[8556409],"length":1,"stats":{"Line":8},"fn_name":null},{"line":4,"address":[8557641],"length":1,"stats":{"Line":8},"fn_name":null},{"line":5,"address":[8558873],"length":1,"stats":{"Line":8},"fn_name":null},{"line":6,"address":[8560121],"length":1,"stats":{"Line":8},"fn_name":null},{"line":7,"address":[8561369],"length":1,"stats":{"Line":8},"fn_name":null},{"line":8,"address":[8562601],"length":1,"stats":{"Line":8},"fn_name":null},{"line":9,"address":[8563849],"length":1,"stats":{"Line":8},"fn_name":null},{"line":10,"address":[8565081],"length":1,"stats":{"Line":8},"fn_name":null},{"line":11,"address":[8566329],"length":1,"stats":{"Line":8},"fn_name":null},{"line":12,"address":[8567561],"length":1,"stats":{"Line":8},"fn_name":null},{"line":13,"address":[8568809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":14,"address":[8570057],"length":1,"stats":{"Line":8},"fn_name":null},{"line":15,"address":[8571289],"length":1,"stats":{"Line":8},"fn_name":null},{"line":16,"address":[8572537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":17,"address":[8573785],"length":1,"stats":{"Line":8},"fn_name":null},{"line":18,"address":[8575033],"length":1,"stats":{"Line":8},"fn_name":null},{"line":21,"address":[8576265],"length":1,"stats":{"Line":8},"fn_name":null},{"line":22,"address":[8577513],"length":1,"stats":{"Line":8},"fn_name":null},{"line":23,"address":[8578761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":24,"address":[8579993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":25,"address":[8581241],"length":1,"stats":{"Line":8},"fn_name":null},{"line":26,"address":[8582489],"length":1,"stats":{"Line":8},"fn_name":null},{"line":27,"address":[8583721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":28,"address":[8584969],"length":1,"stats":{"Line":8},"fn_name":null},{"line":29,"address":[8586217],"length":1,"stats":{"Line":8},"fn_name":null},{"line":31,"address":[8587465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":32,"address":[8588569],"length":1,"stats":{"Line":8},"fn_name":null},{"line":36,"address":[8589677],"length":1,"stats":{"Line":8},"fn_name":null},{"line":41,"address":[8590793],"length":1,"stats":{"Line":8},"fn_name":null},{"line":45,"address":[8591776,8591805],"length":1,"stats":{"Line":24},"fn_name":"regression_subsequent_matches"},{"line":46,"address":[8591783,8591820],"length":1,"stats":{"Line":16},"fn_name":null},{"line":47,"address":[8592019],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[8592040,8592229,8592112],"length":1,"stats":{"Line":16},"fn_name":null},{"line":49,"address":[8592361,8592195,8592262],"length":1,"stats":{"Line":16},"fn_name":null},{"line":53,"address":[8592464,8592493],"length":1,"stats":{"Line":24},"fn_name":"get_set_patterns"},{"line":54,"address":[8592471,8592508],"length":1,"stats":{"Line":16},"fn_name":null},{"line":55,"address":[8592635,8592716],"length":1,"stats":{"Line":16},"fn_name":null}],"covered":39,"coverable":39},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","shortest_match.rs"],"content":"macro_rules! shortmat {\n    ($name:ident, $re:expr, $text:expr, $shortest_match:expr) => {\n        #[test]\n        fn $name() {\n            let text = text!($text);\n            let re = regex!($re);\n            assert_eq!($shortest_match, re.shortest_match(text));\n        }\n    };\n}\n\nshortmat!(t01, r\"a+\", r\"aa\", Some(1));\n// Test that the reverse suffix optimization gets it right.\nshortmat!(t02, r\".*(?:abcd)+\", r\"abcdabcd\", Some(4));\n","traces":[{"line":4,"address":[4274021,4273984,4273989,4274016],"length":1,"stats":{"Line":12},"fn_name":"{{closure}}"},{"line":5,"address":[7401398,7400662],"length":1,"stats":{"Line":2},"fn_name":null},{"line":6,"address":[5998791,5998119,5998073,5998745],"length":1,"stats":{"Line":6},"fn_name":null},{"line":7,"address":[5998334,5998812,5999006,5998140,5998356,5999028],"length":1,"stats":{"Line":8},"fn_name":null},{"line":12,"address":[5998053],"length":1,"stats":{"Line":1},"fn_name":null},{"line":14,"address":[5998725],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":6,"coverable":6},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","suffix_reverse.rs"],"content":"mat!(t01, r\".*abcd\", r\"abcd\", Some((0, 4)));\nmat!(t02, r\".*(?:abcd)+\", r\"abcd\", Some((0, 4)));\nmat!(t03, r\".*(?:abcd)+\", r\"abcdabcd\", Some((0, 8)));\nmat!(t04, r\".*(?:abcd)+\", r\"abcdxabcd\", Some((0, 9)));\nmat!(t05, r\".*x(?:abcd)+\", r\"abcdxabcd\", Some((0, 9)));\nmat!(t06, r\"[^abcd]*x(?:abcd)+\", r\"abcdxabcd\", Some((4, 9)));\n","traces":[{"line":1,"address":[4973017,4974275],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2,"address":[4566240,4564873],"length":1,"stats":{"Line":13},"fn_name":null},{"line":3,"address":[6218382,6219772,6218420],"length":1,"stats":{"Line":13},"fn_name":null},{"line":4,"address":[6302980,6302942,6304252],"length":1,"stats":{"Line":13},"fn_name":null},{"line":5,"address":[4982595,4981337],"length":1,"stats":{"Line":13},"fn_name":null},{"line":6,"address":[5011641,5013008],"length":1,"stats":{"Line":13},"fn_name":null}],"covered":6,"coverable":6},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_backtrack.rs"],"content":"#![cfg_attr(feature = \"pattern\", feature(pattern))]\n\nextern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re)\n            .bounded_backtracking()\n            .build()\n            .map(|e| e.into_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re)\n            .bounded_backtracking()\n            .build()\n            .map(|e| e.into_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_str.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod api_str;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod searcher;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":12,"addresslength":1,"stats":{"Line":1456},"fn_name":"{{closure}}"},{"line":28,"address":[8293712,8295511,8293488,8295056,8292375,8292256,8293159,8294048,8295287,8292480,8295504,8292368,8293264,8294384,8295623,8295175,8293047,8293495,8293600,8294503,8293719,8293383,8293271,8294496,8294167,8293824,8294391,8295168,8293607,8292935,8295399,8295728,8292823,8295616,8292592,8293943,8294727,8294951,8294615,8295280,8295735,8295840,8294160,8292816,8293152,8295063,8293040,8292711,8292704,8294279,8294944,8295847,8294839,8294608,8292487,8295392,8294720,8292263,8293831,8293376,8292599,8294055,8292928,8293936,8294832,8294272],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_backtrack_bytes.rs"],"content":"extern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re)\n            .bounded_backtracking()\n            .only_utf8(false)\n            .build()\n            .map(|e| e.into_byte_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re)\n            .bounded_backtracking()\n            .only_utf8(false)\n            .build()\n            .map(|e| e.into_byte_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_bytes.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod bytes;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_ascii;\n","traces":[{"line":11,"address":[4212023,4212135,4213136,4212807,4213367,4212128,4213472,4213479,4213255,4213143,4214151,4214039,4214256,4212576,4212471,4212912,4212688,4212247,4212240,4212464,4214263,4213799,4213792,4212016,4213031,4213248,4212800,4212583,4214144,4212352,4212359,4213024,4214032,4212695,4212919,4213360],"length":1,"stats":{"Line":1510},"fn_name":"{{closure}}"},{"line":28,"address":[8678848,8677847,8678960,8676615,8677056,8678400,8678624,8675600,8678967,8678071,8675607,8676727,8676167,8676048,8677175,8676055,8676391,8677399,8678736,8677728,8675824,8677952,8676279,8676951,8678519,8677959,8678295,8679079,8676496,8678288,8676832,8679072,8676160,8676944,8678512,8678407,8677623,8676384,8677280,8679184,8678064,8677735,8675831,8678631,8675943,8676608,8679191,8677504,8676720,8676272,8678743,8677168,8677616,8676503,8676839,8678855,8675712,8675936,8677392,8677063,8678176,8677287,8675719,8677840,8678183,8677511],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_backtrack_utf8bytes.rs"],"content":"#![cfg_attr(feature = \"pattern\", feature(pattern))]\n\nextern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re)\n            .bounded_backtracking()\n            .bytes(true)\n            .build()\n            .map(|e| e.into_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re)\n            .bounded_backtracking()\n            .bytes(true)\n            .build()\n            .map(|e| e.into_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_str.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod api_str;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod searcher;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":13,"address":[4812727,4812071,4812295,4811847,4811280,4811952,4811175,4812176,4813127,4812407,4811063,4813008,4811056,4811728,4812288,4811287,4811392,4811511,4811840,4811959,4811623,4812720,4811616,4812903,4813015,4812183,4811735,4811168,4810951,4810944,4812400,4811399,4812064,4813120,4811504,4812896],"length":1,"stats":{"Line":1456},"fn_name":"{{closure}}"},{"line":30,"address":[5859223,5860119,5860455,5860896,5859776,5859664,5860784,5858551,5861127,5861911,5858887,5860679,5859895,5860672,5861687,5859104,5860112,5861344,5861463,5859111,5859328,5859783,5858992,5858656,5859440,5860567,5861239,5860231,5860336,5861568,5861799,5858663,5861232,5861792,5862023,5858775,5859888,5860903,5859447,5860791,5861456,5861351,5861904,5862016,5860343,5861120,5859552,5860224,5858544,5859559,5861680,5860000,5858999,5858768,5860560,5858880,5859216,5859335,5858439,5861008,5859671,5858432,5861015,5860007,5860448,5861575],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_crates_regex.rs"],"content":"extern crate quickcheck;\nextern crate regex;\n\n/*\n * This test is a minimal version of <rofl_0> and <subdiff_0>\n *\n * Once this bug gets fixed, uncomment rofl_0 and subdiff_0\n * (in `tests/crates_regex.rs`).\n#[test]\nfn word_boundary_backtracking_default_mismatch() {\n    use regex::internal::ExecBuilder;\n\n    let backtrack_re = ExecBuilder::new(r\"\\b\")\n        .bounded_backtracking()\n        .build()\n        .map(|exec| exec.into_regex())\n        .map_err(|err| format!(\"{}\", err))\n        .unwrap();\n\n    let default_re = ExecBuilder::new(r\"\\b\")\n        .build()\n        .map(|exec| exec.into_regex())\n        .map_err(|err| format!(\"{}\", err))\n        .unwrap();\n\n    let input = \"䅅\\\\u{a0}\";\n\n    let fi1 = backtrack_re.find_iter(input);\n    let fi2 = default_re.find_iter(input);\n    for (m1, m2) in fi1.zip(fi2) {\n        assert_eq!(m1, m2);\n    }\n}\n*/\n\nmod consistent;\n\nmod crates_regex {\n\n    macro_rules! consistent {\n        ($test_name:ident, $regex_src:expr) => {\n            #[test]\n            fn $test_name() {\n                use super::consistent::backends_are_consistent;\n\n                if option_env!(\"RUST_REGEX_RANDOM_TEST\").is_some() {\n                    match backends_are_consistent($regex_src) {\n                        Ok(_) => {}\n                        Err(err) => panic!(\"{}\", err),\n                    }\n                }\n            }\n        };\n    }\n\n    include!(\"crates_regex.rs\");\n}\n","traces":[{"line":43,"addresslength":1,"stats":{"Line":3108},"fn_name":"autoshutdown_0"},{"line":46,"addresslength":1,"stats":{"Line":1036},"fn_name":null},{"line":47,"addresslength":1,"stats":{"Line":0},"fn_name":null},{"line":48,"addresslength":1,"stats":{"Line":0},"fn_name":null},{"line":49,"addresslength":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":5},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_default.rs"],"content":"#![cfg_attr(feature = \"pattern\", feature(pattern))]\n\nextern crate rand;\nextern crate regex;\n\n// Due to macro scoping rules, this definition only applies for the modules\n// defined below. Effectively, it allows us to use the same tests for both\n// native and dynamic regexes.\n//\n// This is also used to test the various matching engines. This one exercises\n// the normal code path which automatically chooses the engine based on the\n// regex and the input. Other dynamic tests explicitly set the engine to use.\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::Regex;\n        Regex::new($re)\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::RegexSet;\n        RegexSet::new($re)\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_str.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod api_str;\nmod crazy;\nmod flags;\nmod fowler;\nmod misc;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod searcher;\nmod set;\nmod shortest_match;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n\n#[test]\nfn disallow_non_utf8() {\n    assert!(regex::Regex::new(r\"(?-u)\\xFF\").is_err());\n    assert!(regex::Regex::new(r\"(?-u).\").is_err());\n    assert!(regex::Regex::new(r\"(?-u)[\\xFF]\").is_err());\n    assert!(regex::Regex::new(r\"(?-u)☃\").is_err());\n}\n\n#[test]\nfn disallow_octal() {\n    assert!(regex::Regex::new(r\"\\0\").is_err());\n}\n\n#[test]\nfn allow_octal() {\n    assert!(regex::RegexBuilder::new(r\"\\0\").octal(true).build().is_ok());\n}\n\n#[test]\nfn oibits() {\n    use regex::bytes;\n    use regex::{Regex, RegexBuilder};\n    use std::panic::UnwindSafe;\n\n    fn assert_send<T: Send>() {}\n    fn assert_sync<T: Sync>() {}\n    fn assert_unwind_safe<T: UnwindSafe>() {}\n\n    assert_send::<Regex>();\n    assert_sync::<Regex>();\n    assert_unwind_safe::<Regex>();\n    assert_send::<RegexBuilder>();\n    assert_sync::<RegexBuilder>();\n    assert_unwind_safe::<RegexBuilder>();\n\n    assert_send::<bytes::Regex>();\n    assert_sync::<bytes::Regex>();\n    assert_unwind_safe::<bytes::Regex>();\n    assert_send::<bytes::RegexBuilder>();\n    assert_sync::<bytes::RegexBuilder>();\n    assert_unwind_safe::<bytes::RegexBuilder>();\n}\n\n// See: https://github.com/rust-lang/regex/issues/568\n#[test]\nfn oibits_regression() {\n    use regex::Regex;\n    use std::panic;\n\n    let _ = panic::catch_unwind(|| Regex::new(\"a\").unwrap());\n}\n","traces":[{"line":65,"address":[6180672,6180677],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":66,"address":[7391575,7391658,7391534],"length":1,"stats":{"Line":2},"fn_name":null},{"line":67,"address":[7391637,7391782,7391693],"length":1,"stats":{"Line":2},"fn_name":null},{"line":68,"address":[7391915,7391758,7391820],"length":1,"stats":{"Line":2},"fn_name":null},{"line":69,"address":[7392023,7391953,7391891],"length":1,"stats":{"Line":2},"fn_name":null},{"line":73,"address":[6180704,6180709],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":74,"address":[7392155,7392193,7392253],"length":1,"stats":{"Line":2},"fn_name":null},{"line":78,"address":[7392304,7392339],"length":1,"stats":{"Line":3},"fn_name":"allow_octal"},{"line":79,"address":[7392318,7392354,7392493],"length":1,"stats":{"Line":2},"fn_name":null},{"line":83,"address":[6180773,6180768],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":88,"address":[6180800,6180817,6180832,6180833,6180801,6180849,6180848,6180816],"length":1,"stats":{"Line":4},"fn_name":"assert_send<regex::re_builder::bytes::RegexBuilder>"},{"line":89,"address":[6180896,6180897,6180864,6180865,6180880,6180912,6180913,6180881],"length":1,"stats":{"Line":4},"fn_name":"assert_sync<regex::re_bytes::Regex>"},{"line":90,"address":[6180960,6180945,6180976,6180928,6180929,6180961,6180944,6180977],"length":1,"stats":{"Line":4},"fn_name":"assert_unwind_safe<regex::re_bytes::Regex>"},{"line":92,"address":[7392561],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[7392566],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[7392571],"length":1,"stats":{"Line":1},"fn_name":null},{"line":95,"address":[7392576],"length":1,"stats":{"Line":1},"fn_name":null},{"line":96,"address":[7392581],"length":1,"stats":{"Line":1},"fn_name":null},{"line":97,"address":[7392586],"length":1,"stats":{"Line":1},"fn_name":null},{"line":99,"address":[7392591],"length":1,"stats":{"Line":1},"fn_name":null},{"line":100,"address":[7392596],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[7392601],"length":1,"stats":{"Line":1},"fn_name":null},{"line":102,"address":[7392606],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[7392611],"length":1,"stats":{"Line":1},"fn_name":null},{"line":104,"address":[7392616],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[6180997,6180992],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":113,"address":[6181024,6181038],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"}],"covered":27,"coverable":27},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_default_bytes.rs"],"content":"extern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::bytes::Regex;\n        Regex::new($re)\n    }};\n}\n\nmacro_rules! regex_set_new {\n    ($res:expr) => {{\n        use regex::bytes::RegexSet;\n        RegexSet::new($res)\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_bytes.rs\");\ninclude!(\"macros.rs\");\n\n// A silly wrapper to make it possible to write and match raw bytes.\nstruct R<'a>(&'a [u8]);\nimpl<'a> R<'a> {\n    fn as_bytes(&self) -> &'a [u8] {\n        self.0\n    }\n}\n\n// See: https://github.com/rust-lang/regex/issues/321\n//\n// These tests are here because they do not have the same behavior in every\n// regex engine.\nmat!(invalid_utf8_nfa1, r\".\", R(b\"\\xD4\\xC2\\x65\\x2B\\x0E\\xFE\"), Some((2, 3)));\nmat!(invalid_utf8_nfa2, r\"${2}ä\", R(b\"\\xD4\\xC2\\x65\\x2B\\x0E\\xFE\"), None);\nmat!(\n    invalid_utf8_nfa3,\n    r\".\",\n    R(b\"\\x0A\\xDB\\x82\\x6E\\x33\\x01\\xDD\\x33\\xCD\"),\n    Some((1, 3))\n);\nmat!(\n    invalid_utf8_nfa4,\n    r\"${2}ä\",\n    R(b\"\\x0A\\xDB\\x82\\x6E\\x33\\x01\\xDD\\x33\\xCD\"),\n    None\n);\n\nmod api;\nmod bytes;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod set;\nmod shortest_match;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":37,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[5130262,5131520,5130199],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[5132231,5132294],"length":1,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[5134215],"length":1,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[5134278],"length":1,"stats":{"Line":1},"fn_name":null},{"line":57,"address":[5136247],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[5136310],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":8,"coverable":8},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_nfa.rs"],"content":"#![cfg_attr(feature = \"pattern\", feature(pattern))]\n\nextern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re).nfa().build().map(|e| e.into_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re).nfa().build().map(|e| e.into_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_str.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod api_str;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod searcher;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":9,"address":[4217783,4215568,4216695,4217111,4218000,4218896,4216775,4219456,4215952,4216768,4219575,4217552,4216615,4214832,4217671,4220023,4218007,4215024,4217664,4218336,4219239,4216992,4216503,4214256,4215959,4215376,4216608,4216999,4214647,4218119,4218224,4218455,4218448,4216688,4218784,4219015,4219344,4219232,4219351,4219799,4219904,4214263,4220135,4219680,4217328,4214640,4218112,4216151,4216496,4217888,4218567,4219687,4217335,4219008,4220128,4216144,4215760,4219463,4215767,4217104,4218560,4214448,4215223,4216880,4218343,4216887,4219120,4214455,4215575,4219568,4219911,4217776,4218231,4219792,4219127,4218672,4215216,4215383,4217440,4214839,4215031,4217216,4220016,4217895,4217447,4217559,4218903,4218791,4217223,4218679],"length":1,"stats":{"Line":1456},"fn_name":"{{closure}}"},{"line":22,"address":[5005399,5005616,5005168,5006519,5005840,5004951,5005063,5004608,5006071,5004720,5004832,5006960,5004384,5004839,5005392,5006736,5005280,5006967,5007296,5004279,5005504,5006183,5006288,5006064,5004055,5005959,5007079,5005287,5004167,5006743,5007415,5005056,5004727,5006407,5004615,5005623,5007184,5004048,5004944,5007303,5003831,5004496,5005735,5006512,5006855,5006295,5004391,5005847,5006176,5007191,5005728,5003936,5004272,5006631,5003943,5005511,5005175,5006400,5006848,5004160,5007408,5006624,5005952,5007072,5003824,5004503],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_nfa_bytes.rs"],"content":"extern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re)\n            .nfa()\n            .only_utf8(false)\n            .build()\n            .map(|e| e.into_byte_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re)\n            .nfa()\n            .only_utf8(false)\n            .build()\n            .map(|e| e.into_byte_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_bytes.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod bytes;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":11,"address":[4213024,4213031,4212208,4212215,4212752,4211936,4211943,4213303,4212480,4212487,4213296,4212759],"length":1,"stats":{"Line":1506},"fn_name":"{{closure}}"},{"line":28,"address":[8659936,8662743,8659831,8660272,8660832,8661175,8661616,8662064,8660720,8661728,8662183,8660503,8660167,8659383,8659495,8660951,8659152,8661623,8659159,8661399,8660727,8662631,8661952,8659376,8661735,8660944,8659600,8662519,8659824,8659607,8661168,8660384,8662624,8661287,8660048,8661063,8661847,8661056,8660391,8661504,8659712,8662400,8662512,8659264,8662071,8660496,8661959,8660608,8662407,8662176,8659271,8661840,8662288,8659488,8659943,8661392,8661511,8662736,8660839,8660615,8659719,8660055,8660160,8660279,8661280,8662295],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","test_nfa_utf8bytes.rs"],"content":"#![cfg_attr(feature = \"pattern\", feature(pattern))]\n\nextern crate rand;\nextern crate regex;\n\nmacro_rules! regex_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new($re).nfa().bytes(true).build().map(|e| e.into_regex())\n    }};\n}\n\nmacro_rules! regex {\n    ($re:expr) => {\n        regex_new!($re).unwrap()\n    };\n}\n\nmacro_rules! regex_set_new {\n    ($re:expr) => {{\n        use regex::internal::ExecBuilder;\n        ExecBuilder::new_many($re)\n            .nfa()\n            .bytes(true)\n            .build()\n            .map(|e| e.into_regex_set())\n    }};\n}\n\nmacro_rules! regex_set {\n    ($res:expr) => {\n        regex_set_new!($res).unwrap()\n    };\n}\n\n// Must come before other module definitions.\ninclude!(\"macros_str.rs\");\ninclude!(\"macros.rs\");\n\nmod api;\nmod api_str;\nmod crazy;\nmod flags;\nmod fowler;\nmod multiline;\nmod noparse;\nmod regression;\nmod replace;\nmod searcher;\nmod set;\nmod suffix_reverse;\n#[cfg(feature = \"unicode\")]\nmod unicode;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary;\n#[cfg(feature = \"unicode-perl\")]\nmod word_boundary_unicode;\n","traces":[{"line":9,"address":[4228592,4227703,4226688,4228256,4229040,4224135,4223936,4228032,4227479,4227584,4223559,4224487,4228480,4223552,4223744,4223360,4227360,4228368,4223168,4224864,4225408,4226016,4228823,4225607,4224295,4227815,4229047,4225904,4226023,4227472,4227248,4227920,4225687,4228935,4224672,4225056,4225680,4225063,4226240,4226352,4227024,4228599,4223943,4226135,4228816,4228711,4225799,4226359,4227591,4224288,4224871,4228928,4227255,4225600,4223751,4224480,4226919,4227136,4228375,4226695,4223175,4226807,4227808,4226912,4228039,4226247,4226800,4226464,4224679,4227696,4228144,4228151,4226583,4224128,4223367,4225415,4226128,4228263,4226471,4228487,4227927,4227367,4228704,4225792,4226576,4225520,4225527,4227031,4225911,4227143],"length":1,"stats":{"Line":1456},"fn_name":"{{closure}}"},{"line":26,"address":[7229703,7227799,7228688,7228023,7229248,7230480,7227456,7229591,7228352,7230151,7228240,7227344,7228919,7229584,7230368,7229696,7229479,7227127,7229808,7228576,7230704,7227680,7228128,7228800,7230487,7230256,7230599,7228807,7228135,7230032,7227687,7228471,7228583,7229360,7229024,7227568,7230263,7229136,7227120,7227463,7227575,7227792,7229472,7228016,7230144,7227911,7229255,7229920,7228912,7229031,7229815,7227904,7229143,7230711,7227232,7230592,7229367,7228359,7229927,7227239,7230039,7227351,7228464,7228247,7228695,7230375],"length":1,"stats":{"Line":66},"fn_name":"{{closure}}"}],"covered":2,"coverable":2},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","unicode.rs"],"content":"mat!(uni_literal, r\"☃\", \"☃\", Some((0, 3)));\nmat!(uni_literal_plus, r\"☃+\", \"☃\", Some((0, 3)));\nmat!(uni_literal_casei_plus, r\"(?i)☃+\", \"☃\", Some((0, 3)));\nmat!(uni_class_plus, r\"[☃Ⅰ]+\", \"☃\", Some((0, 3)));\nmat!(uni_one, r\"\\pN\", \"Ⅰ\", Some((0, 3)));\nmat!(uni_mixed, r\"\\pN+\", \"Ⅰ1Ⅱ2\", Some((0, 8)));\nmat!(uni_not, r\"\\PN+\", \"abⅠ\", Some((0, 2)));\nmat!(uni_not_class, r\"[\\PN]+\", \"abⅠ\", Some((0, 2)));\nmat!(uni_not_class_neg, r\"[^\\PN]+\", \"abⅠ\", Some((2, 5)));\nmat!(uni_case, r\"(?i)Δ\", \"δ\", Some((0, 2)));\nmat!(uni_case_upper, r\"\\p{Lu}+\", \"ΛΘΓΔα\", Some((0, 8)));\nmat!(uni_case_upper_nocase_flag, r\"(?i)\\p{Lu}+\", \"ΛΘΓΔα\", Some((0, 10)));\nmat!(uni_case_upper_nocase, r\"\\p{L}+\", \"ΛΘΓΔα\", Some((0, 10)));\nmat!(uni_case_lower, r\"\\p{Ll}+\", \"ΛΘΓΔα\", Some((8, 10)));\n\n// Test the Unicode friendliness of Perl character classes.\nmat!(uni_perl_w, r\"\\w+\", \"dδd\", Some((0, 4)));\nmat!(uni_perl_w_not, r\"\\w+\", \"⥡\", None);\nmat!(uni_perl_w_neg, r\"\\W+\", \"⥡\", Some((0, 3)));\nmat!(uni_perl_d, r\"\\d+\", \"1२३9\", Some((0, 8)));\nmat!(uni_perl_d_not, r\"\\d+\", \"Ⅱ\", None);\nmat!(uni_perl_d_neg, r\"\\D+\", \"Ⅱ\", Some((0, 3)));\nmat!(uni_perl_s, r\"\\s+\", \" \", Some((0, 3)));\nmat!(uni_perl_s_not, r\"\\s+\", \"☃\", None);\nmat!(uni_perl_s_neg, r\"\\S+\", \"☃\", Some((0, 3)));\n\n// And do the same for word boundaries.\nmat!(uni_boundary_none, r\"\\d\\b\", \"6δ\", None);\nmat!(uni_boundary_ogham, r\"\\d\\b\", \"6 \", Some((0, 1)));\nmat!(uni_not_boundary_none, r\"\\d\\B\", \"6δ\", Some((0, 1)));\nmat!(uni_not_boundary_ogham, r\"\\d\\B\", \"6 \", None);\n\n// Test general categories.\n//\n// We should test more, but there's a lot. Write a script to generate more of\n// these tests.\nmat!(uni_class_gencat_cased_letter, r\"\\p{Cased_Letter}\", \"Ａ\", Some((0, 3)));\nmat!(\n    uni_class_gencat_close_punctuation,\n    r\"\\p{Close_Punctuation}\",\n    \"❯\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_connector_punctuation,\n    r\"\\p{Connector_Punctuation}\",\n    \"⁀\",\n    Some((0, 3))\n);\nmat!(uni_class_gencat_control, r\"\\p{Control}\", \"\\u{9f}\", Some((0, 2)));\nmat!(\n    uni_class_gencat_currency_symbol,\n    r\"\\p{Currency_Symbol}\",\n    \"￡\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_dash_punctuation,\n    r\"\\p{Dash_Punctuation}\",\n    \"〰\",\n    Some((0, 3))\n);\nmat!(uni_class_gencat_decimal_numer, r\"\\p{Decimal_Number}\", \"𑓙\", Some((0, 4)));\nmat!(\n    uni_class_gencat_enclosing_mark,\n    r\"\\p{Enclosing_Mark}\",\n    \"\\u{A672}\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_final_punctuation,\n    r\"\\p{Final_Punctuation}\",\n    \"⸡\",\n    Some((0, 3))\n);\nmat!(uni_class_gencat_format, r\"\\p{Format}\", \"\\u{E007F}\", Some((0, 4)));\nmat!(\n    uni_class_gencat_initial_punctuation,\n    r\"\\p{Initial_Punctuation}\",\n    \"⸜\",\n    Some((0, 3))\n);\nmat!(uni_class_gencat_letter, r\"\\p{Letter}\", \"Έ\", Some((0, 2)));\nmat!(uni_class_gencat_letter_number, r\"\\p{Letter_Number}\", \"ↂ\", Some((0, 3)));\nmat!(\n    uni_class_gencat_line_separator,\n    r\"\\p{Line_Separator}\",\n    \"\\u{2028}\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_lowercase_letter,\n    r\"\\p{Lowercase_Letter}\",\n    \"ϛ\",\n    Some((0, 2))\n);\nmat!(uni_class_gencat_mark, r\"\\p{Mark}\", \"\\u{E01EF}\", Some((0, 4)));\nmat!(uni_class_gencat_math, r\"\\p{Math}\", \"⋿\", Some((0, 3)));\nmat!(\n    uni_class_gencat_modifier_letter,\n    r\"\\p{Modifier_Letter}\",\n    \"𖭃\",\n    Some((0, 4))\n);\nmat!(\n    uni_class_gencat_modifier_symbol,\n    r\"\\p{Modifier_Symbol}\",\n    \"🏿\",\n    Some((0, 4))\n);\nmat!(\n    uni_class_gencat_nonspacing_mark,\n    r\"\\p{Nonspacing_Mark}\",\n    \"\\u{1E94A}\",\n    Some((0, 4))\n);\nmat!(uni_class_gencat_number, r\"\\p{Number}\", \"⓿\", Some((0, 3)));\nmat!(\n    uni_class_gencat_open_punctuation,\n    r\"\\p{Open_Punctuation}\",\n    \"｟\",\n    Some((0, 3))\n);\nmat!(uni_class_gencat_other, r\"\\p{Other}\", \"\\u{bc9}\", Some((0, 3)));\nmat!(uni_class_gencat_other_letter, r\"\\p{Other_Letter}\", \"ꓷ\", Some((0, 3)));\nmat!(uni_class_gencat_other_number, r\"\\p{Other_Number}\", \"㉏\", Some((0, 3)));\nmat!(\n    uni_class_gencat_other_punctuation,\n    r\"\\p{Other_Punctuation}\",\n    \"𞥞\",\n    Some((0, 4))\n);\nmat!(uni_class_gencat_other_symbol, r\"\\p{Other_Symbol}\", \"⅌\", Some((0, 3)));\nmat!(\n    uni_class_gencat_paragraph_separator,\n    r\"\\p{Paragraph_Separator}\",\n    \"\\u{2029}\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_private_use,\n    r\"\\p{Private_Use}\",\n    \"\\u{10FFFD}\",\n    Some((0, 4))\n);\nmat!(uni_class_gencat_punctuation, r\"\\p{Punctuation}\", \"𑁍\", Some((0, 4)));\nmat!(uni_class_gencat_separator, r\"\\p{Separator}\", \"\\u{3000}\", Some((0, 3)));\nmat!(\n    uni_class_gencat_space_separator,\n    r\"\\p{Space_Separator}\",\n    \"\\u{205F}\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_spacing_mark,\n    r\"\\p{Spacing_Mark}\",\n    \"\\u{16F7E}\",\n    Some((0, 4))\n);\nmat!(uni_class_gencat_symbol, r\"\\p{Symbol}\", \"⯈\", Some((0, 3)));\nmat!(\n    uni_class_gencat_titlecase_letter,\n    r\"\\p{Titlecase_Letter}\",\n    \"ῼ\",\n    Some((0, 3))\n);\nmat!(\n    uni_class_gencat_unassigned,\n    r\"\\p{Unassigned}\",\n    \"\\u{10FFFF}\",\n    Some((0, 4))\n);\nmat!(\n    uni_class_gencat_uppercase_letter,\n    r\"\\p{Uppercase_Letter}\",\n    \"Ꝋ\",\n    Some((0, 3))\n);\n\n// Test a smattering of properties.\nmat!(uni_class_prop_emoji1, r\"\\p{Emoji}\", \"\\u{23E9}\", Some((0, 3)));\nmat!(uni_class_prop_emoji2, r\"\\p{emoji}\", \"\\u{1F21A}\", Some((0, 4)));\nmat!(\n    uni_class_prop_picto1,\n    r\"\\p{extendedpictographic}\",\n    \"\\u{1FA6E}\",\n    Some((0, 4))\n);\nmat!(\n    uni_class_prop_picto2,\n    r\"\\p{extendedpictographic}\",\n    \"\\u{1FFFD}\",\n    Some((0, 4))\n);\n\n// grapheme_cluster_break\nmat!(\n    uni_class_gcb_prepend,\n    r\"\\p{grapheme_cluster_break=prepend}\",\n    \"\\u{11D46}\",\n    Some((0, 4))\n);\nmat!(\n    uni_class_gcb_ri1,\n    r\"\\p{gcb=regional_indicator}\",\n    \"\\u{1F1E6}\",\n    Some((0, 4))\n);\nmat!(uni_class_gcb_ri2, r\"\\p{gcb=ri}\", \"\\u{1F1E7}\", Some((0, 4)));\nmat!(\n    uni_class_gcb_ri3,\n    r\"\\p{gcb=regionalindicator}\",\n    \"\\u{1F1FF}\",\n    Some((0, 4))\n);\nmat!(uni_class_gcb_lvt, r\"\\p{gcb=lvt}\", \"\\u{C989}\", Some((0, 3)));\nmat!(uni_class_gcb_zwj, r\"\\p{gcb=zwj}\", \"\\u{200D}\", Some((0, 3)));\n\n// word_break\nmat!(uni_class_wb1, r\"\\p{word_break=Hebrew_Letter}\", \"\\u{FB46}\", Some((0, 3)));\nmat!(uni_class_wb2, r\"\\p{wb=hebrewletter}\", \"\\u{FB46}\", Some((0, 3)));\nmat!(uni_class_wb3, r\"\\p{wb=ExtendNumLet}\", \"\\u{FF3F}\", Some((0, 3)));\nmat!(uni_class_wb4, r\"\\p{wb=WSegSpace}\", \"\\u{3000}\", Some((0, 3)));\nmat!(uni_class_wb5, r\"\\p{wb=numeric}\", \"\\u{1E950}\", Some((0, 4)));\n\n// sentence_break\nmat!(uni_class_sb1, r\"\\p{sentence_break=Lower}\", \"\\u{0469}\", Some((0, 2)));\nmat!(uni_class_sb2, r\"\\p{sb=lower}\", \"\\u{0469}\", Some((0, 2)));\nmat!(uni_class_sb3, r\"\\p{sb=Close}\", \"\\u{FF60}\", Some((0, 3)));\nmat!(uni_class_sb4, r\"\\p{sb=Close}\", \"\\u{1F677}\", Some((0, 4)));\nmat!(uni_class_sb5, r\"\\p{sb=SContinue}\", \"\\u{FF64}\", Some((0, 3)));\n","traces":[{"line":1,"address":[7835696,7834329],"length":1,"stats":{"Line":13},"fn_name":null},{"line":2,"address":[7837888,7836521],"length":1,"stats":{"Line":13},"fn_name":null},{"line":3,"address":[7840080,7838713],"length":1,"stats":{"Line":13},"fn_name":null},{"line":4,"address":[7842272,7840905],"length":1,"stats":{"Line":13},"fn_name":null},{"line":5,"address":[7843097,7844464],"length":1,"stats":{"Line":13},"fn_name":null},{"line":6,"address":[7845289,7846656],"length":1,"stats":{"Line":13},"fn_name":null},{"line":7,"address":[7848848,7847481],"length":1,"stats":{"Line":13},"fn_name":null},{"line":8,"address":[7851040,7849673],"length":1,"stats":{"Line":13},"fn_name":null},{"line":9,"address":[7853232,7851865],"length":1,"stats":{"Line":13},"fn_name":null},{"line":10,"address":[7854057,7855424],"length":1,"stats":{"Line":13},"fn_name":null},{"line":11,"address":[7856249,7857616],"length":1,"stats":{"Line":13},"fn_name":null},{"line":12,"address":[7858441,7859808],"length":1,"stats":{"Line":13},"fn_name":null},{"line":13,"address":[7862000,7860633],"length":1,"stats":{"Line":13},"fn_name":null},{"line":14,"address":[7862825,7864192],"length":1,"stats":{"Line":13},"fn_name":null},{"line":17,"address":[7865017,7866384],"length":1,"stats":{"Line":13},"fn_name":null},{"line":18,"address":[7868520,7867209],"length":1,"stats":{"Line":13},"fn_name":null},{"line":19,"address":[7870720,7869353],"length":1,"stats":{"Line":13},"fn_name":null},{"line":20,"address":[7871545,7872912],"length":1,"stats":{"Line":13},"fn_name":null},{"line":21,"address":[7875048,7873737],"length":1,"stats":{"Line":13},"fn_name":null},{"line":22,"address":[7875881,7877248],"length":1,"stats":{"Line":13},"fn_name":null},{"line":23,"address":[7878073,7879440],"length":1,"stats":{"Line":13},"fn_name":null},{"line":24,"address":[7881576,7880265],"length":1,"stats":{"Line":13},"fn_name":null},{"line":25,"address":[7882409,7883776],"length":1,"stats":{"Line":13},"fn_name":null},{"line":28,"address":[7884601,7885912],"length":1,"stats":{"Line":13},"fn_name":null},{"line":29,"address":[7888112,7886745],"length":1,"stats":{"Line":13},"fn_name":null},{"line":30,"address":[7890304,7888937],"length":1,"stats":{"Line":13},"fn_name":null},{"line":31,"address":[7891129,7892440],"length":1,"stats":{"Line":13},"fn_name":null},{"line":37,"address":[7894640,7893273],"length":1,"stats":{"Line":13},"fn_name":null},{"line":42,"address":[7895465],"length":1,"stats":{"Line":8},"fn_name":null},{"line":48,"address":[7897657],"length":1,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[7899849,7901216],"length":1,"stats":{"Line":13},"fn_name":null},{"line":55,"address":[7902041],"length":1,"stats":{"Line":8},"fn_name":null},{"line":61,"address":[7904233],"length":1,"stats":{"Line":8},"fn_name":null},{"line":63,"address":[7906425,7907792],"length":1,"stats":{"Line":13},"fn_name":null},{"line":68,"address":[7908617],"length":1,"stats":{"Line":8},"fn_name":null},{"line":74,"address":[7910809],"length":1,"stats":{"Line":8},"fn_name":null},{"line":76,"address":[7914368,7913001],"length":1,"stats":{"Line":13},"fn_name":null},{"line":81,"address":[7915193],"length":1,"stats":{"Line":8},"fn_name":null},{"line":83,"address":[7917385,7918752],"length":1,"stats":{"Line":13},"fn_name":null},{"line":84,"address":[7920944,7919577],"length":1,"stats":{"Line":13},"fn_name":null},{"line":89,"address":[7921769],"length":1,"stats":{"Line":8},"fn_name":null},{"line":95,"address":[7923961],"length":1,"stats":{"Line":8},"fn_name":null},{"line":97,"address":[7926153,7927520],"length":1,"stats":{"Line":13},"fn_name":null},{"line":98,"address":[7928345,7929712],"length":1,"stats":{"Line":13},"fn_name":null},{"line":103,"address":[7930537],"length":1,"stats":{"Line":8},"fn_name":null},{"line":109,"address":[7932729],"length":1,"stats":{"Line":8},"fn_name":null},{"line":115,"address":[7934921],"length":1,"stats":{"Line":8},"fn_name":null},{"line":117,"address":[7937113,7938480],"length":1,"stats":{"Line":13},"fn_name":null},{"line":122,"address":[7939305],"length":1,"stats":{"Line":8},"fn_name":null},{"line":124,"address":[7942864,7941497],"length":1,"stats":{"Line":13},"fn_name":null},{"line":125,"address":[7945056,7943689],"length":1,"stats":{"Line":13},"fn_name":null},{"line":126,"address":[7945881,7947248],"length":1,"stats":{"Line":13},"fn_name":null},{"line":131,"address":[7948073],"length":1,"stats":{"Line":8},"fn_name":null},{"line":133,"address":[7951632,7950265],"length":1,"stats":{"Line":13},"fn_name":null},{"line":138,"address":[7952457],"length":1,"stats":{"Line":8},"fn_name":null},{"line":144,"address":[7954649],"length":1,"stats":{"Line":8},"fn_name":null},{"line":146,"address":[7958208,7956841],"length":1,"stats":{"Line":13},"fn_name":null},{"line":147,"address":[7959033,7960400],"length":1,"stats":{"Line":13},"fn_name":null},{"line":152,"address":[7961225],"length":1,"stats":{"Line":8},"fn_name":null},{"line":158,"address":[7963417],"length":1,"stats":{"Line":8},"fn_name":null},{"line":160,"address":[7966976,7965609],"length":1,"stats":{"Line":13},"fn_name":null},{"line":165,"address":[7967801],"length":1,"stats":{"Line":8},"fn_name":null},{"line":171,"address":[7969993],"length":1,"stats":{"Line":8},"fn_name":null},{"line":177,"address":[7972185],"length":1,"stats":{"Line":8},"fn_name":null},{"line":181,"address":[7975744,7974377],"length":1,"stats":{"Line":13},"fn_name":null},{"line":182,"address":[7976569,7977936],"length":1,"stats":{"Line":13},"fn_name":null},{"line":187,"address":[7978761],"length":1,"stats":{"Line":8},"fn_name":null},{"line":193,"address":[7980953],"length":1,"stats":{"Line":8},"fn_name":null},{"line":201,"address":[7983145],"length":1,"stats":{"Line":8},"fn_name":null},{"line":207,"address":[7985337],"length":1,"stats":{"Line":8},"fn_name":null},{"line":209,"address":[7987529,7988896],"length":1,"stats":{"Line":13},"fn_name":null},{"line":214,"address":[7989721],"length":1,"stats":{"Line":8},"fn_name":null},{"line":216,"address":[7991913,7993280],"length":1,"stats":{"Line":13},"fn_name":null},{"line":217,"address":[7995472,7994105],"length":1,"stats":{"Line":13},"fn_name":null},{"line":220,"address":[7996297,7997664],"length":1,"stats":{"Line":13},"fn_name":null},{"line":221,"address":[7998489,7999856],"length":1,"stats":{"Line":13},"fn_name":null},{"line":222,"address":[8002048,8000681],"length":1,"stats":{"Line":13},"fn_name":null},{"line":223,"address":[8002873,8004240],"length":1,"stats":{"Line":13},"fn_name":null},{"line":224,"address":[8005065,8006432],"length":1,"stats":{"Line":13},"fn_name":null},{"line":227,"address":[8007257,8008624],"length":1,"stats":{"Line":13},"fn_name":null},{"line":228,"address":[8009449,8010816],"length":1,"stats":{"Line":13},"fn_name":null},{"line":229,"address":[8013008,8011641],"length":1,"stats":{"Line":13},"fn_name":null},{"line":230,"address":[8013833,8015200],"length":1,"stats":{"Line":13},"fn_name":null},{"line":231,"address":[8016025,8017392],"length":1,"stats":{"Line":13},"fn_name":null}],"covered":84,"coverable":84},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","word_boundary.rs"],"content":"// Many of these are cribbed from RE2's test suite.\n\nmatiter!(wb1, r\"\\b\", \"\");\nmatiter!(wb2, r\"\\b\", \"a\", (0, 0), (1, 1));\nmatiter!(wb3, r\"\\b\", \"ab\", (0, 0), (2, 2));\nmatiter!(wb4, r\"^\\b\", \"ab\", (0, 0));\nmatiter!(wb5, r\"\\b$\", \"ab\", (2, 2));\nmatiter!(wb6, r\"^\\b$\", \"ab\");\nmatiter!(wb7, r\"\\bbar\\b\", \"nobar bar foo bar\", (6, 9), (14, 17));\nmatiter!(wb8, r\"a\\b\", \"faoa x\", (3, 4));\nmatiter!(wb9, r\"\\bbar\", \"bar x\", (0, 3));\nmatiter!(wb10, r\"\\bbar\", \"foo\\nbar x\", (4, 7));\nmatiter!(wb11, r\"bar\\b\", \"foobar\", (3, 6));\nmatiter!(wb12, r\"bar\\b\", \"foobar\\nxxx\", (3, 6));\nmatiter!(wb13, r\"(foo|bar|[A-Z])\\b\", \"foo\", (0, 3));\nmatiter!(wb14, r\"(foo|bar|[A-Z])\\b\", \"foo\\n\", (0, 3));\nmatiter!(wb15, r\"\\b(foo|bar|[A-Z])\", \"foo\", (0, 3));\nmatiter!(wb16, r\"\\b(foo|bar|[A-Z])\\b\", \"X\", (0, 1));\nmatiter!(wb17, r\"\\b(foo|bar|[A-Z])\\b\", \"XY\");\nmatiter!(wb18, r\"\\b(foo|bar|[A-Z])\\b\", \"bar\", (0, 3));\nmatiter!(wb19, r\"\\b(foo|bar|[A-Z])\\b\", \"foo\", (0, 3));\nmatiter!(wb20, r\"\\b(foo|bar|[A-Z])\\b\", \"foo\\n\", (0, 3));\nmatiter!(wb21, r\"\\b(foo|bar|[A-Z])\\b\", \"ffoo bbar N x\", (10, 11));\nmatiter!(wb22, r\"\\b(fo|foo)\\b\", \"fo\", (0, 2));\nmatiter!(wb23, r\"\\b(fo|foo)\\b\", \"foo\", (0, 3));\nmatiter!(wb24, r\"\\b\\b\", \"\");\nmatiter!(wb25, r\"\\b\\b\", \"a\", (0, 0), (1, 1));\nmatiter!(wb26, r\"\\b$\", \"\");\nmatiter!(wb27, r\"\\b$\", \"x\", (1, 1));\nmatiter!(wb28, r\"\\b$\", \"y x\", (3, 3));\nmatiter!(wb29, r\"\\b.$\", \"x\", (0, 1));\nmatiter!(wb30, r\"^\\b(fo|foo)\\b\", \"fo\", (0, 2));\nmatiter!(wb31, r\"^\\b(fo|foo)\\b\", \"foo\", (0, 3));\nmatiter!(wb32, r\"^\\b$\", \"\");\nmatiter!(wb33, r\"^\\b$\", \"x\");\nmatiter!(wb34, r\"^\\b.$\", \"x\", (0, 1));\nmatiter!(wb35, r\"^\\b.\\b$\", \"x\", (0, 1));\nmatiter!(wb36, r\"^^^^^\\b$$$$$\", \"\");\nmatiter!(wb37, r\"^^^^^\\b.$$$$$\", \"x\", (0, 1));\nmatiter!(wb38, r\"^^^^^\\b$$$$$\", \"x\");\nmatiter!(wb39, r\"^^^^^\\b\\b\\b.\\b\\b\\b$$$$$\", \"x\", (0, 1));\nmatiter!(wb40, r\"\\b.+\\b\", \"$$abc$$\", (2, 5));\nmatiter!(wb41, r\"\\b\", \"a b c\", (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5));\n\nmatiter!(nb1, r\"\\Bfoo\\B\", \"n foo xfoox that\", (7, 10));\nmatiter!(nb2, r\"a\\B\", \"faoa x\", (1, 2));\nmatiter!(nb3, r\"\\Bbar\", \"bar x\");\nmatiter!(nb4, r\"\\Bbar\", \"foo\\nbar x\");\nmatiter!(nb5, r\"bar\\B\", \"foobar\");\nmatiter!(nb6, r\"bar\\B\", \"foobar\\nxxx\");\nmatiter!(nb7, r\"(foo|bar|[A-Z])\\B\", \"foox\", (0, 3));\nmatiter!(nb8, r\"(foo|bar|[A-Z])\\B\", \"foo\\n\");\nmatiter!(nb9, r\"\\B\", \"\", (0, 0));\nmatiter!(nb10, r\"\\B\", \"x\");\nmatiter!(nb11, r\"\\B(foo|bar|[A-Z])\", \"foo\");\nmatiter!(nb12, r\"\\B(foo|bar|[A-Z])\\B\", \"xXy\", (1, 2));\nmatiter!(nb13, r\"\\B(foo|bar|[A-Z])\\B\", \"XY\");\nmatiter!(nb14, r\"\\B(foo|bar|[A-Z])\\B\", \"XYZ\", (1, 2));\nmatiter!(nb15, r\"\\B(foo|bar|[A-Z])\\B\", \"abara\", (1, 4));\nmatiter!(nb16, r\"\\B(foo|bar|[A-Z])\\B\", \"xfoo_\", (1, 4));\nmatiter!(nb17, r\"\\B(foo|bar|[A-Z])\\B\", \"xfoo\\n\");\nmatiter!(nb18, r\"\\B(foo|bar|[A-Z])\\B\", \"foo bar vNX\", (9, 10));\nmatiter!(nb19, r\"\\B(fo|foo)\\B\", \"xfoo\", (1, 3));\nmatiter!(nb20, r\"\\B(foo|fo)\\B\", \"xfooo\", (1, 4));\nmatiter!(nb21, r\"\\B\\B\", \"\", (0, 0));\nmatiter!(nb22, r\"\\B\\B\", \"x\");\nmatiter!(nb23, r\"\\B$\", \"\", (0, 0));\nmatiter!(nb24, r\"\\B$\", \"x\");\nmatiter!(nb25, r\"\\B$\", \"y x\");\nmatiter!(nb26, r\"\\B.$\", \"x\");\nmatiter!(nb27, r\"^\\B(fo|foo)\\B\", \"fo\");\nmatiter!(nb28, r\"^\\B(fo|foo)\\B\", \"foo\");\nmatiter!(nb29, r\"^\\B\", \"\", (0, 0));\nmatiter!(nb30, r\"^\\B\", \"x\");\nmatiter!(nb31, r\"^\\B\\B\", \"\", (0, 0));\nmatiter!(nb32, r\"^\\B\\B\", \"x\");\nmatiter!(nb33, r\"^\\B$\", \"\", (0, 0));\nmatiter!(nb34, r\"^\\B$\", \"x\");\nmatiter!(nb35, r\"^\\B.$\", \"x\");\nmatiter!(nb36, r\"^\\B.\\B$\", \"x\");\nmatiter!(nb37, r\"^^^^^\\B$$$$$\", \"\", (0, 0));\nmatiter!(nb38, r\"^^^^^\\B.$$$$$\", \"x\");\nmatiter!(nb39, r\"^^^^^\\B$$$$$\", \"x\");\n\n// These work for both Unicode and ASCII because all matches are reported as\n// byte offsets, and « and » do not correspond to word boundaries at either\n// the character or byte level.\nmatiter!(unicode1, r\"\\bx\\b\", \"«x\", (2, 3));\nmatiter!(unicode2, r\"\\bx\\b\", \"x»\", (0, 1));\n","traces":[{"line":3,"address":[4237432,4238205],"length":1,"stats":{"Line":5},"fn_name":null},{"line":4,"address":[4240280,4238985,4239507],"length":1,"stats":{"Line":13},"fn_name":null},{"line":5,"address":[4241587,4241065,4242360],"length":1,"stats":{"Line":13},"fn_name":null},{"line":6,"address":[4243145,4243619,4244392],"length":1,"stats":{"Line":13},"fn_name":null},{"line":7,"address":[4245177,4246424,4245651],"length":1,"stats":{"Line":13},"fn_name":null},{"line":8,"address":[4247608,4248381],"length":1,"stats":{"Line":5},"fn_name":null},{"line":9,"address":[4249683,4249161,4250456],"length":1,"stats":{"Line":13},"fn_name":null},{"line":10,"address":[4251241,4251715,4252488],"length":1,"stats":{"Line":13},"fn_name":null},{"line":11,"address":[4253747,4253273,4254520],"length":1,"stats":{"Line":13},"fn_name":null},{"line":12,"address":[4256552,4255779,4255305],"length":1,"stats":{"Line":13},"fn_name":null},{"line":13,"address":[4257337,4258584,4257811],"length":1,"stats":{"Line":13},"fn_name":null},{"line":14,"address":[4259369,4260616,4259843],"length":1,"stats":{"Line":13},"fn_name":null},{"line":15,"address":[4261875,4262648,4261401],"length":1,"stats":{"Line":13},"fn_name":null},{"line":16,"address":[4263433,4263907,4264680],"length":1,"stats":{"Line":13},"fn_name":null},{"line":17,"address":[4266712,4265465,4265939],"length":1,"stats":{"Line":13},"fn_name":null},{"line":18,"address":[4267497,4268744,4267971],"length":1,"stats":{"Line":13},"fn_name":null},{"line":19,"address":[4269928,4270701],"length":1,"stats":{"Line":5},"fn_name":null},{"line":20,"address":[4271955,4271481,4272728],"length":1,"stats":{"Line":13},"fn_name":null},{"line":21,"address":[4273513,4273987,4274760],"length":1,"stats":{"Line":13},"fn_name":null},{"line":22,"address":[4275545,4276792,4276019],"length":1,"stats":{"Line":13},"fn_name":null},{"line":23,"address":[4277577,4278824,4278051],"length":1,"stats":{"Line":13},"fn_name":null},{"line":24,"address":[4280856,4280083,4279609],"length":1,"stats":{"Line":13},"fn_name":null},{"line":25,"address":[4281641,4282888,4282115],"length":1,"stats":{"Line":13},"fn_name":null},{"line":26,"address":[4284845,4284072],"length":1,"stats":{"Line":5},"fn_name":null},{"line":27,"address":[4286920,4286147,4285625],"length":1,"stats":{"Line":13},"fn_name":null},{"line":28,"address":[4288877,4288104],"length":1,"stats":{"Line":5},"fn_name":null},{"line":29,"address":[4290904,4289657,4290131],"length":1,"stats":{"Line":13},"fn_name":null},{"line":30,"address":[4292936,4291689,4292163],"length":1,"stats":{"Line":13},"fn_name":null},{"line":31,"address":[4294195,4293721,4294968],"length":1,"stats":{"Line":13},"fn_name":null},{"line":32,"address":[4297000,4296227,4295753],"length":1,"stats":{"Line":13},"fn_name":null},{"line":33,"address":[4299032,4297785,4298259],"length":1,"stats":{"Line":13},"fn_name":null},{"line":34,"address":[4300989,4300216],"length":1,"stats":{"Line":5},"fn_name":null},{"line":35,"address":[4302168,4302941],"length":1,"stats":{"Line":5},"fn_name":null},{"line":36,"address":[4303721,4304968,4304195],"length":1,"stats":{"Line":13},"fn_name":null},{"line":37,"address":[4305753,4306227,4307000],"length":1,"stats":{"Line":13},"fn_name":null},{"line":38,"address":[4308184,4308957],"length":1,"stats":{"Line":5},"fn_name":null},{"line":39,"address":[4309737,4310984,4310211],"length":1,"stats":{"Line":13},"fn_name":null},{"line":40,"address":[4312168,4312941],"length":1,"stats":{"Line":5},"fn_name":null},{"line":41,"address":[4314195,4313721,4314968],"length":1,"stats":{"Line":13},"fn_name":null},{"line":42,"address":[4316227,4317000,4315753],"length":1,"stats":{"Line":13},"fn_name":null},{"line":43,"address":[4318499,4319272,4317785],"length":1,"stats":{"Line":13},"fn_name":null},{"line":45,"address":[4321304,4320531,4320057],"length":1,"stats":{"Line":13},"fn_name":null},{"line":46,"address":[4323336,4322089,4322563],"length":1,"stats":{"Line":13},"fn_name":null},{"line":47,"address":[4324520,4325293],"length":1,"stats":{"Line":5},"fn_name":null},{"line":48,"address":[4326472,4327245],"length":1,"stats":{"Line":5},"fn_name":null},{"line":49,"address":[4329197,4328424],"length":1,"stats":{"Line":5},"fn_name":null},{"line":50,"address":[4331149,4330376],"length":1,"stats":{"Line":5},"fn_name":null},{"line":51,"address":[4331929,4333176,4332403],"length":1,"stats":{"Line":13},"fn_name":null},{"line":52,"address":[4334360,4335133],"length":1,"stats":{"Line":5},"fn_name":null},{"line":53,"address":[4337160,4335913,4336387],"length":1,"stats":{"Line":13},"fn_name":null},{"line":54,"address":[4338344,4339117],"length":1,"stats":{"Line":5},"fn_name":null},{"line":55,"address":[4340296,4341069],"length":1,"stats":{"Line":5},"fn_name":null},{"line":56,"address":[4341849,4342323,4343096],"length":1,"stats":{"Line":13},"fn_name":null},{"line":57,"address":[4344280,4345053],"length":1,"stats":{"Line":5},"fn_name":null},{"line":58,"address":[4346307,4345833,4347080],"length":1,"stats":{"Line":13},"fn_name":null},{"line":59,"address":[4347865,4348339,4349112],"length":1,"stats":{"Line":13},"fn_name":null},{"line":60,"address":[4351144,4349897,4350371],"length":1,"stats":{"Line":13},"fn_name":null},{"line":61,"address":[4353101,4352328],"length":1,"stats":{"Line":5},"fn_name":null},{"line":62,"address":[4355128,4353881,4354355],"length":1,"stats":{"Line":13},"fn_name":null},{"line":63,"address":[4357160,4356387,4355913],"length":1,"stats":{"Line":13},"fn_name":null},{"line":64,"address":[4357945,4358419,4359192],"length":1,"stats":{"Line":13},"fn_name":null},{"line":65,"address":[4360451,4361224,4359977],"length":1,"stats":{"Line":13},"fn_name":null},{"line":66,"address":[4362408,4363181],"length":1,"stats":{"Line":5},"fn_name":null},{"line":67,"address":[4363961,4364435,4365208],"length":1,"stats":{"Line":13},"fn_name":null},{"line":68,"address":[4366392,4367165],"length":1,"stats":{"Line":5},"fn_name":null},{"line":69,"address":[4369117,4368344],"length":1,"stats":{"Line":5},"fn_name":null},{"line":70,"address":[4370296,4371069],"length":1,"stats":{"Line":5},"fn_name":null},{"line":71,"address":[4372248,4373021],"length":1,"stats":{"Line":5},"fn_name":null},{"line":72,"address":[4374973,4374200],"length":1,"stats":{"Line":5},"fn_name":null},{"line":73,"address":[4375753,4376227,4377000],"length":1,"stats":{"Line":13},"fn_name":null},{"line":74,"address":[4378957,4378184],"length":1,"stats":{"Line":5},"fn_name":null},{"line":75,"address":[4379737,4380211,4380984],"length":1,"stats":{"Line":13},"fn_name":null},{"line":76,"address":[4382168,4382941],"length":1,"stats":{"Line":5},"fn_name":null},{"line":77,"address":[4383721,4384195,4384968],"length":1,"stats":{"Line":13},"fn_name":null},{"line":78,"address":[4386152,4386925],"length":1,"stats":{"Line":5},"fn_name":null},{"line":79,"address":[4388104,4388877],"length":1,"stats":{"Line":5},"fn_name":null},{"line":80,"address":[4390829,4390056],"length":1,"stats":{"Line":5},"fn_name":null},{"line":81,"address":[4392856,4392083,4391609],"length":1,"stats":{"Line":13},"fn_name":null},{"line":82,"address":[4394813,4394040],"length":1,"stats":{"Line":5},"fn_name":null},{"line":83,"address":[4395992,4396765],"length":1,"stats":{"Line":5},"fn_name":null},{"line":88,"address":[4398792,4398019,4397545],"length":1,"stats":{"Line":13},"fn_name":null},{"line":89,"address":[4399577,4400824,4400051],"length":1,"stats":{"Line":13},"fn_name":null}],"covered":82,"coverable":82},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","word_boundary_ascii.rs"],"content":"// ASCII word boundaries are completely oblivious to Unicode characters.\n// For Unicode word boundaries, the tests are precisely inverted.\nmatiter!(ascii1, r\"(?-u:\\b)x(?-u:\\b)\", \"áxβ\", (2, 3));\nmatiter!(ascii2, r\"(?-u:\\B)x(?-u:\\B)\", \"áxβ\");\nmatiter!(ascii3, r\"(?-u:\\B)\", \"0\\u{7EF5E}\", (2, 2), (3, 3), (4, 4), (5, 5));\n\n// We still get Unicode word boundaries by default in byte regexes.\nmatiter!(unicode1, r\"\\bx\\b\", \"áxβ\");\nmatiter!(unicode2, r\"\\Bx\\B\", \"áxβ\", (2, 3));\n","traces":[{"line":3,"address":[6562152,6561379,6560905],"length":1,"stats":{"Line":1},"fn_name":null},{"line":4,"address":[6563336,6564109],"length":1,"stats":{"Line":0},"fn_name":null},{"line":5,"address":[6564889,6566280,6565507],"length":1,"stats":{"Line":1},"fn_name":null},{"line":8,"address":[6568237,6567464],"length":1,"stats":{"Line":0},"fn_name":null},{"line":9,"address":[6570264,6569017,6569491],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":3,"coverable":5},{"path":["/","home","drumpt","Desktop","TinyMutator","regex","tests","word_boundary_unicode.rs"],"content":"// Unicode word boundaries know about Unicode characters.\n// For ASCII word boundaries, the tests are precisely inverted.\nmatiter!(unicode1, r\"\\bx\\b\", \"áxβ\");\nmatiter!(unicode2, r\"\\Bx\\B\", \"áxβ\", (2, 3));\n\nmatiter!(ascii1, r\"(?-u:\\b)x(?-u:\\b)\", \"áxβ\", (2, 3));\n","traces":[{"line":3,"address":[8536968,8537741],"length":1,"stats":{"Line":5},"fn_name":null},{"line":4,"address":[8539768,8538521,8538995],"length":1,"stats":{"Line":12},"fn_name":null},{"line":6,"address":[8541027,8541800,8540553],"length":1,"stats":{"Line":12},"fn_name":null}],"covered":3,"coverable":3}]}