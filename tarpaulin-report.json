{"files":[{"path":["/","home","kms","mutagen_test","src","bubblesort.rs"],"content":"pub fn bubblesort_for(arr: &mut [u8]) {\n    let n = arr.len();\n    for _ in 1..n {\n        for i in 1..n {\n            if arr[i - 1] > arr[i] {\n                arr.swap(i - 1, i);\n            }\n        }\n    }\n}\n\npub fn bubblesort_while(arr: &mut [u8]) {\n    let n = arr.len();\n    let mut change = true;\n    while change {\n        change = false;\n        for i in 1..n {\n            if arr[i - 1] > arr[i] {\n                arr.swap(i - 1, i);\n                change = true;\n            }\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn test_bubblesort_for_123() {\n        let mut arr = vec![1, 2, 3];\n        bubblesort_for(&mut arr);\n        assert_eq!(&*arr, [1, 2, 3]);\n    }\n    #[test]\n    fn test_bubblesort_for_321() {\n        let mut arr = vec![3, 2, 1];\n        bubblesort_for(&mut arr);\n        assert_eq!(&*arr, [1, 2, 3]);\n    }\n\n    #[test]\n    fn test_bubblesort_while_123() {\n        let mut arr = vec![1, 2, 3];\n        bubblesort_while(&mut arr);\n        assert_eq!(&*arr, [1, 2, 3]);\n    }\n    #[test]\n    fn test_bubblesort_while_321() {\n        let mut arr = vec![3, 2, 1];\n        bubblesort_while(&mut arr);\n        assert_eq!(&*arr, [1, 2, 3]);\n    }\n}\n","traces":[{"line":1,"address":[4233168],"length":1,"stats":{"Line":2},"fn_name":"bubblesort_for"},{"line":2,"address":[4233201],"length":1,"stats":{"Line":2},"fn_name":null},{"line":3,"address":[4233328,4233219,4233482],"length":1,"stats":{"Line":3},"fn_name":null},{"line":4,"address":[4233487,4233694,4233354],"length":1,"stats":{"Line":3},"fn_name":null},{"line":5,"address":[4233692,4233699,4233521],"length":1,"stats":{"Line":3},"fn_name":null},{"line":6,"address":[4233815,4233650,4233785],"length":1,"stats":{"Line":1},"fn_name":null},{"line":12,"address":[4233824],"length":1,"stats":{"Line":1},"fn_name":"bubblesort_while"},{"line":13,"address":[4233857],"length":1,"stats":{"Line":1},"fn_name":null},{"line":14,"address":[4233875],"length":1,"stats":{"Line":1},"fn_name":null},{"line":15,"address":[4234001,4233880],"length":1,"stats":{"Line":2},"fn_name":null},{"line":16,"address":[4233895],"length":1,"stats":{"Line":1},"fn_name":null},{"line":17,"address":[4234215,4233900,4234003],"length":1,"stats":{"Line":2},"fn_name":null},{"line":18,"address":[4234220,4234037],"length":1,"stats":{"Line":1},"fn_name":null},{"line":19,"address":[4234336,4234166,4234306],"length":1,"stats":{"Line":2},"fn_name":null},{"line":20,"address":[4234210],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[4222432,4222437],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":33,"address":[4209479],"length":1,"stats":{"Line":1},"fn_name":null},{"line":34,"address":[4209554],"length":1,"stats":{"Line":1},"fn_name":null},{"line":35,"address":[4209611,4209769],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[4210112,4210171],"length":1,"stats":{"Line":3},"fn_name":"test_bubblesort_for_321"},{"line":39,"address":[4210119],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[4210194],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[4210409,4210251],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[4210811,4210752],"length":1,"stats":{"Line":3},"fn_name":"test_bubblesort_while_123"},{"line":46,"address":[4210759],"length":1,"stats":{"Line":1},"fn_name":null},{"line":47,"address":[4210834],"length":1,"stats":{"Line":1},"fn_name":null},{"line":48,"address":[4210891,4211049],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[4211392,4211451],"length":1,"stats":{"Line":3},"fn_name":"test_bubblesort_while_321"},{"line":52,"address":[4211399],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[4211474],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[4211531,4211689],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":31,"coverable":31},{"path":["/","home","kms","mutagen_test","src","ggt.rs"],"content":"pub fn ggt_loop(mut a: u32, mut b: u32) -> u32 {\n    loop {\n        if a == 0 {\n            return b;\n        }\n        if b == 0 {\n            return a;\n        }\n        if a > b {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n}\n\npub fn ggt_rec(mut a: u32, mut b: u32) -> u32 {\n    if a == b || a == 0 || b == 0 {\n        return a | b;\n    }\n    if a == 1 || b == 1 {\n        return 1;\n    }\n    if a > b {\n        ggt_rec(a - b, b)\n    } else {\n        ggt_rec(a, b - a)\n    }\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn test_ggt_loop_4_4() {\n        assert_eq!(ggt_loop(4, 4), 4)\n    }\n    #[test]\n    fn test_ggt_loop_3_5() {\n        assert_eq!(ggt_loop(3, 5), 1)\n    }\n    #[test]\n    fn test_ggt_loop_5_3() {\n        assert_eq!(ggt_loop(5, 3), 1)\n    }\n\n    #[test]\n    fn test_ggt_rec_4_4() {\n        assert_eq!(ggt_rec(4, 4), 4)\n    }\n    #[test]\n    fn test_ggt_rec_3_5() {\n        assert_eq!(ggt_rec(3, 5), 1)\n    }\n    #[test]\n    fn test_ggt_rec_5_3() {\n        assert_eq!(ggt_rec(5, 3), 1)\n    }\n    #[test]\n    fn test_ggt_rec_0_2() {\n        assert_eq!(ggt_rec(0, 2), 2)\n    }\n    #[test]\n    fn test_ggt_rec_2_0() {\n        assert_eq!(ggt_rec(2, 0), 2)\n    }\n    #[test]\n    fn test_ggt_rec_2_4() {\n        assert_eq!(ggt_rec(2, 4), 2)\n    }\n}\n","traces":[{"line":1,"address":[4226208],"length":1,"stats":{"Line":3},"fn_name":"ggt_loop"},{"line":2,"address":[4226339],"length":1,"stats":{"Line":3},"fn_name":null},{"line":3,"address":[4226220],"length":1,"stats":{"Line":3},"fn_name":null},{"line":4,"address":[4226236],"length":1,"stats":{"Line":0},"fn_name":null},{"line":6,"address":[4226227],"length":1,"stats":{"Line":3},"fn_name":null},{"line":7,"address":[4226265],"length":1,"stats":{"Line":3},"fn_name":null},{"line":9,"address":[4226253,4226329],"length":1,"stats":{"Line":4},"fn_name":null},{"line":10,"address":[4226341,4226299],"length":1,"stats":{"Line":1},"fn_name":null},{"line":12,"address":[4226335,4226401,4226275,4226371],"length":1,"stats":{"Line":4},"fn_name":null},{"line":17,"address":[4226416],"length":1,"stats":{"Line":1},"fn_name":"ggt_rec"},{"line":18,"address":[4226428],"length":1,"stats":{"Line":1},"fn_name":null},{"line":19,"address":[4226529],"length":1,"stats":{"Line":1},"fn_name":null},{"line":21,"address":[4226514,4226544],"length":1,"stats":{"Line":2},"fn_name":null},{"line":22,"address":[4226590],"length":1,"stats":{"Line":1},"fn_name":null},{"line":24,"address":[4226584,4226663,4226682],"length":1,"stats":{"Line":3},"fn_name":null},{"line":25,"address":[4226689,4226632],"length":1,"stats":{"Line":1},"fn_name":null},{"line":27,"address":[4226749,4226719,4226608,4226673],"length":1,"stats":{"Line":4},"fn_name":null},{"line":37,"address":[4216384],"length":1,"stats":{"Line":3},"fn_name":"test_ggt_loop_4_4"},{"line":38,"address":[4216391,4216493],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[4209221,4209216],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":42,"address":[4216894,4216791],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[4209253,4209248],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":46,"address":[4217191,4217294],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[4217584],"length":1,"stats":{"Line":3},"fn_name":"test_ggt_rec_4_4"},{"line":51,"address":[4217591,4217693],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[4217984],"length":1,"stats":{"Line":3},"fn_name":"test_ggt_rec_3_5"},{"line":55,"address":[4218094,4217991],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[4218384],"length":1,"stats":{"Line":3},"fn_name":"test_ggt_rec_5_3"},{"line":59,"address":[4218494,4218391],"length":1,"stats":{"Line":1},"fn_name":null},{"line":62,"address":[4218784],"length":1,"stats":{"Line":3},"fn_name":"test_ggt_rec_0_2"},{"line":63,"address":[4218891,4218793],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[4209413,4209408],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":67,"address":[4219193,4219291],"length":1,"stats":{"Line":1},"fn_name":null},{"line":70,"address":[4209445,4209440],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":71,"address":[4219694,4219591],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":34,"coverable":35},{"path":["/","home","kms","mutagen_test","src","lazy_add.rs"],"content":"\nenum LazyAdd {\n    Val(u8),\n    Lazy(Box<LazyAdd>, Box<LazyAdd>),\n}\n\nimpl From<u8> for LazyAdd {\n    fn from(v: u8) -> Self {\n        Self::Val(v)\n    }\n}\n\nimpl std::ops::Add<LazyAdd> for LazyAdd {\n    type Output = LazyAdd;\n    fn add(self, rhs: LazyAdd) -> LazyAdd {\n        LazyAdd::Lazy(Box::new(self), Box::new(rhs))\n    }\n}\n\nimpl LazyAdd {\n    pub fn eval(self) -> u8 {\n        match self {\n            Self::Val(v) => v,\n            Self::Lazy(l, r) => l.eval() + r.eval(),\n        }\n    }\n\n    pub fn add_one(self) -> Self {\n        self + 1.into()\n    }\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn add_one_to_zero() {\n        assert_eq!(LazyAdd::from(0).add_one().eval(), 1);\n    }\n}\n","traces":[{"line":8,"address":[4220384],"length":1,"stats":{"Line":1},"fn_name":"from"},{"line":9,"address":[4220396],"length":1,"stats":{"Line":1},"fn_name":null},{"line":15,"address":[4220432,4220660],"length":1,"stats":{"Line":1},"fn_name":"add"},{"line":16,"address":[4220442,4220675,4220561],"length":1,"stats":{"Line":2},"fn_name":null},{"line":21,"address":[4220800,4220964],"length":1,"stats":{"Line":1},"fn_name":"eval"},{"line":22,"address":[4221043,4220895,4220916],"length":1,"stats":{"Line":2},"fn_name":null},{"line":23,"address":[4220902,4220807],"length":1,"stats":{"Line":2},"fn_name":null},{"line":24,"address":[4220976,4221106,4220921,4221045,4220834],"length":1,"stats":{"Line":2},"fn_name":null},{"line":28,"address":[4221152,4221242],"length":1,"stats":{"Line":1},"fn_name":"add_one"},{"line":29,"address":[4221254,4221268,4221159],"length":1,"stats":{"Line":2},"fn_name":null},{"line":39,"address":[4209061,4209056],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":40,"address":[4227367,4227241],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":12,"coverable":12},{"path":["/","home","kms","mutagen_test","src","main.rs"],"content":"fn main() {\n    println!(\"Hello, world!\");\n}\n","traces":[{"line":1,"address":[4207296],"length":1,"stats":{"Line":0},"fn_name":"main"},{"line":2,"address":[4207305],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","kms","mutagen_test","src","not_covered.rs"],"content":"pub fn simple_assert_not_covered() {\n    1 < 3;\n}\n\n// There are no tests since the function above is supposed to be no covered by tests\n","traces":[{"line":1,"address":[4209168],"length":1,"stats":{"Line":0},"fn_name":"simple_assert_not_covered"}],"covered":0,"coverable":1},{"path":["/","home","kms","mutagen_test","src","primetest.rs"],"content":"pub fn primetest(n: u32) -> bool {\n    if n % 2 == 0u32 {\n        return n == 2;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut k = 3;\n    while k * k <= n {\n        if n % k == 0u32 {\n            return false;\n        }\n        k += 2;\n    }\n    true\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn test_primetest_0() {\n        assert!(!primetest(0))\n    }\n    #[test]\n    fn test_primetest_1() {\n        assert!(!primetest(1))\n    }\n    #[test]\n    fn test_primetest_2() {\n        assert!(primetest(2))\n    }\n    #[test]\n    fn test_primetest_3() {\n        assert!(primetest(3))\n    }\n    #[test]\n    fn test_primetest_4() {\n        assert!(!primetest(4))\n    }\n    #[test]\n    fn test_primetest_25() {\n        assert!(!primetest(25))\n    }\n    #[test]\n    fn test_primetest_29() {\n        assert!(primetest(29))\n    }\n    #[test]\n    fn test_primetest_31() {\n        assert!(primetest(31))\n    }\n}\n","traces":[{"line":1,"address":[4226752],"length":1,"stats":{"Line":2},"fn_name":"primetest"},{"line":2,"address":[4226760],"length":1,"stats":{"Line":2},"fn_name":null},{"line":3,"address":[4226789],"length":1,"stats":{"Line":1},"fn_name":null},{"line":5,"address":[4226778],"length":1,"stats":{"Line":1},"fn_name":null},{"line":6,"address":[4226826],"length":1,"stats":{"Line":1},"fn_name":null},{"line":8,"address":[4226816],"length":1,"stats":{"Line":4},"fn_name":null},{"line":9,"address":[4226824,4226947,4226833],"length":1,"stats":{"Line":11},"fn_name":null},{"line":10,"address":[4226872,4226979],"length":1,"stats":{"Line":3},"fn_name":null},{"line":11,"address":[4226929],"length":1,"stats":{"Line":1},"fn_name":null},{"line":13,"address":[4226908,4227009,4227039,4226943],"length":1,"stats":{"Line":4},"fn_name":null},{"line":15,"address":[4226865],"length":1,"stats":{"Line":1},"fn_name":null},{"line":24,"address":[4232912,4232917],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":25,"address":[4230915,4230964,4230938],"length":1,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[4230976],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_1"},{"line":29,"address":[4231031,4230977,4231005],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[4231040],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_2"},{"line":33,"address":[4231041,4231093,4231067],"length":1,"stats":{"Line":1},"fn_name":null},{"line":36,"address":[4231104],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_3"},{"line":37,"address":[4231105,4231131,4231157],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[4231168],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_4"},{"line":41,"address":[4231223,4231169,4231197],"length":1,"stats":{"Line":1},"fn_name":null},{"line":44,"address":[4231232],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_25"},{"line":45,"address":[4231261,4231233,4231287],"length":1,"stats":{"Line":1},"fn_name":null},{"line":48,"address":[4231296],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_29"},{"line":49,"address":[4231323,4231297,4231349],"length":1,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[4231360],"length":1,"stats":{"Line":3},"fn_name":"test_primetest_31"},{"line":53,"address":[4231361,4231413,4231387],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":27,"coverable":27},{"path":["/","home","kms","mutagen_test","src","simple_add.rs"],"content":"pub fn simple_add() -> i32 {\n    1 + 2\n}\n\npub fn simple_add_u8() -> u8 {\n    1 + 2\n}\n\npub fn add_repeated_u8() -> u8 {\n    1 + 2 + 3 * 2\n}\n\npub fn add_two_u8(x: u8) -> u8 {\n    x + 2\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    #[test]\n    fn test_simple_add() {\n        assert_eq!(simple_add(), 3);\n    }\n\n    #[test]\n    fn test_simple_add_u8() {\n        assert_eq!(simple_add_u8(), 3);\n    }\n\n    #[test]\n    fn test_add_two_u8() {\n        assert_eq!(add_two_u8(1), 3);\n    }\n\n    #[test]\n    fn test_add_repeated_u8() {\n        assert_eq!(add_repeated_u8(), 9);\n    }\n}\n","traces":[{"line":1,"address":[4231680],"length":1,"stats":{"Line":1},"fn_name":"simple_add"},{"line":5,"address":[4231696],"length":1,"stats":{"Line":1},"fn_name":"simple_add_u8"},{"line":9,"address":[4231712],"length":1,"stats":{"Line":1},"fn_name":"add_repeated_u8"},{"line":13,"address":[4231728],"length":1,"stats":{"Line":1},"fn_name":"add_two_u8"},{"line":14,"address":[4231786,4231734,4231756],"length":1,"stats":{"Line":1},"fn_name":null},{"line":23,"address":[4224309,4224304],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":24,"address":[4229383,4229476],"length":1,"stats":{"Line":1},"fn_name":null},{"line":28,"address":[4224336,4224341],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":29,"address":[4229767,4229857],"length":1,"stats":{"Line":1},"fn_name":null},{"line":33,"address":[4224368,4224373],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":34,"address":[4230151,4230246],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[4224405,4224400],"length":1,"stats":{"Line":3},"fn_name":"{{closure}}"},{"line":39,"address":[4230625,4230535],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":13,"coverable":13}]}